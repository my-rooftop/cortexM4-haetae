
haetae-m4f.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015578  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000024f0  08015708  08015708  00016708  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017bf8  08017bf8  0001a304  2**0
                  CONTENTS
  4 .ARM          00000008  08017bf8  08017bf8  00018bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017c00  08017c00  0001a304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017c00  08017c00  00018c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08017c04  08017c04  00018c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00001304  20000000  08017c08  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001a304  2**0
                  CONTENTS
 10 .bss          00000a90  20001304  20001304  0001a304  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001d94  20001d94  0001a304  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001a304  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001df50  00000000  00000000  0001a334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005568  00000000  00000000  00038284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bc8  00000000  00000000  0003d7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014d3  00000000  00000000  0003f3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026cb1  00000000  00000000  0004088b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023e91  00000000  00000000  0006753c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d18a5  00000000  00000000  0008b3cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015cc72  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000079b4  00000000  00000000  0015ccb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000097  00000000  00000000  0016466c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001304 	.word	0x20001304
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080156f0 	.word	0x080156f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20001308 	.word	0x20001308
 80001cc:	080156f0 	.word	0x080156f0

080001d0 <haetae_approx_exp_asm>:

.global haetae_approx_exp_asm
.type haetae_approx_exp_asm,%function
.align
haetae_approx_exp_asm:
        lsrs    r2, r0, #24
 80001d0:	0e02      	lsrs	r2, r0, #24
        orr     r2, r2, r1, lsl #8
 80001d2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
        push    {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 80001d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        ldr     r5, haetae_approx_exp_asm_constants
 80001da:	4d8a      	ldr	r5, [pc, #552]	@ (8000404 <haetae_approx_exp_asm_constants>)
        ldr     r4, haetae_approx_exp_asm_constants+4
 80001dc:	4c8a      	ldr	r4, [pc, #552]	@ (8000408 <haetae_approx_exp_asm_constants+0x4>)
        ldr     r7, haetae_approx_exp_asm_constants+8
 80001de:	4f8b      	ldr	r7, [pc, #556]	@ (800040c <haetae_approx_exp_asm_constants+0x8>)
        sub     r0, r0, r2, lsl #24
 80001e0:	eba0 6002 	sub.w	r0, r0, r2, lsl #24
        smull   r3, r1, r0, r5
 80001e4:	fb80 3105 	smull	r3, r1, r0, r5
        lsrs    r3, r3, #24
 80001e8:	0e1b      	lsrs	r3, r3, #24
        orr     r3, r3, r1, lsl #8
 80001ea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
        asrs    r1, r1, #24
 80001ee:	1609      	asrs	r1, r1, #24
        smlal   r3, r1, r0, r4
 80001f0:	fbc0 3104 	smlal	r3, r1, r0, r4
        smlal   r3, r1, r2, r5
 80001f4:	fbc2 3105 	smlal	r3, r1, r2, r5
        adds    r3, r3, #0x00800000
 80001f8:	f513 0300 	adds.w	r3, r3, #8388608	@ 0x800000
        adc     r1, r1, #0
 80001fc:	f141 0100 	adc.w	r1, r1, #0
        lsrs    r3, r3, #24
 8000200:	0e1b      	lsrs	r3, r3, #24
        orr     r3, r3, r1, lsl #8
 8000202:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
        asrs    r1, r1, #24
 8000206:	1609      	asrs	r1, r1, #24
        smlal   r3, r1, r2, r4
 8000208:	fbc2 3104 	smlal	r3, r1, r2, r4
        adds    r3, r3, #4
 800020c:	3304      	adds	r3, #4
        adc     r1, r1, #0
 800020e:	f141 0100 	adc.w	r1, r1, #0
        ldr     r4, haetae_approx_exp_asm_constants+12
 8000212:	4c7f      	ldr	r4, [pc, #508]	@ (8000410 <haetae_approx_exp_asm_constants+0xc>)
        lsrs    r3, r3, #3
 8000214:	08db      	lsrs	r3, r3, #3
        orr     r3, r3, r1, lsl #29
 8000216:	ea43 7341 	orr.w	r3, r3, r1, lsl #29
        adds    r3, r3, r4
 800021a:	191b      	adds	r3, r3, r4
        movw    lr, #46269
 800021c:	f24b 4ebd 	movw	lr, #46269	@ 0xb4bd
        adc     lr, lr, r1, asr #3
 8000220:	eb4e 0ee1 	adc.w	lr, lr, r1, asr #3
        lsr     ip, r3, #24
 8000224:	ea4f 6c13 	mov.w	ip, r3, lsr #24
        orr     ip, ip, lr, lsl #8
 8000228:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
        sub     r3, r3, ip, lsl #24
 800022c:	eba3 630c 	sub.w	r3, r3, ip, lsl #24
        smull   r6, r10, r3, r0
 8000230:	fb83 6a00 	smull	r6, sl, r3, r0
        asr     lr, lr, #24
 8000234:	ea4f 6e2e 	mov.w	lr, lr, asr #24
        asrs    r1, r0, #31
 8000238:	17c1      	asrs	r1, r0, #31
        mul     r5, r0, lr
 800023a:	fb00 f50e 	mul.w	r5, r0, lr
        lsrs    r6, r6, #24
 800023e:	0e36      	lsrs	r6, r6, #24
        umull   r4, fp, r0, ip
 8000240:	fba0 4b0c 	umull	r4, fp, r0, ip
        mla     r5, ip, r1, r5
 8000244:	fb0c 5501 	mla	r5, ip, r1, r5
        orr     r6, r6, r10, lsl #8
 8000248:	ea46 260a 	orr.w	r6, r6, sl, lsl #8
        adds    r4, r4, r6
 800024c:	19a4      	adds	r4, r4, r6
        add     r5, r5, fp
 800024e:	445d      	add	r5, fp
        adc     r5, r5, r10, asr #24
 8000250:	eb45 652a 	adc.w	r5, r5, sl, asr #24
        smlal   r4, r5, r3, r2
 8000254:	fbc3 4502 	smlal	r4, r5, r3, r2
        adds    r4, r4, #0x00800000
 8000258:	f514 0400 	adds.w	r4, r4, #8388608	@ 0x800000
        adc     r5, r5, #0
 800025c:	f145 0500 	adc.w	r5, r5, #0
        asrs    r1, r2, #31
 8000260:	17d1      	asrs	r1, r2, #31
        mul     lr, r2, lr
 8000262:	fb02 fe0e 	mul.w	lr, r2, lr
        lsrs    r4, r4, #24
 8000266:	0e24      	lsrs	r4, r4, #24
        mla     lr, ip, r1, lr
 8000268:	fb0c ee01 	mla	lr, ip, r1, lr
        orr     r4, r4, r5, lsl #8
 800026c:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
        umull   ip, r3, r2, ip
 8000270:	fba2 c30c 	umull	ip, r3, r2, ip
        adds    ip, ip, r4
 8000274:	eb1c 0c04 	adds.w	ip, ip, r4
        add     lr, lr, r3
 8000278:	449e      	add	lr, r3
        adc     lr, lr, r5, asr #24
 800027a:	eb4e 6e25 	adc.w	lr, lr, r5, asr #24
        adds    ip, ip, #4
 800027e:	f11c 0c04 	adds.w	ip, ip, #4
        adc     lr, lr, #0
 8000282:	f14e 0e00 	adc.w	lr, lr, #0
        ldr     r1, haetae_approx_exp_asm_constants+16
 8000286:	4963      	ldr	r1, [pc, #396]	@ (8000414 <haetae_approx_exp_asm_constants+0x10>)
        lsr     ip, ip, #3
 8000288:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
        orr     ip, ip, lr, lsl #29
 800028c:	ea4c 7c4e 	orr.w	ip, ip, lr, lsl #29
        adds    ip, ip, r1
 8000290:	eb1c 0c01 	adds.w	ip, ip, r1
        adc     r7, r7, lr, asr #3
 8000294:	eb47 07ee 	adc.w	r7, r7, lr, asr #3
        lsr     r1, ip, #24
 8000298:	ea4f 611c 	mov.w	r1, ip, lsr #24
        orr     r1, r1, r7, lsl #8
 800029c:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
        sub     ip, ip, r1, lsl #24
 80002a0:	ebac 6c01 	sub.w	ip, ip, r1, lsl #24
        smull   r3, r4, ip, r0
 80002a4:	fb8c 3400 	smull	r3, r4, ip, r0
        lsrs    r3, r3, #24
 80002a8:	0e1b      	lsrs	r3, r3, #24
        orr     r3, r3, r4, lsl #8
 80002aa:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
        asrs    r4, r4, #24
 80002ae:	1624      	asrs	r4, r4, #24
        smlal   r3, r4, r1, r0
 80002b0:	fbc1 3400 	smlal	r3, r4, r1, r0
        smlal   r3, r4, ip, r2
 80002b4:	fbcc 3402 	smlal	r3, r4, ip, r2
        adds    r3, r3, #0x00800000
 80002b8:	f513 0300 	adds.w	r3, r3, #8388608	@ 0x800000
        adc     r4, r4, #0
 80002bc:	f144 0400 	adc.w	r4, r4, #0
        lsrs    r3, r3, #24
 80002c0:	0e1b      	lsrs	r3, r3, #24
        orr     r3, r3, r4, lsl #8
 80002c2:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
        asrs    r4, r4, #24
 80002c6:	1624      	asrs	r4, r4, #24
        smlal   r3, r4, r1, r2
 80002c8:	fbc1 3402 	smlal	r3, r4, r1, r2
        adds    r3, r3, #2
 80002cc:	3302      	adds	r3, #2
        adc     r1, r4, #0
 80002ce:	f144 0100 	adc.w	r1, r4, #0
        lsrs    r4, r3, #2
 80002d2:	089c      	lsrs	r4, r3, #2
        ldr     r3, haetae_approx_exp_asm_constants+20
 80002d4:	4b50      	ldr	r3, [pc, #320]	@ (8000418 <haetae_approx_exp_asm_constants+0x14>)
        orr     r4, r4, r1, lsl #30
 80002d6:	ea44 7481 	orr.w	r4, r4, r1, lsl #30
        adds    r4, r4, r3
 80002da:	18e4      	adds	r4, r4, r3
        movw    r3, #43690
 80002dc:	f64a 23aa 	movw	r3, #43690	@ 0xaaaa
        adc     r3, r3, r1, asr #2
 80002e0:	eb43 03a1 	adc.w	r3, r3, r1, asr #2
        lsrs    r1, r4, #24
 80002e4:	0e21      	lsrs	r1, r4, #24
        orr     r1, r1, r3, lsl #8
 80002e6:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        sub     r4, r4, r1, lsl #24
 80002ea:	eba4 6401 	sub.w	r4, r4, r1, lsl #24
        smull   r3, r5, r4, r0
 80002ee:	fb84 3500 	smull	r3, r5, r4, r0
        lsrs    r3, r3, #24
 80002f2:	0e1b      	lsrs	r3, r3, #24
        orr     r3, r3, r5, lsl #8
 80002f4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
        asrs    r5, r5, #24
 80002f8:	162d      	asrs	r5, r5, #24
        smlal   r3, r5, r1, r0
 80002fa:	fbc1 3500 	smlal	r3, r5, r1, r0
        smlal   r3, r5, r4, r2
 80002fe:	fbc4 3502 	smlal	r3, r5, r4, r2
        adds    r3, r3, #0x00800000
 8000302:	f513 0300 	adds.w	r3, r3, #8388608	@ 0x800000
        adc     r4, r5, #0
 8000306:	f145 0400 	adc.w	r4, r5, #0
        lsrs    r3, r3, #24
 800030a:	0e1b      	lsrs	r3, r3, #24
        orr     r3, r3, r4, lsl #8
 800030c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
        asrs    r4, r4, #24
 8000310:	1624      	asrs	r4, r4, #24
        smlal   r3, r4, r1, r2
 8000312:	fbc1 3402 	smlal	r3, r4, r1, r2
        adds    r3, r3, #2
 8000316:	3302      	adds	r3, #2
        adc     r1, r4, #0
 8000318:	f144 0100 	adc.w	r1, r4, #0
        lsrs    r3, r3, #2
 800031c:	089b      	lsrs	r3, r3, #2
        ldr     r4, haetae_approx_exp_asm_constants+24
 800031e:	4c3f      	ldr	r4, [pc, #252]	@ (800041c <haetae_approx_exp_asm_constants+0x18>)
        orr     r3, r3, r1, lsl #30
 8000320:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
        adds    r3, r3, r4
 8000324:	191b      	adds	r3, r3, r4
        ldr     r4, haetae_approx_exp_asm_constants+28
 8000326:	4c3e      	ldr	r4, [pc, #248]	@ (8000420 <haetae_approx_exp_asm_constants+0x1c>)
        adc     r4, r4, r1, asr #2
 8000328:	eb44 04a1 	adc.w	r4, r4, r1, asr #2
        lsrs    r1, r3, #24
 800032c:	0e19      	lsrs	r1, r3, #24
        orr     r1, r1, r4, lsl #8
 800032e:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
        sub     r4, r3, r1, lsl #24
 8000332:	eba3 6401 	sub.w	r4, r3, r1, lsl #24
        smull   r3, r5, r4, r0
 8000336:	fb84 3500 	smull	r3, r5, r4, r0
        lsrs    r3, r3, #24
 800033a:	0e1b      	lsrs	r3, r3, #24
        orr     r3, r3, r5, lsl #8
 800033c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
        asrs    r5, r5, #24
 8000340:	162d      	asrs	r5, r5, #24
        smlal   r3, r5, r1, r0
 8000342:	fbc1 3500 	smlal	r3, r5, r1, r0
        smlal   r3, r5, r4, r2
 8000346:	fbc4 3502 	smlal	r3, r5, r4, r2
        adds    r3, r3, #0x00800000
 800034a:	f513 0300 	adds.w	r3, r3, #8388608	@ 0x800000
        adc     r4, r5, #0
 800034e:	f145 0400 	adc.w	r4, r5, #0
        lsrs    r3, r3, #24
 8000352:	0e1b      	lsrs	r3, r3, #24
        orr     r3, r3, r4, lsl #8
 8000354:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
        asrs    r4, r4, #24
 8000358:	1624      	asrs	r4, r4, #24
        smlal   r3, r4, r1, r2
 800035a:	fbc1 3402 	smlal	r3, r4, r1, r2
        adds    r3, r3, #1
 800035e:	3301      	adds	r3, #1
        adc     r1, r4, #0
 8000360:	f144 0100 	adc.w	r1, r4, #0
        lsrs    r3, r3, #1
 8000364:	085b      	lsrs	r3, r3, #1
        ldr     r4, haetae_approx_exp_asm_constants+32
 8000366:	4c2f      	ldr	r4, [pc, #188]	@ (8000424 <haetae_approx_exp_asm_constants+0x20>)
        orr     r3, r3, r1, lsl #31
 8000368:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
        adds    r3, r3, r4
 800036c:	191b      	adds	r3, r3, r4
        movw    r8, #65535
 800036e:	f64f 78ff 	movw	r8, #65535	@ 0xffff
        adc     r4, r8, r1, asr #1
 8000372:	eb48 0461 	adc.w	r4, r8, r1, asr #1
        lsrs    r1, r3, #24
 8000376:	0e19      	lsrs	r1, r3, #24
        orr     r1, r1, r4, lsl #8
 8000378:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
        sub     r4, r3, r1, lsl #24
 800037c:	eba3 6401 	sub.w	r4, r3, r1, lsl #24
        smull   r3, r5, r4, r0
 8000380:	fb84 3500 	smull	r3, r5, r4, r0
        lsrs    r3, r3, #24
 8000384:	0e1b      	lsrs	r3, r3, #24
        orr     r3, r3, r5, lsl #8
 8000386:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
        asrs    r5, r5, #24
 800038a:	162d      	asrs	r5, r5, #24
        smlal   r3, r5, r1, r0
 800038c:	fbc1 3500 	smlal	r3, r5, r1, r0
        smlal   r3, r5, r4, r2
 8000390:	fbc4 3502 	smlal	r3, r5, r4, r2
        adds    r3, r3, #0x00800000
 8000394:	f513 0300 	adds.w	r3, r3, #8388608	@ 0x800000
        adc     r4, r5, #0
 8000398:	f145 0400 	adc.w	r4, r5, #0
        lsrs    r3, r3, #24
 800039c:	0e1b      	lsrs	r3, r3, #24
        orr     r3, r3, r4, lsl #8
 800039e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
        asrs    r4, r4, #24
 80003a2:	1624      	asrs	r4, r4, #24
        smlal   r3, r4, r1, r2
 80003a4:	fbc1 3402 	smlal	r3, r4, r1, r2
        adds    r3, r3, #1
 80003a8:	3301      	adds	r3, #1
        adc     r1, r4, #0
 80003aa:	f144 0100 	adc.w	r1, r4, #0
        lsrs    r3, r3, #1
 80003ae:	085b      	lsrs	r3, r3, #1
        orr     r3, r3, r1, lsl #31
 80003b0:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
        movw    r4, #1953
 80003b4:	f240 74a1 	movw	r4, #1953	@ 0x7a1
        adds    r3, r3, r4
 80003b8:	191b      	adds	r3, r3, r4
        ldr     r4, haetae_approx_exp_asm_constants+36
 80003ba:	4c1b      	ldr	r4, [pc, #108]	@ (8000428 <haetae_approx_exp_asm_constants+0x24>)
        lsr     r5, r3, #24
 80003bc:	ea4f 6513 	mov.w	r5, r3, lsr #24
        adc     r1, r4, r1, asr #1
 80003c0:	eb44 0161 	adc.w	r1, r4, r1, asr #1
        orr     r5, r5, r1, lsl #8
 80003c4:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
        sub     r3, r3, r5, lsl #24
 80003c8:	eba3 6305 	sub.w	r3, r3, r5, lsl #24
        smull   r4, r1, r3, r0
 80003cc:	fb83 4100 	smull	r4, r1, r3, r0
        lsrs    r4, r4, #24
 80003d0:	0e24      	lsrs	r4, r4, #24
        orr     r4, r4, r1, lsl #8
 80003d2:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
        asrs    r1, r1, #24
 80003d6:	1609      	asrs	r1, r1, #24
        smlal   r4, r1, r5, r0
 80003d8:	fbc5 4100 	smlal	r4, r1, r5, r0
        smlal   r4, r1, r3, r2
 80003dc:	fbc3 4102 	smlal	r4, r1, r3, r2
        adds    r0, r4, #0x00800000
 80003e0:	f514 0000 	adds.w	r0, r4, #8388608	@ 0x800000
        adc     r1, r1, #0
 80003e4:	f141 0100 	adc.w	r1, r1, #0
        lsrs    r0, r0, #24
 80003e8:	0e00      	lsrs	r0, r0, #24
        orr     r0, r0, r1, lsl #8
 80003ea:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
        asrs    r1, r1, #24
 80003ee:	1609      	asrs	r1, r1, #24
        smlal   r0, r1, r5, r2
 80003f0:	fbc5 0102 	smlal	r0, r1, r5, r2
        mvn     r9, #3
 80003f4:	f06f 0903 	mvn.w	r9, #3
        adds    r0, r0, r9
 80003f8:	eb10 0009 	adds.w	r0, r0, r9
        adc     r1, r8, r1
 80003fc:	eb48 0101 	adc.w	r1, r8, r1
        pop     {r4, r5, r6, r7, r8, r9, r10, fp, pc}
 8000400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000404 <haetae_approx_exp_asm_constants>:
 8000404:	00f6da52 	.word	0x00f6da52
 8000408:	ff4939cb 	.word	0xff4939cb
 800040c:	ffff7780 	.word	0xffff7780
 8000410:	4df85227 	.word	0x4df85227
 8000414:	8d8b6e1e 	.word	0x8d8b6e1e
 8000418:	643c7e8d 	.word	0x643c7e8d
 800041c:	567e861a 	.word	0x567e861a
 8000420:	ffff5555 	.word	0xffff5555
 8000424:	fffb2e7a 	.word	0xfffb2e7a
 8000428:	ffff0000 	.word	0xffff0000
 800042c:	00000000 	.word	0x00000000
.fpu fpv4-sp-d16


// This code uses UMULL - which is constant time on the M4, but not on the M3
// Make sure that this code is never used on an M3
smlad r0,r0,r0,r0
 8000430:	fb20 0000 	smlad	r0, r0, r0, r0

08000434 <haetae_fast_sample_gauss16>:
    ptr_end_cdt   .req R7
    ones          .req R8
    zeros         .req R9

    //preserve registers
    push {R4-R9, R14}
 8000434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    orr     rand16x2, rand16x2, rand16x2, lsl #16
 8000438:	ea40 4000 	orr.w	r0, r0, r0, lsl #16
    mov     accum, #0x00000000
 800043c:	f04f 0100 	mov.w	r1, #0
    ldr     ptr_cdt, =#CDT_GAUSS16
 8000440:	4a13      	ldr	r2, [pc, #76]	@ (8000490 <haetae_fast_sample_gauss16_check+0xe>)
    mov     ones, #0x00010001
 8000442:	f04f 1801 	mov.w	r8, #65537	@ 0x10001
    mov     zeros, #0x00000000
 8000446:	f04f 0900 	mov.w	r9, #0
    add     ptr_end_cdt, ptr_cdt, #(2*8*8)
 800044a:	f102 0780 	add.w	r7, r2, #128	@ 0x80
    b       haetae_fast_sample_gauss16_check
 800044e:	e018      	b.n	8000482 <haetae_fast_sample_gauss16_check>

08000450 <haetae_fast_sample_gauss16_loop>:
.align
haetae_fast_sample_gauss16_loop:
    ldm     ptr_cdt!, {R3-R6}
 8000450:	ca78      	ldmia	r2!, {r3, r4, r5, r6}
    usub16  R3, R3, rand16x2
 8000452:	fad3 f340 	usub16	r3, r3, r0
    sel     R3, zeros, ones
 8000456:	faa9 f388 	sel	r3, r9, r8
    uadd16  accum, accum, R3
 800045a:	fa91 f143 	uadd16	r1, r1, r3
    usub16  R4, R4, rand16x2
 800045e:	fad4 f440 	usub16	r4, r4, r0
    sel     R4, zeros, ones
 8000462:	faa9 f488 	sel	r4, r9, r8
    uadd16  accum, accum, R4
 8000466:	fa91 f144 	uadd16	r1, r1, r4
    usub16  R5, R5, rand16x2
 800046a:	fad5 f540 	usub16	r5, r5, r0
    sel     R5, zeros, ones
 800046e:	faa9 f588 	sel	r5, r9, r8
    uadd16  accum, accum, R5
 8000472:	fa91 f145 	uadd16	r1, r1, r5
    usub16  R6, R6, rand16x2
 8000476:	fad6 f640 	usub16	r6, r6, r0
    sel     R6, zeros, ones
 800047a:	faa9 f688 	sel	r6, r9, r8
    uadd16  accum, accum, R6
 800047e:	fa91 f146 	uadd16	r1, r1, r6

08000482 <haetae_fast_sample_gauss16_check>:
haetae_fast_sample_gauss16_check:
    cmp     ptr_cdt, ptr_end_cdt
 8000482:	42ba      	cmp	r2, r7
    blo     haetae_fast_sample_gauss16_loop
 8000484:	d3e4      	bcc.n	8000450 <haetae_fast_sample_gauss16_loop>

    add     r0, accum, accum, lsr #16
 8000486:	eb01 4011 	add.w	r0, r1, r1, lsr #16
    uxth    r0, r0
 800048a:	b280      	uxth	r0, r0
//    movs    r1, #0        // output type changed to fp8_4 (aka int32_t)

    //restore registers
    pop {R4-R9, PC}
 800048c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ldr     ptr_cdt, =#CDT_GAUSS16
 8000490:	080004a0 	.word	0x080004a0
 8000494:	f3af 8000 	nop.w
 8000498:	f3af 8000 	nop.w
 800049c:	f3af 8000 	nop.w

080004a0 <cdt_gauss16>:
 80004a0:	0cc2 1978 2614 328a 3ecf 4ad7 5698 6208     ..x..&.2.>.J.V.b
 80004b0:	6d1e 77d2 821d 8bf9 9561 9e53 a6ca aec6     .m.w....a.S.....
 80004c0:	b647 bd4c c3d7 c9ea cf88 d4b6 d976 ddcd     G.L.........v...
 80004d0:	e1c2 e558 e895 eb7f ee1c f072 f285 f45c     ..X.......r...\.
 80004e0:	f5fc f769 f8a9 f9c0 fab2 fb84 fc39 fcd4     ..i.........9...
 80004f0:	fd59 fdca fe2a fe7c fec0 fef9 ff29 ff51     Y...*.|.....).Q.
 8000500:	ff72 ff8e ffa4 ffb7 ffc6 ffd2 ffdc ffe4     r...............
 8000510:	ffea ffef fff3 fff7 fff9 fffb fffd fffe     ................
#include "header_macros.i"
#include "ntt332_macros.i"

// This code uses UMULL - which is constant time on the M4, but not on the M3
// Make sure that this code is never used on an M3
smlad r0,r0,r0,r0
 8000520:	fb20 0000                                    ...

08000524 <haetae_ntt332>:
  pol5     .req R11
  pol6     .req R12
  pol7     .req R14

  //preserve registers
  push {R4-R11, R14}
 8000524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  
  //load constants, ptr
  ldr.w qinv, inv_ntt_asm_smull_qinv  //-qinv_signed
 8000528:	f8df 29f0 	ldr.w	r2, [pc, #2544]	@ 8000f1c <inv_ntt_asm_smull_qinv>
  ldr.w q, inv_ntt_asm_smull_q
 800052c:	f8df 39f0 	ldr.w	r3, [pc, #2544]	@ 8000f20 <inv_ntt_asm_smull_q>

  //stage 1 - 3
  .equ distance, 512
  .equ strincr, 4
  
  ldr ptr_zeta, =#FORWARD_NTT_TWIDDLE_TABLE
 8000530:	f8df 15b4 	ldr.w	r1, [pc, #1460]	@ 8000ae8 <haetae_ntt332+0x5c4>
  vldm ptr_zeta!, {s2-s8} 
 8000534:	ecb1 1a07 	vldmia	r1!, {s2-s8}
  vmov s0, ptr_zeta
 8000538:	ee00 1a10 	vmov	s0, r1
  
  add.w temp_l, ptr_p, #32*strincr // 32 iterations
 800053c:	f100 0a80 	add.w	sl, r0, #128	@ 0x80
  vmov s9, temp_l
 8000540:	ee04 aa90 	vmov	s9, sl
  1:
    .rept 2
    ldr.w pol0, [ptr_p]
 8000544:	f8d0 5000 	ldr.w	r5, [r0]
    ldr.w pol1, [ptr_p, #1*distance/4]
 8000548:	f8d0 6080 	ldr.w	r6, [r0, #128]	@ 0x80
    ldr.w pol2, [ptr_p, #2*distance/4]
 800054c:	f8d0 7100 	ldr.w	r7, [r0, #256]	@ 0x100
    ldr.w pol3, [ptr_p, #3*distance/4]
 8000550:	f8d0 8180 	ldr.w	r8, [r0, #384]	@ 0x180
    ldr.w pol4, [ptr_p, #4*distance/4]
 8000554:	f8d0 4200 	ldr.w	r4, [r0, #512]	@ 0x200
    ldr.w pol5, [ptr_p, #5*distance/4]
 8000558:	f8d0 b280 	ldr.w	fp, [r0, #640]	@ 0x280
    ldr.w pol6, [ptr_p, #6*distance/4]
 800055c:	f8d0 c300 	ldr.w	ip, [r0, #768]	@ 0x300
    ldr.w pol7, [ptr_p, #7*distance/4]
 8000560:	f8d0 e380 	ldr.w	lr, [r0, #896]	@ 0x380

    _3_layer_CT_32 pol0, pol1, pol2, pol3, pol4, pol5, pol6, pol7, s2, s3, s4, s5, s6, s7, s8, zeta, qinv, q, temp_h, temp_l
 8000564:	ee11 1a10 	vmov	r1, s2
 8000568:	fb84 9401 	smull	r9, r4, r4, r1
 800056c:	fb09 fa02 	mul.w	sl, r9, r2
 8000570:	fbca 9403 	smlal	r9, r4, sl, r3
 8000574:	fb8b 9b01 	smull	r9, fp, fp, r1
 8000578:	fb09 fa02 	mul.w	sl, r9, r2
 800057c:	fbca 9b03 	smlal	r9, fp, sl, r3
 8000580:	fb8c 9c01 	smull	r9, ip, ip, r1
 8000584:	fb09 fa02 	mul.w	sl, r9, r2
 8000588:	fbca 9c03 	smlal	r9, ip, sl, r3
 800058c:	fb8e 9e01 	smull	r9, lr, lr, r1
 8000590:	fb09 fa02 	mul.w	sl, r9, r2
 8000594:	fbca 9e03 	smlal	r9, lr, sl, r3
 8000598:	4425      	add	r5, r4
 800059a:	445e      	add	r6, fp
 800059c:	4467      	add	r7, ip
 800059e:	44f0      	add	r8, lr
 80005a0:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 80005a4:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 80005a8:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 80005ac:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 80005b0:	ee11 1a90 	vmov	r1, s3
 80005b4:	fb87 9701 	smull	r9, r7, r7, r1
 80005b8:	fb09 fa02 	mul.w	sl, r9, r2
 80005bc:	fbca 9703 	smlal	r9, r7, sl, r3
 80005c0:	fb88 9801 	smull	r9, r8, r8, r1
 80005c4:	fb09 fa02 	mul.w	sl, r9, r2
 80005c8:	fbca 9803 	smlal	r9, r8, sl, r3
 80005cc:	ee12 1a10 	vmov	r1, s4
 80005d0:	fb8c 9c01 	smull	r9, ip, ip, r1
 80005d4:	fb09 fa02 	mul.w	sl, r9, r2
 80005d8:	fbca 9c03 	smlal	r9, ip, sl, r3
 80005dc:	fb8e 9e01 	smull	r9, lr, lr, r1
 80005e0:	fb09 fa02 	mul.w	sl, r9, r2
 80005e4:	fbca 9e03 	smlal	r9, lr, sl, r3
 80005e8:	443d      	add	r5, r7
 80005ea:	4446      	add	r6, r8
 80005ec:	4464      	add	r4, ip
 80005ee:	44f3      	add	fp, lr
 80005f0:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 80005f4:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 80005f8:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 80005fc:	ebab 0e4e 	sub.w	lr, fp, lr, lsl #1
 8000600:	ee12 1a90 	vmov	r1, s5
 8000604:	fb86 9601 	smull	r9, r6, r6, r1
 8000608:	fb09 fa02 	mul.w	sl, r9, r2
 800060c:	fbca 9603 	smlal	r9, r6, sl, r3
 8000610:	ee13 1a10 	vmov	r1, s6
 8000614:	fb88 9801 	smull	r9, r8, r8, r1
 8000618:	fb09 fa02 	mul.w	sl, r9, r2
 800061c:	fbca 9803 	smlal	r9, r8, sl, r3
 8000620:	ee13 1a90 	vmov	r1, s7
 8000624:	fb8b 9b01 	smull	r9, fp, fp, r1
 8000628:	fb09 fa02 	mul.w	sl, r9, r2
 800062c:	fbca 9b03 	smlal	r9, fp, sl, r3
 8000630:	ee14 1a10 	vmov	r1, s8
 8000634:	fb8e 9e01 	smull	r9, lr, lr, r1
 8000638:	fb09 fa02 	mul.w	sl, r9, r2
 800063c:	fbca 9e03 	smlal	r9, lr, sl, r3
 8000640:	4435      	add	r5, r6
 8000642:	4447      	add	r7, r8
 8000644:	445c      	add	r4, fp
 8000646:	44f4      	add	ip, lr
 8000648:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 800064c:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 8000650:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 8000654:	ebac 0e4e 	sub.w	lr, ip, lr, lsl #1

    str.w pol1, [ptr_p, #1*distance/4]
 8000658:	f8c0 6080 	str.w	r6, [r0, #128]	@ 0x80
    str.w pol2, [ptr_p, #2*distance/4]
 800065c:	f8c0 7100 	str.w	r7, [r0, #256]	@ 0x100
    str.w pol3, [ptr_p, #3*distance/4]
 8000660:	f8c0 8180 	str.w	r8, [r0, #384]	@ 0x180
    str.w pol4, [ptr_p, #4*distance/4]
 8000664:	f8c0 4200 	str.w	r4, [r0, #512]	@ 0x200
    str.w pol5, [ptr_p, #5*distance/4]
 8000668:	f8c0 b280 	str.w	fp, [r0, #640]	@ 0x280
    str.w pol6, [ptr_p, #6*distance/4]
 800066c:	f8c0 c300 	str.w	ip, [r0, #768]	@ 0x300
    str.w pol7, [ptr_p, #7*distance/4]
 8000670:	f8c0 e380 	str.w	lr, [r0, #896]	@ 0x380
    str.w pol0, [ptr_p], #strincr
 8000674:	f840 5b04 	str.w	r5, [r0], #4
    ldr.w pol0, [ptr_p]
 8000678:	f8d0 5000 	ldr.w	r5, [r0]
    ldr.w pol1, [ptr_p, #1*distance/4]
 800067c:	f8d0 6080 	ldr.w	r6, [r0, #128]	@ 0x80
    ldr.w pol2, [ptr_p, #2*distance/4]
 8000680:	f8d0 7100 	ldr.w	r7, [r0, #256]	@ 0x100
    ldr.w pol3, [ptr_p, #3*distance/4]
 8000684:	f8d0 8180 	ldr.w	r8, [r0, #384]	@ 0x180
    ldr.w pol4, [ptr_p, #4*distance/4]
 8000688:	f8d0 4200 	ldr.w	r4, [r0, #512]	@ 0x200
    ldr.w pol5, [ptr_p, #5*distance/4]
 800068c:	f8d0 b280 	ldr.w	fp, [r0, #640]	@ 0x280
    ldr.w pol6, [ptr_p, #6*distance/4]
 8000690:	f8d0 c300 	ldr.w	ip, [r0, #768]	@ 0x300
    ldr.w pol7, [ptr_p, #7*distance/4]
 8000694:	f8d0 e380 	ldr.w	lr, [r0, #896]	@ 0x380
    _3_layer_CT_32 pol0, pol1, pol2, pol3, pol4, pol5, pol6, pol7, s2, s3, s4, s5, s6, s7, s8, zeta, qinv, q, temp_h, temp_l
 8000698:	ee11 1a10 	vmov	r1, s2
 800069c:	fb84 9401 	smull	r9, r4, r4, r1
 80006a0:	fb09 fa02 	mul.w	sl, r9, r2
 80006a4:	fbca 9403 	smlal	r9, r4, sl, r3
 80006a8:	fb8b 9b01 	smull	r9, fp, fp, r1
 80006ac:	fb09 fa02 	mul.w	sl, r9, r2
 80006b0:	fbca 9b03 	smlal	r9, fp, sl, r3
 80006b4:	fb8c 9c01 	smull	r9, ip, ip, r1
 80006b8:	fb09 fa02 	mul.w	sl, r9, r2
 80006bc:	fbca 9c03 	smlal	r9, ip, sl, r3
 80006c0:	fb8e 9e01 	smull	r9, lr, lr, r1
 80006c4:	fb09 fa02 	mul.w	sl, r9, r2
 80006c8:	fbca 9e03 	smlal	r9, lr, sl, r3
 80006cc:	4425      	add	r5, r4
 80006ce:	445e      	add	r6, fp
 80006d0:	4467      	add	r7, ip
 80006d2:	44f0      	add	r8, lr
 80006d4:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 80006d8:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 80006dc:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 80006e0:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 80006e4:	ee11 1a90 	vmov	r1, s3
 80006e8:	fb87 9701 	smull	r9, r7, r7, r1
 80006ec:	fb09 fa02 	mul.w	sl, r9, r2
 80006f0:	fbca 9703 	smlal	r9, r7, sl, r3
 80006f4:	fb88 9801 	smull	r9, r8, r8, r1
 80006f8:	fb09 fa02 	mul.w	sl, r9, r2
 80006fc:	fbca 9803 	smlal	r9, r8, sl, r3
 8000700:	ee12 1a10 	vmov	r1, s4
 8000704:	fb8c 9c01 	smull	r9, ip, ip, r1
 8000708:	fb09 fa02 	mul.w	sl, r9, r2
 800070c:	fbca 9c03 	smlal	r9, ip, sl, r3
 8000710:	fb8e 9e01 	smull	r9, lr, lr, r1
 8000714:	fb09 fa02 	mul.w	sl, r9, r2
 8000718:	fbca 9e03 	smlal	r9, lr, sl, r3
 800071c:	443d      	add	r5, r7
 800071e:	4446      	add	r6, r8
 8000720:	4464      	add	r4, ip
 8000722:	44f3      	add	fp, lr
 8000724:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 8000728:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 800072c:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 8000730:	ebab 0e4e 	sub.w	lr, fp, lr, lsl #1
 8000734:	ee12 1a90 	vmov	r1, s5
 8000738:	fb86 9601 	smull	r9, r6, r6, r1
 800073c:	fb09 fa02 	mul.w	sl, r9, r2
 8000740:	fbca 9603 	smlal	r9, r6, sl, r3
 8000744:	ee13 1a10 	vmov	r1, s6
 8000748:	fb88 9801 	smull	r9, r8, r8, r1
 800074c:	fb09 fa02 	mul.w	sl, r9, r2
 8000750:	fbca 9803 	smlal	r9, r8, sl, r3
 8000754:	ee13 1a90 	vmov	r1, s7
 8000758:	fb8b 9b01 	smull	r9, fp, fp, r1
 800075c:	fb09 fa02 	mul.w	sl, r9, r2
 8000760:	fbca 9b03 	smlal	r9, fp, sl, r3
 8000764:	ee14 1a10 	vmov	r1, s8
 8000768:	fb8e 9e01 	smull	r9, lr, lr, r1
 800076c:	fb09 fa02 	mul.w	sl, r9, r2
 8000770:	fbca 9e03 	smlal	r9, lr, sl, r3
 8000774:	4435      	add	r5, r6
 8000776:	4447      	add	r7, r8
 8000778:	445c      	add	r4, fp
 800077a:	44f4      	add	ip, lr
 800077c:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8000780:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 8000784:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 8000788:	ebac 0e4e 	sub.w	lr, ip, lr, lsl #1
    str.w pol1, [ptr_p, #1*distance/4]
 800078c:	f8c0 6080 	str.w	r6, [r0, #128]	@ 0x80
    str.w pol2, [ptr_p, #2*distance/4]
 8000790:	f8c0 7100 	str.w	r7, [r0, #256]	@ 0x100
    str.w pol3, [ptr_p, #3*distance/4]
 8000794:	f8c0 8180 	str.w	r8, [r0, #384]	@ 0x180
    str.w pol4, [ptr_p, #4*distance/4]
 8000798:	f8c0 4200 	str.w	r4, [r0, #512]	@ 0x200
    str.w pol5, [ptr_p, #5*distance/4]
 800079c:	f8c0 b280 	str.w	fp, [r0, #640]	@ 0x280
    str.w pol6, [ptr_p, #6*distance/4]
 80007a0:	f8c0 c300 	str.w	ip, [r0, #768]	@ 0x300
    str.w pol7, [ptr_p, #7*distance/4]
 80007a4:	f8c0 e380 	str.w	lr, [r0, #896]	@ 0x380
    str.w pol0, [ptr_p], #strincr
 80007a8:	f840 5b04 	str.w	r5, [r0], #4
    .endr
    vmov temp_l, s9
 80007ac:	ee14 aa90 	vmov	sl, s9
    cmp.w ptr_p, temp_l
 80007b0:	ebb0 0f0a 	cmp.w	r0, sl
    bne 1b
 80007b4:	f47f aec6 	bne.w	8000544 <haetae_ntt332+0x20>
  
  sub ptr_p, #32*4
 80007b8:	f1a0 0080 	sub.w	r0, r0, #128	@ 0x80

  // stage 4 - 6  
  .equ distance, 64
  add.w temp_l, ptr_p, #8*112+8*4*4 // 8 iterations
 80007bc:	f500 6a80 	add.w	sl, r0, #1024	@ 0x400
  vmov s9, temp_l
 80007c0:	ee04 aa90 	vmov	s9, sl
  1:
    add.w temp_l, ptr_p, #4*strincr // 4 iterations
 80007c4:	f100 0a10 	add.w	sl, r0, #16
    vmov s10, temp_l
 80007c8:	ee05 aa10 	vmov	s10, sl
    vmov ptr_zeta, s0
 80007cc:	ee10 1a10 	vmov	r1, s0
    vldm ptr_zeta!, {s2-s8}
 80007d0:	ecb1 1a07 	vldmia	r1!, {s2-s8}
    vmov s0, ptr_zeta
 80007d4:	ee00 1a10 	vmov	s0, r1
    2:
      .rept 2
      ldr.w pol0, [ptr_p]
 80007d8:	f8d0 5000 	ldr.w	r5, [r0]
      ldr.w pol1, [ptr_p, #1*distance/4]
 80007dc:	f8d0 6010 	ldr.w	r6, [r0, #16]
      ldr.w pol2, [ptr_p, #2*distance/4]
 80007e0:	f8d0 7020 	ldr.w	r7, [r0, #32]
      ldr.w pol3, [ptr_p, #3*distance/4]
 80007e4:	f8d0 8030 	ldr.w	r8, [r0, #48]	@ 0x30
      ldr.w pol4, [ptr_p, #4*distance/4]
 80007e8:	f8d0 4040 	ldr.w	r4, [r0, #64]	@ 0x40
      ldr.w pol5, [ptr_p, #5*distance/4]
 80007ec:	f8d0 b050 	ldr.w	fp, [r0, #80]	@ 0x50
      ldr.w pol6, [ptr_p, #6*distance/4]
 80007f0:	f8d0 c060 	ldr.w	ip, [r0, #96]	@ 0x60
      ldr.w pol7, [ptr_p, #7*distance/4]
 80007f4:	f8d0 e070 	ldr.w	lr, [r0, #112]	@ 0x70

      _3_layer_CT_32 pol0, pol1, pol2, pol3, pol4, pol5, pol6, pol7, s2, s3, s4, s5, s6, s7, s8, zeta, qinv, q, temp_h, temp_l
 80007f8:	ee11 1a10 	vmov	r1, s2
 80007fc:	fb84 9401 	smull	r9, r4, r4, r1
 8000800:	fb09 fa02 	mul.w	sl, r9, r2
 8000804:	fbca 9403 	smlal	r9, r4, sl, r3
 8000808:	fb8b 9b01 	smull	r9, fp, fp, r1
 800080c:	fb09 fa02 	mul.w	sl, r9, r2
 8000810:	fbca 9b03 	smlal	r9, fp, sl, r3
 8000814:	fb8c 9c01 	smull	r9, ip, ip, r1
 8000818:	fb09 fa02 	mul.w	sl, r9, r2
 800081c:	fbca 9c03 	smlal	r9, ip, sl, r3
 8000820:	fb8e 9e01 	smull	r9, lr, lr, r1
 8000824:	fb09 fa02 	mul.w	sl, r9, r2
 8000828:	fbca 9e03 	smlal	r9, lr, sl, r3
 800082c:	4425      	add	r5, r4
 800082e:	445e      	add	r6, fp
 8000830:	4467      	add	r7, ip
 8000832:	44f0      	add	r8, lr
 8000834:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 8000838:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 800083c:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 8000840:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 8000844:	ee11 1a90 	vmov	r1, s3
 8000848:	fb87 9701 	smull	r9, r7, r7, r1
 800084c:	fb09 fa02 	mul.w	sl, r9, r2
 8000850:	fbca 9703 	smlal	r9, r7, sl, r3
 8000854:	fb88 9801 	smull	r9, r8, r8, r1
 8000858:	fb09 fa02 	mul.w	sl, r9, r2
 800085c:	fbca 9803 	smlal	r9, r8, sl, r3
 8000860:	ee12 1a10 	vmov	r1, s4
 8000864:	fb8c 9c01 	smull	r9, ip, ip, r1
 8000868:	fb09 fa02 	mul.w	sl, r9, r2
 800086c:	fbca 9c03 	smlal	r9, ip, sl, r3
 8000870:	fb8e 9e01 	smull	r9, lr, lr, r1
 8000874:	fb09 fa02 	mul.w	sl, r9, r2
 8000878:	fbca 9e03 	smlal	r9, lr, sl, r3
 800087c:	443d      	add	r5, r7
 800087e:	4446      	add	r6, r8
 8000880:	4464      	add	r4, ip
 8000882:	44f3      	add	fp, lr
 8000884:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 8000888:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 800088c:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 8000890:	ebab 0e4e 	sub.w	lr, fp, lr, lsl #1
 8000894:	ee12 1a90 	vmov	r1, s5
 8000898:	fb86 9601 	smull	r9, r6, r6, r1
 800089c:	fb09 fa02 	mul.w	sl, r9, r2
 80008a0:	fbca 9603 	smlal	r9, r6, sl, r3
 80008a4:	ee13 1a10 	vmov	r1, s6
 80008a8:	fb88 9801 	smull	r9, r8, r8, r1
 80008ac:	fb09 fa02 	mul.w	sl, r9, r2
 80008b0:	fbca 9803 	smlal	r9, r8, sl, r3
 80008b4:	ee13 1a90 	vmov	r1, s7
 80008b8:	fb8b 9b01 	smull	r9, fp, fp, r1
 80008bc:	fb09 fa02 	mul.w	sl, r9, r2
 80008c0:	fbca 9b03 	smlal	r9, fp, sl, r3
 80008c4:	ee14 1a10 	vmov	r1, s8
 80008c8:	fb8e 9e01 	smull	r9, lr, lr, r1
 80008cc:	fb09 fa02 	mul.w	sl, r9, r2
 80008d0:	fbca 9e03 	smlal	r9, lr, sl, r3
 80008d4:	4435      	add	r5, r6
 80008d6:	4447      	add	r7, r8
 80008d8:	445c      	add	r4, fp
 80008da:	44f4      	add	ip, lr
 80008dc:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 80008e0:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 80008e4:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 80008e8:	ebac 0e4e 	sub.w	lr, ip, lr, lsl #1
      
      str.w pol1, [ptr_p, #1*distance/4]
 80008ec:	f8c0 6010 	str.w	r6, [r0, #16]
      str.w pol2, [ptr_p, #2*distance/4]
 80008f0:	f8c0 7020 	str.w	r7, [r0, #32]
      str.w pol3, [ptr_p, #3*distance/4]
 80008f4:	f8c0 8030 	str.w	r8, [r0, #48]	@ 0x30
      str.w pol4, [ptr_p, #4*distance/4]
 80008f8:	f8c0 4040 	str.w	r4, [r0, #64]	@ 0x40
      str.w pol5, [ptr_p, #5*distance/4]
 80008fc:	f8c0 b050 	str.w	fp, [r0, #80]	@ 0x50
      str.w pol6, [ptr_p, #6*distance/4]
 8000900:	f8c0 c060 	str.w	ip, [r0, #96]	@ 0x60
      str.w pol7, [ptr_p, #7*distance/4]
 8000904:	f8c0 e070 	str.w	lr, [r0, #112]	@ 0x70
      str.w pol0, [ptr_p], #4
 8000908:	f840 5b04 	str.w	r5, [r0], #4
      ldr.w pol0, [ptr_p]
 800090c:	f8d0 5000 	ldr.w	r5, [r0]
      ldr.w pol1, [ptr_p, #1*distance/4]
 8000910:	f8d0 6010 	ldr.w	r6, [r0, #16]
      ldr.w pol2, [ptr_p, #2*distance/4]
 8000914:	f8d0 7020 	ldr.w	r7, [r0, #32]
      ldr.w pol3, [ptr_p, #3*distance/4]
 8000918:	f8d0 8030 	ldr.w	r8, [r0, #48]	@ 0x30
      ldr.w pol4, [ptr_p, #4*distance/4]
 800091c:	f8d0 4040 	ldr.w	r4, [r0, #64]	@ 0x40
      ldr.w pol5, [ptr_p, #5*distance/4]
 8000920:	f8d0 b050 	ldr.w	fp, [r0, #80]	@ 0x50
      ldr.w pol6, [ptr_p, #6*distance/4]
 8000924:	f8d0 c060 	ldr.w	ip, [r0, #96]	@ 0x60
      ldr.w pol7, [ptr_p, #7*distance/4]
 8000928:	f8d0 e070 	ldr.w	lr, [r0, #112]	@ 0x70
      _3_layer_CT_32 pol0, pol1, pol2, pol3, pol4, pol5, pol6, pol7, s2, s3, s4, s5, s6, s7, s8, zeta, qinv, q, temp_h, temp_l
 800092c:	ee11 1a10 	vmov	r1, s2
 8000930:	fb84 9401 	smull	r9, r4, r4, r1
 8000934:	fb09 fa02 	mul.w	sl, r9, r2
 8000938:	fbca 9403 	smlal	r9, r4, sl, r3
 800093c:	fb8b 9b01 	smull	r9, fp, fp, r1
 8000940:	fb09 fa02 	mul.w	sl, r9, r2
 8000944:	fbca 9b03 	smlal	r9, fp, sl, r3
 8000948:	fb8c 9c01 	smull	r9, ip, ip, r1
 800094c:	fb09 fa02 	mul.w	sl, r9, r2
 8000950:	fbca 9c03 	smlal	r9, ip, sl, r3
 8000954:	fb8e 9e01 	smull	r9, lr, lr, r1
 8000958:	fb09 fa02 	mul.w	sl, r9, r2
 800095c:	fbca 9e03 	smlal	r9, lr, sl, r3
 8000960:	4425      	add	r5, r4
 8000962:	445e      	add	r6, fp
 8000964:	4467      	add	r7, ip
 8000966:	44f0      	add	r8, lr
 8000968:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 800096c:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 8000970:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 8000974:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 8000978:	ee11 1a90 	vmov	r1, s3
 800097c:	fb87 9701 	smull	r9, r7, r7, r1
 8000980:	fb09 fa02 	mul.w	sl, r9, r2
 8000984:	fbca 9703 	smlal	r9, r7, sl, r3
 8000988:	fb88 9801 	smull	r9, r8, r8, r1
 800098c:	fb09 fa02 	mul.w	sl, r9, r2
 8000990:	fbca 9803 	smlal	r9, r8, sl, r3
 8000994:	ee12 1a10 	vmov	r1, s4
 8000998:	fb8c 9c01 	smull	r9, ip, ip, r1
 800099c:	fb09 fa02 	mul.w	sl, r9, r2
 80009a0:	fbca 9c03 	smlal	r9, ip, sl, r3
 80009a4:	fb8e 9e01 	smull	r9, lr, lr, r1
 80009a8:	fb09 fa02 	mul.w	sl, r9, r2
 80009ac:	fbca 9e03 	smlal	r9, lr, sl, r3
 80009b0:	443d      	add	r5, r7
 80009b2:	4446      	add	r6, r8
 80009b4:	4464      	add	r4, ip
 80009b6:	44f3      	add	fp, lr
 80009b8:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 80009bc:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 80009c0:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 80009c4:	ebab 0e4e 	sub.w	lr, fp, lr, lsl #1
 80009c8:	ee12 1a90 	vmov	r1, s5
 80009cc:	fb86 9601 	smull	r9, r6, r6, r1
 80009d0:	fb09 fa02 	mul.w	sl, r9, r2
 80009d4:	fbca 9603 	smlal	r9, r6, sl, r3
 80009d8:	ee13 1a10 	vmov	r1, s6
 80009dc:	fb88 9801 	smull	r9, r8, r8, r1
 80009e0:	fb09 fa02 	mul.w	sl, r9, r2
 80009e4:	fbca 9803 	smlal	r9, r8, sl, r3
 80009e8:	ee13 1a90 	vmov	r1, s7
 80009ec:	fb8b 9b01 	smull	r9, fp, fp, r1
 80009f0:	fb09 fa02 	mul.w	sl, r9, r2
 80009f4:	fbca 9b03 	smlal	r9, fp, sl, r3
 80009f8:	ee14 1a10 	vmov	r1, s8
 80009fc:	fb8e 9e01 	smull	r9, lr, lr, r1
 8000a00:	fb09 fa02 	mul.w	sl, r9, r2
 8000a04:	fbca 9e03 	smlal	r9, lr, sl, r3
 8000a08:	4435      	add	r5, r6
 8000a0a:	4447      	add	r7, r8
 8000a0c:	445c      	add	r4, fp
 8000a0e:	44f4      	add	ip, lr
 8000a10:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8000a14:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 8000a18:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 8000a1c:	ebac 0e4e 	sub.w	lr, ip, lr, lsl #1
      str.w pol1, [ptr_p, #1*distance/4]
 8000a20:	f8c0 6010 	str.w	r6, [r0, #16]
      str.w pol2, [ptr_p, #2*distance/4]
 8000a24:	f8c0 7020 	str.w	r7, [r0, #32]
      str.w pol3, [ptr_p, #3*distance/4]
 8000a28:	f8c0 8030 	str.w	r8, [r0, #48]	@ 0x30
      str.w pol4, [ptr_p, #4*distance/4]
 8000a2c:	f8c0 4040 	str.w	r4, [r0, #64]	@ 0x40
      str.w pol5, [ptr_p, #5*distance/4]
 8000a30:	f8c0 b050 	str.w	fp, [r0, #80]	@ 0x50
      str.w pol6, [ptr_p, #6*distance/4]
 8000a34:	f8c0 c060 	str.w	ip, [r0, #96]	@ 0x60
      str.w pol7, [ptr_p, #7*distance/4]
 8000a38:	f8c0 e070 	str.w	lr, [r0, #112]	@ 0x70
      str.w pol0, [ptr_p], #4
 8000a3c:	f840 5b04 	str.w	r5, [r0], #4
      .endr
      vmov temp_l, s10
 8000a40:	ee15 aa10 	vmov	sl, s10
      cmp.w ptr_p, temp_l
 8000a44:	ebb0 0f0a 	cmp.w	r0, sl
      bne 2b
 8000a48:	f47f aec6 	bne.w	80007d8 <haetae_ntt332+0x2b4>

    add.w ptr_p, #112
 8000a4c:	f100 0070 	add.w	r0, r0, #112	@ 0x70
    vmov temp_l, s9
 8000a50:	ee14 aa90 	vmov	sl, s9
    cmp.w ptr_p, temp_l
 8000a54:	ebb0 0f0a 	cmp.w	r0, sl
    bne 1b
 8000a58:	f47f aeb4 	bne.w	80007c4 <haetae_ntt332+0x2a0>
  
    sub ptr_p, #4*4*8+112*8
 8000a5c:	f5a0 6080 	sub.w	r0, r0, #1024	@ 0x400
    vmov ptr_zeta, s0
 8000a60:	ee10 1a10 	vmov	r1, s0
    //stage 7 and 8
    add cntr, ptr_p, #1024 // 64 iterations
 8000a64:	f500 6480 	add.w	r4, r0, #1024	@ 0x400
    1:
      ldr.w zeta1, [ptr_zeta, #4]  //z128,..., z254
 8000a68:	f8d1 c004 	ldr.w	ip, [r1, #4]
      ldr.w zeta2, [ptr_zeta, #8]  //z129,..., z255
 8000a6c:	f8d1 e008 	ldr.w	lr, [r1, #8]
      ldr zeta0, [ptr_zeta], #12  //z64, ..., z127
 8000a70:	f851 bb0c 	ldr.w	fp, [r1], #12
      ldr.w pol0, [ptr_p]  //1*4
 8000a74:	f8d0 5000 	ldr.w	r5, [r0]
      ldr.w pol1, [ptr_p, #4]
 8000a78:	f8d0 6004 	ldr.w	r6, [r0, #4]
      ldr.w pol2, [ptr_p, #8]
 8000a7c:	f8d0 7008 	ldr.w	r7, [r0, #8]
      ldr.w pol3, [ptr_p, #12] 
 8000a80:	f8d0 800c 	ldr.w	r8, [r0, #12]

      _2_layer_CT_32 pol0, pol1, pol2, pol3, zeta0, zeta1, zeta2, qinv, q, temp_h, temp_l
 8000a84:	fb87 970b 	smull	r9, r7, r7, fp
 8000a88:	fb09 fa02 	mul.w	sl, r9, r2
 8000a8c:	fbca 9703 	smlal	r9, r7, sl, r3
 8000a90:	fb88 980b 	smull	r9, r8, r8, fp
 8000a94:	fb09 fa02 	mul.w	sl, r9, r2
 8000a98:	fbca 9803 	smlal	r9, r8, sl, r3
 8000a9c:	443d      	add	r5, r7
 8000a9e:	4446      	add	r6, r8
 8000aa0:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 8000aa4:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8000aa8:	fb86 960c 	smull	r9, r6, r6, ip
 8000aac:	fb09 fa02 	mul.w	sl, r9, r2
 8000ab0:	fbca 9603 	smlal	r9, r6, sl, r3
 8000ab4:	fb88 980e 	smull	r9, r8, r8, lr
 8000ab8:	fb09 fa02 	mul.w	sl, r9, r2
 8000abc:	fbca 9803 	smlal	r9, r8, sl, r3
 8000ac0:	4435      	add	r5, r6
 8000ac2:	4447      	add	r7, r8
 8000ac4:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8000ac8:	eba7 0848 	sub.w	r8, r7, r8, lsl #1

      str.w pol1, [ptr_p, #4]
 8000acc:	f8c0 6004 	str.w	r6, [r0, #4]
      str.w pol2, [ptr_p, #8]
 8000ad0:	f8c0 7008 	str.w	r7, [r0, #8]
      str.w pol3, [ptr_p, #12]
 8000ad4:	f8c0 800c 	str.w	r8, [r0, #12]
      str pol0, [ptr_p], #16
 8000ad8:	f840 5b10 	str.w	r5, [r0], #16

      cmp.w cntr, ptr_p
 8000adc:	ebb4 0f00 	cmp.w	r4, r0
      bne.w 1b
 8000ae0:	f47f afc2 	bne.w	8000a68 <haetae_ntt332+0x544>

    //restore registers
    pop {R4-R11, PC}
 8000ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  ldr ptr_zeta, =#FORWARD_NTT_TWIDDLE_TABLE
 8000ae8:	08015708 	.word	0x08015708

08000aec <haetae_invntt332_tomont>:
  pol5     .req R11
  pol6     .req R12
  pol7     .req R14

  //preserve registers
  push {R4-R11, R14}
 8000aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    
  //load constants, ptr
  ldr.w qinv, inv_ntt_asm_smull_qinv  //-qinv_signed
 8000af0:	f8df 2428 	ldr.w	r2, [pc, #1064]	@ 8000f1c <inv_ntt_asm_smull_qinv>
  ldr.w q, inv_ntt_asm_smull_q
 8000af4:	f8df 3428 	ldr.w	r3, [pc, #1064]	@ 8000f20 <inv_ntt_asm_smull_q>

  //stage 1 - 3
  .equ distance, 16
  .equ strincr, 32

  ldr ptr_zeta, =#INVERSE_NTT_TWIDDLE_TABLE
 8000af8:	f8df 1428 	ldr.w	r1, [pc, #1064]	@ 8000f24 <inv_ntt_asm_smull_q+0x4>
  vldm ptr_zeta!, {s2-s8} 
 8000afc:	ecb1 1a07 	vldmia	r1!, {s2-s8}
  vmov s0, ptr_zeta
 8000b00:	ee00 1a10 	vmov	s0, r1
  
  add.w temp_l, ptr_p, #32*strincr // 32 iterations
 8000b04:	f500 6a80 	add.w	sl, r0, #1024	@ 0x400
  vmov s9, temp_l
 8000b08:	ee04 aa90 	vmov	s9, sl
  1:
    ldr.w pol4, [ptr_p, #4*distance/4]
 8000b0c:	f8d0 4010 	ldr.w	r4, [r0, #16]
    ldr.w pol1, [ptr_p, #5*distance/4]
 8000b10:	f8d0 6014 	ldr.w	r6, [r0, #20]
    ldr.w pol6, [ptr_p, #6*distance/4]
 8000b14:	f8d0 c018 	ldr.w	ip, [r0, #24]
    ldr.w pol3, [ptr_p, #7*distance/4]
 8000b18:	f8d0 801c 	ldr.w	r8, [r0, #28]
    _3_layer_inv_butterfly_light_fast_first pol0, pol1, pol2, pol3, pol4, pol5, pol6, pol7, s2, s3, s4, s5, s6, s7, s8, zeta, qinv, q, temp_h, temp_l
 8000b1c:	4434      	add	r4, r6
 8000b1e:	44c4      	add	ip, r8
 8000b20:	eba4 0646 	sub.w	r6, r4, r6, lsl #1
 8000b24:	ebac 0848 	sub.w	r8, ip, r8, lsl #1
 8000b28:	eb04 040c 	add.w	r4, r4, ip
 8000b2c:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 8000b30:	ee13 9a10 	vmov	r9, s6
 8000b34:	ee14 aa10 	vmov	sl, s8
 8000b38:	fb86 5b09 	smull	r5, fp, r6, r9
 8000b3c:	fbc8 5b0a 	smlal	r5, fp, r8, sl
 8000b40:	fb05 f102 	mul.w	r1, r5, r2
 8000b44:	fbc1 5b03 	smlal	r5, fp, r1, r3
 8000b48:	fb86 7e0a 	smull	r7, lr, r6, sl
 8000b4c:	fbc8 7e09 	smlal	r7, lr, r8, r9
 8000b50:	fb07 f102 	mul.w	r1, r7, r2
 8000b54:	fbc1 7e03 	smlal	r7, lr, r1, r3
    
    ldr.w pol0, [ptr_p]
 8000b58:	f8d0 5000 	ldr.w	r5, [r0]
    ldr.w pol1, [ptr_p, #1*distance/4]
 8000b5c:	f8d0 6004 	ldr.w	r6, [r0, #4]
    ldr.w pol2, [ptr_p, #2*distance/4]
 8000b60:	f8d0 7008 	ldr.w	r7, [r0, #8]
    ldr.w pol3, [ptr_p, #3*distance/4]
 8000b64:	f8d0 800c 	ldr.w	r8, [r0, #12]
    _3_layer_inv_butterfly_light_fast_second pol0, pol1, pol2, pol3, pol4, pol5, pol6, pol7, s2, s3, s4, s5, s6, s7, s8, zeta, qinv, q, temp_h, temp_l
 8000b68:	4435      	add	r5, r6
 8000b6a:	4447      	add	r7, r8
 8000b6c:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8000b70:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 8000b74:	ee12 1a10 	vmov	r1, s4
 8000b78:	fb88 9801 	smull	r9, r8, r8, r1
 8000b7c:	fb09 fa02 	mul.w	sl, r9, r2
 8000b80:	fbca 9803 	smlal	r9, r8, sl, r3
 8000b84:	443d      	add	r5, r7
 8000b86:	4446      	add	r6, r8
 8000b88:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 8000b8c:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8000b90:	fb8c 9c01 	smull	r9, ip, ip, r1
 8000b94:	fb09 fa02 	mul.w	sl, r9, r2
 8000b98:	fbca 9c03 	smlal	r9, ip, sl, r3
 8000b9c:	4425      	add	r5, r4
 8000b9e:	445e      	add	r6, fp
 8000ba0:	4467      	add	r7, ip
 8000ba2:	44f0      	add	r8, lr
 8000ba4:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 8000ba8:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 8000bac:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 8000bb0:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
    
    str.w pol1, [ptr_p, #1*distance/4]
 8000bb4:	f8c0 6004 	str.w	r6, [r0, #4]
    str.w pol2, [ptr_p, #2*distance/4]
 8000bb8:	f8c0 7008 	str.w	r7, [r0, #8]
    str.w pol3, [ptr_p, #3*distance/4]
 8000bbc:	f8c0 800c 	str.w	r8, [r0, #12]
    str.w pol4, [ptr_p, #4*distance/4]
 8000bc0:	f8c0 4010 	str.w	r4, [r0, #16]
    str.w pol5, [ptr_p, #5*distance/4]
 8000bc4:	f8c0 b014 	str.w	fp, [r0, #20]
    str.w pol6, [ptr_p, #6*distance/4]
 8000bc8:	f8c0 c018 	str.w	ip, [r0, #24]
    str.w pol7, [ptr_p, #7*distance/4]
 8000bcc:	f8c0 e01c 	str.w	lr, [r0, #28]
    str.w pol0, [ptr_p], #strincr
 8000bd0:	f840 5b20 	str.w	r5, [r0], #32
    vmov temp_l, s9
 8000bd4:	ee14 aa90 	vmov	sl, s9
    cmp.w ptr_p, temp_l
 8000bd8:	ebb0 0f0a 	cmp.w	r0, sl
  bne.w 1b
 8000bdc:	f47f af96 	bne.w	8000b0c <haetae_invntt332_tomont+0x20>
  
  sub ptr_p, #32*strincr
 8000be0:	f5a0 6080 	sub.w	r0, r0, #1024	@ 0x400
  // stage 4 - 6  
  .equ distance, 128
  .equ strincr, 256
  
  // iteration 0
  movw temp_l, #4
 8000be4:	f240 0a04 	movw	sl, #4
  add.w temp_l, ptr_p, #4*256 // 4 iterations
 8000be8:	f500 6a80 	add.w	sl, r0, #1024	@ 0x400
  vmov s10, temp_l
 8000bec:	ee05 aa10 	vmov	s10, sl
	
  vmov ptr_zeta, s0
 8000bf0:	ee10 1a10 	vmov	r1, s0
  vldm ptr_zeta!, {s2-s8}
 8000bf4:	ecb1 1a07 	vldmia	r1!, {s2-s8}
  vmov s0, ptr_zeta
 8000bf8:	ee00 1a10 	vmov	s0, r1

  2:
    ldr.w pol4, [ptr_p, #4*distance/4]
 8000bfc:	f8d0 4080 	ldr.w	r4, [r0, #128]	@ 0x80
    ldr.w pol1, [ptr_p, #5*distance/4]
 8000c00:	f8d0 60a0 	ldr.w	r6, [r0, #160]	@ 0xa0
    ldr.w pol6, [ptr_p, #6*distance/4]
 8000c04:	f8d0 c0c0 	ldr.w	ip, [r0, #192]	@ 0xc0
    ldr.w pol3, [ptr_p, #7*distance/4]
 8000c08:	f8d0 80e0 	ldr.w	r8, [r0, #224]	@ 0xe0
    _3_layer_inv_butterfly_light_fast_first pol0, pol1, pol2, pol3, pol4, pol5, pol6, pol7, s2, s3, s4, s5, s6, s7, s8, zeta, qinv, q, temp_h, temp_l
 8000c0c:	4434      	add	r4, r6
 8000c0e:	44c4      	add	ip, r8
 8000c10:	eba4 0646 	sub.w	r6, r4, r6, lsl #1
 8000c14:	ebac 0848 	sub.w	r8, ip, r8, lsl #1
 8000c18:	eb04 040c 	add.w	r4, r4, ip
 8000c1c:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 8000c20:	ee13 9a10 	vmov	r9, s6
 8000c24:	ee14 aa10 	vmov	sl, s8
 8000c28:	fb86 5b09 	smull	r5, fp, r6, r9
 8000c2c:	fbc8 5b0a 	smlal	r5, fp, r8, sl
 8000c30:	fb05 f102 	mul.w	r1, r5, r2
 8000c34:	fbc1 5b03 	smlal	r5, fp, r1, r3
 8000c38:	fb86 7e0a 	smull	r7, lr, r6, sl
 8000c3c:	fbc8 7e09 	smlal	r7, lr, r8, r9
 8000c40:	fb07 f102 	mul.w	r1, r7, r2
 8000c44:	fbc1 7e03 	smlal	r7, lr, r1, r3
    
    ldr.w pol0, [ptr_p]
 8000c48:	f8d0 5000 	ldr.w	r5, [r0]
    ldr.w pol1, [ptr_p, #1*distance/4]
 8000c4c:	f8d0 6020 	ldr.w	r6, [r0, #32]
    ldr.w pol2, [ptr_p, #2*distance/4]
 8000c50:	f8d0 7040 	ldr.w	r7, [r0, #64]	@ 0x40
    ldr.w pol3, [ptr_p, #3*distance/4]
 8000c54:	f8d0 8060 	ldr.w	r8, [r0, #96]	@ 0x60
    _3_layer_inv_butterfly_light_fast_second pol0, pol1, pol2, pol3, pol4, pol5, pol6, pol7, s2, s3, s4, s5, s6, s7, s8, zeta, qinv, q, temp_h, temp_l
 8000c58:	4435      	add	r5, r6
 8000c5a:	4447      	add	r7, r8
 8000c5c:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8000c60:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 8000c64:	ee12 1a10 	vmov	r1, s4
 8000c68:	fb88 9801 	smull	r9, r8, r8, r1
 8000c6c:	fb09 fa02 	mul.w	sl, r9, r2
 8000c70:	fbca 9803 	smlal	r9, r8, sl, r3
 8000c74:	443d      	add	r5, r7
 8000c76:	4446      	add	r6, r8
 8000c78:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 8000c7c:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8000c80:	fb8c 9c01 	smull	r9, ip, ip, r1
 8000c84:	fb09 fa02 	mul.w	sl, r9, r2
 8000c88:	fbca 9c03 	smlal	r9, ip, sl, r3
 8000c8c:	4425      	add	r5, r4
 8000c8e:	445e      	add	r6, fp
 8000c90:	4467      	add	r7, ip
 8000c92:	44f0      	add	r8, lr
 8000c94:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 8000c98:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 8000c9c:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 8000ca0:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1

    str.w pol1, [ptr_p, #1*distance/4]
 8000ca4:	f8c0 6020 	str.w	r6, [r0, #32]
    str.w pol2, [ptr_p, #2*distance/4]
 8000ca8:	f8c0 7040 	str.w	r7, [r0, #64]	@ 0x40
    str.w pol3, [ptr_p, #3*distance/4]
 8000cac:	f8c0 8060 	str.w	r8, [r0, #96]	@ 0x60
    str.w pol4, [ptr_p, #4*distance/4]
 8000cb0:	f8c0 4080 	str.w	r4, [r0, #128]	@ 0x80
    str.w pol5, [ptr_p, #5*distance/4]
 8000cb4:	f8c0 b0a0 	str.w	fp, [r0, #160]	@ 0xa0
    str.w pol6, [ptr_p, #6*distance/4]
 8000cb8:	f8c0 c0c0 	str.w	ip, [r0, #192]	@ 0xc0
    str.w pol7, [ptr_p, #7*distance/4]
 8000cbc:	f8c0 e0e0 	str.w	lr, [r0, #224]	@ 0xe0
    str.w pol0, [ptr_p]
 8000cc0:	f8c0 5000 	str.w	r5, [r0]
    add.w ptr_p, #strincr
 8000cc4:	f500 7080 	add.w	r0, r0, #256	@ 0x100

    vmov temp_l, s10
 8000cc8:	ee15 aa10 	vmov	sl, s10
    cmp.w temp_l, ptr_p
 8000ccc:	ebba 0f00 	cmp.w	sl, r0
  bne.w 2b
 8000cd0:	f47f af94 	bne.w	8000bfc <haetae_invntt332_tomont+0x110>

  sub.w ptr_p, #4*256-4
 8000cd4:	f5a0 707f 	sub.w	r0, r0, #1020	@ 0x3fc

  // iteration 1-7
  add.w temp_l, ptr_p, #7*4 // 7 iterations
 8000cd8:	f100 0a1c 	add.w	sl, r0, #28
  vmov s9, temp_l
 8000cdc:	ee04 aa90 	vmov	s9, sl
  1:
    add.w temp_l, ptr_p, #4*strincr // 4 iterations
 8000ce0:	f500 6a80 	add.w	sl, r0, #1024	@ 0x400
    vmov s10, temp_l
 8000ce4:	ee05 aa10 	vmov	s10, sl

	  vmov ptr_zeta, s0
 8000ce8:	ee10 1a10 	vmov	r1, s0
    vldm ptr_zeta!, {s2-s8}
 8000cec:	ecb1 1a07 	vldmia	r1!, {s2-s8}
    vmov s0, ptr_zeta
 8000cf0:	ee00 1a10 	vmov	s0, r1
    2:     
	    ldr.w pol0, [ptr_p]
 8000cf4:	f8d0 5000 	ldr.w	r5, [r0]
	    ldr.w pol1, [ptr_p, #1*distance/4]
 8000cf8:	f8d0 6020 	ldr.w	r6, [r0, #32]
	    ldr.w pol2, [ptr_p, #2*distance/4]
 8000cfc:	f8d0 7040 	ldr.w	r7, [r0, #64]	@ 0x40
	    ldr.w pol3, [ptr_p, #3*distance/4]
 8000d00:	f8d0 8060 	ldr.w	r8, [r0, #96]	@ 0x60
	    ldr.w pol4, [ptr_p, #4*distance/4]
 8000d04:	f8d0 4080 	ldr.w	r4, [r0, #128]	@ 0x80
	    ldr.w pol5, [ptr_p, #5*distance/4]
 8000d08:	f8d0 b0a0 	ldr.w	fp, [r0, #160]	@ 0xa0
	    ldr.w pol6, [ptr_p, #6*distance/4]
 8000d0c:	f8d0 c0c0 	ldr.w	ip, [r0, #192]	@ 0xc0
	    ldr.w pol7, [ptr_p, #7*distance/4]
 8000d10:	f8d0 e0e0 	ldr.w	lr, [r0, #224]	@ 0xe0

	    _3_layer_inv_CT_32 pol0, pol1, pol2, pol3, pol4, pol5, pol6, pol7, s2, s3, s4, s5, s6, s7, s8, zeta, qinv, q, temp_h, temp_l
 8000d14:	ee11 1a10 	vmov	r1, s2
 8000d18:	fb86 9601 	smull	r9, r6, r6, r1
 8000d1c:	fb09 fa02 	mul.w	sl, r9, r2
 8000d20:	fbca 9603 	smlal	r9, r6, sl, r3
 8000d24:	fb88 9801 	smull	r9, r8, r8, r1
 8000d28:	fb09 fa02 	mul.w	sl, r9, r2
 8000d2c:	fbca 9803 	smlal	r9, r8, sl, r3
 8000d30:	fb8b 9b01 	smull	r9, fp, fp, r1
 8000d34:	fb09 fa02 	mul.w	sl, r9, r2
 8000d38:	fbca 9b03 	smlal	r9, fp, sl, r3
 8000d3c:	fb8e 9e01 	smull	r9, lr, lr, r1
 8000d40:	fb09 fa02 	mul.w	sl, r9, r2
 8000d44:	fbca 9e03 	smlal	r9, lr, sl, r3
 8000d48:	4435      	add	r5, r6
 8000d4a:	4447      	add	r7, r8
 8000d4c:	445c      	add	r4, fp
 8000d4e:	44f4      	add	ip, lr
 8000d50:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8000d54:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 8000d58:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 8000d5c:	ebac 0e4e 	sub.w	lr, ip, lr, lsl #1
 8000d60:	ee11 1a90 	vmov	r1, s3
 8000d64:	fb87 9701 	smull	r9, r7, r7, r1
 8000d68:	fb09 fa02 	mul.w	sl, r9, r2
 8000d6c:	fbca 9703 	smlal	r9, r7, sl, r3
 8000d70:	fb8c 9c01 	smull	r9, ip, ip, r1
 8000d74:	fb09 fa02 	mul.w	sl, r9, r2
 8000d78:	fbca 9c03 	smlal	r9, ip, sl, r3
 8000d7c:	ee12 1a10 	vmov	r1, s4
 8000d80:	fb88 9801 	smull	r9, r8, r8, r1
 8000d84:	fb09 fa02 	mul.w	sl, r9, r2
 8000d88:	fbca 9803 	smlal	r9, r8, sl, r3
 8000d8c:	fb8e 9e01 	smull	r9, lr, lr, r1
 8000d90:	fb09 fa02 	mul.w	sl, r9, r2
 8000d94:	fbca 9e03 	smlal	r9, lr, sl, r3
 8000d98:	443d      	add	r5, r7
 8000d9a:	4446      	add	r6, r8
 8000d9c:	4464      	add	r4, ip
 8000d9e:	44f3      	add	fp, lr
 8000da0:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 8000da4:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8000da8:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 8000dac:	ebab 0e4e 	sub.w	lr, fp, lr, lsl #1
 8000db0:	ee12 1a90 	vmov	r1, s5
 8000db4:	fb84 9401 	smull	r9, r4, r4, r1
 8000db8:	fb09 fa02 	mul.w	sl, r9, r2
 8000dbc:	fbca 9403 	smlal	r9, r4, sl, r3
 8000dc0:	ee13 1a10 	vmov	r1, s6
 8000dc4:	fb8b 9b01 	smull	r9, fp, fp, r1
 8000dc8:	fb09 fa02 	mul.w	sl, r9, r2
 8000dcc:	fbca 9b03 	smlal	r9, fp, sl, r3
 8000dd0:	ee13 1a90 	vmov	r1, s7
 8000dd4:	fb8c 9c01 	smull	r9, ip, ip, r1
 8000dd8:	fb09 fa02 	mul.w	sl, r9, r2
 8000ddc:	fbca 9c03 	smlal	r9, ip, sl, r3
 8000de0:	ee14 1a10 	vmov	r1, s8
 8000de4:	fb8e 9e01 	smull	r9, lr, lr, r1
 8000de8:	fb09 fa02 	mul.w	sl, r9, r2
 8000dec:	fbca 9e03 	smlal	r9, lr, sl, r3
 8000df0:	4425      	add	r5, r4
 8000df2:	445e      	add	r6, fp
 8000df4:	4467      	add	r7, ip
 8000df6:	44f0      	add	r8, lr
 8000df8:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 8000dfc:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 8000e00:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 8000e04:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1

	    str.w pol1, [ptr_p, #1*distance/4]
 8000e08:	f8c0 6020 	str.w	r6, [r0, #32]
	    str.w pol2, [ptr_p, #2*distance/4]
 8000e0c:	f8c0 7040 	str.w	r7, [r0, #64]	@ 0x40
	    str.w pol3, [ptr_p, #3*distance/4]
 8000e10:	f8c0 8060 	str.w	r8, [r0, #96]	@ 0x60
	    str.w pol4, [ptr_p, #4*distance/4]
 8000e14:	f8c0 4080 	str.w	r4, [r0, #128]	@ 0x80
	    str.w pol5, [ptr_p, #5*distance/4]
 8000e18:	f8c0 b0a0 	str.w	fp, [r0, #160]	@ 0xa0
	    str.w pol6, [ptr_p, #6*distance/4]
 8000e1c:	f8c0 c0c0 	str.w	ip, [r0, #192]	@ 0xc0
	    str.w pol7, [ptr_p, #7*distance/4]
 8000e20:	f8c0 e0e0 	str.w	lr, [r0, #224]	@ 0xe0
	    str.w pol0, [ptr_p]
 8000e24:	f8c0 5000 	str.w	r5, [r0]
	    add.w ptr_p, #strincr
 8000e28:	f500 7080 	add.w	r0, r0, #256	@ 0x100

      vmov temp_l, s10
 8000e2c:	ee15 aa10 	vmov	sl, s10
      cmp.w ptr_p, temp_l
 8000e30:	ebb0 0f0a 	cmp.w	r0, sl
    bne 2b
 8000e34:	f47f af5e 	bne.w	8000cf4 <haetae_invntt332_tomont+0x208>
    sub.w ptr_p, #4*strincr-4
 8000e38:	f5a0 707f 	sub.w	r0, r0, #1020	@ 0x3fc

    vmov temp_l, s9
 8000e3c:	ee14 aa90 	vmov	sl, s9
    cmp.w temp_l, ptr_p
 8000e40:	ebba 0f00 	cmp.w	sl, r0
  bne 1b
 8000e44:	f47f af4c 	bne.w	8000ce0 <haetae_invntt332_tomont+0x1f4>
  
  sub ptr_p, #8*4
 8000e48:	f1a0 0020 	sub.w	r0, r0, #32
  vmov ptr_zeta, s0
 8000e4c:	ee10 1a10 	vmov	r1, s0
  
  //stage 7 and 8
  .equ strincr, 4

  add.w cntr, ptr_p, #64*strincr // 64 iterations 
 8000e50:	f500 7480 	add.w	r4, r0, #256	@ 0x100
  vmov s9, cntr
 8000e54:	ee04 4a90 	vmov	s9, r4
  1:
    ldr.w zeta1, [ptr_zeta, #4]
 8000e58:	f8d1 c004 	ldr.w	ip, [r1, #4]
    ldr.w zeta2, [ptr_zeta, #8]
 8000e5c:	f8d1 e008 	ldr.w	lr, [r1, #8]
    ldr zeta0, [ptr_zeta], #12
 8000e60:	f851 bb0c 	ldr.w	fp, [r1], #12
    ldr.w pol0, [ptr_p]
 8000e64:	f8d0 5000 	ldr.w	r5, [r0]
    ldr.w pol1, [ptr_p, #256]
 8000e68:	f8d0 6100 	ldr.w	r6, [r0, #256]	@ 0x100
    ldr.w pol2, [ptr_p, #512]
 8000e6c:	f8d0 7200 	ldr.w	r7, [r0, #512]	@ 0x200
    ldr.w pol3, [ptr_p, #768]
 8000e70:	f8d0 8300 	ldr.w	r8, [r0, #768]	@ 0x300

    _2_layer_inv_CT_32 pol0, pol1, pol2, pol3, zeta0, zeta1, zeta2, qinv, q, temp_h, temp_l
 8000e74:	fb86 960b 	smull	r9, r6, r6, fp
 8000e78:	fb09 fa02 	mul.w	sl, r9, r2
 8000e7c:	fbca 9603 	smlal	r9, r6, sl, r3
 8000e80:	fb88 980b 	smull	r9, r8, r8, fp
 8000e84:	fb09 fa02 	mul.w	sl, r9, r2
 8000e88:	fbca 9803 	smlal	r9, r8, sl, r3
 8000e8c:	4435      	add	r5, r6
 8000e8e:	4447      	add	r7, r8
 8000e90:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8000e94:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 8000e98:	fb87 970c 	smull	r9, r7, r7, ip
 8000e9c:	fb09 fa02 	mul.w	sl, r9, r2
 8000ea0:	fbca 9703 	smlal	r9, r7, sl, r3
 8000ea4:	fb88 980e 	smull	r9, r8, r8, lr
 8000ea8:	fb09 fa02 	mul.w	sl, r9, r2
 8000eac:	fbca 9803 	smlal	r9, r8, sl, r3
 8000eb0:	443d      	add	r5, r7
 8000eb2:	4446      	add	r6, r8
 8000eb4:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 8000eb8:	eba6 0848 	sub.w	r8, r6, r8, lsl #1

    ldr.w zeta1, [ptr_zeta, #4]
 8000ebc:	f8d1 c004 	ldr.w	ip, [r1, #4]
    ldr.w zeta2, [ptr_zeta, #8]
 8000ec0:	f8d1 e008 	ldr.w	lr, [r1, #8]
    ldr.w zeta0, [ptr_zeta, #12]
 8000ec4:	f8d1 b00c 	ldr.w	fp, [r1, #12]
    ldr.w cntr, [ptr_zeta], #16
 8000ec8:	f851 4b10 	ldr.w	r4, [r1], #16
    montgomery_mul_32 pol0, cntr, qinv, q, temp_h, temp_l
 8000ecc:	fb85 9504 	smull	r9, r5, r5, r4
 8000ed0:	fb09 fa02 	mul.w	sl, r9, r2
 8000ed4:	fbca 9503 	smlal	r9, r5, sl, r3
    montgomery_mul_32 pol1, zeta1, qinv, q, temp_h, temp_l
 8000ed8:	fb86 960c 	smull	r9, r6, r6, ip
 8000edc:	fb09 fa02 	mul.w	sl, r9, r2
 8000ee0:	fbca 9603 	smlal	r9, r6, sl, r3
    montgomery_mul_32 pol2, zeta2, qinv, q, temp_h, temp_l
 8000ee4:	fb87 970e 	smull	r9, r7, r7, lr
 8000ee8:	fb09 fa02 	mul.w	sl, r9, r2
 8000eec:	fbca 9703 	smlal	r9, r7, sl, r3
    montgomery_mul_32 pol3, zeta0, qinv, q, temp_h, temp_l
 8000ef0:	fb88 980b 	smull	r9, r8, r8, fp
 8000ef4:	fb09 fa02 	mul.w	sl, r9, r2
 8000ef8:	fbca 9803 	smlal	r9, r8, sl, r3

    str.w pol1, [ptr_p, #256]
 8000efc:	f8c0 6100 	str.w	r6, [r0, #256]	@ 0x100
    str.w pol2, [ptr_p, #512]
 8000f00:	f8c0 7200 	str.w	r7, [r0, #512]	@ 0x200
    str.w pol3, [ptr_p, #768]
 8000f04:	f8c0 8300 	str.w	r8, [r0, #768]	@ 0x300
    str pol0, [ptr_p], #strincr
 8000f08:	f840 5b04 	str.w	r5, [r0], #4

    vmov cntr, s9
 8000f0c:	ee14 4a90 	vmov	r4, s9
    cmp.w cntr, ptr_p
 8000f10:	ebb4 0f00 	cmp.w	r4, r0
    bne.w 1b
 8000f14:	f47f afa0 	bne.w	8000e58 <haetae_invntt332_tomont+0x36c>

    //restore registers
    pop {R4-R11, PC}
 8000f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000f1c <inv_ntt_asm_smull_qinv>:
 8000f1c:	c7f0fbff 	.word	0xc7f0fbff

08000f20 <inv_ntt_asm_smull_q>:
 8000f20:	0000fc01 	.word	0x0000fc01
  ldr ptr_zeta, =#INVERSE_NTT_TWIDDLE_TABLE
 8000f24:	08015b04 	.word	0x08015b04

08000f28 <__aeabi_drsub>:
 8000f28:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000f2c:	e002      	b.n	8000f34 <__adddf3>
 8000f2e:	bf00      	nop

08000f30 <__aeabi_dsub>:
 8000f30:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000f34 <__adddf3>:
 8000f34:	b530      	push	{r4, r5, lr}
 8000f36:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000f3a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000f3e:	ea94 0f05 	teq	r4, r5
 8000f42:	bf08      	it	eq
 8000f44:	ea90 0f02 	teqeq	r0, r2
 8000f48:	bf1f      	itttt	ne
 8000f4a:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000f4e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000f52:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000f56:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000f5a:	f000 80e2 	beq.w	8001122 <__adddf3+0x1ee>
 8000f5e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000f62:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000f66:	bfb8      	it	lt
 8000f68:	426d      	neglt	r5, r5
 8000f6a:	dd0c      	ble.n	8000f86 <__adddf3+0x52>
 8000f6c:	442c      	add	r4, r5
 8000f6e:	ea80 0202 	eor.w	r2, r0, r2
 8000f72:	ea81 0303 	eor.w	r3, r1, r3
 8000f76:	ea82 0000 	eor.w	r0, r2, r0
 8000f7a:	ea83 0101 	eor.w	r1, r3, r1
 8000f7e:	ea80 0202 	eor.w	r2, r0, r2
 8000f82:	ea81 0303 	eor.w	r3, r1, r3
 8000f86:	2d36      	cmp	r5, #54	@ 0x36
 8000f88:	bf88      	it	hi
 8000f8a:	bd30      	pophi	{r4, r5, pc}
 8000f8c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000f90:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000f94:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000f98:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000f9c:	d002      	beq.n	8000fa4 <__adddf3+0x70>
 8000f9e:	4240      	negs	r0, r0
 8000fa0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fa4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000fa8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000fac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000fb0:	d002      	beq.n	8000fb8 <__adddf3+0x84>
 8000fb2:	4252      	negs	r2, r2
 8000fb4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fb8:	ea94 0f05 	teq	r4, r5
 8000fbc:	f000 80a7 	beq.w	800110e <__adddf3+0x1da>
 8000fc0:	f1a4 0401 	sub.w	r4, r4, #1
 8000fc4:	f1d5 0e20 	rsbs	lr, r5, #32
 8000fc8:	db0d      	blt.n	8000fe6 <__adddf3+0xb2>
 8000fca:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000fce:	fa22 f205 	lsr.w	r2, r2, r5
 8000fd2:	1880      	adds	r0, r0, r2
 8000fd4:	f141 0100 	adc.w	r1, r1, #0
 8000fd8:	fa03 f20e 	lsl.w	r2, r3, lr
 8000fdc:	1880      	adds	r0, r0, r2
 8000fde:	fa43 f305 	asr.w	r3, r3, r5
 8000fe2:	4159      	adcs	r1, r3
 8000fe4:	e00e      	b.n	8001004 <__adddf3+0xd0>
 8000fe6:	f1a5 0520 	sub.w	r5, r5, #32
 8000fea:	f10e 0e20 	add.w	lr, lr, #32
 8000fee:	2a01      	cmp	r2, #1
 8000ff0:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000ff4:	bf28      	it	cs
 8000ff6:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000ffa:	fa43 f305 	asr.w	r3, r3, r5
 8000ffe:	18c0      	adds	r0, r0, r3
 8001000:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8001004:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8001008:	d507      	bpl.n	800101a <__adddf3+0xe6>
 800100a:	f04f 0e00 	mov.w	lr, #0
 800100e:	f1dc 0c00 	rsbs	ip, ip, #0
 8001012:	eb7e 0000 	sbcs.w	r0, lr, r0
 8001016:	eb6e 0101 	sbc.w	r1, lr, r1
 800101a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800101e:	d31b      	bcc.n	8001058 <__adddf3+0x124>
 8001020:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8001024:	d30c      	bcc.n	8001040 <__adddf3+0x10c>
 8001026:	0849      	lsrs	r1, r1, #1
 8001028:	ea5f 0030 	movs.w	r0, r0, rrx
 800102c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8001030:	f104 0401 	add.w	r4, r4, #1
 8001034:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8001038:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800103c:	f080 809a 	bcs.w	8001174 <__adddf3+0x240>
 8001040:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8001044:	bf08      	it	eq
 8001046:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800104a:	f150 0000 	adcs.w	r0, r0, #0
 800104e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8001052:	ea41 0105 	orr.w	r1, r1, r5
 8001056:	bd30      	pop	{r4, r5, pc}
 8001058:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800105c:	4140      	adcs	r0, r0
 800105e:	eb41 0101 	adc.w	r1, r1, r1
 8001062:	3c01      	subs	r4, #1
 8001064:	bf28      	it	cs
 8001066:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800106a:	d2e9      	bcs.n	8001040 <__adddf3+0x10c>
 800106c:	f091 0f00 	teq	r1, #0
 8001070:	bf04      	itt	eq
 8001072:	4601      	moveq	r1, r0
 8001074:	2000      	moveq	r0, #0
 8001076:	fab1 f381 	clz	r3, r1
 800107a:	bf08      	it	eq
 800107c:	3320      	addeq	r3, #32
 800107e:	f1a3 030b 	sub.w	r3, r3, #11
 8001082:	f1b3 0220 	subs.w	r2, r3, #32
 8001086:	da0c      	bge.n	80010a2 <__adddf3+0x16e>
 8001088:	320c      	adds	r2, #12
 800108a:	dd08      	ble.n	800109e <__adddf3+0x16a>
 800108c:	f102 0c14 	add.w	ip, r2, #20
 8001090:	f1c2 020c 	rsb	r2, r2, #12
 8001094:	fa01 f00c 	lsl.w	r0, r1, ip
 8001098:	fa21 f102 	lsr.w	r1, r1, r2
 800109c:	e00c      	b.n	80010b8 <__adddf3+0x184>
 800109e:	f102 0214 	add.w	r2, r2, #20
 80010a2:	bfd8      	it	le
 80010a4:	f1c2 0c20 	rsble	ip, r2, #32
 80010a8:	fa01 f102 	lsl.w	r1, r1, r2
 80010ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80010b0:	bfdc      	itt	le
 80010b2:	ea41 010c 	orrle.w	r1, r1, ip
 80010b6:	4090      	lslle	r0, r2
 80010b8:	1ae4      	subs	r4, r4, r3
 80010ba:	bfa2      	ittt	ge
 80010bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80010c0:	4329      	orrge	r1, r5
 80010c2:	bd30      	popge	{r4, r5, pc}
 80010c4:	ea6f 0404 	mvn.w	r4, r4
 80010c8:	3c1f      	subs	r4, #31
 80010ca:	da1c      	bge.n	8001106 <__adddf3+0x1d2>
 80010cc:	340c      	adds	r4, #12
 80010ce:	dc0e      	bgt.n	80010ee <__adddf3+0x1ba>
 80010d0:	f104 0414 	add.w	r4, r4, #20
 80010d4:	f1c4 0220 	rsb	r2, r4, #32
 80010d8:	fa20 f004 	lsr.w	r0, r0, r4
 80010dc:	fa01 f302 	lsl.w	r3, r1, r2
 80010e0:	ea40 0003 	orr.w	r0, r0, r3
 80010e4:	fa21 f304 	lsr.w	r3, r1, r4
 80010e8:	ea45 0103 	orr.w	r1, r5, r3
 80010ec:	bd30      	pop	{r4, r5, pc}
 80010ee:	f1c4 040c 	rsb	r4, r4, #12
 80010f2:	f1c4 0220 	rsb	r2, r4, #32
 80010f6:	fa20 f002 	lsr.w	r0, r0, r2
 80010fa:	fa01 f304 	lsl.w	r3, r1, r4
 80010fe:	ea40 0003 	orr.w	r0, r0, r3
 8001102:	4629      	mov	r1, r5
 8001104:	bd30      	pop	{r4, r5, pc}
 8001106:	fa21 f004 	lsr.w	r0, r1, r4
 800110a:	4629      	mov	r1, r5
 800110c:	bd30      	pop	{r4, r5, pc}
 800110e:	f094 0f00 	teq	r4, #0
 8001112:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8001116:	bf06      	itte	eq
 8001118:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800111c:	3401      	addeq	r4, #1
 800111e:	3d01      	subne	r5, #1
 8001120:	e74e      	b.n	8000fc0 <__adddf3+0x8c>
 8001122:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8001126:	bf18      	it	ne
 8001128:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800112c:	d029      	beq.n	8001182 <__adddf3+0x24e>
 800112e:	ea94 0f05 	teq	r4, r5
 8001132:	bf08      	it	eq
 8001134:	ea90 0f02 	teqeq	r0, r2
 8001138:	d005      	beq.n	8001146 <__adddf3+0x212>
 800113a:	ea54 0c00 	orrs.w	ip, r4, r0
 800113e:	bf04      	itt	eq
 8001140:	4619      	moveq	r1, r3
 8001142:	4610      	moveq	r0, r2
 8001144:	bd30      	pop	{r4, r5, pc}
 8001146:	ea91 0f03 	teq	r1, r3
 800114a:	bf1e      	ittt	ne
 800114c:	2100      	movne	r1, #0
 800114e:	2000      	movne	r0, #0
 8001150:	bd30      	popne	{r4, r5, pc}
 8001152:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8001156:	d105      	bne.n	8001164 <__adddf3+0x230>
 8001158:	0040      	lsls	r0, r0, #1
 800115a:	4149      	adcs	r1, r1
 800115c:	bf28      	it	cs
 800115e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8001162:	bd30      	pop	{r4, r5, pc}
 8001164:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8001168:	bf3c      	itt	cc
 800116a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800116e:	bd30      	popcc	{r4, r5, pc}
 8001170:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8001174:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8001178:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800117c:	f04f 0000 	mov.w	r0, #0
 8001180:	bd30      	pop	{r4, r5, pc}
 8001182:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8001186:	bf1a      	itte	ne
 8001188:	4619      	movne	r1, r3
 800118a:	4610      	movne	r0, r2
 800118c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8001190:	bf1c      	itt	ne
 8001192:	460b      	movne	r3, r1
 8001194:	4602      	movne	r2, r0
 8001196:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800119a:	bf06      	itte	eq
 800119c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80011a0:	ea91 0f03 	teqeq	r1, r3
 80011a4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80011a8:	bd30      	pop	{r4, r5, pc}
 80011aa:	bf00      	nop

080011ac <__aeabi_ui2d>:
 80011ac:	f090 0f00 	teq	r0, #0
 80011b0:	bf04      	itt	eq
 80011b2:	2100      	moveq	r1, #0
 80011b4:	4770      	bxeq	lr
 80011b6:	b530      	push	{r4, r5, lr}
 80011b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80011bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80011c0:	f04f 0500 	mov.w	r5, #0
 80011c4:	f04f 0100 	mov.w	r1, #0
 80011c8:	e750      	b.n	800106c <__adddf3+0x138>
 80011ca:	bf00      	nop

080011cc <__aeabi_i2d>:
 80011cc:	f090 0f00 	teq	r0, #0
 80011d0:	bf04      	itt	eq
 80011d2:	2100      	moveq	r1, #0
 80011d4:	4770      	bxeq	lr
 80011d6:	b530      	push	{r4, r5, lr}
 80011d8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80011dc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80011e0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80011e4:	bf48      	it	mi
 80011e6:	4240      	negmi	r0, r0
 80011e8:	f04f 0100 	mov.w	r1, #0
 80011ec:	e73e      	b.n	800106c <__adddf3+0x138>
 80011ee:	bf00      	nop

080011f0 <__aeabi_f2d>:
 80011f0:	0042      	lsls	r2, r0, #1
 80011f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80011f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80011fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80011fe:	bf1f      	itttt	ne
 8001200:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8001204:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8001208:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800120c:	4770      	bxne	lr
 800120e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8001212:	bf08      	it	eq
 8001214:	4770      	bxeq	lr
 8001216:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800121a:	bf04      	itt	eq
 800121c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8001220:	4770      	bxeq	lr
 8001222:	b530      	push	{r4, r5, lr}
 8001224:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8001228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800122c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8001230:	e71c      	b.n	800106c <__adddf3+0x138>
 8001232:	bf00      	nop

08001234 <__aeabi_ul2d>:
 8001234:	ea50 0201 	orrs.w	r2, r0, r1
 8001238:	bf08      	it	eq
 800123a:	4770      	bxeq	lr
 800123c:	b530      	push	{r4, r5, lr}
 800123e:	f04f 0500 	mov.w	r5, #0
 8001242:	e00a      	b.n	800125a <__aeabi_l2d+0x16>

08001244 <__aeabi_l2d>:
 8001244:	ea50 0201 	orrs.w	r2, r0, r1
 8001248:	bf08      	it	eq
 800124a:	4770      	bxeq	lr
 800124c:	b530      	push	{r4, r5, lr}
 800124e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8001252:	d502      	bpl.n	800125a <__aeabi_l2d+0x16>
 8001254:	4240      	negs	r0, r0
 8001256:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800125a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800125e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8001262:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8001266:	f43f aed8 	beq.w	800101a <__adddf3+0xe6>
 800126a:	f04f 0203 	mov.w	r2, #3
 800126e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8001272:	bf18      	it	ne
 8001274:	3203      	addne	r2, #3
 8001276:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800127a:	bf18      	it	ne
 800127c:	3203      	addne	r2, #3
 800127e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8001282:	f1c2 0320 	rsb	r3, r2, #32
 8001286:	fa00 fc03 	lsl.w	ip, r0, r3
 800128a:	fa20 f002 	lsr.w	r0, r0, r2
 800128e:	fa01 fe03 	lsl.w	lr, r1, r3
 8001292:	ea40 000e 	orr.w	r0, r0, lr
 8001296:	fa21 f102 	lsr.w	r1, r1, r2
 800129a:	4414      	add	r4, r2
 800129c:	e6bd      	b.n	800101a <__adddf3+0xe6>
 800129e:	bf00      	nop

080012a0 <__gedf2>:
 80012a0:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80012a4:	e006      	b.n	80012b4 <__cmpdf2+0x4>
 80012a6:	bf00      	nop

080012a8 <__ledf2>:
 80012a8:	f04f 0c01 	mov.w	ip, #1
 80012ac:	e002      	b.n	80012b4 <__cmpdf2+0x4>
 80012ae:	bf00      	nop

080012b0 <__cmpdf2>:
 80012b0:	f04f 0c01 	mov.w	ip, #1
 80012b4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80012b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80012bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80012c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80012c4:	bf18      	it	ne
 80012c6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80012ca:	d01b      	beq.n	8001304 <__cmpdf2+0x54>
 80012cc:	b001      	add	sp, #4
 80012ce:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80012d2:	bf0c      	ite	eq
 80012d4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80012d8:	ea91 0f03 	teqne	r1, r3
 80012dc:	bf02      	ittt	eq
 80012de:	ea90 0f02 	teqeq	r0, r2
 80012e2:	2000      	moveq	r0, #0
 80012e4:	4770      	bxeq	lr
 80012e6:	f110 0f00 	cmn.w	r0, #0
 80012ea:	ea91 0f03 	teq	r1, r3
 80012ee:	bf58      	it	pl
 80012f0:	4299      	cmppl	r1, r3
 80012f2:	bf08      	it	eq
 80012f4:	4290      	cmpeq	r0, r2
 80012f6:	bf2c      	ite	cs
 80012f8:	17d8      	asrcs	r0, r3, #31
 80012fa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80012fe:	f040 0001 	orr.w	r0, r0, #1
 8001302:	4770      	bx	lr
 8001304:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8001308:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800130c:	d102      	bne.n	8001314 <__cmpdf2+0x64>
 800130e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8001312:	d107      	bne.n	8001324 <__cmpdf2+0x74>
 8001314:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001318:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800131c:	d1d6      	bne.n	80012cc <__cmpdf2+0x1c>
 800131e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8001322:	d0d3      	beq.n	80012cc <__cmpdf2+0x1c>
 8001324:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop

0800132c <__aeabi_cdrcmple>:
 800132c:	4684      	mov	ip, r0
 800132e:	4610      	mov	r0, r2
 8001330:	4662      	mov	r2, ip
 8001332:	468c      	mov	ip, r1
 8001334:	4619      	mov	r1, r3
 8001336:	4663      	mov	r3, ip
 8001338:	e000      	b.n	800133c <__aeabi_cdcmpeq>
 800133a:	bf00      	nop

0800133c <__aeabi_cdcmpeq>:
 800133c:	b501      	push	{r0, lr}
 800133e:	f7ff ffb7 	bl	80012b0 <__cmpdf2>
 8001342:	2800      	cmp	r0, #0
 8001344:	bf48      	it	mi
 8001346:	f110 0f00 	cmnmi.w	r0, #0
 800134a:	bd01      	pop	{r0, pc}

0800134c <__aeabi_dcmpeq>:
 800134c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001350:	f7ff fff4 	bl	800133c <__aeabi_cdcmpeq>
 8001354:	bf0c      	ite	eq
 8001356:	2001      	moveq	r0, #1
 8001358:	2000      	movne	r0, #0
 800135a:	f85d fb08 	ldr.w	pc, [sp], #8
 800135e:	bf00      	nop

08001360 <__aeabi_dcmplt>:
 8001360:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001364:	f7ff ffea 	bl	800133c <__aeabi_cdcmpeq>
 8001368:	bf34      	ite	cc
 800136a:	2001      	movcc	r0, #1
 800136c:	2000      	movcs	r0, #0
 800136e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001372:	bf00      	nop

08001374 <__aeabi_dcmple>:
 8001374:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001378:	f7ff ffe0 	bl	800133c <__aeabi_cdcmpeq>
 800137c:	bf94      	ite	ls
 800137e:	2001      	movls	r0, #1
 8001380:	2000      	movhi	r0, #0
 8001382:	f85d fb08 	ldr.w	pc, [sp], #8
 8001386:	bf00      	nop

08001388 <__aeabi_dcmpge>:
 8001388:	f84d ed08 	str.w	lr, [sp, #-8]!
 800138c:	f7ff ffce 	bl	800132c <__aeabi_cdrcmple>
 8001390:	bf94      	ite	ls
 8001392:	2001      	movls	r0, #1
 8001394:	2000      	movhi	r0, #0
 8001396:	f85d fb08 	ldr.w	pc, [sp], #8
 800139a:	bf00      	nop

0800139c <__aeabi_dcmpgt>:
 800139c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80013a0:	f7ff ffc4 	bl	800132c <__aeabi_cdrcmple>
 80013a4:	bf34      	ite	cc
 80013a6:	2001      	movcc	r0, #1
 80013a8:	2000      	movcs	r0, #0
 80013aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80013ae:	bf00      	nop

080013b0 <__aeabi_uldivmod>:
 80013b0:	b953      	cbnz	r3, 80013c8 <__aeabi_uldivmod+0x18>
 80013b2:	b94a      	cbnz	r2, 80013c8 <__aeabi_uldivmod+0x18>
 80013b4:	2900      	cmp	r1, #0
 80013b6:	bf08      	it	eq
 80013b8:	2800      	cmpeq	r0, #0
 80013ba:	bf1c      	itt	ne
 80013bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80013c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80013c4:	f000 b96a 	b.w	800169c <__aeabi_idiv0>
 80013c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80013cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80013d0:	f000 f806 	bl	80013e0 <__udivmoddi4>
 80013d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80013d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80013dc:	b004      	add	sp, #16
 80013de:	4770      	bx	lr

080013e0 <__udivmoddi4>:
 80013e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80013e4:	9d08      	ldr	r5, [sp, #32]
 80013e6:	460c      	mov	r4, r1
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d14e      	bne.n	800148a <__udivmoddi4+0xaa>
 80013ec:	4694      	mov	ip, r2
 80013ee:	458c      	cmp	ip, r1
 80013f0:	4686      	mov	lr, r0
 80013f2:	fab2 f282 	clz	r2, r2
 80013f6:	d962      	bls.n	80014be <__udivmoddi4+0xde>
 80013f8:	b14a      	cbz	r2, 800140e <__udivmoddi4+0x2e>
 80013fa:	f1c2 0320 	rsb	r3, r2, #32
 80013fe:	4091      	lsls	r1, r2
 8001400:	fa20 f303 	lsr.w	r3, r0, r3
 8001404:	fa0c fc02 	lsl.w	ip, ip, r2
 8001408:	4319      	orrs	r1, r3
 800140a:	fa00 fe02 	lsl.w	lr, r0, r2
 800140e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001412:	fa1f f68c 	uxth.w	r6, ip
 8001416:	fbb1 f4f7 	udiv	r4, r1, r7
 800141a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800141e:	fb07 1114 	mls	r1, r7, r4, r1
 8001422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001426:	fb04 f106 	mul.w	r1, r4, r6
 800142a:	4299      	cmp	r1, r3
 800142c:	d90a      	bls.n	8001444 <__udivmoddi4+0x64>
 800142e:	eb1c 0303 	adds.w	r3, ip, r3
 8001432:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8001436:	f080 8112 	bcs.w	800165e <__udivmoddi4+0x27e>
 800143a:	4299      	cmp	r1, r3
 800143c:	f240 810f 	bls.w	800165e <__udivmoddi4+0x27e>
 8001440:	3c02      	subs	r4, #2
 8001442:	4463      	add	r3, ip
 8001444:	1a59      	subs	r1, r3, r1
 8001446:	fa1f f38e 	uxth.w	r3, lr
 800144a:	fbb1 f0f7 	udiv	r0, r1, r7
 800144e:	fb07 1110 	mls	r1, r7, r0, r1
 8001452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001456:	fb00 f606 	mul.w	r6, r0, r6
 800145a:	429e      	cmp	r6, r3
 800145c:	d90a      	bls.n	8001474 <__udivmoddi4+0x94>
 800145e:	eb1c 0303 	adds.w	r3, ip, r3
 8001462:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8001466:	f080 80fc 	bcs.w	8001662 <__udivmoddi4+0x282>
 800146a:	429e      	cmp	r6, r3
 800146c:	f240 80f9 	bls.w	8001662 <__udivmoddi4+0x282>
 8001470:	4463      	add	r3, ip
 8001472:	3802      	subs	r0, #2
 8001474:	1b9b      	subs	r3, r3, r6
 8001476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800147a:	2100      	movs	r1, #0
 800147c:	b11d      	cbz	r5, 8001486 <__udivmoddi4+0xa6>
 800147e:	40d3      	lsrs	r3, r2
 8001480:	2200      	movs	r2, #0
 8001482:	e9c5 3200 	strd	r3, r2, [r5]
 8001486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800148a:	428b      	cmp	r3, r1
 800148c:	d905      	bls.n	800149a <__udivmoddi4+0xba>
 800148e:	b10d      	cbz	r5, 8001494 <__udivmoddi4+0xb4>
 8001490:	e9c5 0100 	strd	r0, r1, [r5]
 8001494:	2100      	movs	r1, #0
 8001496:	4608      	mov	r0, r1
 8001498:	e7f5      	b.n	8001486 <__udivmoddi4+0xa6>
 800149a:	fab3 f183 	clz	r1, r3
 800149e:	2900      	cmp	r1, #0
 80014a0:	d146      	bne.n	8001530 <__udivmoddi4+0x150>
 80014a2:	42a3      	cmp	r3, r4
 80014a4:	d302      	bcc.n	80014ac <__udivmoddi4+0xcc>
 80014a6:	4290      	cmp	r0, r2
 80014a8:	f0c0 80f0 	bcc.w	800168c <__udivmoddi4+0x2ac>
 80014ac:	1a86      	subs	r6, r0, r2
 80014ae:	eb64 0303 	sbc.w	r3, r4, r3
 80014b2:	2001      	movs	r0, #1
 80014b4:	2d00      	cmp	r5, #0
 80014b6:	d0e6      	beq.n	8001486 <__udivmoddi4+0xa6>
 80014b8:	e9c5 6300 	strd	r6, r3, [r5]
 80014bc:	e7e3      	b.n	8001486 <__udivmoddi4+0xa6>
 80014be:	2a00      	cmp	r2, #0
 80014c0:	f040 8090 	bne.w	80015e4 <__udivmoddi4+0x204>
 80014c4:	eba1 040c 	sub.w	r4, r1, ip
 80014c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80014cc:	fa1f f78c 	uxth.w	r7, ip
 80014d0:	2101      	movs	r1, #1
 80014d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80014d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80014da:	fb08 4416 	mls	r4, r8, r6, r4
 80014de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80014e2:	fb07 f006 	mul.w	r0, r7, r6
 80014e6:	4298      	cmp	r0, r3
 80014e8:	d908      	bls.n	80014fc <__udivmoddi4+0x11c>
 80014ea:	eb1c 0303 	adds.w	r3, ip, r3
 80014ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80014f2:	d202      	bcs.n	80014fa <__udivmoddi4+0x11a>
 80014f4:	4298      	cmp	r0, r3
 80014f6:	f200 80cd 	bhi.w	8001694 <__udivmoddi4+0x2b4>
 80014fa:	4626      	mov	r6, r4
 80014fc:	1a1c      	subs	r4, r3, r0
 80014fe:	fa1f f38e 	uxth.w	r3, lr
 8001502:	fbb4 f0f8 	udiv	r0, r4, r8
 8001506:	fb08 4410 	mls	r4, r8, r0, r4
 800150a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800150e:	fb00 f707 	mul.w	r7, r0, r7
 8001512:	429f      	cmp	r7, r3
 8001514:	d908      	bls.n	8001528 <__udivmoddi4+0x148>
 8001516:	eb1c 0303 	adds.w	r3, ip, r3
 800151a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800151e:	d202      	bcs.n	8001526 <__udivmoddi4+0x146>
 8001520:	429f      	cmp	r7, r3
 8001522:	f200 80b0 	bhi.w	8001686 <__udivmoddi4+0x2a6>
 8001526:	4620      	mov	r0, r4
 8001528:	1bdb      	subs	r3, r3, r7
 800152a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800152e:	e7a5      	b.n	800147c <__udivmoddi4+0x9c>
 8001530:	f1c1 0620 	rsb	r6, r1, #32
 8001534:	408b      	lsls	r3, r1
 8001536:	fa22 f706 	lsr.w	r7, r2, r6
 800153a:	431f      	orrs	r7, r3
 800153c:	fa20 fc06 	lsr.w	ip, r0, r6
 8001540:	fa04 f301 	lsl.w	r3, r4, r1
 8001544:	ea43 030c 	orr.w	r3, r3, ip
 8001548:	40f4      	lsrs	r4, r6
 800154a:	fa00 f801 	lsl.w	r8, r0, r1
 800154e:	0c38      	lsrs	r0, r7, #16
 8001550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001554:	fbb4 fef0 	udiv	lr, r4, r0
 8001558:	fa1f fc87 	uxth.w	ip, r7
 800155c:	fb00 441e 	mls	r4, r0, lr, r4
 8001560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001564:	fb0e f90c 	mul.w	r9, lr, ip
 8001568:	45a1      	cmp	r9, r4
 800156a:	fa02 f201 	lsl.w	r2, r2, r1
 800156e:	d90a      	bls.n	8001586 <__udivmoddi4+0x1a6>
 8001570:	193c      	adds	r4, r7, r4
 8001572:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8001576:	f080 8084 	bcs.w	8001682 <__udivmoddi4+0x2a2>
 800157a:	45a1      	cmp	r9, r4
 800157c:	f240 8081 	bls.w	8001682 <__udivmoddi4+0x2a2>
 8001580:	f1ae 0e02 	sub.w	lr, lr, #2
 8001584:	443c      	add	r4, r7
 8001586:	eba4 0409 	sub.w	r4, r4, r9
 800158a:	fa1f f983 	uxth.w	r9, r3
 800158e:	fbb4 f3f0 	udiv	r3, r4, r0
 8001592:	fb00 4413 	mls	r4, r0, r3, r4
 8001596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800159a:	fb03 fc0c 	mul.w	ip, r3, ip
 800159e:	45a4      	cmp	ip, r4
 80015a0:	d907      	bls.n	80015b2 <__udivmoddi4+0x1d2>
 80015a2:	193c      	adds	r4, r7, r4
 80015a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80015a8:	d267      	bcs.n	800167a <__udivmoddi4+0x29a>
 80015aa:	45a4      	cmp	ip, r4
 80015ac:	d965      	bls.n	800167a <__udivmoddi4+0x29a>
 80015ae:	3b02      	subs	r3, #2
 80015b0:	443c      	add	r4, r7
 80015b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80015b6:	fba0 9302 	umull	r9, r3, r0, r2
 80015ba:	eba4 040c 	sub.w	r4, r4, ip
 80015be:	429c      	cmp	r4, r3
 80015c0:	46ce      	mov	lr, r9
 80015c2:	469c      	mov	ip, r3
 80015c4:	d351      	bcc.n	800166a <__udivmoddi4+0x28a>
 80015c6:	d04e      	beq.n	8001666 <__udivmoddi4+0x286>
 80015c8:	b155      	cbz	r5, 80015e0 <__udivmoddi4+0x200>
 80015ca:	ebb8 030e 	subs.w	r3, r8, lr
 80015ce:	eb64 040c 	sbc.w	r4, r4, ip
 80015d2:	fa04 f606 	lsl.w	r6, r4, r6
 80015d6:	40cb      	lsrs	r3, r1
 80015d8:	431e      	orrs	r6, r3
 80015da:	40cc      	lsrs	r4, r1
 80015dc:	e9c5 6400 	strd	r6, r4, [r5]
 80015e0:	2100      	movs	r1, #0
 80015e2:	e750      	b.n	8001486 <__udivmoddi4+0xa6>
 80015e4:	f1c2 0320 	rsb	r3, r2, #32
 80015e8:	fa20 f103 	lsr.w	r1, r0, r3
 80015ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80015f0:	fa24 f303 	lsr.w	r3, r4, r3
 80015f4:	4094      	lsls	r4, r2
 80015f6:	430c      	orrs	r4, r1
 80015f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80015fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8001600:	fa1f f78c 	uxth.w	r7, ip
 8001604:	fbb3 f0f8 	udiv	r0, r3, r8
 8001608:	fb08 3110 	mls	r1, r8, r0, r3
 800160c:	0c23      	lsrs	r3, r4, #16
 800160e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001612:	fb00 f107 	mul.w	r1, r0, r7
 8001616:	4299      	cmp	r1, r3
 8001618:	d908      	bls.n	800162c <__udivmoddi4+0x24c>
 800161a:	eb1c 0303 	adds.w	r3, ip, r3
 800161e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8001622:	d22c      	bcs.n	800167e <__udivmoddi4+0x29e>
 8001624:	4299      	cmp	r1, r3
 8001626:	d92a      	bls.n	800167e <__udivmoddi4+0x29e>
 8001628:	3802      	subs	r0, #2
 800162a:	4463      	add	r3, ip
 800162c:	1a5b      	subs	r3, r3, r1
 800162e:	b2a4      	uxth	r4, r4
 8001630:	fbb3 f1f8 	udiv	r1, r3, r8
 8001634:	fb08 3311 	mls	r3, r8, r1, r3
 8001638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800163c:	fb01 f307 	mul.w	r3, r1, r7
 8001640:	42a3      	cmp	r3, r4
 8001642:	d908      	bls.n	8001656 <__udivmoddi4+0x276>
 8001644:	eb1c 0404 	adds.w	r4, ip, r4
 8001648:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800164c:	d213      	bcs.n	8001676 <__udivmoddi4+0x296>
 800164e:	42a3      	cmp	r3, r4
 8001650:	d911      	bls.n	8001676 <__udivmoddi4+0x296>
 8001652:	3902      	subs	r1, #2
 8001654:	4464      	add	r4, ip
 8001656:	1ae4      	subs	r4, r4, r3
 8001658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800165c:	e739      	b.n	80014d2 <__udivmoddi4+0xf2>
 800165e:	4604      	mov	r4, r0
 8001660:	e6f0      	b.n	8001444 <__udivmoddi4+0x64>
 8001662:	4608      	mov	r0, r1
 8001664:	e706      	b.n	8001474 <__udivmoddi4+0x94>
 8001666:	45c8      	cmp	r8, r9
 8001668:	d2ae      	bcs.n	80015c8 <__udivmoddi4+0x1e8>
 800166a:	ebb9 0e02 	subs.w	lr, r9, r2
 800166e:	eb63 0c07 	sbc.w	ip, r3, r7
 8001672:	3801      	subs	r0, #1
 8001674:	e7a8      	b.n	80015c8 <__udivmoddi4+0x1e8>
 8001676:	4631      	mov	r1, r6
 8001678:	e7ed      	b.n	8001656 <__udivmoddi4+0x276>
 800167a:	4603      	mov	r3, r0
 800167c:	e799      	b.n	80015b2 <__udivmoddi4+0x1d2>
 800167e:	4630      	mov	r0, r6
 8001680:	e7d4      	b.n	800162c <__udivmoddi4+0x24c>
 8001682:	46d6      	mov	lr, sl
 8001684:	e77f      	b.n	8001586 <__udivmoddi4+0x1a6>
 8001686:	4463      	add	r3, ip
 8001688:	3802      	subs	r0, #2
 800168a:	e74d      	b.n	8001528 <__udivmoddi4+0x148>
 800168c:	4606      	mov	r6, r0
 800168e:	4623      	mov	r3, r4
 8001690:	4608      	mov	r0, r1
 8001692:	e70f      	b.n	80014b4 <__udivmoddi4+0xd4>
 8001694:	3e02      	subs	r6, #2
 8001696:	4463      	add	r3, ip
 8001698:	e730      	b.n	80014fc <__udivmoddi4+0x11c>
 800169a:	bf00      	nop

0800169c <__aeabi_idiv0>:
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop

080016a0 <decompose_z1>:
 *
 * Arguments:   - int32_t r: input element
 *              - int32_t *lowbits: pointer to output element lb
 *              - int32_t *highbits: pointer to output element hb
 **************************************************/
void decompose_z1(int32_t *highbits, int32_t *lowbits, const int32_t r) {
 80016a0:	b480      	push	{r7}
 80016a2:	b08b      	sub	sp, #44	@ 0x2c
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
    const int alpha = 256; // TODO magic numbers!
 80016ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016b0:	627b      	str	r3, [r7, #36]	@ 0x24
    const int log_alpha = 8;
 80016b2:	2308      	movs	r3, #8
 80016b4:	623b      	str	r3, [r7, #32]

    int32_t lb, center;
    uint32_t alpha_mask = alpha - 1;
 80016b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b8:	3b01      	subs	r3, #1
 80016ba:	61fb      	str	r3, [r7, #28]

    lb = r & alpha_mask;
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	4013      	ands	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
    center = ((alpha >> 1) - (lb + 1)) >> 31; // if lb >= HALF_ALPHA
 80016c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c6:	105a      	asrs	r2, r3, #1
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	3301      	adds	r3, #1
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	17db      	asrs	r3, r3, #31
 80016d0:	617b      	str	r3, [r7, #20]
    lb -= alpha & center;
 80016d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	4013      	ands	r3, r2
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	61bb      	str	r3, [r7, #24]
    *lowbits = lb;
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	601a      	str	r2, [r3, #0]
    *highbits = (r + (alpha >> 1)) >> log_alpha;
 80016e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e6:	105a      	asrs	r2, r3, #1
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	441a      	add	r2, r3
 80016ec:	6a3b      	ldr	r3, [r7, #32]
 80016ee:	411a      	asrs	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	601a      	str	r2, [r3, #0]
}
 80016f4:	bf00      	nop
 80016f6:	372c      	adds	r7, #44	@ 0x2c
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <decompose_hint>:
 *
 * Arguments:   - int32_t r: input element
 *              - int32_t *highbits: pointer to output element hb
 **************************************************/

void decompose_hint(int32_t *highbits, const int32_t r) {
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
    int32_t hb, edgecase;

    hb = (r + HALF_ALPHA_HINT) >> LOG_ALPHA_HINT;
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001710:	125b      	asrs	r3, r3, #9
 8001712:	60fb      	str	r3, [r7, #12]
    edgecase =
        ((DQ - 2) / ALPHA_HINT - (hb + 1)) >> 31; // if hb == (DQ-2)/ALPHA
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f1c3 03fb 	rsb	r3, r3, #251	@ 0xfb
    edgecase =
 800171a:	17db      	asrs	r3, r3, #31
 800171c:	60bb      	str	r3, [r7, #8]
    hb -= (DQ - 2) / ALPHA_HINT & edgecase;       // hb = 0
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8001724:	68fa      	ldr	r2, [r7, #12]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	60fb      	str	r3, [r7, #12]

    *highbits = hb;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	68fa      	ldr	r2, [r7, #12]
 800172e:	601a      	str	r2, [r3, #0]
}
 8001730:	bf00      	nop
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <decompose_vk>:
 * Arguments:   - int32_t a: input element
 *              - int32_t *a0: pointer to output element a0
 *
 * Returns a1
 **************************************************/
int32_t decompose_vk(int32_t *a0, const int32_t a) {
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
#if D > 1
#error "Only implemented for D = 1"
#endif
    *a0 = a & 1;
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	f003 0201 	and.w	r2, r3, #1
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	601a      	str	r2, [r3, #0]
    *a0 -= ((a >> 1) & *a0) << 1;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	1059      	asrs	r1, r3, #1
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	400b      	ands	r3, r1
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	1ad2      	subs	r2, r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	601a      	str	r2, [r3, #0]
    return (a - *a0) >> 1;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	683a      	ldr	r2, [r7, #0]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	105b      	asrs	r3, r3, #1
}
 8001770:	4618      	mov	r0, r3
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <RansEncInit>:
// State for a rANS encoder. Yep, that's all there is to it.
typedef uint32_t RansState;

// Initialize a rANS encoder.
static inline void RansEncInit(RansState* r)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
    *r = RANS_BYTE_L;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800178a:	601a      	str	r2, [r3, #0]
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <RansEncFlush>:
    *r = ((x / freq) << scale_bits) + (x % freq) + start;
}

// Flushes the rANS encoder.
static inline void RansEncFlush(RansState* r, uint8_t** pptr)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
    uint32_t x = *r;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	60fb      	str	r3, [r7, #12]
    uint8_t* ptr = *pptr;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	60bb      	str	r3, [r7, #8]

    ptr -= 4;
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	3b04      	subs	r3, #4
 80017b2:	60bb      	str	r3, [r7, #8]
    ptr[0] = (uint8_t) (x >> 0);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	701a      	strb	r2, [r3, #0]
    ptr[1] = (uint8_t) (x >> 8);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	0a1a      	lsrs	r2, r3, #8
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	3301      	adds	r3, #1
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	701a      	strb	r2, [r3, #0]
    ptr[2] = (uint8_t) (x >> 16);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	0c1a      	lsrs	r2, r3, #16
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	3302      	adds	r3, #2
 80017d0:	b2d2      	uxtb	r2, r2
 80017d2:	701a      	strb	r2, [r3, #0]
    ptr[3] = (uint8_t) (x >> 24);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	0e1a      	lsrs	r2, r3, #24
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	3303      	adds	r3, #3
 80017dc:	b2d2      	uxtb	r2, r2
 80017de:	701a      	strb	r2, [r3, #0]

    *pptr = ptr;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	68ba      	ldr	r2, [r7, #8]
 80017e4:	601a      	str	r2, [r3, #0]
}
 80017e6:	bf00      	nop
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <RansDecInit>:

// Initializes a rANS decoder.
// Unlike the encoder, the decoder works forwards as you'd expect.
static inline int RansDecInit(RansState* r, uint8_t** pptr)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b085      	sub	sp, #20
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
 80017fa:	6039      	str	r1, [r7, #0]
    uint32_t x;
    uint8_t* ptr = *pptr;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	60fb      	str	r3, [r7, #12]

    x  = ptr[0] << 0;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	60bb      	str	r3, [r7, #8]
    x |= ptr[1] << 8;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	3301      	adds	r3, #1
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	021b      	lsls	r3, r3, #8
 8001810:	68ba      	ldr	r2, [r7, #8]
 8001812:	4313      	orrs	r3, r2
 8001814:	60bb      	str	r3, [r7, #8]
    x |= ptr[2] << 16;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	3302      	adds	r3, #2
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	041b      	lsls	r3, r3, #16
 800181e:	68ba      	ldr	r2, [r7, #8]
 8001820:	4313      	orrs	r3, r2
 8001822:	60bb      	str	r3, [r7, #8]
    x |= ptr[3] << 24;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	3303      	adds	r3, #3
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	061b      	lsls	r3, r3, #24
 800182c:	68ba      	ldr	r2, [r7, #8]
 800182e:	4313      	orrs	r3, r2
 8001830:	60bb      	str	r3, [r7, #8]
    if (x < RANS_BYTE_L || (RANS_BYTE_L << 8) <= x )
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001838:	d302      	bcc.n	8001840 <RansDecInit+0x4e>
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	2b00      	cmp	r3, #0
 800183e:	da01      	bge.n	8001844 <RansDecInit+0x52>
        return 1; // initial state out of range
 8001840:	2301      	movs	r3, #1
 8001842:	e009      	b.n	8001858 <RansDecInit+0x66>

    ptr += 4;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	3304      	adds	r3, #4
 8001848:	60fb      	str	r3, [r7, #12]
    *pptr = ptr;
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	601a      	str	r2, [r3, #0]
    *r = x;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68ba      	ldr	r2, [r7, #8]
 8001854:	601a      	str	r2, [r3, #0]
    return 0;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <RansDecGet>:

// Returns the current cumulative frequency (map it to a symbol yourself!)
static inline uint32_t RansDecGet(RansState* r, uint32_t scale_bits)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
    return *r & ((1u << scale_bits) - 1);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	2101      	movs	r1, #1
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	fa01 f303 	lsl.w	r3, r1, r3
 800187a:	3b01      	subs	r3, #1
 800187c:	4013      	ands	r3, r2
}
 800187e:	4618      	mov	r0, r3
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <RansDecAdvance>:

// Advances in the bit stream by "popping" a single symbol with range start
// "start" and frequency "freq". All frequencies are assumed to sum to "1 << scale_bits",
// and the resulting bytes get written to ptr (which is updated).
static inline void RansDecAdvance(RansState* r, uint8_t** pptr, const uint8_t* end, uint32_t start, uint32_t freq, uint32_t scale_bits)
{
 800188a:	b480      	push	{r7}
 800188c:	b089      	sub	sp, #36	@ 0x24
 800188e:	af00      	add	r7, sp, #0
 8001890:	60f8      	str	r0, [r7, #12]
 8001892:	60b9      	str	r1, [r7, #8]
 8001894:	607a      	str	r2, [r7, #4]
 8001896:	603b      	str	r3, [r7, #0]
    uint32_t mask = (1u << scale_bits) - 1;
 8001898:	2201      	movs	r2, #1
 800189a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	3b01      	subs	r3, #1
 80018a2:	617b      	str	r3, [r7, #20]

    // s, x = D(x)
    uint32_t x = *r;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	61fb      	str	r3, [r7, #28]
    x = freq * (x >> scale_bits) + (x & mask) - start;
 80018aa:	69fa      	ldr	r2, [r7, #28]
 80018ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018ae:	fa22 f303 	lsr.w	r3, r2, r3
 80018b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018b4:	fb03 f202 	mul.w	r2, r3, r2
 80018b8:	69f9      	ldr	r1, [r7, #28]
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	400b      	ands	r3, r1
 80018be:	441a      	add	r2, r3
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	61fb      	str	r3, [r7, #28]

    // renormalize
    if (x < RANS_BYTE_L && *pptr < end) {
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80018cc:	d21a      	bcs.n	8001904 <RansDecAdvance+0x7a>
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d915      	bls.n	8001904 <RansDecAdvance+0x7a>
        uint8_t* ptr = *pptr;
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	61bb      	str	r3, [r7, #24]
        do x = (x << 8) | *ptr++; while (x < RANS_BYTE_L && ptr < end);
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	021a      	lsls	r2, r3, #8
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	1c59      	adds	r1, r3, #1
 80018e6:	61b9      	str	r1, [r7, #24]
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	61fb      	str	r3, [r7, #28]
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80018f4:	d203      	bcs.n	80018fe <RansDecAdvance+0x74>
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d3ef      	bcc.n	80018de <RansDecAdvance+0x54>
        *pptr = ptr;
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	601a      	str	r2, [r3, #0]
    }

    *r = x;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	69fa      	ldr	r2, [r7, #28]
 8001908:	601a      	str	r2, [r3, #0]
}
 800190a:	bf00      	nop
 800190c:	3724      	adds	r7, #36	@ 0x24
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <RansEncPutSymbol>:
// Encodes a given symbol. This is faster than straight RansEnc since we can do
// multiplications instead of a divide.
//
// See RansEncSymbolInit for a description of how this works.
static inline void RansEncPutSymbol(RansState* r, uint8_t** pptr, RansEncSymbol const* sym)
{
 8001916:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800191a:	b089      	sub	sp, #36	@ 0x24
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
    RansAssert(sym->x_max != 0); // can't encode symbol with freq=0

    // renormalize
    uint32_t x = *r;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	61fb      	str	r3, [r7, #28]
    uint32_t x_max = sym->x_max;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	617b      	str	r3, [r7, #20]
    if (x >= x_max) {
 8001930:	69fa      	ldr	r2, [r7, #28]
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	429a      	cmp	r2, r3
 8001936:	d313      	bcc.n	8001960 <RansEncPutSymbol+0x4a>
        uint8_t* ptr = *pptr;
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	61bb      	str	r3, [r7, #24]
        do {
            *--ptr = (uint8_t) (x & 0xff);
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	3b01      	subs	r3, #1
 8001942:	61bb      	str	r3, [r7, #24]
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	b2da      	uxtb	r2, r3
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	701a      	strb	r2, [r3, #0]
            x >>= 8;
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	0a1b      	lsrs	r3, r3, #8
 8001950:	61fb      	str	r3, [r7, #28]
        } while (x >= x_max);
 8001952:	69fa      	ldr	r2, [r7, #28]
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	429a      	cmp	r2, r3
 8001958:	d2f1      	bcs.n	800193e <RansEncPutSymbol+0x28>
        *pptr = ptr;
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	601a      	str	r2, [r3, #0]

    // x = C(s,x)
    // NOTE: written this way so we get a 32-bit "multiply high" when
    // available. If you're on a 64-bit platform with cheap multiplies
    // (e.g. x64), just bake the +32 into rcp_shift.
    uint32_t q = (uint32_t) (((uint64_t)x * sym->rcp_freq) >> 32) >> sym->rcp_shift;
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	2200      	movs	r2, #0
 8001964:	469a      	mov	sl, r3
 8001966:	4693      	mov	fp, r2
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	4698      	mov	r8, r3
 8001970:	4691      	mov	r9, r2
 8001972:	fb08 f20b 	mul.w	r2, r8, fp
 8001976:	fb0a f309 	mul.w	r3, sl, r9
 800197a:	4413      	add	r3, r2
 800197c:	fbaa 4508 	umull	r4, r5, sl, r8
 8001980:	442b      	add	r3, r5
 8001982:	461d      	mov	r5, r3
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	f04f 0300 	mov.w	r3, #0
 800198c:	002a      	movs	r2, r5
 800198e:	2300      	movs	r3, #0
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	89db      	ldrh	r3, [r3, #14]
 8001994:	fa22 f303 	lsr.w	r3, r2, r3
 8001998:	613b      	str	r3, [r7, #16]
    *r = x + sym->bias + q * sym->cmpl_freq;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	689a      	ldr	r2, [r3, #8]
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	441a      	add	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	899b      	ldrh	r3, [r3, #12]
 80019a6:	4619      	mov	r1, r3
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	fb01 f303 	mul.w	r3, r1, r3
 80019ae:	441a      	add	r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	601a      	str	r2, [r3, #0]
}
 80019b4:	bf00      	nop
 80019b6:	3724      	adds	r7, #36	@ 0x24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80019be:	4770      	bx	lr

080019c0 <RansDecAdvanceSymbol>:

// Equivalent to RansDecAdvance that takes a symbol.
static inline void RansDecAdvanceSymbol(RansState* r, uint8_t** pptr, const uint8_t* end, RansDecSymbol const* sym, uint32_t scale_bits)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af02      	add	r7, sp, #8
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
 80019cc:	603b      	str	r3, [r7, #0]
    RansDecAdvance(r, pptr, end, sym->start, sym->freq, scale_bits);
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	4619      	mov	r1, r3
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	885b      	ldrh	r3, [r3, #2]
 80019d8:	461a      	mov	r2, r3
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	9301      	str	r3, [sp, #4]
 80019de:	9200      	str	r2, [sp, #0]
 80019e0:	460b      	mov	r3, r1
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f7ff ff4f 	bl	800188a <RansDecAdvance>
}
 80019ec:	bf00      	nop
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <RansDecVerify>:
    *r = x;
}

// Verify final state
static inline int RansDecVerify(const RansState* const r)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
    if (*r != RANS_BYTE_L)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001a04:	d001      	beq.n	8001a0a <RansDecVerify+0x16>
    {
        return 1; // the final state is inconsistent with the initial state
 8001a06:	2301      	movs	r3, #1
 8001a08:	e000      	b.n	8001a0c <RansDecVerify+0x18>
    }
    return 0;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <encode_h>:
 * Description: rANS encode polynomial vector h
 *
 * Arguments:   - uint8_t *buf: pointer to output buffer
 *              - const int32_t *h: pointer to polynomial vector h
 **************************************************/
uint16_t encode_h(uint8_t *buf, const int32_t *h) {
 8001a18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a1c:	b08d      	sub	sp, #52	@ 0x34
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
 8001a22:	6039      	str	r1, [r7, #0]
 8001a24:	466b      	mov	r3, sp
 8001a26:	461e      	mov	r6, r3
    size_t size_encoded;
    RansState rans;
    uint8_t *ptr;
    size_t size_h = N * K;
 8001a28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t tmp;
    uint8_t s;
    uint8_t encoding[size_h]; // size_h is a loose upper bound
 8001a2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a30:	460b      	mov	r3, r1
 8001a32:	3b01      	subs	r3, #1
 8001a34:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a36:	2300      	movs	r3, #0
 8001a38:	4688      	mov	r8, r1
 8001a3a:	4699      	mov	r9, r3
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	f04f 0300 	mov.w	r3, #0
 8001a44:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a48:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a4c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a50:	2300      	movs	r3, #0
 8001a52:	460c      	mov	r4, r1
 8001a54:	461d      	mov	r5, r3
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	f04f 0300 	mov.w	r3, #0
 8001a5e:	00eb      	lsls	r3, r5, #3
 8001a60:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a64:	00e2      	lsls	r2, r4, #3
 8001a66:	1dcb      	adds	r3, r1, #7
 8001a68:	08db      	lsrs	r3, r3, #3
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	ebad 0d03 	sub.w	sp, sp, r3
 8001a70:	466b      	mov	r3, sp
 8001a72:	3300      	adds	r3, #0
 8001a74:	623b      	str	r3, [r7, #32]

    RansEncInit(&rans);
 8001a76:	f107 0310 	add.w	r3, r7, #16
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fe7e 	bl	800177c <RansEncInit>
    ptr = encoding + size_h; // end of encoding buffer
 8001a80:	6a3a      	ldr	r2, [r7, #32]
 8001a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a84:	4413      	add	r3, r2
 8001a86:	60fb      	str	r3, [r7, #12]

    for (size_t i = size_h; i > 0; i--) {
 8001a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a8c:	e02f      	b.n	8001aee <encode_h+0xd6>
        tmp = h[i - 1];
 8001a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a90:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001a94:	3b01      	subs	r3, #1
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	61bb      	str	r3, [r7, #24]
        // check for very unlikely values that we do not encode
        // to make the encoding cheaper :
        if(H_CUT < tmp && tmp <= H_CUT + OFFSET_H) { 
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	2b06      	cmp	r3, #6
 8001aa4:	d904      	bls.n	8001ab0 <encode_h+0x98>
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	2bf5      	cmp	r3, #245	@ 0xf5
 8001aaa:	d801      	bhi.n	8001ab0 <encode_h+0x98>
            return 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	e037      	b.n	8001b20 <encode_h+0x108>
        } 
        // map the upper likely part of symbols next to the lower part
        // to have a dense and compact distribution: 
        tmp = (tmp > (H_CUT + OFFSET_H)) ? tmp - OFFSET_H : tmp;
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	2bf5      	cmp	r3, #245	@ 0xf5
 8001ab4:	d902      	bls.n	8001abc <encode_h+0xa4>
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	3bef      	subs	r3, #239	@ 0xef
 8001aba:	e000      	b.n	8001abe <encode_h+0xa6>
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	61bb      	str	r3, [r7, #24]
        s = (uint8_t) tmp;
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	75fb      	strb	r3, [r7, #23]

        RansEncPutSymbol(&rans, &ptr, &esyms_h[s]);
 8001ac4:	7dfb      	ldrb	r3, [r7, #23]
 8001ac6:	011b      	lsls	r3, r3, #4
 8001ac8:	4a18      	ldr	r2, [pc, #96]	@ (8001b2c <encode_h+0x114>)
 8001aca:	441a      	add	r2, r3
 8001acc:	f107 010c 	add.w	r1, r7, #12
 8001ad0:	f107 0310 	add.w	r3, r7, #16
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff ff1e 	bl	8001916 <RansEncPutSymbol>
        // check that at least 4 byte remain for memory safety:
        if (ptr < encoding + 4)
 8001ada:	6a3b      	ldr	r3, [r7, #32]
 8001adc:	1d1a      	adds	r2, r3, #4
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d901      	bls.n	8001ae8 <encode_h+0xd0>
        {
            return 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	e01b      	b.n	8001b20 <encode_h+0x108>
    for (size_t i = size_h; i > 0; i--) {
 8001ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aea:	3b01      	subs	r3, #1
 8001aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1cc      	bne.n	8001a8e <encode_h+0x76>
        }
    }

    RansEncFlush(&rans, &ptr);
 8001af4:	f107 020c 	add.w	r2, r7, #12
 8001af8:	f107 0310 	add.w	r3, r7, #16
 8001afc:	4611      	mov	r1, r2
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff fe4a 	bl	8001798 <RansEncFlush>

    size_encoded = encoding + size_h - ptr;
 8001b04:	6a3a      	ldr	r2, [r7, #32]
 8001b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b08:	441a      	add	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	61fb      	str	r3, [r7, #28]
    memcpy(buf, ptr, size_encoded);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	69fa      	ldr	r2, [r7, #28]
 8001b14:	4619      	mov	r1, r3
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f013 fd92 	bl	8015640 <memcpy>
    return size_encoded;
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	46b5      	mov	sp, r6
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3734      	adds	r7, #52	@ 0x34
 8001b26:	46bd      	mov	sp, r7
 8001b28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b2c:	20000000 	.word	0x20000000

08001b30 <decode_h>:
 * Description: rANS decode polynomial vector h
 *
 * Arguments:   - int32_t *h: pointer to polynomial vector h
 *              - uint8_t *buf: pointer to output buffer
 **************************************************/
uint16_t decode_h(int32_t *h, const uint8_t *buf, uint16_t size_in) {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08e      	sub	sp, #56	@ 0x38
 8001b34:	af02      	add	r7, sp, #8
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	80fb      	strh	r3, [r7, #6]
    size_t size_used;
    RansState rans;
    size_t size_h = N * K;
 8001b3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b42:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t tmp;
    uint8_t s;
    const uint8_t *buf_start = buf;
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	627b      	str	r3, [r7, #36]	@ 0x24
    const uint8_t *buf_end = buf + size_in;
 8001b48:	68ba      	ldr	r2, [r7, #8]
 8001b4a:	88fb      	ldrh	r3, [r7, #6]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	623b      	str	r3, [r7, #32]

    if(RansDecInit(&rans, (uint8_t **) &buf)) {
 8001b50:	f107 0208 	add.w	r2, r7, #8
 8001b54:	f107 0310 	add.w	r3, r7, #16
 8001b58:	4611      	mov	r1, r2
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff fe49 	bl	80017f2 <RansDecInit>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <decode_h+0x3a>
        return 1; // corrupted initial state
 8001b66:	2301      	movs	r3, #1
 8001b68:	e04b      	b.n	8001c02 <decode_h+0xd2>
    }

    for (size_t i = 0; i < size_h; i++) {
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b6e:	e02f      	b.n	8001bd0 <decode_h+0xa0>
        s = symbol_h[RansDecGet(&rans, SCALE_BITS)];
 8001b70:	f107 0310 	add.w	r3, r7, #16
 8001b74:	210a      	movs	r1, #10
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff fe74 	bl	8001864 <RansDecGet>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	4a23      	ldr	r2, [pc, #140]	@ (8001c0c <decode_h+0xdc>)
 8001b80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b84:	76fb      	strb	r3, [r7, #27]
        tmp = (uint32_t) s;
 8001b86:	7efb      	ldrb	r3, [r7, #27]
 8001b88:	617b      	str	r3, [r7, #20]
        if(tmp >= M_H) {
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	2b0c      	cmp	r3, #12
 8001b8e:	d901      	bls.n	8001b94 <decode_h+0x64>
            return 1; // invalid symbol       
 8001b90:	2301      	movs	r3, #1
 8001b92:	e036      	b.n	8001c02 <decode_h+0xd2>
        }
        tmp =  (H_CUT < tmp) ? (tmp + OFFSET_H) : tmp;
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	2b06      	cmp	r3, #6
 8001b98:	d902      	bls.n	8001ba0 <decode_h+0x70>
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	33ef      	adds	r3, #239	@ 0xef
 8001b9e:	e000      	b.n	8001ba2 <decode_h+0x72>
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	617b      	str	r3, [r7, #20]
        h[i] = tmp;
 8001ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	4413      	add	r3, r2
 8001bac:	697a      	ldr	r2, [r7, #20]
 8001bae:	601a      	str	r2, [r3, #0]
        RansDecAdvanceSymbol(&rans, (uint8_t **) &buf, buf_end, &dsyms_h[s], SCALE_BITS);
 8001bb0:	7efb      	ldrb	r3, [r7, #27]
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4a16      	ldr	r2, [pc, #88]	@ (8001c10 <decode_h+0xe0>)
 8001bb6:	4413      	add	r3, r2
 8001bb8:	f107 0108 	add.w	r1, r7, #8
 8001bbc:	f107 0010 	add.w	r0, r7, #16
 8001bc0:	220a      	movs	r2, #10
 8001bc2:	9200      	str	r2, [sp, #0]
 8001bc4:	6a3a      	ldr	r2, [r7, #32]
 8001bc6:	f7ff fefb 	bl	80019c0 <RansDecAdvanceSymbol>
    for (size_t i = 0; i < size_h; i++) {
 8001bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bcc:	3301      	adds	r3, #1
 8001bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d3cb      	bcc.n	8001b70 <decode_h+0x40>
    }

    if(RansDecVerify(&rans)) {
 8001bd8:	f107 0310 	add.w	r3, r7, #16
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff ff09 	bl	80019f4 <RansDecVerify>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <decode_h+0xbc>
        return 1; // final state not correct        
 8001be8:	2301      	movs	r3, #1
 8001bea:	e00a      	b.n	8001c02 <decode_h+0xd2>
    }

    size_used = buf - buf_start;
 8001bec:	68ba      	ldr	r2, [r7, #8]
 8001bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	61fb      	str	r3, [r7, #28]
    if(size_used != size_in) {
 8001bf4:	88fb      	ldrh	r3, [r7, #6]
 8001bf6:	69fa      	ldr	r2, [r7, #28]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d001      	beq.n	8001c00 <decode_h+0xd0>
        return 1; // size does not match
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e000      	b.n	8001c02 <decode_h+0xd2>
    }
    return 0;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3730      	adds	r7, #48	@ 0x30
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000104 	.word	0x20000104
 8001c10:	200000d0 	.word	0x200000d0

08001c14 <encode_hb_z1>:
 *
 * Arguments:   - uint8_t *buf: pointer to output buffer
 *              - const int32_t *hb_z1: pointer to polynomial vector
 *HighBits(z1)
 **************************************************/
uint16_t encode_hb_z1(uint8_t *buf, const int32_t *hb_z1) {
 8001c14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c18:	b08d      	sub	sp, #52	@ 0x34
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	6039      	str	r1, [r7, #0]
 8001c20:	466b      	mov	r3, sp
 8001c22:	461e      	mov	r6, r3
    size_t size_encoded;
    RansState rans;
    uint8_t *ptr;
    size_t size_hb_z1 = N * L;
 8001c24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c28:	62bb      	str	r3, [r7, #40]	@ 0x28
    int8_t s;
    int32_t tmp;
    uint8_t encoding[size_hb_z1]; // size_hb_z1 is a loose upper bound
 8001c2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c32:	2300      	movs	r3, #0
 8001c34:	4688      	mov	r8, r1
 8001c36:	4699      	mov	r9, r3
 8001c38:	f04f 0200 	mov.w	r2, #0
 8001c3c:	f04f 0300 	mov.w	r3, #0
 8001c40:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c44:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c48:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	460c      	mov	r4, r1
 8001c50:	461d      	mov	r5, r3
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	f04f 0300 	mov.w	r3, #0
 8001c5a:	00eb      	lsls	r3, r5, #3
 8001c5c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c60:	00e2      	lsls	r2, r4, #3
 8001c62:	1dcb      	adds	r3, r1, #7
 8001c64:	08db      	lsrs	r3, r3, #3
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	ebad 0d03 	sub.w	sp, sp, r3
 8001c6c:	466b      	mov	r3, sp
 8001c6e:	3300      	adds	r3, #0
 8001c70:	623b      	str	r3, [r7, #32]

    RansEncInit(&rans);
 8001c72:	f107 0310 	add.w	r3, r7, #16
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff fd80 	bl	800177c <RansEncInit>
    ptr = encoding + size_hb_z1; // end of output buffer
 8001c7c:	6a3a      	ldr	r2, [r7, #32]
 8001c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c80:	4413      	add	r3, r2
 8001c82:	60fb      	str	r3, [r7, #12]

    for (size_t i = size_hb_z1; i > 0; i--) {
 8001c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c88:	e029      	b.n	8001cde <encode_hb_z1+0xca>
        // from centered to positive representation:
        tmp = hb_z1[i - 1] + OFFSET_HB_Z1;
 8001c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001c90:	3b01      	subs	r3, #1
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	4413      	add	r3, r2
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	3306      	adds	r3, #6
 8001c9c:	61bb      	str	r3, [r7, #24]
        // check for very unlikely values that we do not encode
        // to make the encoding cheaper :
        if(tmp < 0 || M_HB_Z1 <= tmp) { 
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	db02      	blt.n	8001caa <encode_hb_z1+0x96>
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	2b0c      	cmp	r3, #12
 8001ca8:	dd01      	ble.n	8001cae <encode_hb_z1+0x9a>
            return 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	e030      	b.n	8001d10 <encode_hb_z1+0xfc>
        }
        s = (uint8_t) tmp;
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	75fb      	strb	r3, [r7, #23]
                
        RansEncPutSymbol(&rans, &ptr, &esyms_hb_z1[s]);
 8001cb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001cb6:	011b      	lsls	r3, r3, #4
 8001cb8:	4a18      	ldr	r2, [pc, #96]	@ (8001d1c <encode_hb_z1+0x108>)
 8001cba:	441a      	add	r2, r3
 8001cbc:	f107 010c 	add.w	r1, r7, #12
 8001cc0:	f107 0310 	add.w	r3, r7, #16
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff fe26 	bl	8001916 <RansEncPutSymbol>
        // check that at least 4 byte remain for memory safety:
        if (ptr < encoding + 4)
 8001cca:	6a3b      	ldr	r3, [r7, #32]
 8001ccc:	1d1a      	adds	r2, r3, #4
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d901      	bls.n	8001cd8 <encode_hb_z1+0xc4>
        {
            return 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	e01b      	b.n	8001d10 <encode_hb_z1+0xfc>
    for (size_t i = size_hb_z1; i > 0; i--) {
 8001cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1d2      	bne.n	8001c8a <encode_hb_z1+0x76>
        }
    }
    RansEncFlush(&rans, &ptr);
 8001ce4:	f107 020c 	add.w	r2, r7, #12
 8001ce8:	f107 0310 	add.w	r3, r7, #16
 8001cec:	4611      	mov	r1, r2
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff fd52 	bl	8001798 <RansEncFlush>

    size_encoded = encoding + size_hb_z1 - ptr;
 8001cf4:	6a3a      	ldr	r2, [r7, #32]
 8001cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cf8:	441a      	add	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	61fb      	str	r3, [r7, #28]
    memcpy(buf, ptr, size_encoded);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	69fa      	ldr	r2, [r7, #28]
 8001d04:	4619      	mov	r1, r3
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f013 fc9a 	bl	8015640 <memcpy>
    return size_encoded;
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	46b5      	mov	sp, r6
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3734      	adds	r7, #52	@ 0x34
 8001d16:	46bd      	mov	sp, r7
 8001d18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d1c:	20000904 	.word	0x20000904

08001d20 <decode_hb_z1>:
 * Description: rANS decode polynomial vector HighBits(z1)
 *
 * Arguments:   - int32_t *hb_z1: pointer to polynomial vector HighBits(z1)
 *              - uint8_t *buf: pointer to output buffer
 **************************************************/
uint16_t decode_hb_z1(int32_t *hb_z1, const uint8_t *buf, uint16_t size_in) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08e      	sub	sp, #56	@ 0x38
 8001d24:	af02      	add	r7, sp, #8
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	80fb      	strh	r3, [r7, #6]
    size_t size_used;
    RansState rans;
    size_t size_hb_z1 = N * L;
 8001d2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d32:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t tmp;
    uint8_t s;
    const uint8_t *buf_start = buf;
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	627b      	str	r3, [r7, #36]	@ 0x24
    const uint8_t *buf_end = buf + size_in;
 8001d38:	68ba      	ldr	r2, [r7, #8]
 8001d3a:	88fb      	ldrh	r3, [r7, #6]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	623b      	str	r3, [r7, #32]

    if(RansDecInit(&rans, (uint8_t **) &buf)) {
 8001d40:	f107 0208 	add.w	r2, r7, #8
 8001d44:	f107 0310 	add.w	r3, r7, #16
 8001d48:	4611      	mov	r1, r2
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff fd51 	bl	80017f2 <RansDecInit>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <decode_hb_z1+0x3a>
        return 1; // corrupted initial state       
 8001d56:	2301      	movs	r3, #1
 8001d58:	e045      	b.n	8001de6 <decode_hb_z1+0xc6>
    }

    for (size_t i = 0; i < size_hb_z1; i++) {
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d5e:	e029      	b.n	8001db4 <decode_hb_z1+0x94>
        s = symbol_hb_z1[RansDecGet(&rans, SCALE_BITS)];
 8001d60:	f107 0310 	add.w	r3, r7, #16
 8001d64:	210a      	movs	r1, #10
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fd7c 	bl	8001864 <RansDecGet>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	4a20      	ldr	r2, [pc, #128]	@ (8001df0 <decode_hb_z1+0xd0>)
 8001d70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d74:	76fb      	strb	r3, [r7, #27]
        tmp = (uint32_t) s;
 8001d76:	7efb      	ldrb	r3, [r7, #27]
 8001d78:	617b      	str	r3, [r7, #20]
        if(tmp >= M_HB_Z1) {
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	2b0c      	cmp	r3, #12
 8001d7e:	d901      	bls.n	8001d84 <decode_hb_z1+0x64>
            return 1; // invalid symbol        
 8001d80:	2301      	movs	r3, #1
 8001d82:	e030      	b.n	8001de6 <decode_hb_z1+0xc6>
        }
        // from positive to centered representation:
        hb_z1[i] = tmp - OFFSET_HB_Z1;
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	1f99      	subs	r1, r3, #6
 8001d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	4413      	add	r3, r2
 8001d90:	460a      	mov	r2, r1
 8001d92:	601a      	str	r2, [r3, #0]
        RansDecAdvanceSymbol(&rans, (uint8_t **)&buf, buf_end, &dsyms_hb_z1[s], SCALE_BITS);
 8001d94:	7efb      	ldrb	r3, [r7, #27]
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4a16      	ldr	r2, [pc, #88]	@ (8001df4 <decode_hb_z1+0xd4>)
 8001d9a:	4413      	add	r3, r2
 8001d9c:	f107 0108 	add.w	r1, r7, #8
 8001da0:	f107 0010 	add.w	r0, r7, #16
 8001da4:	220a      	movs	r2, #10
 8001da6:	9200      	str	r2, [sp, #0]
 8001da8:	6a3a      	ldr	r2, [r7, #32]
 8001daa:	f7ff fe09 	bl	80019c0 <RansDecAdvanceSymbol>
    for (size_t i = 0; i < size_hb_z1; i++) {
 8001dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001db0:	3301      	adds	r3, #1
 8001db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001db4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d3d1      	bcc.n	8001d60 <decode_hb_z1+0x40>
    }

    if(RansDecVerify(&rans)) {
 8001dbc:	f107 0310 	add.w	r3, r7, #16
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff fe17 	bl	80019f4 <RansDecVerify>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <decode_hb_z1+0xb0>
        return 1; // final state not correct       
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e00a      	b.n	8001de6 <decode_hb_z1+0xc6>
    }

    size_used = buf - buf_start;
 8001dd0:	68ba      	ldr	r2, [r7, #8]
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	61fb      	str	r3, [r7, #28]
    if(size_used != size_in) {
 8001dd8:	88fb      	ldrh	r3, [r7, #6]
 8001dda:	69fa      	ldr	r2, [r7, #28]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d001      	beq.n	8001de4 <decode_hb_z1+0xc4>
        return 1; // size does not match
 8001de0:	2301      	movs	r3, #1
 8001de2:	e000      	b.n	8001de6 <decode_hb_z1+0xc6>
    }
    return 0;
 8001de4:	2300      	movs	r3, #0
 8001de6:	4618      	mov	r0, r3
 8001de8:	3730      	adds	r7, #48	@ 0x30
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000a08 	.word	0x20000a08
 8001df4:	200009d4 	.word	0x200009d4

08001df8 <_mulrnd16>:
    {.real = -65220L, .imag = -6424L},  {.real = -65294L, .imag = -5623L},
    {.real = -65358L, .imag = -4821L},  {.real = -65413L, .imag = -4019L},
    {.real = -65457L, .imag = -3216L},  {.real = -65492L, .imag = -2412L},
    {.real = -65516L, .imag = -1608L},  {.real = -65531L, .imag = -804L}};

static inline int32_t _mulrnd16(const int32_t x, const int32_t y) {
 8001df8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001dfc:	b085      	sub	sp, #20
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
 8001e02:	6039      	str	r1, [r7, #0]
    int64_t r = ((int64_t)x * (int64_t)y) + (1 << 15);
 8001e04:	6879      	ldr	r1, [r7, #4]
 8001e06:	17c8      	asrs	r0, r1, #31
 8001e08:	4688      	mov	r8, r1
 8001e0a:	4681      	mov	r9, r0
 8001e0c:	6839      	ldr	r1, [r7, #0]
 8001e0e:	17c8      	asrs	r0, r1, #31
 8001e10:	460c      	mov	r4, r1
 8001e12:	4605      	mov	r5, r0
 8001e14:	fb04 f009 	mul.w	r0, r4, r9
 8001e18:	fb08 f105 	mul.w	r1, r8, r5
 8001e1c:	4401      	add	r1, r0
 8001e1e:	fba8 2304 	umull	r2, r3, r8, r4
 8001e22:	4419      	add	r1, r3
 8001e24:	460b      	mov	r3, r1
 8001e26:	f512 4a00 	adds.w	sl, r2, #32768	@ 0x8000
 8001e2a:	f143 0b00 	adc.w	fp, r3, #0
 8001e2e:	e9c7 ab02 	strd	sl, fp, [r7, #8]
    return r >> 16;
 8001e32:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	f04f 0300 	mov.w	r3, #0
 8001e3e:	0c02      	lsrs	r2, r0, #16
 8001e40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001e44:	140b      	asrs	r3, r1, #16
 8001e46:	4613      	mov	r3, r2
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001e52:	4770      	bx	lr

08001e54 <_complex_mul_real>:

static inline int32_t _complex_mul_real(const complex_fp32_16 x,
                                        const complex_fp32_16 y) {
 8001e54:	b590      	push	{r4, r7, lr}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	f107 0408 	add.w	r4, r7, #8
 8001e5e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001e62:	4639      	mov	r1, r7
 8001e64:	e881 000c 	stmia.w	r1, {r2, r3}
    return _mulrnd16(x.real, y.real) - _mulrnd16(x.imag, y.imag);
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	4611      	mov	r1, r2
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff ffc2 	bl	8001df8 <_mulrnd16>
 8001e74:	4604      	mov	r4, r0
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff ffbb 	bl	8001df8 <_mulrnd16>
 8001e82:	4603      	mov	r3, r0
 8001e84:	1ae3      	subs	r3, r4, r3
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd90      	pop	{r4, r7, pc}

08001e8e <_complex_mul_imag>:

static inline int32_t _complex_mul_imag(const complex_fp32_16 x,
                                        const complex_fp32_16 y) {
 8001e8e:	b590      	push	{r4, r7, lr}
 8001e90:	b085      	sub	sp, #20
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	f107 0408 	add.w	r4, r7, #8
 8001e98:	e884 0003 	stmia.w	r4, {r0, r1}
 8001e9c:	4639      	mov	r1, r7
 8001e9e:	e881 000c 	stmia.w	r1, {r2, r3}
    return _mulrnd16(x.real, y.imag) + _mulrnd16(x.imag, y.real);
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	4611      	mov	r1, r2
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff ffa5 	bl	8001df8 <_mulrnd16>
 8001eae:	4604      	mov	r4, r0
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	4611      	mov	r1, r2
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff ff9e 	bl	8001df8 <_mulrnd16>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	4423      	add	r3, r4
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd90      	pop	{r4, r7, pc}

08001ec8 <_complex_mul>:

static void _complex_mul(complex_fp32_16 *r, const complex_fp32_16 x,
                         const complex_fp32_16 y) {
 8001ec8:	b082      	sub	sp, #8
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b084      	sub	sp, #16
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	60f8      	str	r0, [r7, #12]
 8001ed2:	1d38      	adds	r0, r7, #4
 8001ed4:	e880 0006 	stmia.w	r0, {r1, r2}
 8001ed8:	61fb      	str	r3, [r7, #28]
    r->real = _complex_mul_real(x, y);
 8001eda:	f107 031c 	add.w	r3, r7, #28
 8001ede:	cb0c      	ldmia	r3, {r2, r3}
 8001ee0:	1d39      	adds	r1, r7, #4
 8001ee2:	c903      	ldmia	r1, {r0, r1}
 8001ee4:	f7ff ffb6 	bl	8001e54 <_complex_mul_real>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	601a      	str	r2, [r3, #0]
    r->imag = _complex_mul_imag(x, y);
 8001eee:	f107 031c 	add.w	r3, r7, #28
 8001ef2:	cb0c      	ldmia	r3, {r2, r3}
 8001ef4:	1d39      	adds	r1, r7, #4
 8001ef6:	c903      	ldmia	r1, {r0, r1}
 8001ef8:	f7ff ffc9 	bl	8001e8e <_complex_mul_imag>
 8001efc:	4602      	mov	r2, r0
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	605a      	str	r2, [r3, #4]
}
 8001f02:	bf00      	nop
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f0c:	b002      	add	sp, #8
 8001f0e:	4770      	bx	lr

08001f10 <fft_bitrev>:
    279, 151, 407, 87,  343, 215, 471, 55,  311, 183, 439, 119, 375, 247, 503,
    15,  271, 143, 399, 79,  335, 207, 463, 47,  303, 175, 431, 111, 367, 239,
    495, 31,  287, 159, 415, 95,  351, 223, 479, 63,  319, 191, 447, 127, 383,
    255, 511};

void fft_bitrev(complex_fp32_16 r[FFT_N], const poly *x) {
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
    int i, inv_i;
    for (i = 0; i < N; i++) {
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	e017      	b.n	8001f50 <fft_bitrev+0x40>
        inv_i = brv9[i];
 8001f20:	4a1e      	ldr	r2, [pc, #120]	@ (8001f9c <fft_bitrev+0x8c>)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f28:	60bb      	str	r3, [r7, #8]
        r[inv_i].imag = 0;
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	4413      	add	r3, r2
 8001f32:	2200      	movs	r2, #0
 8001f34:	605a      	str	r2, [r3, #4]
        r[inv_i].real = x->coeffs[i] << 16;
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	440b      	add	r3, r1
 8001f46:	0412      	lsls	r2, r2, #16
 8001f48:	601a      	str	r2, [r3, #0]
    for (i = 0; i < N; i++) {
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2bff      	cmp	r3, #255	@ 0xff
 8001f54:	dde4      	ble.n	8001f20 <fft_bitrev+0x10>
    }
    for (i = N; i < FFT_N; i++) {
 8001f56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	e013      	b.n	8001f86 <fft_bitrev+0x76>
        inv_i = brv9[i];
 8001f5e:	4a0f      	ldr	r2, [pc, #60]	@ (8001f9c <fft_bitrev+0x8c>)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f66:	60bb      	str	r3, [r7, #8]
        r[inv_i].imag = 0;
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	4413      	add	r3, r2
 8001f70:	2200      	movs	r2, #0
 8001f72:	605a      	str	r2, [r3, #4]
        r[inv_i].real = 0;
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
    for (i = N; i < FFT_N; i++) {
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	3301      	adds	r3, #1
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f8c:	dbe7      	blt.n	8001f5e <fft_bitrev+0x4e>
    }
}
 8001f8e:	bf00      	nop
 8001f90:	bf00      	nop
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	080176fc 	.word	0x080176fc

08001fa0 <complex_fp_sqabs>:

int32_t complex_fp_sqabs(complex_fp32_16 x) {
 8001fa0:	b590      	push	{r4, r7, lr}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	463b      	mov	r3, r7
 8001fa8:	e883 0003 	stmia.w	r3, {r0, r1}
    return _mulrnd16(x.real, x.real) + _mulrnd16(x.imag, x.imag);
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	4611      	mov	r1, r2
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff ff20 	bl	8001df8 <_mulrnd16>
 8001fb8:	4604      	mov	r4, r0
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	4611      	mov	r1, r2
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff ff19 	bl	8001df8 <_mulrnd16>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	4423      	add	r3, r4
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd90      	pop	{r4, r7, pc}
	...

08001fd4 <fft>:

void fft(complex_fp32_16 data[FFT_N]) {
 8001fd4:	b590      	push	{r4, r7, lr}
 8001fd6:	b091      	sub	sp, #68	@ 0x44
 8001fd8:	af02      	add	r7, sp, #8
 8001fda:	6078      	str	r0, [r7, #4]
    unsigned int r, m, md2, n, k, even, odd, twid;
    complex_fp32_16 u, t;

    for (r = 1; r <= FFT_LOGN; r++) {
 8001fdc:	2301      	movs	r3, #1
 8001fde:	637b      	str	r3, [r7, #52]	@ 0x34
 8001fe0:	e068      	b.n	80020b4 <fft+0xe0>
        m = 1 << r;
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	62bb      	str	r3, [r7, #40]	@ 0x28
        md2 = m >> 1;
 8001fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fee:	085b      	lsrs	r3, r3, #1
 8001ff0:	627b      	str	r3, [r7, #36]	@ 0x24
        for (n = 0; n < FFT_N; n += m) {
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ff6:	e056      	b.n	80020a6 <fft+0xd2>
            for (k = 0; k < md2; k++) {
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ffc:	e04b      	b.n	8002096 <fft+0xc2>
                even = n + k;
 8001ffe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002002:	4413      	add	r3, r2
 8002004:	623b      	str	r3, [r7, #32]
                odd = even + md2;
 8002006:	6a3a      	ldr	r2, [r7, #32]
 8002008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200a:	4413      	add	r3, r2
 800200c:	61fb      	str	r3, [r7, #28]
                twid = k << (FFT_LOGN - r);
 800200e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002010:	f1c3 0309 	rsb	r3, r3, #9
 8002014:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	61bb      	str	r3, [r7, #24]

                u = data[even];
 800201c:	6a3b      	ldr	r3, [r7, #32]
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	441a      	add	r2, r3
 8002024:	f107 0310 	add.w	r3, r7, #16
 8002028:	e892 0003 	ldmia.w	r2, {r0, r1}
 800202c:	e883 0003 	stmia.w	r3, {r0, r1}
                _complex_mul(&t, roots[twid], data[odd]);
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	4413      	add	r3, r2
 8002038:	4c22      	ldr	r4, [pc, #136]	@ (80020c4 <fft+0xf0>)
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	f107 0008 	add.w	r0, r7, #8
 8002040:	6859      	ldr	r1, [r3, #4]
 8002042:	9100      	str	r1, [sp, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	00d2      	lsls	r2, r2, #3
 8002048:	4422      	add	r2, r4
 800204a:	ca06      	ldmia	r2, {r1, r2}
 800204c:	f7ff ff3c 	bl	8001ec8 <_complex_mul>
                data[even].real = u.real + t.real;
 8002050:	6939      	ldr	r1, [r7, #16]
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	6a3b      	ldr	r3, [r7, #32]
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	4403      	add	r3, r0
 800205c:	440a      	add	r2, r1
 800205e:	601a      	str	r2, [r3, #0]
                data[even].imag = u.imag + t.imag;
 8002060:	6979      	ldr	r1, [r7, #20]
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	6a3b      	ldr	r3, [r7, #32]
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	4403      	add	r3, r0
 800206c:	440a      	add	r2, r1
 800206e:	605a      	str	r2, [r3, #4]
                data[odd].real = u.real - t.real;
 8002070:	6939      	ldr	r1, [r7, #16]
 8002072:	68ba      	ldr	r2, [r7, #8]
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	4403      	add	r3, r0
 800207c:	1a8a      	subs	r2, r1, r2
 800207e:	601a      	str	r2, [r3, #0]
                data[odd].imag = u.imag - t.imag;
 8002080:	6979      	ldr	r1, [r7, #20]
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	4403      	add	r3, r0
 800208c:	1a8a      	subs	r2, r1, r2
 800208e:	605a      	str	r2, [r3, #4]
            for (k = 0; k < md2; k++) {
 8002090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002092:	3301      	adds	r3, #1
 8002094:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002096:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209a:	429a      	cmp	r2, r3
 800209c:	d3af      	bcc.n	8001ffe <fft+0x2a>
        for (n = 0; n < FFT_N; n += m) {
 800209e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80020a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020a2:	4413      	add	r3, r2
 80020a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80020a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020ac:	d3a4      	bcc.n	8001ff8 <fft+0x24>
    for (r = 1; r <= FFT_LOGN; r++) {
 80020ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020b0:	3301      	adds	r3, #1
 80020b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80020b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020b6:	2b09      	cmp	r3, #9
 80020b8:	d993      	bls.n	8001fe2 <fft+0xe>
            }
        }
    }
}
 80020ba:	bf00      	nop
 80020bc:	bf00      	nop
 80020be:	373c      	adds	r7, #60	@ 0x3c
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd90      	pop	{r4, r7, pc}
 80020c4:	08016efc 	.word	0x08016efc

080020c8 <keccak_inc_init>:
 * Arguments:   - uint64_t *s_inc: pointer to input/output incremental state
 *                First 25 values represent Keccak state.
 *                26th value represents either the number of absorbed bytes
 *                that have not been permuted, or not-yet-squeezed bytes.
 **************************************************/
static void keccak_inc_init(uint64_t *s_inc) {
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
    size_t i;

    for (i = 0; i < 25; ++i) {
 80020d0:	2300      	movs	r3, #0
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	e00c      	b.n	80020f0 <keccak_inc_init+0x28>
        s_inc[i] = 0;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	18d1      	adds	r1, r2, r3
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	f04f 0300 	mov.w	r3, #0
 80020e6:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 25; ++i) {
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	3301      	adds	r3, #1
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2b18      	cmp	r3, #24
 80020f4:	d9ef      	bls.n	80020d6 <keccak_inc_init+0xe>
    }
    s_inc[25] = 0;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f103 01c8 	add.w	r1, r3, #200	@ 0xc8
 80020fc:	f04f 0200 	mov.w	r2, #0
 8002100:	f04f 0300 	mov.w	r3, #0
 8002104:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002108:	bf00      	nop
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <keccak_inc_absorb>:
 *              - uint32_t r: rate in bytes (e.g., 168 for SHAKE128)
 *              - const uint8_t *m: pointer to input to be absorbed into s_inc
 *              - size_t mlen: length of input in bytes
 **************************************************/
static void keccak_inc_absorb(uint64_t *s_inc, uint32_t r, const uint8_t *m,
                              size_t mlen) {
 8002114:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002118:	b088      	sub	sp, #32
 800211a:	af00      	add	r7, sp, #0
 800211c:	61f8      	str	r0, [r7, #28]
 800211e:	61b9      	str	r1, [r7, #24]
 8002120:	617a      	str	r2, [r7, #20]
 8002122:	613b      	str	r3, [r7, #16]
    /* Recall that s_inc[25] is the non-absorbed bytes xored into the state */
    while (mlen + s_inc[25] >= r) {
 8002124:	e02d      	b.n	8002182 <keccak_inc_absorb+0x6e>

        KeccakF1600_StateXORBytes(s_inc, m, s_inc[25], r-s_inc[25]);
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	33c8      	adds	r3, #200	@ 0xc8
 800212a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212e:	4611      	mov	r1, r2
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	33c8      	adds	r3, #200	@ 0xc8
 8002134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	1a9b      	subs	r3, r3, r2
 800213c:	460a      	mov	r2, r1
 800213e:	6979      	ldr	r1, [r7, #20]
 8002140:	69f8      	ldr	r0, [r7, #28]
 8002142:	f001 fb46 	bl	80037d2 <KeccakF1600_StateXORBytes>
        mlen -= (size_t)(r - s_inc[25]);
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	33c8      	adds	r3, #200	@ 0xc8
 800214a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	4413      	add	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
        m += r - s_inc[25];
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	33c8      	adds	r3, #200	@ 0xc8
 800215c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	1a9b      	subs	r3, r3, r2
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	4413      	add	r3, r2
 8002168:	617b      	str	r3, [r7, #20]
        s_inc[25] = 0;
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	f103 01c8 	add.w	r1, r3, #200	@ 0xc8
 8002170:	f04f 0200 	mov.w	r2, #0
 8002174:	f04f 0300 	mov.w	r3, #0
 8002178:	e9c1 2300 	strd	r2, r3, [r1]

        KeccakF1600_StatePermute(s_inc);
 800217c:	69f8      	ldr	r0, [r7, #28]
 800217e:	f001 fb73 	bl	8003868 <KeccakF1600_StatePermute>
    while (mlen + s_inc[25] >= r) {
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	2200      	movs	r2, #0
 8002186:	60bb      	str	r3, [r7, #8]
 8002188:	60fa      	str	r2, [r7, #12]
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	33c8      	adds	r3, #200	@ 0xc8
 800218e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002192:	68b9      	ldr	r1, [r7, #8]
 8002194:	188c      	adds	r4, r1, r2
 8002196:	68f9      	ldr	r1, [r7, #12]
 8002198:	eb41 0503 	adc.w	r5, r1, r3
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	2200      	movs	r2, #0
 80021a0:	469a      	mov	sl, r3
 80021a2:	4693      	mov	fp, r2
 80021a4:	4554      	cmp	r4, sl
 80021a6:	eb75 030b 	sbcs.w	r3, r5, fp
 80021aa:	d2bc      	bcs.n	8002126 <keccak_inc_absorb+0x12>
    }

    KeccakF1600_StateXORBytes(s_inc, m, s_inc[25], mlen);
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	33c8      	adds	r3, #200	@ 0xc8
 80021b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	6979      	ldr	r1, [r7, #20]
 80021b8:	69f8      	ldr	r0, [r7, #28]
 80021ba:	f001 fb0a 	bl	80037d2 <KeccakF1600_StateXORBytes>
    s_inc[25] += mlen;
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	33c8      	adds	r3, #200	@ 0xc8
 80021c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c6:	6939      	ldr	r1, [r7, #16]
 80021c8:	2000      	movs	r0, #0
 80021ca:	4688      	mov	r8, r1
 80021cc:	4681      	mov	r9, r0
 80021ce:	69f9      	ldr	r1, [r7, #28]
 80021d0:	31c8      	adds	r1, #200	@ 0xc8
 80021d2:	eb12 0008 	adds.w	r0, r2, r8
 80021d6:	6038      	str	r0, [r7, #0]
 80021d8:	eb43 0309 	adc.w	r3, r3, r9
 80021dc:	607b      	str	r3, [r7, #4]
 80021de:	e9d7 3400 	ldrd	r3, r4, [r7]
 80021e2:	e9c1 3400 	strd	r3, r4, [r1]
}
 80021e6:	bf00      	nop
 80021e8:	3720      	adds	r7, #32
 80021ea:	46bd      	mov	sp, r7
 80021ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080021f0 <keccak_inc_finalize>:
 *                that have not been permuted, or not-yet-squeezed bytes.
 *              - uint32_t r: rate in bytes (e.g., 168 for SHAKE128)
 *              - uint8_t p: domain-separation byte for different
 *                                 Keccak-derived functions
 **************************************************/
static void keccak_inc_finalize(uint64_t *s_inc, uint32_t r, uint8_t p) {
 80021f0:	b5b0      	push	{r4, r5, r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	4613      	mov	r3, r2
 80021fc:	71fb      	strb	r3, [r7, #7]
    /* After keccak_inc_absorb, we are guaranteed that s_inc[25] < r,
       so we can always use one more byte for p in the current state. */
    if(s_inc[25] == r-1){
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	33c8      	adds	r3, #200	@ 0xc8
 8002202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002206:	68b9      	ldr	r1, [r7, #8]
 8002208:	3901      	subs	r1, #1
 800220a:	2000      	movs	r0, #0
 800220c:	460c      	mov	r4, r1
 800220e:	4605      	mov	r5, r0
 8002210:	42ab      	cmp	r3, r5
 8002212:	bf08      	it	eq
 8002214:	42a2      	cmpeq	r2, r4
 8002216:	d10e      	bne.n	8002236 <keccak_inc_finalize+0x46>
      p |= 128;
 8002218:	79fb      	ldrb	r3, [r7, #7]
 800221a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800221e:	b2db      	uxtb	r3, r3
 8002220:	71fb      	strb	r3, [r7, #7]
      KeccakF1600_StateXORBytes(s_inc, &p, s_inc[25], 1);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	33c8      	adds	r3, #200	@ 0xc8
 8002226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800222a:	1df9      	adds	r1, r7, #7
 800222c:	2301      	movs	r3, #1
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	f001 facf 	bl	80037d2 <KeccakF1600_StateXORBytes>
 8002234:	e011      	b.n	800225a <keccak_inc_finalize+0x6a>
    } else {
      KeccakF1600_StateXORBytes(s_inc, &p, s_inc[25], 1);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	33c8      	adds	r3, #200	@ 0xc8
 800223a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223e:	1df9      	adds	r1, r7, #7
 8002240:	2301      	movs	r3, #1
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f001 fac5 	bl	80037d2 <KeccakF1600_StateXORBytes>
      p = 128;
 8002248:	2380      	movs	r3, #128	@ 0x80
 800224a:	71fb      	strb	r3, [r7, #7]
      KeccakF1600_StateXORBytes(s_inc, &p, r-1, 1);
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	1e5a      	subs	r2, r3, #1
 8002250:	1df9      	adds	r1, r7, #7
 8002252:	2301      	movs	r3, #1
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f001 fabc 	bl	80037d2 <KeccakF1600_StateXORBytes>
    }
    s_inc[25] = 0;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f103 01c8 	add.w	r1, r3, #200	@ 0xc8
 8002260:	f04f 0200 	mov.w	r2, #0
 8002264:	f04f 0300 	mov.w	r3, #0
 8002268:	e9c1 2300 	strd	r2, r3, [r1]
}
 800226c:	bf00      	nop
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bdb0      	pop	{r4, r5, r7, pc}

08002274 <keccak_inc_squeeze>:
 *                26th value represents either the number of absorbed bytes
 *                that have not been permuted, or not-yet-squeezed bytes.
 *              - uint32_t r: rate in bytes (e.g., 168 for SHAKE128)
 **************************************************/
static void keccak_inc_squeeze(uint8_t *h, size_t outlen,
                               uint64_t *s_inc, uint32_t r) {
 8002274:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002278:	b088      	sub	sp, #32
 800227a:	af00      	add	r7, sp, #0
 800227c:	6178      	str	r0, [r7, #20]
 800227e:	6139      	str	r1, [r7, #16]
 8002280:	60fa      	str	r2, [r7, #12]
 8002282:	60bb      	str	r3, [r7, #8]
    size_t len;
    if(outlen < s_inc[25])
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	2200      	movs	r2, #0
 8002288:	4698      	mov	r8, r3
 800228a:	4691      	mov	r9, r2
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	33c8      	adds	r3, #200	@ 0xc8
 8002290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002294:	4590      	cmp	r8, r2
 8002296:	eb79 0303 	sbcs.w	r3, r9, r3
 800229a:	d202      	bcs.n	80022a2 <keccak_inc_squeeze+0x2e>
    {
        len = outlen;
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	61fb      	str	r3, [r7, #28]
 80022a0:	e005      	b.n	80022ae <keccak_inc_squeeze+0x3a>
    }
    else
    {
        len = s_inc[25];
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	33c8      	adds	r3, #200	@ 0xc8
 80022a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022aa:	4613      	mov	r3, r2
 80022ac:	61fb      	str	r3, [r7, #28]
    }

    KeccakF1600_StateExtractBytes(s_inc, h, r-s_inc[25], len);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	33c8      	adds	r3, #200	@ 0xc8
 80022b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	1a9a      	subs	r2, r3, r2
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	6979      	ldr	r1, [r7, #20]
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f001 fa4e 	bl	8003760 <KeccakF1600_StateExtractBytes>
    h += len;
 80022c4:	697a      	ldr	r2, [r7, #20]
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	4413      	add	r3, r2
 80022ca:	617b      	str	r3, [r7, #20]
    outlen -= len;
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	613b      	str	r3, [r7, #16]
    s_inc[25] -= len;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	33c8      	adds	r3, #200	@ 0xc8
 80022d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022dc:	69f9      	ldr	r1, [r7, #28]
 80022de:	2000      	movs	r0, #0
 80022e0:	460c      	mov	r4, r1
 80022e2:	4605      	mov	r5, r0
 80022e4:	68f9      	ldr	r1, [r7, #12]
 80022e6:	31c8      	adds	r1, #200	@ 0xc8
 80022e8:	ebb2 0a04 	subs.w	sl, r2, r4
 80022ec:	eb63 0b05 	sbc.w	fp, r3, r5
 80022f0:	e9c1 ab00 	strd	sl, fp, [r1]

    /* Then squeeze the remaining necessary blocks */
    while (outlen > 0) {
 80022f4:	e025      	b.n	8002342 <keccak_inc_squeeze+0xce>
        KeccakF1600_StatePermute(s_inc);
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f001 fab6 	bl	8003868 <KeccakF1600_StatePermute>

        if(outlen < r)
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	429a      	cmp	r2, r3
 8002302:	d202      	bcs.n	800230a <keccak_inc_squeeze+0x96>
        {
            len = outlen;
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	61fb      	str	r3, [r7, #28]
 8002308:	e001      	b.n	800230e <keccak_inc_squeeze+0x9a>
        }
        else
        {
            len = r;
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	61fb      	str	r3, [r7, #28]
        }
        KeccakF1600_StateExtractBytes(s_inc, h, 0, len);
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	2200      	movs	r2, #0
 8002312:	6979      	ldr	r1, [r7, #20]
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f001 fa23 	bl	8003760 <KeccakF1600_StateExtractBytes>
        h += len;
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	4413      	add	r3, r2
 8002320:	617b      	str	r3, [r7, #20]
        outlen -= len;
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	613b      	str	r3, [r7, #16]
        s_inc[25] = r - len;
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	1ad2      	subs	r2, r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	33c8      	adds	r3, #200	@ 0xc8
 8002334:	2100      	movs	r1, #0
 8002336:	603a      	str	r2, [r7, #0]
 8002338:	6079      	str	r1, [r7, #4]
 800233a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800233e:	e9c3 1200 	strd	r1, r2, [r3]
    while (outlen > 0) {
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1d6      	bne.n	80022f6 <keccak_inc_squeeze+0x82>
    }
}
 8002348:	bf00      	nop
 800234a:	bf00      	nop
 800234c:	3720      	adds	r7, #32
 800234e:	46bd      	mov	sp, r7
 8002350:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002354 <shake128_inc_init>:

void shake128_inc_init(shake128incctx *state) {
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
#ifdef PROFILE_HASHING
  uint64_t t0 = hal_get_time();
#endif
    keccak_inc_init(state->ctx);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff feb2 	bl	80020c8 <keccak_inc_init>
#ifdef PROFILE_HASHING
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}
 8002364:	bf00      	nop
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <shake128_inc_absorb>:

void shake128_inc_absorb(shake128incctx *state, const uint8_t *input, size_t inlen) {
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
#ifdef PROFILE_HASHING
  uint64_t t0 = hal_get_time();
#endif
    keccak_inc_absorb(state->ctx, SHAKE128_RATE, input, inlen);
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68ba      	ldr	r2, [r7, #8]
 800237e:	21a8      	movs	r1, #168	@ 0xa8
 8002380:	f7ff fec8 	bl	8002114 <keccak_inc_absorb>
#ifdef PROFILE_HASHING
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}
 8002384:	bf00      	nop
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <shake128_inc_finalize>:

void shake128_inc_finalize(shake128incctx *state) {
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
#ifdef PROFILE_HASHING
  uint64_t t0 = hal_get_time();
#endif
    keccak_inc_finalize(state->ctx, SHAKE128_RATE, 0x1F);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	221f      	movs	r2, #31
 8002398:	21a8      	movs	r1, #168	@ 0xa8
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff ff28 	bl	80021f0 <keccak_inc_finalize>
#ifdef PROFILE_HASHING
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}
 80023a0:	bf00      	nop
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <shake128_inc_squeeze>:

void shake128_inc_squeeze(uint8_t *output, size_t outlen, shake128incctx *state) {
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
#ifdef PROFILE_HASHING
  uint64_t t0 = hal_get_time();
#endif
    keccak_inc_squeeze(output, outlen, state->ctx, SHAKE128_RATE);
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	23a8      	movs	r3, #168	@ 0xa8
 80023b8:	68b9      	ldr	r1, [r7, #8]
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f7ff ff5a 	bl	8002274 <keccak_inc_squeeze>
#ifdef PROFILE_HASHING
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}
 80023c0:	bf00      	nop
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <shake256_inc_init>:

void shake128_inc_ctx_release(shake128incctx *state) {
    (void) state;
}

void shake256_inc_init(shake256incctx *state) {
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
#ifdef PROFILE_HASHING
  uint64_t t0 = hal_get_time();
#endif
    keccak_inc_init(state->ctx);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff fe78 	bl	80020c8 <keccak_inc_init>
#ifdef PROFILE_HASHING
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}
 80023d8:	bf00      	nop
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <shake256_inc_absorb>:

void shake256_inc_absorb(shake256incctx *state, const uint8_t *input, size_t inlen) {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
#ifdef PROFILE_HASHING
  uint64_t t0 = hal_get_time();
#endif
    keccak_inc_absorb(state->ctx, SHAKE256_RATE, input, inlen);
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68ba      	ldr	r2, [r7, #8]
 80023f2:	2188      	movs	r1, #136	@ 0x88
 80023f4:	f7ff fe8e 	bl	8002114 <keccak_inc_absorb>
#ifdef PROFILE_HASHING
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}
 80023f8:	bf00      	nop
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <shake256_inc_finalize>:

void shake256_inc_finalize(shake256incctx *state) {
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
#ifdef PROFILE_HASHING
  uint64_t t0 = hal_get_time();
#endif
    keccak_inc_finalize(state->ctx, SHAKE256_RATE, 0x1F);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	221f      	movs	r2, #31
 800240c:	2188      	movs	r1, #136	@ 0x88
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff feee 	bl	80021f0 <keccak_inc_finalize>
#ifdef PROFILE_HASHING
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}
 8002414:	bf00      	nop
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <shake256_inc_squeeze>:

void shake256_inc_squeeze(uint8_t *output, size_t outlen, shake256incctx *state) {
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
#ifdef PROFILE_HASHING
  uint64_t t0 = hal_get_time();
#endif
    keccak_inc_squeeze(output, outlen, state->ctx, SHAKE256_RATE);
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	2388      	movs	r3, #136	@ 0x88
 800242c:	68b9      	ldr	r1, [r7, #8]
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f7ff ff20 	bl	8002274 <keccak_inc_squeeze>
#ifdef PROFILE_HASHING
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}
 8002434:	bf00      	nop
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <shake256>:
 *              - const uint8_t *input: pointer to input
 *              - size_t inlen:         length of input in bytes
 **************************************************/
void shake256(uint8_t *output, size_t outlen,
    const uint8_t *input, size_t inlen)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b0b8      	sub	sp, #224	@ 0xe0
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
 8002448:	603b      	str	r3, [r7, #0]
#ifdef PROFILE_HASHING
  uint64_t t0 = hal_get_time();
#endif
  shake256incctx state;

  keccak_inc_init(state.ctx);
 800244a:	f107 0310 	add.w	r3, r7, #16
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff fe3a 	bl	80020c8 <keccak_inc_init>

  /* Absorb input */
  keccak_inc_absorb(state.ctx, SHAKE256_RATE, input, inlen);
 8002454:	f107 0010 	add.w	r0, r7, #16
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	2188      	movs	r1, #136	@ 0x88
 800245e:	f7ff fe59 	bl	8002114 <keccak_inc_absorb>
  keccak_inc_finalize(state.ctx, SHAKE256_RATE, 0x1F);
 8002462:	f107 0310 	add.w	r3, r7, #16
 8002466:	221f      	movs	r2, #31
 8002468:	2188      	movs	r1, #136	@ 0x88
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff fec0 	bl	80021f0 <keccak_inc_finalize>

  /* Squeeze output */
  keccak_inc_squeeze(output, outlen, state.ctx, SHAKE256_RATE);
 8002470:	f107 0210 	add.w	r2, r7, #16
 8002474:	2388      	movs	r3, #136	@ 0x88
 8002476:	68b9      	ldr	r1, [r7, #8]
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f7ff fefb 	bl	8002274 <keccak_inc_squeeze>
#ifdef PROFILE_HASHING
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}
 800247e:	bf00      	nop
 8002480:	37e0      	adds	r7, #224	@ 0xe0
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <renormalize>:
                           const uint8_t sign);

#define fixpoint_add HAETAE_NAMESPACE(fixpoint_add)
void fixpoint_add(fp96_76 *xy, const fp96_76 *x, const fp96_76 *y);

static inline void renormalize(fp96_76 *x) {
 8002486:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
    x->limb48[1] += x->limb48[0] >> 48;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	e9d3 ab00 	ldrd	sl, fp, [r3]
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	f04f 0300 	mov.w	r3, #0
 80024a4:	ea4f 421b 	mov.w	r2, fp, lsr #16
 80024a8:	2300      	movs	r3, #0
 80024aa:	1884      	adds	r4, r0, r2
 80024ac:	eb41 0503 	adc.w	r5, r1, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	e9c3 4502 	strd	r4, r5, [r3, #8]
    x->limb48[0] &= (1ULL << 48) - 1;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024bc:	4690      	mov	r8, r2
 80024be:	fa1f f983 	uxth.w	r9, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	e9c3 8900 	strd	r8, r9, [r3]
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80024d2:	4770      	bx	lr

080024d4 <mul64>:
#else
    return ((int128)a * (int128)b + (1ULL << 47)) >> 48; // rounding
#endif
}

static inline void mul64(uint64_t r[2], const uint64_t b, const uint64_t a) {
 80024d4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80024d8:	b09b      	sub	sp, #108	@ 0x6c
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6478      	str	r0, [r7, #68]	@ 0x44
 80024de:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
#ifndef __SIZEOF_INT128__
    uint64_t al = a & ((1ULL << 32) - 1), bl = b & ((1ULL << 32) - 1),
 80024e2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80024e6:	4614      	mov	r4, r2
 80024e8:	2500      	movs	r5, #0
 80024ea:	e9c7 4518 	strd	r4, r5, [r7, #96]	@ 0x60
 80024ee:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80024f2:	603a      	str	r2, [r7, #0]
 80024f4:	2300      	movs	r3, #0
 80024f6:	607b      	str	r3, [r7, #4]
 80024f8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80024fc:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
             ah = a >> 32, bh = b >> 32;
 8002500:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002504:	f04f 0000 	mov.w	r0, #0
 8002508:	f04f 0100 	mov.w	r1, #0
 800250c:	0018      	movs	r0, r3
 800250e:	2100      	movs	r1, #0
 8002510:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
 8002514:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002518:	f04f 0000 	mov.w	r0, #0
 800251c:	f04f 0100 	mov.w	r1, #0
 8002520:	0018      	movs	r0, r3
 8002522:	2100      	movs	r1, #0
 8002524:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
    r[0] = a * b;
 8002528:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800252c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800252e:	fb03 f102 	mul.w	r1, r3, r2
 8002532:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002534:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002538:	fb02 f303 	mul.w	r3, r2, r3
 800253c:	4419      	add	r1, r3
 800253e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8002542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002544:	fba2 ab03 	umull	sl, fp, r2, r3
 8002548:	eb01 030b 	add.w	r3, r1, fp
 800254c:	469b      	mov	fp, r3
 800254e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002550:	e9c3 ab00 	strd	sl, fp, [r3]
    r[1] = ah * bl + al * bh + ((al * bl) >> 32);
 8002554:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002556:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002558:	fb03 f102 	mul.w	r1, r3, r2
 800255c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800255e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002560:	fb02 f303 	mul.w	r3, r2, r3
 8002564:	4419      	add	r1, r3
 8002566:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002568:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800256a:	fba2 8903 	umull	r8, r9, r2, r3
 800256e:	eb01 0309 	add.w	r3, r1, r9
 8002572:	4699      	mov	r9, r3
 8002574:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002576:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002578:	fb03 f102 	mul.w	r1, r3, r2
 800257c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800257e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002580:	fb02 f303 	mul.w	r3, r2, r3
 8002584:	4419      	add	r1, r3
 8002586:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002588:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800258a:	fba2 2303 	umull	r2, r3, r2, r3
 800258e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002590:	4613      	mov	r3, r2
 8002592:	633b      	str	r3, [r7, #48]	@ 0x30
 8002594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002596:	18cb      	adds	r3, r1, r3
 8002598:	637b      	str	r3, [r7, #52]	@ 0x34
 800259a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800259e:	460b      	mov	r3, r1
 80025a0:	eb18 0303 	adds.w	r3, r8, r3
 80025a4:	61bb      	str	r3, [r7, #24]
 80025a6:	4613      	mov	r3, r2
 80025a8:	eb49 0303 	adc.w	r3, r9, r3
 80025ac:	61fb      	str	r3, [r7, #28]
 80025ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80025b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80025b2:	fb03 f202 	mul.w	r2, r3, r2
 80025b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025b8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80025ba:	fb01 f303 	mul.w	r3, r1, r3
 80025be:	4413      	add	r3, r2
 80025c0:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80025c2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80025c4:	fba1 1202 	umull	r1, r2, r1, r2
 80025c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80025ca:	460a      	mov	r2, r1
 80025cc:	62ba      	str	r2, [r7, #40]	@ 0x28
 80025ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025d0:	4413      	add	r3, r2
 80025d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025d4:	f04f 0200 	mov.w	r2, #0
 80025d8:	f04f 0300 	mov.w	r3, #0
 80025dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80025de:	000a      	movs	r2, r1
 80025e0:	2300      	movs	r3, #0
 80025e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80025e4:	3108      	adds	r1, #8
 80025e6:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80025ea:	4620      	mov	r0, r4
 80025ec:	1880      	adds	r0, r0, r2
 80025ee:	6138      	str	r0, [r7, #16]
 80025f0:	4628      	mov	r0, r5
 80025f2:	eb43 0000 	adc.w	r0, r3, r0
 80025f6:	6178      	str	r0, [r7, #20]
 80025f8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80025fc:	e9c1 3400 	strd	r3, r4, [r1]
    r[1] >>= 32;
 8002600:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002602:	3308      	adds	r3, #8
 8002604:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002608:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800260a:	f103 0408 	add.w	r4, r3, #8
 800260e:	f04f 0200 	mov.w	r2, #0
 8002612:	f04f 0300 	mov.w	r3, #0
 8002616:	000a      	movs	r2, r1
 8002618:	2300      	movs	r3, #0
 800261a:	e9c4 2300 	strd	r2, r3, [r4]
    r[1] += ah * bh;
 800261e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002620:	3308      	adds	r3, #8
 8002622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002626:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002628:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800262a:	fb01 f000 	mul.w	r0, r1, r0
 800262e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002630:	6d3c      	ldr	r4, [r7, #80]	@ 0x50
 8002632:	fb04 f101 	mul.w	r1, r4, r1
 8002636:	4401      	add	r1, r0
 8002638:	6d3c      	ldr	r4, [r7, #80]	@ 0x50
 800263a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800263c:	fba4 4000 	umull	r4, r0, r4, r0
 8002640:	6278      	str	r0, [r7, #36]	@ 0x24
 8002642:	4620      	mov	r0, r4
 8002644:	6238      	str	r0, [r7, #32]
 8002646:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002648:	4401      	add	r1, r0
 800264a:	6279      	str	r1, [r7, #36]	@ 0x24
 800264c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800264e:	3108      	adds	r1, #8
 8002650:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002654:	4620      	mov	r0, r4
 8002656:	1810      	adds	r0, r2, r0
 8002658:	60b8      	str	r0, [r7, #8]
 800265a:	4628      	mov	r0, r5
 800265c:	eb43 0000 	adc.w	r0, r3, r0
 8002660:	60f8      	str	r0, [r7, #12]
 8002662:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002666:	e9c1 3400 	strd	r3, r4, [r1]
#else
    uint128 res = ((uint128)a * (uint128)b);
    r[0] = res;
    r[1] = res >> 64;
#endif
}
 800266a:	bf00      	nop
 800266c:	376c      	adds	r7, #108	@ 0x6c
 800266e:	46bd      	mov	sp, r7
 8002670:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002674:	4770      	bx	lr

08002676 <sq64>:

static inline void sq64(uint64_t r[2], const uint64_t a) {
 8002676:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800267a:	b08f      	sub	sp, #60	@ 0x3c
 800267c:	af00      	add	r7, sp, #0
 800267e:	6278      	str	r0, [r7, #36]	@ 0x24
 8002680:	e9c7 2306 	strd	r2, r3, [r7, #24]
#ifndef __SIZEOF_INT128__
    uint64_t al = a & ((1ULL << 32) - 1), ah = a >> 32;
 8002684:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002688:	60ba      	str	r2, [r7, #8]
 800268a:	2300      	movs	r3, #0
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002692:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8002696:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800269a:	f04f 0200 	mov.w	r2, #0
 800269e:	f04f 0300 	mov.w	r3, #0
 80026a2:	000a      	movs	r2, r1
 80026a4:	2300      	movs	r3, #0
 80026a6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    r[0] = a * a;
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	fb03 f202 	mul.w	r2, r3, r2
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	69b9      	ldr	r1, [r7, #24]
 80026b6:	fb01 f303 	mul.w	r3, r1, r3
 80026ba:	441a      	add	r2, r3
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	fba3 ab03 	umull	sl, fp, r3, r3
 80026c2:	eb02 030b 	add.w	r3, r2, fp
 80026c6:	469b      	mov	fp, r3
 80026c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ca:	e9c3 ab00 	strd	sl, fp, [r3]
    r[1] = ah * al * 2;
 80026ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026d2:	fb03 f202 	mul.w	r2, r3, r2
 80026d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026da:	fb01 f303 	mul.w	r3, r1, r3
 80026de:	4413      	add	r3, r2
 80026e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026e4:	fba1 4502 	umull	r4, r5, r1, r2
 80026e8:	442b      	add	r3, r5
 80026ea:	461d      	mov	r5, r3
 80026ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ee:	f103 0108 	add.w	r1, r3, #8
 80026f2:	1923      	adds	r3, r4, r4
 80026f4:	603b      	str	r3, [r7, #0]
 80026f6:	eb45 0305 	adc.w	r3, r5, r5
 80026fa:	607b      	str	r3, [r7, #4]
 80026fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002700:	e9c1 2300 	strd	r2, r3, [r1]
    r[1] >>= 32;
 8002704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002706:	3308      	adds	r3, #8
 8002708:	e9d3 0100 	ldrd	r0, r1, [r3]
 800270c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270e:	f103 0408 	add.w	r4, r3, #8
 8002712:	f04f 0200 	mov.w	r2, #0
 8002716:	f04f 0300 	mov.w	r3, #0
 800271a:	000a      	movs	r2, r1
 800271c:	2300      	movs	r3, #0
 800271e:	e9c4 2300 	strd	r2, r3, [r4]
    r[1] += ah * ah;
 8002722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002724:	3308      	adds	r3, #8
 8002726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800272c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800272e:	fb01 f000 	mul.w	r0, r1, r0
 8002732:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002734:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8002736:	fb04 f101 	mul.w	r1, r4, r1
 800273a:	4408      	add	r0, r1
 800273c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800273e:	fba1 8901 	umull	r8, r9, r1, r1
 8002742:	eb00 0109 	add.w	r1, r0, r9
 8002746:	4689      	mov	r9, r1
 8002748:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800274a:	3108      	adds	r1, #8
 800274c:	eb12 0008 	adds.w	r0, r2, r8
 8002750:	6138      	str	r0, [r7, #16]
 8002752:	eb43 0309 	adc.w	r3, r3, r9
 8002756:	617b      	str	r3, [r7, #20]
 8002758:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800275c:	e9c1 3400 	strd	r3, r4, [r1]
#else
    uint128 res = ((uint128)a * (uint128)a);
    r[0] = res;
    r[1] = res >> 64;
#endif
}
 8002760:	bf00      	nop
 8002762:	373c      	adds	r7, #60	@ 0x3c
 8002764:	46bd      	mov	sp, r7
 8002766:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800276a:	4770      	bx	lr

0800276c <mul48>:

static inline void mul48(uint64_t r[2], const uint64_t b, const uint64_t a) {
 800276c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002770:	b087      	sub	sp, #28
 8002772:	af02      	add	r7, sp, #8
 8002774:	60f8      	str	r0, [r7, #12]
 8002776:	e9c7 2300 	strd	r2, r3, [r7]
    mul64(r, b, a);
 800277a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800277e:	e9cd 2300 	strd	r2, r3, [sp]
 8002782:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f7ff fea4 	bl	80024d4 <mul64>
    r[1] <<= 16;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	3308      	adds	r3, #8
 8002790:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f103 0608 	add.w	r6, r3, #8
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	f04f 0300 	mov.w	r3, #0
 80027a2:	040b      	lsls	r3, r1, #16
 80027a4:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 80027a8:	0402      	lsls	r2, r0, #16
 80027aa:	e9c6 2300 	strd	r2, r3, [r6]
    r[1] ^= r[0] >> 48;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	3308      	adds	r3, #8
 80027b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	e9d3 ab00 	ldrd	sl, fp, [r3]
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	f04f 0300 	mov.w	r3, #0
 80027c4:	ea4f 421b 	mov.w	r2, fp, lsr #16
 80027c8:	2300      	movs	r3, #0
 80027ca:	68fe      	ldr	r6, [r7, #12]
 80027cc:	3608      	adds	r6, #8
 80027ce:	ea80 0402 	eor.w	r4, r0, r2
 80027d2:	ea81 0503 	eor.w	r5, r1, r3
 80027d6:	e9c6 4500 	strd	r4, r5, [r6]
    r[0] &= (1ULL << 48) - 1;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e0:	4690      	mov	r8, r2
 80027e2:	fa1f f983 	uxth.w	r9, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	e9c3 8900 	strd	r8, r9, [r3]
}
 80027ec:	bf00      	nop
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080027f6 <mulacc48>:

static inline void mulacc48(uint64_t r[2], const uint64_t b, const uint64_t a) {
 80027f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80027fa:	b08b      	sub	sp, #44	@ 0x2c
 80027fc:	af02      	add	r7, sp, #8
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	e9c7 2300 	strd	r2, r3, [r7]
    uint64_t tmp[2];
    mul48(tmp, b, a);
 8002804:	f107 0110 	add.w	r1, r7, #16
 8002808:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800280c:	e9cd 2300 	strd	r2, r3, [sp]
 8002810:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002814:	4608      	mov	r0, r1
 8002816:	f7ff ffa9 	bl	800276c <mul48>
    r[0] += tmp[0];
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002820:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002824:	eb10 0802 	adds.w	r8, r0, r2
 8002828:	eb41 0903 	adc.w	r9, r1, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	e9c3 8900 	strd	r8, r9, [r3]
    r[1] += tmp[1];
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	3308      	adds	r3, #8
 8002836:	e9d3 0100 	ldrd	r0, r1, [r3]
 800283a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800283e:	68fe      	ldr	r6, [r7, #12]
 8002840:	3608      	adds	r6, #8
 8002842:	1884      	adds	r4, r0, r2
 8002844:	eb41 0503 	adc.w	r5, r1, r3
 8002848:	e9c6 4500 	strd	r4, r5, [r6]
}
 800284c:	bf00      	nop
 800284e:	3724      	adds	r7, #36	@ 0x24
 8002850:	46bd      	mov	sp, r7
 8002852:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002856 <sq48>:

// (a0 + a1*2^32)^2 = a0^2 + 2^33*a0*a1 + 2^64*a1^2
static inline void sq48(uint64_t r[2], const uint64_t a) {
 8002856:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800285a:	b093      	sub	sp, #76	@ 0x4c
 800285c:	af00      	add	r7, sp, #0
 800285e:	6378      	str	r0, [r7, #52]	@ 0x34
 8002860:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    uint64_t al = a & ((1ULL << 32) - 1), ah = a >> 32;
 8002864:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002868:	60ba      	str	r2, [r7, #8]
 800286a:	2300      	movs	r3, #0
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002872:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8002876:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800287a:	f04f 0000 	mov.w	r0, #0
 800287e:	f04f 0100 	mov.w	r1, #0
 8002882:	0018      	movs	r0, r3
 8002884:	2100      	movs	r1, #0
 8002886:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
    r[0] = a * a;
 800288a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800288c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800288e:	fb03 f102 	mul.w	r1, r3, r2
 8002892:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002896:	fb02 f303 	mul.w	r3, r2, r3
 800289a:	18ca      	adds	r2, r1, r3
 800289c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800289e:	fba3 8903 	umull	r8, r9, r3, r3
 80028a2:	eb02 0309 	add.w	r3, r2, r9
 80028a6:	4699      	mov	r9, r3
 80028a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028aa:	e9c3 8900 	strd	r8, r9, [r3]
    r[1] = al * ah << 1;
 80028ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80028b2:	fb02 f103 	mul.w	r1, r2, r3
 80028b6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80028b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028ba:	fb02 f303 	mul.w	r3, r2, r3
 80028be:	18ca      	adds	r2, r1, r3
 80028c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80028c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028c4:	fba1 4503 	umull	r4, r5, r1, r3
 80028c8:	1953      	adds	r3, r2, r5
 80028ca:	461d      	mov	r5, r3
 80028cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028ce:	f103 0108 	add.w	r1, r3, #8
 80028d2:	1923      	adds	r3, r4, r4
 80028d4:	603b      	str	r3, [r7, #0]
 80028d6:	eb45 0305 	adc.w	r3, r5, r5
 80028da:	607b      	str	r3, [r7, #4]
 80028dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028e0:	e9c1 2300 	strd	r2, r3, [r1]
    r[1] >>= 32;
 80028e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028e6:	3308      	adds	r3, #8
 80028e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028ee:	f103 0408 	add.w	r4, r3, #8
 80028f2:	f04f 0200 	mov.w	r2, #0
 80028f6:	f04f 0300 	mov.w	r3, #0
 80028fa:	000a      	movs	r2, r1
 80028fc:	2300      	movs	r3, #0
 80028fe:	e9c4 2300 	strd	r2, r3, [r4]
    r[1] += ah * ah;
 8002902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002904:	3308      	adds	r3, #8
 8002906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800290c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800290e:	fb01 f000 	mul.w	r0, r1, r0
 8002912:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002914:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8002916:	fb04 f101 	mul.w	r1, r4, r1
 800291a:	4408      	add	r0, r1
 800291c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800291e:	fba1 ab01 	umull	sl, fp, r1, r1
 8002922:	eb00 010b 	add.w	r1, r0, fp
 8002926:	468b      	mov	fp, r1
 8002928:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800292a:	3108      	adds	r1, #8
 800292c:	eb12 000a 	adds.w	r0, r2, sl
 8002930:	6238      	str	r0, [r7, #32]
 8002932:	eb43 030b 	adc.w	r3, r3, fp
 8002936:	627b      	str	r3, [r7, #36]	@ 0x24
 8002938:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800293c:	e9c1 3400 	strd	r3, r4, [r1]

    r[1] <<= 16;
 8002940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002942:	3308      	adds	r3, #8
 8002944:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800294a:	f103 0408 	add.w	r4, r3, #8
 800294e:	f04f 0200 	mov.w	r2, #0
 8002952:	f04f 0300 	mov.w	r3, #0
 8002956:	040b      	lsls	r3, r1, #16
 8002958:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 800295c:	0402      	lsls	r2, r0, #16
 800295e:	e9c4 2300 	strd	r2, r3, [r4]
    r[1] ^= r[0] >> 48;
 8002962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002964:	3308      	adds	r3, #8
 8002966:	e9d3 0100 	ldrd	r0, r1, [r3]
 800296a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800296c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002970:	f04f 0200 	mov.w	r2, #0
 8002974:	f04f 0300 	mov.w	r3, #0
 8002978:	0c2a      	lsrs	r2, r5, #16
 800297a:	2300      	movs	r3, #0
 800297c:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 800297e:	3408      	adds	r4, #8
 8002980:	ea80 0502 	eor.w	r5, r0, r2
 8002984:	61bd      	str	r5, [r7, #24]
 8002986:	404b      	eors	r3, r1
 8002988:	61fb      	str	r3, [r7, #28]
 800298a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800298e:	e9c4 2300 	strd	r2, r3, [r4]
    r[0] &= (1ULL << 48) - 1;
 8002992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002998:	613a      	str	r2, [r7, #16]
 800299a:	b29b      	uxth	r3, r3
 800299c:	617b      	str	r3, [r7, #20]
 800299e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029a0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80029a4:	e9c3 1200 	strd	r1, r2, [r3]
}
 80029a8:	bf00      	nop
 80029aa:	374c      	adds	r7, #76	@ 0x4c
 80029ac:	46bd      	mov	sp, r7
 80029ae:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80029b2:	4770      	bx	lr

080029b4 <__cneg>:
#include "fixpoint.h"
#include "params.h"
#include <stdint.h>
#include <stdlib.h>

static void __cneg(fp96_76 *x, const uint8_t sign) {
 80029b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029b8:	b08e      	sub	sp, #56	@ 0x38
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6378      	str	r0, [r7, #52]	@ 0x34
 80029be:	460b      	mov	r3, r1
 80029c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    x->limb48[0] ^= (-(int64_t)sign) & ((1ULL << 48) - 1);
 80029c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029ca:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80029ce:	2200      	movs	r2, #0
 80029d0:	4698      	mov	r8, r3
 80029d2:	4691      	mov	r9, r2
 80029d4:	2300      	movs	r3, #0
 80029d6:	f1d8 0200 	rsbs	r2, r8, #0
 80029da:	62ba      	str	r2, [r7, #40]	@ 0x28
 80029dc:	eb63 0309 	sbc.w	r3, r3, r9
 80029e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80029e6:	4614      	mov	r4, r2
 80029e8:	b29d      	uxth	r5, r3
 80029ea:	ea80 0304 	eor.w	r3, r0, r4
 80029ee:	623b      	str	r3, [r7, #32]
 80029f0:	ea81 0305 	eor.w	r3, r1, r5
 80029f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80029f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029f8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80029fc:	e9c3 1200 	strd	r1, r2, [r3]
    x->limb48[1] ^= -(int64_t)sign;
 8002a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a02:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002a06:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	61bb      	str	r3, [r7, #24]
 8002a0e:	61fa      	str	r2, [r7, #28]
 8002a10:	2300      	movs	r3, #0
 8002a12:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002a16:	4622      	mov	r2, r4
 8002a18:	4252      	negs	r2, r2
 8002a1a:	613a      	str	r2, [r7, #16]
 8002a1c:	462a      	mov	r2, r5
 8002a1e:	eb63 0302 	sbc.w	r3, r3, r2
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a28:	ea80 0402 	eor.w	r4, r0, r2
 8002a2c:	60bc      	str	r4, [r7, #8]
 8002a2e:	404b      	eors	r3, r1
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a34:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002a38:	e9c3 1202 	strd	r1, r2, [r3, #8]
    x->limb48[0] += sign;
 8002a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a42:	f897 1033 	ldrb.w	r1, [r7, #51]	@ 0x33
 8002a46:	2000      	movs	r0, #0
 8002a48:	468a      	mov	sl, r1
 8002a4a:	4683      	mov	fp, r0
 8002a4c:	eb12 010a 	adds.w	r1, r2, sl
 8002a50:	6039      	str	r1, [r7, #0]
 8002a52:	eb43 030b 	adc.w	r3, r3, fp
 8002a56:	607b      	str	r3, [r7, #4]
 8002a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a5a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002a5e:	e9c3 1200 	strd	r1, r2, [r3]
    renormalize(x);
 8002a62:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002a64:	f7ff fd0f 	bl	8002486 <renormalize>
}
 8002a68:	bf00      	nop
 8002a6a:	3738      	adds	r7, #56	@ 0x38
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002a72 <__copy_cneg>:

static void __copy_cneg(fp96_76 *y, const fp96_76 *x, const uint8_t sign) {
 8002a72:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a76:	b090      	sub	sp, #64	@ 0x40
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8002a7c:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002a7e:	4613      	mov	r3, r2
 8002a80:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    y->limb48[0] = ((-(int64_t)sign) & ((1ULL << 48) - 1)) ^ x->limb48[0];
 8002a84:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002a88:	2200      	movs	r2, #0
 8002a8a:	4698      	mov	r8, r3
 8002a8c:	4691      	mov	r9, r2
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f1d8 0200 	rsbs	r2, r8, #0
 8002a94:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002a96:	eb63 0309 	sbc.w	r3, r3, r9
 8002a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002aa0:	4614      	mov	r4, r2
 8002aa2:	b29d      	uxth	r5, r3
 8002aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aaa:	ea84 0102 	eor.w	r1, r4, r2
 8002aae:	6239      	str	r1, [r7, #32]
 8002ab0:	406b      	eors	r3, r5
 8002ab2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ab4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ab6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002aba:	e9c3 1200 	strd	r1, r2, [r3]
    ;
    y->limb48[1] = x->limb48[1] ^ (-(int64_t)sign);
 8002abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ac0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002ac4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002ac8:	2200      	movs	r2, #0
 8002aca:	61bb      	str	r3, [r7, #24]
 8002acc:	61fa      	str	r2, [r7, #28]
 8002ace:	2300      	movs	r3, #0
 8002ad0:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002ad4:	4622      	mov	r2, r4
 8002ad6:	4252      	negs	r2, r2
 8002ad8:	613a      	str	r2, [r7, #16]
 8002ada:	462a      	mov	r2, r5
 8002adc:	eb63 0302 	sbc.w	r3, r3, r2
 8002ae0:	617b      	str	r3, [r7, #20]
 8002ae2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002ae6:	ea80 0402 	eor.w	r4, r0, r2
 8002aea:	60bc      	str	r4, [r7, #8]
 8002aec:	404b      	eors	r3, r1
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002af2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002af6:	e9c3 1202 	strd	r1, r2, [r3, #8]
    y->limb48[0] += sign;
 8002afa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b00:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 8002b04:	2000      	movs	r0, #0
 8002b06:	468a      	mov	sl, r1
 8002b08:	4683      	mov	fp, r0
 8002b0a:	eb12 010a 	adds.w	r1, r2, sl
 8002b0e:	6039      	str	r1, [r7, #0]
 8002b10:	eb43 030b 	adc.w	r3, r3, fp
 8002b14:	607b      	str	r3, [r7, #4]
 8002b16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b18:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002b1c:	e9c3 1200 	strd	r1, r2, [r3]
    renormalize(y);
 8002b20:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002b22:	f7ff fcb0 	bl	8002486 <renormalize>
}
 8002b26:	bf00      	nop
 8002b28:	3740      	adds	r7, #64	@ 0x40
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002b30 <fixpoint_mul>:

static void fixpoint_mul(fp96_76 *xy, const fp96_76 *x, const fp96_76 *y) {
 8002b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b34:	b09b      	sub	sp, #108	@ 0x6c
 8002b36:	af02      	add	r7, sp, #8
 8002b38:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8002b3a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002b3c:	647a      	str	r2, [r7, #68]	@ 0x44
    uint64_t tmp[2];
    mul48(&xy->limb48[0], x->limb48[0], y->limb48[0]);
 8002b3e:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 8002b40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4c:	e9cd 2300 	strd	r2, r3, [sp]
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	4620      	mov	r0, r4
 8002b56:	f7ff fe09 	bl	800276c <mul48>

    // shift right by 48, rounding
    xy->limb48[0] = xy->limb48[1] + (((xy->limb48[0] >> 47) + 1) >> 1);
 8002b5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b5c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002b60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b66:	f04f 0000 	mov.w	r0, #0
 8002b6a:	f04f 0100 	mov.w	r1, #0
 8002b6e:	0bd8      	lsrs	r0, r3, #15
 8002b70:	2100      	movs	r1, #0
 8002b72:	f110 0801 	adds.w	r8, r0, #1
 8002b76:	f141 0900 	adc.w	r9, r1, #0
 8002b7a:	f04f 0200 	mov.w	r2, #0
 8002b7e:	f04f 0300 	mov.w	r3, #0
 8002b82:	ea4f 0258 	mov.w	r2, r8, lsr #1
 8002b86:	ea42 72c9 	orr.w	r2, r2, r9, lsl #31
 8002b8a:	ea4f 0359 	mov.w	r3, r9, lsr #1
 8002b8e:	eb14 0a02 	adds.w	sl, r4, r2
 8002b92:	eb45 0b03 	adc.w	fp, r5, r3
 8002b96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b98:	e9c3 ab00 	strd	sl, fp, [r3]

    mul48(tmp, x->limb48[0], y->limb48[1]);
 8002b9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ba2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ba4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002ba8:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8002bac:	e9cd 2300 	strd	r2, r3, [sp]
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	4620      	mov	r0, r4
 8002bb6:	f7ff fdd9 	bl	800276c <mul48>
    xy->limb48[0] += tmp[0];
 8002bba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002bbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bc0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002bc4:	1884      	adds	r4, r0, r2
 8002bc6:	63bc      	str	r4, [r7, #56]	@ 0x38
 8002bc8:	eb41 0303 	adc.w	r3, r1, r3
 8002bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002bd0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8002bd4:	e9c3 1200 	strd	r1, r2, [r3]
    xy->limb48[1] = tmp[1];
 8002bd8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8002bdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002bde:	e9c3 0102 	strd	r0, r1, [r3, #8]
    mulacc48(&xy->limb48[0], x->limb48[1], y->limb48[0]);
 8002be2:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 8002be4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002be6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002bea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf0:	e9cd 2300 	strd	r2, r3, [sp]
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	4620      	mov	r0, r4
 8002bfa:	f7ff fdfc 	bl	80027f6 <mulacc48>

    // shift right by 28, rounding
    xy->limb48[0] += 1UL << 27;
 8002bfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c04:	f112 6100 	adds.w	r1, r2, #134217728	@ 0x8000000
 8002c08:	6339      	str	r1, [r7, #48]	@ 0x30
 8002c0a:	f143 0300 	adc.w	r3, r3, #0
 8002c0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c12:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8002c16:	e9c3 1200 	strd	r1, r2, [r3]
    xy->limb48[0] >>= 28;
 8002c1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c20:	f04f 0000 	mov.w	r0, #0
 8002c24:	f04f 0100 	mov.w	r1, #0
 8002c28:	0f10      	lsrs	r0, r2, #28
 8002c2a:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 8002c2e:	0f19      	lsrs	r1, r3, #28
 8002c30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c32:	e9c3 0100 	strd	r0, r1, [r3]
    xy->limb48[0] += (xy->limb48[1] << 20) & ((1ULL << 48) - 1);
 8002c36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c38:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002c3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c3e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002c42:	f04f 0000 	mov.w	r0, #0
 8002c46:	f04f 0100 	mov.w	r1, #0
 8002c4a:	0519      	lsls	r1, r3, #20
 8002c4c:	ea41 3112 	orr.w	r1, r1, r2, lsr #12
 8002c50:	0510      	lsls	r0, r2, #20
 8002c52:	62b8      	str	r0, [r7, #40]	@ 0x28
 8002c54:	b28b      	uxth	r3, r1
 8002c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c58:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	18e3      	adds	r3, r4, r3
 8002c60:	623b      	str	r3, [r7, #32]
 8002c62:	4613      	mov	r3, r2
 8002c64:	eb45 0303 	adc.w	r3, r5, r3
 8002c68:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c6c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002c70:	e9c3 1200 	strd	r1, r2, [r3]
    xy->limb48[1] >>= 28;
 8002c74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c76:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002c7a:	f04f 0200 	mov.w	r2, #0
 8002c7e:	f04f 0300 	mov.w	r3, #0
 8002c82:	0f02      	lsrs	r2, r0, #28
 8002c84:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8002c88:	0f0b      	lsrs	r3, r1, #28
 8002c8a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002c8c:	e9c1 2302 	strd	r2, r3, [r1, #8]

    mul64(tmp, x->limb48[1], y->limb48[1]);
 8002c90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c92:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002c96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c98:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002c9c:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8002ca0:	e9cd 2300 	strd	r2, r3, [sp]
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4620      	mov	r0, r4
 8002caa:	f7ff fc13 	bl	80024d4 <mul64>
    xy->limb48[0] += (tmp[0] << 20) & ((1ULL << 48) - 1);
 8002cae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002cb0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002cb4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	050b      	lsls	r3, r1, #20
 8002cc2:	ea43 3310 	orr.w	r3, r3, r0, lsr #12
 8002cc6:	0502      	lsls	r2, r0, #20
 8002cc8:	61ba      	str	r2, [r7, #24]
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	61fb      	str	r3, [r7, #28]
 8002cce:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	18e3      	adds	r3, r4, r3
 8002cd6:	613b      	str	r3, [r7, #16]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	eb45 0303 	adc.w	r3, r5, r3
 8002cde:	617b      	str	r3, [r7, #20]
 8002ce0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ce2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002ce6:	e9c3 1200 	strd	r1, r2, [r3]
    xy->limb48[1] += (tmp[0] >> 28) + (tmp[1] << 36);
 8002cea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002cec:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002cf0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002cf4:	f04f 0200 	mov.w	r2, #0
 8002cf8:	f04f 0300 	mov.w	r3, #0
 8002cfc:	0f02      	lsrs	r2, r0, #28
 8002cfe:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8002d02:	0f0b      	lsrs	r3, r1, #28
 8002d04:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	@ 0x58
 8002d08:	f04f 0000 	mov.w	r0, #0
 8002d0c:	f04f 0100 	mov.w	r1, #0
 8002d10:	ea4f 1108 	mov.w	r1, r8, lsl #4
 8002d14:	2000      	movs	r0, #0
 8002d16:	1816      	adds	r6, r2, r0
 8002d18:	60be      	str	r6, [r7, #8]
 8002d1a:	414b      	adcs	r3, r1
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002d22:	460b      	mov	r3, r1
 8002d24:	18e3      	adds	r3, r4, r3
 8002d26:	603b      	str	r3, [r7, #0]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	eb45 0303 	adc.w	r3, r5, r3
 8002d2e:	607b      	str	r3, [r7, #4]
 8002d30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d32:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002d36:	e9c3 1202 	strd	r1, r2, [r3, #8]

    renormalize(xy);
 8002d3a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002d3c:	f7ff fba3 	bl	8002486 <renormalize>
}
 8002d40:	bf00      	nop
 8002d42:	3764      	adds	r7, #100	@ 0x64
 8002d44:	46bd      	mov	sp, r7
 8002d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002d4a <fixpoint_unsigned_signed_mul>:

static void fixpoint_unsigned_signed_mul(fp96_76 *xy, const fp96_76 *y) {
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b08c      	sub	sp, #48	@ 0x30
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
 8002d52:	6039      	str	r1, [r7, #0]
    fp96_76 x, z;
    uint8_t sign = (y->limb48[1] >> 63) & 1;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002d5a:	f04f 0200 	mov.w	r2, #0
 8002d5e:	f04f 0300 	mov.w	r3, #0
 8002d62:	0fca      	lsrs	r2, r1, #31
 8002d64:	2300      	movs	r3, #0
 8002d66:	4613      	mov	r3, r2
 8002d68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    __copy_cneg(&x, y, sign);
 8002d6c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002d70:	f107 0318 	add.w	r3, r7, #24
 8002d74:	6839      	ldr	r1, [r7, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff fe7b 	bl	8002a72 <__copy_cneg>
    fixpoint_mul(&z, &x, xy);
 8002d7c:	f107 0118 	add.w	r1, r7, #24
 8002d80:	f107 0308 	add.w	r3, r7, #8
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff fed2 	bl	8002b30 <fixpoint_mul>
    __copy_cneg(xy, &z, sign);
 8002d8c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002d90:	f107 0308 	add.w	r3, r7, #8
 8002d94:	4619      	mov	r1, r3
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f7ff fe6b 	bl	8002a72 <__copy_cneg>
}
 8002d9c:	bf00      	nop
 8002d9e:	3730      	adds	r7, #48	@ 0x30
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <fixpoint_sub>:

static void fixpoint_sub(fp96_76 *xminy, const fp96_76 *x, const fp96_76 *y) {
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b088      	sub	sp, #32
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
    fp96_76 yneg;
    __copy_cneg(&yneg, y, 1);
 8002db0:	f107 0310 	add.w	r3, r7, #16
 8002db4:	2201      	movs	r2, #1
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff fe5a 	bl	8002a72 <__copy_cneg>
    fixpoint_add(xminy, x, &yneg);
 8002dbe:	f107 0310 	add.w	r3, r7, #16
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	68b9      	ldr	r1, [r7, #8]
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 f986 	bl	80030d8 <fixpoint_add>
}
 8002dcc:	bf00      	nop
 8002dce:	3720      	adds	r7, #32
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <fixpoint_sub_from_threehalves>:

static void fixpoint_sub_from_threehalves(fp96_76 *x) {
 8002dd4:	b5b0      	push	{r4, r5, r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
    __cneg(x, 1);
 8002ddc:	2101      	movs	r1, #1
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7ff fde8 	bl	80029b4 <__cneg>
    x->limb48[1] += 3ULL << 27; // left shift by 28 would be "3"
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002dea:	f112 54c0 	adds.w	r4, r2, #402653184	@ 0x18000000
 8002dee:	f143 0500 	adc.w	r5, r3, #0
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	e9c3 4502 	strd	r4, r5, [r3, #8]
    renormalize(x);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f7ff fb44 	bl	8002486 <renormalize>
}
 8002dfe:	bf00      	nop
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bdb0      	pop	{r4, r5, r7, pc}

08002e06 <fixpoint_square>:

void fixpoint_square(fp96_76 *sqx, const fp96_76 *x) {
 8002e06:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e0a:	b096      	sub	sp, #88	@ 0x58
 8002e0c:	af02      	add	r7, sp, #8
 8002e0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8002e10:	63b9      	str	r1, [r7, #56]	@ 0x38
    uint64_t tmp[2];
    sq48(&sqx->limb48[0], x->limb48[0]);
 8002e12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1a:	4608      	mov	r0, r1
 8002e1c:	f7ff fd1b 	bl	8002856 <sq48>

    // shift right by 48, rounding
    //sqx->limb48[0] += 1ULL << 47;
    sqx->limb48[0] >>= 48;
 8002e20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e26:	f04f 0000 	mov.w	r0, #0
 8002e2a:	f04f 0100 	mov.w	r1, #0
 8002e2e:	0c18      	lsrs	r0, r3, #16
 8002e30:	2100      	movs	r1, #0
 8002e32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e34:	e9c3 0100 	strd	r0, r1, [r3]
    sqx->limb48[0] += sqx->limb48[1];
 8002e38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e40:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002e44:	1884      	adds	r4, r0, r2
 8002e46:	eb41 0503 	adc.w	r5, r1, r3
 8002e4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e4c:	e9c3 4500 	strd	r4, r5, [r3]

    // mul
    mul48(tmp, x->limb48[0], x->limb48[1]);
 8002e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e58:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002e5c:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8002e60:	e9cd 2300 	strd	r2, r3, [sp]
 8002e64:	4602      	mov	r2, r0
 8002e66:	460b      	mov	r3, r1
 8002e68:	4620      	mov	r0, r4
 8002e6a:	f7ff fc7f 	bl	800276c <mul48>
    sqx->limb48[0] += tmp[0] << 1;
 8002e6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e74:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002e78:	1894      	adds	r4, r2, r2
 8002e7a:	60bc      	str	r4, [r7, #8]
 8002e7c:	415b      	adcs	r3, r3
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e84:	1884      	adds	r4, r0, r2
 8002e86:	633c      	str	r4, [r7, #48]	@ 0x30
 8002e88:	eb41 0303 	adc.w	r3, r1, r3
 8002e8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e90:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8002e94:	e9c3 1200 	strd	r1, r2, [r3]
    sqx->limb48[1] = tmp[1] << 1;
 8002e98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002e9c:	1891      	adds	r1, r2, r2
 8002e9e:	6039      	str	r1, [r7, #0]
 8002ea0:	415b      	adcs	r3, r3
 8002ea2:	607b      	str	r3, [r7, #4]
 8002ea4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ea8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002eaa:	e9c3 0102 	strd	r0, r1, [r3, #8]

    // shift right by 28, rounding
    //sqx->limb48[0] += 1ULL << 27;
    sqx->limb48[0] >>= 28;
 8002eae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb4:	f04f 0000 	mov.w	r0, #0
 8002eb8:	f04f 0100 	mov.w	r1, #0
 8002ebc:	0f10      	lsrs	r0, r2, #28
 8002ebe:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 8002ec2:	0f19      	lsrs	r1, r3, #28
 8002ec4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ec6:	e9c3 0100 	strd	r0, r1, [r3]
    sqx->limb48[0] += (sqx->limb48[1] << 20) & ((1ULL << 48) - 1);
 8002eca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ecc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002ed0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ed2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002ed6:	f04f 0000 	mov.w	r0, #0
 8002eda:	f04f 0100 	mov.w	r1, #0
 8002ede:	0519      	lsls	r1, r3, #20
 8002ee0:	ea41 3112 	orr.w	r1, r1, r2, lsr #12
 8002ee4:	0510      	lsls	r0, r2, #20
 8002ee6:	4680      	mov	r8, r0
 8002ee8:	fa1f f981 	uxth.w	r9, r1
 8002eec:	eb14 0308 	adds.w	r3, r4, r8
 8002ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ef2:	eb45 0309 	adc.w	r3, r5, r9
 8002ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ef8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002efa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8002efe:	e9c3 1200 	strd	r1, r2, [r3]
    sqx->limb48[1] >>= 28;
 8002f02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f04:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002f08:	f04f 0200 	mov.w	r2, #0
 8002f0c:	f04f 0300 	mov.w	r3, #0
 8002f10:	0f02      	lsrs	r2, r0, #28
 8002f12:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8002f16:	0f0b      	lsrs	r3, r1, #28
 8002f18:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f1a:	e9c1 2302 	strd	r2, r3, [r1, #8]

    sq64(tmp, x->limb48[1]);
 8002f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f20:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002f24:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8002f28:	4608      	mov	r0, r1
 8002f2a:	f7ff fba4 	bl	8002676 <sq64>
    sqx->limb48[0] += (tmp[0] << 20) & ((1ULL << 48) - 1);
 8002f2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f30:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002f34:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002f38:	f04f 0200 	mov.w	r2, #0
 8002f3c:	f04f 0300 	mov.w	r3, #0
 8002f40:	050b      	lsls	r3, r1, #20
 8002f42:	ea43 3310 	orr.w	r3, r3, r0, lsr #12
 8002f46:	0502      	lsls	r2, r0, #20
 8002f48:	623a      	str	r2, [r7, #32]
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f4e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002f52:	460b      	mov	r3, r1
 8002f54:	18e3      	adds	r3, r4, r3
 8002f56:	61bb      	str	r3, [r7, #24]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	eb45 0303 	adc.w	r3, r5, r3
 8002f5e:	61fb      	str	r3, [r7, #28]
 8002f60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f62:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002f66:	e9c3 1200 	strd	r1, r2, [r3]
    sqx->limb48[1] += (tmp[0] >> 28) + (tmp[1] << 36);
 8002f6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f6c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002f70:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002f74:	f04f 0200 	mov.w	r2, #0
 8002f78:	f04f 0300 	mov.w	r3, #0
 8002f7c:	0f02      	lsrs	r2, r0, #28
 8002f7e:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8002f82:	0f0b      	lsrs	r3, r1, #28
 8002f84:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8002f88:	f04f 0000 	mov.w	r0, #0
 8002f8c:	f04f 0100 	mov.w	r1, #0
 8002f90:	ea4f 1108 	mov.w	r1, r8, lsl #4
 8002f94:	2000      	movs	r0, #0
 8002f96:	eb12 0a00 	adds.w	sl, r2, r0
 8002f9a:	eb43 0b01 	adc.w	fp, r3, r1
 8002f9e:	eb14 030a 	adds.w	r3, r4, sl
 8002fa2:	613b      	str	r3, [r7, #16]
 8002fa4:	eb45 030b 	adc.w	r3, r5, fp
 8002fa8:	617b      	str	r3, [r7, #20]
 8002faa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fac:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002fb0:	e9c3 1202 	strd	r1, r2, [r3, #8]

    renormalize(sqx);
 8002fb4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002fb6:	f7ff fa66 	bl	8002486 <renormalize>
}
 8002fba:	bf00      	nop
 8002fbc:	3750      	adds	r7, #80	@ 0x50
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002fc4 <fixpoint_newton_invsqrt>:
const fp96_76 start_times_threehalves = {
    .limb48 = {0x5768588eed31ULL, 0x73bd40ULL}};
#endif

// implements Newton's method
void fixpoint_newton_invsqrt(fp96_76 *invsqrtx, const fp96_76 *xhalf) {
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b08c      	sub	sp, #48	@ 0x30
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
    fp96_76 tmp, tmp2;
    fixpoint_mul(&tmp, xhalf, &start_cube); // definitely two positive values
 8002fce:	f107 0318 	add.w	r3, r7, #24
 8002fd2:	4a19      	ldr	r2, [pc, #100]	@ (8003038 <fixpoint_newton_invsqrt+0x74>)
 8002fd4:	6839      	ldr	r1, [r7, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff fdaa 	bl	8002b30 <fixpoint_mul>
    fixpoint_sub(invsqrtx, &start_times_threehalves,
 8002fdc:	f107 0318 	add.w	r3, r7, #24
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	4916      	ldr	r1, [pc, #88]	@ (800303c <fixpoint_newton_invsqrt+0x78>)
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f7ff fedd 	bl	8002da4 <fixpoint_sub>
                 &tmp); // first Newton iteration done, might be negative (very
                        // improbable)

    for (int i = 0; i < 6; i++) // 6 more iterations
 8002fea:	2300      	movs	r3, #0
 8002fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fee:	e01b      	b.n	8003028 <fixpoint_newton_invsqrt+0x64>
    {
        fixpoint_square(&tmp, invsqrtx);  // tmp = y^2, never negative
 8002ff0:	f107 0318 	add.w	r3, r7, #24
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff ff05 	bl	8002e06 <fixpoint_square>
        fixpoint_mul(&tmp2, xhalf, &tmp); // tmp2 = x/2 * y^2, never negative
 8002ffc:	f107 0218 	add.w	r2, r7, #24
 8003000:	f107 0308 	add.w	r3, r7, #8
 8003004:	6839      	ldr	r1, [r7, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff fd92 	bl	8002b30 <fixpoint_mul>
        fixpoint_sub_from_threehalves(&tmp2);          // tmp = 3/2 - x/2 * y^2
 800300c:	f107 0308 	add.w	r3, r7, #8
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff fedf 	bl	8002dd4 <fixpoint_sub_from_threehalves>
        fixpoint_unsigned_signed_mul(invsqrtx, &tmp2); // y * (3/2 - x/2 * y^2)
 8003016:	f107 0308 	add.w	r3, r7, #8
 800301a:	4619      	mov	r1, r3
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f7ff fe94 	bl	8002d4a <fixpoint_unsigned_signed_mul>
    for (int i = 0; i < 6; i++) // 6 more iterations
 8003022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003024:	3301      	adds	r3, #1
 8003026:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800302a:	2b05      	cmp	r3, #5
 800302c:	dde0      	ble.n	8002ff0 <fixpoint_newton_invsqrt+0x2c>
    }
}
 800302e:	bf00      	nop
 8003030:	bf00      	nop
 8003032:	3730      	adds	r7, #48	@ 0x30
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	08017b00 	.word	0x08017b00
 800303c:	08017b10 	.word	0x08017b10

08003040 <fixpoint_mul_rnd13>:

int32_t fixpoint_mul_rnd13(const uint64_t x, const fp96_76 *y,
                           const uint8_t sign) {
 8003040:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003044:	b08e      	sub	sp, #56	@ 0x38
 8003046:	af00      	add	r7, sp, #0
 8003048:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800304c:	607a      	str	r2, [r7, #4]
 800304e:	70fb      	strb	r3, [r7, #3]
    int64_t res;
    fp96_76 tmp, xx;
    xx.limb48[1] = x >> 32;
 8003050:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003054:	f04f 0200 	mov.w	r2, #0
 8003058:	f04f 0300 	mov.w	r3, #0
 800305c:	000a      	movs	r2, r1
 800305e:	2300      	movs	r3, #0
 8003060:	e9c7 2306 	strd	r2, r3, [r7, #24]
    xx.limb48[0] = (x & ((1ULL << 32) - 1)) << 16;
 8003064:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	f04f 0300 	mov.w	r3, #0
 8003070:	040b      	lsls	r3, r1, #16
 8003072:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8003076:	0402      	lsls	r2, r0, #16
 8003078:	4816      	ldr	r0, [pc, #88]	@ (80030d4 <fixpoint_mul_rnd13+0x94>)
 800307a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800307e:	ea02 0800 	and.w	r8, r2, r0
 8003082:	ea03 0901 	and.w	r9, r3, r1
 8003086:	e9c7 8904 	strd	r8, r9, [r7, #16]
    fixpoint_mul(&tmp, &xx, y);
 800308a:	f107 0110 	add.w	r1, r7, #16
 800308e:	f107 0320 	add.w	r3, r7, #32
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff fd4b 	bl	8002b30 <fixpoint_mul>
    res = (tmp.limb48[1] + (1UL << 14)) >> 15; // rounding
 800309a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800309e:	f512 4480 	adds.w	r4, r2, #16384	@ 0x4000
 80030a2:	f143 0500 	adc.w	r5, r3, #0
 80030a6:	f04f 0200 	mov.w	r2, #0
 80030aa:	f04f 0300 	mov.w	r3, #0
 80030ae:	0be2      	lsrs	r2, r4, #15
 80030b0:	ea42 4245 	orr.w	r2, r2, r5, lsl #17
 80030b4:	0beb      	lsrs	r3, r5, #15
 80030b6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    return (1 - 2 * (int32_t)sign) * res;
 80030ba:	78fb      	ldrb	r3, [r7, #3]
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	f1c3 0301 	rsb	r3, r3, #1
 80030c2:	461a      	mov	r2, r3
 80030c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c6:	fb02 f303 	mul.w	r3, r2, r3
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3738      	adds	r7, #56	@ 0x38
 80030ce:	46bd      	mov	sp, r7
 80030d0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80030d4:	ffff0000 	.word	0xffff0000

080030d8 <fixpoint_add>:

void fixpoint_add(fp96_76 *xy, const fp96_76 *x, const fp96_76 *y) {
 80030d8:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80030dc:	b085      	sub	sp, #20
 80030de:	af00      	add	r7, sp, #0
 80030e0:	60f8      	str	r0, [r7, #12]
 80030e2:	60b9      	str	r1, [r7, #8]
 80030e4:	607a      	str	r2, [r7, #4]
    xy->limb48[0] = x->limb48[0] + y->limb48[0];
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f2:	eb10 0802 	adds.w	r8, r0, r2
 80030f6:	eb41 0903 	adc.w	r9, r1, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	e9c3 8900 	strd	r8, r9, [r3]
    xy->limb48[1] = x->limb48[1] + y->limb48[1];
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800310c:	1884      	adds	r4, r0, r2
 800310e:	eb41 0503 	adc.w	r5, r1, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	e9c3 4502 	strd	r4, r5, [r3, #8]
}
 8003118:	bf00      	nop
 800311a:	3714      	adds	r7, #20
 800311c:	46bd      	mov	sp, r7
 800311e:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8003122:	4770      	bx	lr

08003124 <low_word>:

    dest->limb48[0] = (((uint64_t) s1 << shmnt84) | s0) & d0_mask;
    dest->limb48[1] = (((uint64_t) s2 << shmnt84) | s1) >> d1_shmnt;
}

static inline uint32_t low_word(int64_t x){
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	e9c7 0100 	strd	r0, r1, [r7]
    return (uint32_t) (x & ((1ULL << 32)-1));
 800312e:	683b      	ldr	r3, [r7, #0]
}
 8003130:	4618      	mov	r0, r3
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <extract_bits_20_to_27>:

static inline int32_t extract_bits_20_to_27(uint32_t bits){
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
    // extract bit 20..27 from bits
    return (int32_t) ((bits >> 20) & ((1<<8)-1));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	0d1b      	lsrs	r3, r3, #20
 8003148:	b2db      	uxtb	r3, r3
}
 800314a:	4618      	mov	r0, r3
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <assemble_8_and_20_bits>:

static inline int32_t assemble_8_and_20_bits(int32_t lo_bits, uint32_t hi_bits){
 8003156:	b480      	push	{r7}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
 800315e:	6039      	str	r1, [r7, #0]
    return (int32_t) ((lo_bits | (hi_bits << 8)) & ((1<<28)-1));;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	021a      	lsls	r2, r3, #8
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4313      	orrs	r3, r2
 8003168:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
}
 800316c:	4618      	mov	r0, r3
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <fp84_76_square>:
 *      fp84_76 *x:   The value to be squared. 
 * Output:
 *      fp84_76 *sqx: The square of x as a positive, normalized 
 *                    84-bit value.
 **********************************************************************/
void fp84_76_square(fp84_76 *sqx, const fp84_76 *x){
 8003178:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800317c:	b0ba      	sub	sp, #232	@ 0xe8
 800317e:	af00      	add	r7, sp, #0
 8003180:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
 8003184:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
    digit28 xl = x->digit[0];
 8003188:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    digit28 xm = x->digit[1];
 8003192:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    digit28 xh = x->digit[2];
 800319c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    digit28 sl = 0;
 80031a6:	2300      	movs	r3, #0
 80031a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    digit28 sm = 0;
 80031ac:	2300      	movs	r3, #0
 80031ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    digit28 sh = 0;
 80031b2:	2300      	movs	r3, #0
 80031b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    int64_t tmp;
    int64_t tmp2;
    uint32_t bits;

    tmp = (int64_t) xl * xl;
 80031b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031bc:	17da      	asrs	r2, r3, #31
 80031be:	469a      	mov	sl, r3
 80031c0:	4693      	mov	fp, r2
 80031c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031c6:	17da      	asrs	r2, r3, #31
 80031c8:	4698      	mov	r8, r3
 80031ca:	4691      	mov	r9, r2
 80031cc:	fb08 f20b 	mul.w	r2, r8, fp
 80031d0:	fb0a f309 	mul.w	r3, sl, r9
 80031d4:	4413      	add	r3, r2
 80031d6:	fbaa 4508 	umull	r4, r5, sl, r8
 80031da:	442b      	add	r3, r5
 80031dc:	461d      	mov	r5, r3
 80031de:	e9c7 4532 	strd	r4, r5, [r7, #200]	@ 0xc8
 80031e2:	e9c7 4532 	strd	r4, r5, [r7, #200]	@ 0xc8
    tmp >>= FP_84_76_DIGIT_SIZE;
 80031e6:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 80031ea:	f04f 0000 	mov.w	r0, #0
 80031ee:	f04f 0100 	mov.w	r1, #0
 80031f2:	0f10      	lsrs	r0, r2, #28
 80031f4:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 80031f8:	1719      	asrs	r1, r3, #28
 80031fa:	e9c7 0132 	strd	r0, r1, [r7, #200]	@ 0xc8

    tmp += (int64_t) xm * (xl << 1);
 80031fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003202:	17da      	asrs	r2, r3, #31
 8003204:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003208:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800320c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	17da      	asrs	r2, r3, #31
 8003214:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003216:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003218:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800321c:	462b      	mov	r3, r5
 800321e:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003222:	4642      	mov	r2, r8
 8003224:	fb02 f203 	mul.w	r2, r2, r3
 8003228:	464b      	mov	r3, r9
 800322a:	4621      	mov	r1, r4
 800322c:	fb01 f303 	mul.w	r3, r1, r3
 8003230:	4413      	add	r3, r2
 8003232:	4622      	mov	r2, r4
 8003234:	4641      	mov	r1, r8
 8003236:	fba2 1201 	umull	r1, r2, r2, r1
 800323a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800323e:	460a      	mov	r2, r1
 8003240:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003244:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003248:	4413      	add	r3, r2
 800324a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800324e:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 8003252:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 8003256:	4621      	mov	r1, r4
 8003258:	1851      	adds	r1, r2, r1
 800325a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800325c:	4629      	mov	r1, r5
 800325e:	eb43 0101 	adc.w	r1, r3, r1
 8003262:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8003264:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8003268:	e9c7 3432 	strd	r3, r4, [r7, #200]	@ 0xc8
    tmp >>= FP_84_76_DIGIT_SIZE;
 800326c:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 8003270:	f04f 0000 	mov.w	r0, #0
 8003274:	f04f 0100 	mov.w	r1, #0
 8003278:	0f10      	lsrs	r0, r2, #28
 800327a:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 800327e:	1719      	asrs	r1, r3, #28
 8003280:	e9c7 0132 	strd	r0, r1, [r7, #200]	@ 0xc8

    tmp += (int64_t) xh * (xl << 1);
 8003284:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003288:	17da      	asrs	r2, r3, #31
 800328a:	673b      	str	r3, [r7, #112]	@ 0x70
 800328c:	677a      	str	r2, [r7, #116]	@ 0x74
 800328e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	17da      	asrs	r2, r3, #31
 8003296:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003298:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800329a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 800329e:	462b      	mov	r3, r5
 80032a0:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 80032a4:	4642      	mov	r2, r8
 80032a6:	fb02 f203 	mul.w	r2, r2, r3
 80032aa:	464b      	mov	r3, r9
 80032ac:	4621      	mov	r1, r4
 80032ae:	fb01 f303 	mul.w	r3, r1, r3
 80032b2:	4413      	add	r3, r2
 80032b4:	4622      	mov	r2, r4
 80032b6:	4641      	mov	r1, r8
 80032b8:	fba2 1201 	umull	r1, r2, r2, r1
 80032bc:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80032c0:	460a      	mov	r2, r1
 80032c2:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 80032c6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80032ca:	4413      	add	r3, r2
 80032cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80032d0:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 80032d4:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 80032d8:	4621      	mov	r1, r4
 80032da:	1851      	adds	r1, r2, r1
 80032dc:	6239      	str	r1, [r7, #32]
 80032de:	4629      	mov	r1, r5
 80032e0:	eb43 0101 	adc.w	r1, r3, r1
 80032e4:	6279      	str	r1, [r7, #36]	@ 0x24
 80032e6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80032ea:	e9c7 3432 	strd	r3, r4, [r7, #200]	@ 0xc8
    tmp += (int64_t) xm * xm;
 80032ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032f2:	17da      	asrs	r2, r3, #31
 80032f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80032f6:	667a      	str	r2, [r7, #100]	@ 0x64
 80032f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032fc:	17da      	asrs	r2, r3, #31
 80032fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003300:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003302:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003306:	462b      	mov	r3, r5
 8003308:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	@ 0x58
 800330c:	4642      	mov	r2, r8
 800330e:	fb02 f203 	mul.w	r2, r2, r3
 8003312:	464b      	mov	r3, r9
 8003314:	4621      	mov	r1, r4
 8003316:	fb01 f303 	mul.w	r3, r1, r3
 800331a:	4413      	add	r3, r2
 800331c:	4622      	mov	r2, r4
 800331e:	4641      	mov	r1, r8
 8003320:	fba2 1201 	umull	r1, r2, r2, r1
 8003324:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003328:	460a      	mov	r2, r1
 800332a:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800332e:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8003332:	4413      	add	r3, r2
 8003334:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003338:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 800333c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8003340:	4621      	mov	r1, r4
 8003342:	1851      	adds	r1, r2, r1
 8003344:	61b9      	str	r1, [r7, #24]
 8003346:	4629      	mov	r1, r5
 8003348:	eb43 0101 	adc.w	r1, r3, r1
 800334c:	61f9      	str	r1, [r7, #28]
 800334e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003352:	e9c7 3432 	strd	r3, r4, [r7, #200]	@ 0xc8
    tmp += (1ULL<<19); // rounding
 8003356:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 800335a:	f512 2100 	adds.w	r1, r2, #524288	@ 0x80000
 800335e:	6539      	str	r1, [r7, #80]	@ 0x50
 8003360:	f143 0300 	adc.w	r3, r3, #0
 8003364:	657b      	str	r3, [r7, #84]	@ 0x54
 8003366:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 800336a:	e9c7 3432 	strd	r3, r4, [r7, #200]	@ 0xc8
    bits = low_word(tmp);
 800336e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003372:	f7ff fed7 	bl	8003124 <low_word>
 8003376:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
    sl = extract_bits_20_to_27(bits);
 800337a:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 800337e:	f7ff fedd 	bl	800313c <extract_bits_20_to_27>
 8003382:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
    tmp >>= FP_84_76_DIGIT_SIZE;
 8003386:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 800338a:	f04f 0000 	mov.w	r0, #0
 800338e:	f04f 0100 	mov.w	r1, #0
 8003392:	0f10      	lsrs	r0, r2, #28
 8003394:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 8003398:	1719      	asrs	r1, r3, #28
 800339a:	e9c7 0132 	strd	r0, r1, [r7, #200]	@ 0xc8

    tmp2 = (int64_t) xh * xm;
 800339e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033a2:	17da      	asrs	r2, r3, #31
 80033a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033a6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80033a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033ac:	17da      	asrs	r2, r3, #31
 80033ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80033b0:	647a      	str	r2, [r7, #68]	@ 0x44
 80033b2:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80033b6:	462b      	mov	r3, r5
 80033b8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80033bc:	4642      	mov	r2, r8
 80033be:	fb02 f203 	mul.w	r2, r2, r3
 80033c2:	464b      	mov	r3, r9
 80033c4:	4621      	mov	r1, r4
 80033c6:	fb01 f303 	mul.w	r3, r1, r3
 80033ca:	4413      	add	r3, r2
 80033cc:	4622      	mov	r2, r4
 80033ce:	4641      	mov	r1, r8
 80033d0:	fba2 1201 	umull	r1, r2, r2, r1
 80033d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80033d8:	460a      	mov	r2, r1
 80033da:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80033de:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80033e2:	4413      	add	r3, r2
 80033e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80033e8:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 80033ec:	e9c7 342e 	strd	r3, r4, [r7, #184]	@ 0xb8
 80033f0:	e9c7 342e 	strd	r3, r4, [r7, #184]	@ 0xb8
    tmp += tmp2;
 80033f4:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80033f8:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 80033fc:	1884      	adds	r4, r0, r2
 80033fe:	613c      	str	r4, [r7, #16]
 8003400:	eb41 0303 	adc.w	r3, r1, r3
 8003404:	617b      	str	r3, [r7, #20]
 8003406:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800340a:	e9c7 3432 	strd	r3, r4, [r7, #200]	@ 0xc8
    tmp += tmp2;
 800340e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003412:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 8003416:	1884      	adds	r4, r0, r2
 8003418:	60bc      	str	r4, [r7, #8]
 800341a:	eb41 0303 	adc.w	r3, r1, r3
 800341e:	60fb      	str	r3, [r7, #12]
 8003420:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003424:	e9c7 3432 	strd	r3, r4, [r7, #200]	@ 0xc8
    bits = low_word(tmp);
 8003428:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800342c:	f7ff fe7a 	bl	8003124 <low_word>
 8003430:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
    sl = assemble_8_and_20_bits(sl, bits);
 8003434:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 8003438:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 800343c:	f7ff fe8b 	bl	8003156 <assemble_8_and_20_bits>
 8003440:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
    sm = extract_bits_20_to_27(bits);
 8003444:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 8003448:	f7ff fe78 	bl	800313c <extract_bits_20_to_27>
 800344c:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp >>= FP_84_76_DIGIT_SIZE;
 8003450:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003454:	f04f 0200 	mov.w	r2, #0
 8003458:	f04f 0300 	mov.w	r3, #0
 800345c:	0f02      	lsrs	r2, r0, #28
 800345e:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8003462:	170b      	asrs	r3, r1, #28
 8003464:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8

    tmp += (int64_t) xh * xh;
 8003468:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800346c:	17da      	asrs	r2, r3, #31
 800346e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003470:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003472:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003476:	17da      	asrs	r2, r3, #31
 8003478:	633b      	str	r3, [r7, #48]	@ 0x30
 800347a:	637a      	str	r2, [r7, #52]	@ 0x34
 800347c:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8003480:	462b      	mov	r3, r5
 8003482:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	@ 0x30
 8003486:	4642      	mov	r2, r8
 8003488:	fb02 f203 	mul.w	r2, r2, r3
 800348c:	464b      	mov	r3, r9
 800348e:	4621      	mov	r1, r4
 8003490:	fb01 f303 	mul.w	r3, r1, r3
 8003494:	4413      	add	r3, r2
 8003496:	4622      	mov	r2, r4
 8003498:	4641      	mov	r1, r8
 800349a:	fba2 1201 	umull	r1, r2, r2, r1
 800349e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80034a2:	460a      	mov	r2, r1
 80034a4:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80034a8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80034ac:	4413      	add	r3, r2
 80034ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80034b2:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 80034b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80034ba:	4621      	mov	r1, r4
 80034bc:	1851      	adds	r1, r2, r1
 80034be:	6039      	str	r1, [r7, #0]
 80034c0:	4629      	mov	r1, r5
 80034c2:	eb43 0101 	adc.w	r1, r3, r1
 80034c6:	6079      	str	r1, [r7, #4]
 80034c8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80034cc:	e9c7 3432 	strd	r3, r4, [r7, #200]	@ 0xc8
    bits = low_word(tmp);
 80034d0:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80034d4:	f7ff fe26 	bl	8003124 <low_word>
 80034d8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
    sm = assemble_8_and_20_bits(sm, bits);
 80034dc:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 80034e0:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 80034e4:	f7ff fe37 	bl	8003156 <assemble_8_and_20_bits>
 80034e8:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    bits = low_word(tmp >> 20);
 80034ec:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80034f0:	f04f 0200 	mov.w	r2, #0
 80034f4:	f04f 0300 	mov.w	r3, #0
 80034f8:	0d02      	lsrs	r2, r0, #20
 80034fa:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 80034fe:	150b      	asrs	r3, r1, #20
 8003500:	4610      	mov	r0, r2
 8003502:	4619      	mov	r1, r3
 8003504:	f7ff fe0e 	bl	8003124 <low_word>
 8003508:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
    sh = bits & ((1<<28)-1);
 800350c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003510:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003514:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    sqx->digit[0] = sl;
 8003518:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800351c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8003520:	601a      	str	r2, [r3, #0]
    sqx->digit[1] = sm;
 8003522:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003526:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800352a:	605a      	str	r2, [r3, #4]
    sqx->digit[2] = sh;
 800352c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003530:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003534:	609a      	str	r2, [r3, #8]
} 
 8003536:	bf00      	nop
 8003538:	37e8      	adds	r7, #232	@ 0xe8
 800353a:	46bd      	mov	sp, r7
 800353c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003540 <convert_fp112_76_to_fp96_76>:
    result->digit[0] = rl;
    result->digit[1] = rm;
    result->digit[2] = rh;
} 

void convert_fp112_76_to_fp96_76(fp96_76 *dest, const fp112_76 *src){
 8003540:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003544:	b099      	sub	sp, #100	@ 0x64
 8003546:	af00      	add	r7, sp, #0
 8003548:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800354a:	63b9      	str	r1, [r7, #56]	@ 0x38
    digit28 src0 = src->digit[0];
 800354c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	65fb      	str	r3, [r7, #92]	@ 0x5c
    digit28 src1 = src->digit[1];
 8003552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	65bb      	str	r3, [r7, #88]	@ 0x58
    digit28 src2 = src->digit[2];
 8003558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	657b      	str	r3, [r7, #84]	@ 0x54
    digit28 src3 = src->digit[3];
 800355e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	653b      	str	r3, [r7, #80]	@ 0x50
    uint64_t dest0;
    uint64_t dest1;

    dest0  = (uint64_t) src1 << 28;
 8003564:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003566:	17da      	asrs	r2, r3, #31
 8003568:	461c      	mov	r4, r3
 800356a:	4615      	mov	r5, r2
 800356c:	f04f 0200 	mov.w	r2, #0
 8003570:	f04f 0300 	mov.w	r3, #0
 8003574:	072b      	lsls	r3, r5, #28
 8003576:	ea43 1314 	orr.w	r3, r3, r4, lsr #4
 800357a:	0722      	lsls	r2, r4, #28
 800357c:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    dest0 += src0;
 8003580:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003582:	17da      	asrs	r2, r3, #31
 8003584:	633b      	str	r3, [r7, #48]	@ 0x30
 8003586:	637a      	str	r2, [r7, #52]	@ 0x34
 8003588:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800358c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003590:	4621      	mov	r1, r4
 8003592:	1851      	adds	r1, r2, r1
 8003594:	61b9      	str	r1, [r7, #24]
 8003596:	4629      	mov	r1, r5
 8003598:	eb43 0101 	adc.w	r1, r3, r1
 800359c:	61f9      	str	r1, [r7, #28]
 800359e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80035a2:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
    dest0 &= ((1ULL<<FP_96_76_DIGIT_SIZE)-1);
 80035a6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80035aa:	613a      	str	r2, [r7, #16]
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	617b      	str	r3, [r7, #20]
 80035b0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80035b4:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
    dest1  = (uint64_t) src3 << (3 * FP_112_76_DIGIT_SIZE - FP_96_76_DIGIT_SIZE); // 36
 80035b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035ba:	17da      	asrs	r2, r3, #31
 80035bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035c0:	f04f 0200 	mov.w	r2, #0
 80035c4:	f04f 0300 	mov.w	r3, #0
 80035c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035ca:	010b      	lsls	r3, r1, #4
 80035cc:	2200      	movs	r2, #0
 80035ce:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    dest1 += (uint64_t) src2 << (2 * FP_112_76_DIGIT_SIZE - FP_96_76_DIGIT_SIZE); //  8
 80035d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035d4:	17da      	asrs	r2, r3, #31
 80035d6:	623b      	str	r3, [r7, #32]
 80035d8:	627a      	str	r2, [r7, #36]	@ 0x24
 80035da:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80035de:	460b      	mov	r3, r1
 80035e0:	ea4f 6923 	mov.w	r9, r3, asr #24
 80035e4:	460b      	mov	r3, r1
 80035e6:	ea4f 2803 	mov.w	r8, r3, lsl #8
 80035ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80035ee:	eb12 0108 	adds.w	r1, r2, r8
 80035f2:	60b9      	str	r1, [r7, #8]
 80035f4:	eb43 0309 	adc.w	r3, r3, r9
 80035f8:	60fb      	str	r3, [r7, #12]
 80035fa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80035fe:	e9c7 3410 	strd	r3, r4, [r7, #64]	@ 0x40
    dest1 += (uint64_t) src1 >> (FP_96_76_DIGIT_SIZE - FP_112_76_DIGIT_SIZE);     // 20
 8003602:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003604:	17da      	asrs	r2, r3, #31
 8003606:	469a      	mov	sl, r3
 8003608:	4693      	mov	fp, r2
 800360a:	f04f 0200 	mov.w	r2, #0
 800360e:	f04f 0300 	mov.w	r3, #0
 8003612:	ea4f 521a 	mov.w	r2, sl, lsr #20
 8003616:	ea42 320b 	orr.w	r2, r2, fp, lsl #12
 800361a:	ea4f 531b 	mov.w	r3, fp, lsr #20
 800361e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8003622:	1884      	adds	r4, r0, r2
 8003624:	603c      	str	r4, [r7, #0]
 8003626:	eb41 0303 	adc.w	r3, r1, r3
 800362a:	607b      	str	r3, [r7, #4]
 800362c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003630:	e9c7 3410 	strd	r3, r4, [r7, #64]	@ 0x40

    dest->limb48[0] = dest0;
 8003634:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003636:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800363a:	e9c1 2300 	strd	r2, r3, [r1]
    dest->limb48[1] = dest1;
 800363e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003640:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003644:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8003648:	bf00      	nop
 800364a:	3764      	adds	r7, #100	@ 0x64
 800364c:	46bd      	mov	sp, r7
 800364e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003652:	4770      	bx	lr

08003654 <conditional_accumulate_fp112_96>:

void conditional_accumulate_fp112_96(fp112_76 *accum, const fp84_76 *x, int accepted){
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
    accum->digit[0] += x->digit[0]  & -(digit28)accepted;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	6819      	ldr	r1, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	425b      	negs	r3, r3
 800366c:	400b      	ands	r3, r1
 800366e:	441a      	add	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	601a      	str	r2, [r3, #0]
    accum->digit[1] += x->digit[1]  & -(digit28)accepted;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	685a      	ldr	r2, [r3, #4]
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	6859      	ldr	r1, [r3, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	425b      	negs	r3, r3
 8003680:	400b      	ands	r3, r1
 8003682:	441a      	add	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	605a      	str	r2, [r3, #4]
    accum->digit[2] += x->digit[2]  & -(digit28)accepted;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	6899      	ldr	r1, [r3, #8]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	425b      	negs	r3, r3
 8003694:	400b      	ands	r3, r1
 8003696:	441a      	add	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	609a      	str	r2, [r3, #8]
    // There are only three digits in x, so the fourth digit
    // of accum remains untouched.
    return;
 800369c:	bf00      	nop
}
 800369e:	3714      	adds	r7, #20
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <normalize_fp112_96>:

void normalize_fp112_96(fp112_76 *x){
 80036a8:	b480      	push	{r7}
 80036aa:	b089      	sub	sp, #36	@ 0x24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
    digit28 x0 = x->digit[0];
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	61fb      	str	r3, [r7, #28]
    digit28 x1 = x->digit[1];
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	61bb      	str	r3, [r7, #24]
    digit28 x2 = x->digit[2];
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	617b      	str	r3, [r7, #20]
    digit28 x3 = x->digit[3];
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	613b      	str	r3, [r7, #16]
    digit28 carry;

    carry = x0 >> FP_112_76_DIGIT_SIZE;     
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	171b      	asrs	r3, r3, #28
 80036cc:	60fb      	str	r3, [r7, #12]
    x1 += carry;     
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4413      	add	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
    x0 -= carry << FP_112_76_DIGIT_SIZE;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	071b      	lsls	r3, r3, #28
 80036da:	69fa      	ldr	r2, [r7, #28]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	61fb      	str	r3, [r7, #28]
    
    carry = x1 >> FP_112_76_DIGIT_SIZE;     
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	171b      	asrs	r3, r3, #28
 80036e4:	60fb      	str	r3, [r7, #12]
    x2 += carry;     
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4413      	add	r3, r2
 80036ec:	617b      	str	r3, [r7, #20]
    x1 -= carry << FP_112_76_DIGIT_SIZE;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	071b      	lsls	r3, r3, #28
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	61bb      	str	r3, [r7, #24]
    
    carry = x2 >> FP_112_76_DIGIT_SIZE;     
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	171b      	asrs	r3, r3, #28
 80036fc:	60fb      	str	r3, [r7, #12]
    x3 += carry;     
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4413      	add	r3, r2
 8003704:	613b      	str	r3, [r7, #16]
    x2 -= carry << FP_112_76_DIGIT_SIZE;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	071b      	lsls	r3, r3, #28
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	617b      	str	r3, [r7, #20]

    x->digit[0] = x0;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	69fa      	ldr	r2, [r7, #28]
 8003714:	601a      	str	r2, [r3, #0]
    x->digit[1] = x1;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	605a      	str	r2, [r3, #4]
    x->digit[2] = x2;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	609a      	str	r2, [r3, #8]
    x->digit[3] = x3;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	60da      	str	r2, [r3, #12]
    return;
 8003728:	bf00      	nop
}
 800372a:	3724      	adds	r7, #36	@ 0x24
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <set_to_zero_112>:
    carry = (first->digit[2] - second->digit[2] + carry) >> FP_112_76_DIGIT_SIZE;
    sign  = (first->digit[3] - second->digit[3] + carry) >> (FP_112_76_WORD_LEN - 1); // 0 or -1
    return sign + 1;
}

void set_to_zero_112(fp112_76 *x){
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
    x->digit[0] = 0;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]
    x->digit[1] = 0;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	605a      	str	r2, [r3, #4]
    x->digit[2] = 0;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	609a      	str	r2, [r3, #8]
    x->digit[3] = 0;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	60da      	str	r2, [r3, #12]
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <KeccakF1600_StateExtractBytes>:
    (uint64_t)0x0000000080000001ULL,
    (uint64_t)0x8000000080008008ULL
};

void KeccakF1600_StateExtractBytes(uint64_t *state, unsigned char *data, unsigned int offset, unsigned int length)
{
 8003760:	b4f0      	push	{r4, r5, r6, r7}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
 800376c:	603b      	str	r3, [r7, #0]
    unsigned int i;
    for(i=0;i<length;i++)
 800376e:	2300      	movs	r3, #0
 8003770:	617b      	str	r3, [r7, #20]
 8003772:	e024      	b.n	80037be <KeccakF1600_StateExtractBytes+0x5e>
    {
        data[i] = state[(offset + i) >> 3] >> (8*((offset + i) & 0x07));
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	4413      	add	r3, r2
 800377a:	08db      	lsrs	r3, r3, #3
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	4413      	add	r3, r2
 8003782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	6979      	ldr	r1, [r7, #20]
 800378a:	4401      	add	r1, r0
 800378c:	f001 0107 	and.w	r1, r1, #7
 8003790:	00c9      	lsls	r1, r1, #3
 8003792:	f1c1 0620 	rsb	r6, r1, #32
 8003796:	f1a1 0020 	sub.w	r0, r1, #32
 800379a:	fa22 f401 	lsr.w	r4, r2, r1
 800379e:	fa03 f606 	lsl.w	r6, r3, r6
 80037a2:	4334      	orrs	r4, r6
 80037a4:	fa23 f000 	lsr.w	r0, r3, r0
 80037a8:	4304      	orrs	r4, r0
 80037aa:	fa23 f501 	lsr.w	r5, r3, r1
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	4413      	add	r3, r2
 80037b4:	b2e2      	uxtb	r2, r4
 80037b6:	701a      	strb	r2, [r3, #0]
    for(i=0;i<length;i++)
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	3301      	adds	r3, #1
 80037bc:	617b      	str	r3, [r7, #20]
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d3d6      	bcc.n	8003774 <KeccakF1600_StateExtractBytes+0x14>
    }
}
 80037c6:	bf00      	nop
 80037c8:	bf00      	nop
 80037ca:	3718      	adds	r7, #24
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bcf0      	pop	{r4, r5, r6, r7}
 80037d0:	4770      	bx	lr

080037d2 <KeccakF1600_StateXORBytes>:

void KeccakF1600_StateXORBytes(uint64_t *state, const unsigned char *data, unsigned int offset, unsigned int length)
{
 80037d2:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
 80037e0:	603b      	str	r3, [r7, #0]
    unsigned int i;
    for(i = 0; i < length; i++)
 80037e2:	2300      	movs	r3, #0
 80037e4:	617b      	str	r3, [r7, #20]
 80037e6:	e034      	b.n	8003852 <KeccakF1600_StateXORBytes+0x80>
    {
        state[(offset + i) >> 3] ^= (uint64_t)data[i] << (8 * ((offset + i) & 0x07));
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	4413      	add	r3, r2
 80037ee:	08db      	lsrs	r3, r3, #3
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	4413      	add	r3, r2
 80037f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	4413      	add	r3, r2
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2200      	movs	r2, #0
 8003806:	4698      	mov	r8, r3
 8003808:	4691      	mov	r9, r2
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	4413      	add	r3, r2
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	f1a3 0620 	sub.w	r6, r3, #32
 800381a:	f1c3 0220 	rsb	r2, r3, #32
 800381e:	fa09 f503 	lsl.w	r5, r9, r3
 8003822:	fa08 f606 	lsl.w	r6, r8, r6
 8003826:	4335      	orrs	r5, r6
 8003828:	fa28 f202 	lsr.w	r2, r8, r2
 800382c:	4315      	orrs	r5, r2
 800382e:	fa08 f403 	lsl.w	r4, r8, r3
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	4413      	add	r3, r2
 8003838:	08db      	lsrs	r3, r3, #3
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	4413      	add	r3, r2
 8003840:	ea80 0a04 	eor.w	sl, r0, r4
 8003844:	ea81 0b05 	eor.w	fp, r1, r5
 8003848:	e9c3 ab00 	strd	sl, fp, [r3]
    for(i = 0; i < length; i++)
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	3301      	adds	r3, #1
 8003850:	617b      	str	r3, [r7, #20]
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d3c6      	bcc.n	80037e8 <KeccakF1600_StateXORBytes+0x16>
    }
}
 800385a:	bf00      	nop
 800385c:	bf00      	nop
 800385e:	3718      	adds	r7, #24
 8003860:	46bd      	mov	sp, r7
 8003862:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003866:	4770      	bx	lr

08003868 <KeccakF1600_StatePermute>:

void KeccakF1600_StatePermute(uint64_t * state)
{
 8003868:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800386c:	f6ad 3d88 	subw	sp, sp, #2952	@ 0xb88
 8003870:	af00      	add	r7, sp, #0
 8003872:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003876:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800387a:	6018      	str	r0, [r3, #0]
        uint64_t Eka, Eke, Eki, Eko, Eku;
        uint64_t Ema, Eme, Emi, Emo, Emu;
        uint64_t Esa, Ese, Esi, Eso, Esu;

        //copyFromState(A, state)
        Aba = state[ 0];
 800387c:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003880:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388a:	f607 3178 	addw	r1, r7, #2936	@ 0xb78
 800388e:	e9c1 2300 	strd	r2, r3, [r1]
        Abe = state[ 1];
 8003892:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003896:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80038a0:	f507 6137 	add.w	r1, r7, #2928	@ 0xb70
 80038a4:	e9c1 2300 	strd	r2, r3, [r1]
        Abi = state[ 2];
 80038a8:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80038ac:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80038b6:	f607 3168 	addw	r1, r7, #2920	@ 0xb68
 80038ba:	e9c1 2300 	strd	r2, r3, [r1]
        Abo = state[ 3];
 80038be:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80038c2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80038cc:	f507 6136 	add.w	r1, r7, #2912	@ 0xb60
 80038d0:	e9c1 2300 	strd	r2, r3, [r1]
        Abu = state[ 4];
 80038d4:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80038d8:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80038e2:	f607 3158 	addw	r1, r7, #2904	@ 0xb58
 80038e6:	e9c1 2300 	strd	r2, r3, [r1]
        Aga = state[ 5];
 80038ea:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80038ee:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80038f8:	f507 6135 	add.w	r1, r7, #2896	@ 0xb50
 80038fc:	e9c1 2300 	strd	r2, r3, [r1]
        Age = state[ 6];
 8003900:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003904:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800390e:	f607 3148 	addw	r1, r7, #2888	@ 0xb48
 8003912:	e9c1 2300 	strd	r2, r3, [r1]
        Agi = state[ 7];
 8003916:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800391a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8003924:	f507 6134 	add.w	r1, r7, #2880	@ 0xb40
 8003928:	e9c1 2300 	strd	r2, r3, [r1]
        Ago = state[ 8];
 800392c:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003930:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800393a:	f607 3138 	addw	r1, r7, #2872	@ 0xb38
 800393e:	e9c1 2300 	strd	r2, r3, [r1]
        Agu = state[ 9];
 8003942:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003946:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8003950:	f507 6133 	add.w	r1, r7, #2864	@ 0xb30
 8003954:	e9c1 2300 	strd	r2, r3, [r1]
        Aka = state[10];
 8003958:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800395c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8003966:	f607 3128 	addw	r1, r7, #2856	@ 0xb28
 800396a:	e9c1 2300 	strd	r2, r3, [r1]
        Ake = state[11];
 800396e:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003972:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800397c:	f507 6132 	add.w	r1, r7, #2848	@ 0xb20
 8003980:	e9c1 2300 	strd	r2, r3, [r1]
        Aki = state[12];
 8003984:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003988:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8003992:	f607 3118 	addw	r1, r7, #2840	@ 0xb18
 8003996:	e9c1 2300 	strd	r2, r3, [r1]
        Ako = state[13];
 800399a:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800399e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80039a8:	f507 6131 	add.w	r1, r7, #2832	@ 0xb10
 80039ac:	e9c1 2300 	strd	r2, r3, [r1]
        Aku = state[14];
 80039b0:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80039b4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 80039be:	f607 3108 	addw	r1, r7, #2824	@ 0xb08
 80039c2:	e9c1 2300 	strd	r2, r3, [r1]
        Ama = state[15];
 80039c6:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80039ca:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 80039d4:	f507 6130 	add.w	r1, r7, #2816	@ 0xb00
 80039d8:	e9c1 2300 	strd	r2, r3, [r1]
        Ame = state[16];
 80039dc:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80039e0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 80039ea:	f607 21f8 	addw	r1, r7, #2808	@ 0xaf8
 80039ee:	e9c1 2300 	strd	r2, r3, [r1]
        Ami = state[17];
 80039f2:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80039f6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8003a00:	f507 612f 	add.w	r1, r7, #2800	@ 0xaf0
 8003a04:	e9c1 2300 	strd	r2, r3, [r1]
        Amo = state[18];
 8003a08:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003a0c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8003a16:	f607 21e8 	addw	r1, r7, #2792	@ 0xae8
 8003a1a:	e9c1 2300 	strd	r2, r3, [r1]
        Amu = state[19];
 8003a1e:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003a22:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8003a2c:	f507 612e 	add.w	r1, r7, #2784	@ 0xae0
 8003a30:	e9c1 2300 	strd	r2, r3, [r1]
        Asa = state[20];
 8003a34:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003a38:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8003a42:	f607 21d8 	addw	r1, r7, #2776	@ 0xad8
 8003a46:	e9c1 2300 	strd	r2, r3, [r1]
        Ase = state[21];
 8003a4a:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003a4e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	@ 0xa8
 8003a58:	f507 612d 	add.w	r1, r7, #2768	@ 0xad0
 8003a5c:	e9c1 2300 	strd	r2, r3, [r1]
        Asi = state[22];
 8003a60:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003a64:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	@ 0xb0
 8003a6e:	f607 21c8 	addw	r1, r7, #2760	@ 0xac8
 8003a72:	e9c1 2300 	strd	r2, r3, [r1]
        Aso = state[23];
 8003a76:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003a7a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	@ 0xb8
 8003a84:	f507 612c 	add.w	r1, r7, #2752	@ 0xac0
 8003a88:	e9c1 2300 	strd	r2, r3, [r1]
        Asu = state[24];
 8003a8c:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003a90:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 8003a9a:	f607 21b8 	addw	r1, r7, #2744	@ 0xab8
 8003a9e:	e9c1 2300 	strd	r2, r3, [r1]

        for( round = 0; round < NROUNDS; round += 2 )
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	f8c7 3b84 	str.w	r3, [r7, #2948]	@ 0xb84
 8003aa8:	f002 bdf7 	b.w	800669a <KeccakF1600_StatePermute+0x2e32>
        {
            //    prepareTheta
            BCa = Aba^Aga^Aka^Ama^Asa;
 8003aac:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 8003ab0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ab4:	f507 6335 	add.w	r3, r7, #2896	@ 0xb50
 8003ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003abc:	ea80 0602 	eor.w	r6, r0, r2
 8003ac0:	f8c7 6990 	str.w	r6, [r7, #2448]	@ 0x990
 8003ac4:	404b      	eors	r3, r1
 8003ac6:	f8c7 3994 	str.w	r3, [r7, #2452]	@ 0x994
 8003aca:	f607 3328 	addw	r3, r7, #2856	@ 0xb28
 8003ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad2:	f8d7 1990 	ldr.w	r1, [r7, #2448]	@ 0x990
 8003ad6:	4051      	eors	r1, r2
 8003ad8:	f8c7 1988 	str.w	r1, [r7, #2440]	@ 0x988
 8003adc:	f8d7 1994 	ldr.w	r1, [r7, #2452]	@ 0x994
 8003ae0:	404b      	eors	r3, r1
 8003ae2:	f8c7 398c 	str.w	r3, [r7, #2444]	@ 0x98c
 8003ae6:	f507 6330 	add.w	r3, r7, #2816	@ 0xb00
 8003aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aee:	f8d7 1988 	ldr.w	r1, [r7, #2440]	@ 0x988
 8003af2:	4051      	eors	r1, r2
 8003af4:	f8c7 1980 	str.w	r1, [r7, #2432]	@ 0x980
 8003af8:	f8d7 198c 	ldr.w	r1, [r7, #2444]	@ 0x98c
 8003afc:	404b      	eors	r3, r1
 8003afe:	f8c7 3984 	str.w	r3, [r7, #2436]	@ 0x984
 8003b02:	f607 23d8 	addw	r3, r7, #2776	@ 0xad8
 8003b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b0a:	f8d7 1980 	ldr.w	r1, [r7, #2432]	@ 0x980
 8003b0e:	4051      	eors	r1, r2
 8003b10:	f8c7 1548 	str.w	r1, [r7, #1352]	@ 0x548
 8003b14:	f8d7 1984 	ldr.w	r1, [r7, #2436]	@ 0x984
 8003b18:	404b      	eors	r3, r1
 8003b1a:	f8c7 354c 	str.w	r3, [r7, #1356]	@ 0x54c
 8003b1e:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8003b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b26:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 8003b2a:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = Abe^Age^Ake^Ame^Ase;
 8003b2e:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8003b32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b36:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 8003b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3e:	ea80 0602 	eor.w	r6, r0, r2
 8003b42:	f8c7 6978 	str.w	r6, [r7, #2424]	@ 0x978
 8003b46:	404b      	eors	r3, r1
 8003b48:	f8c7 397c 	str.w	r3, [r7, #2428]	@ 0x97c
 8003b4c:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 8003b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b54:	f8d7 1978 	ldr.w	r1, [r7, #2424]	@ 0x978
 8003b58:	4051      	eors	r1, r2
 8003b5a:	f8c7 1970 	str.w	r1, [r7, #2416]	@ 0x970
 8003b5e:	f8d7 197c 	ldr.w	r1, [r7, #2428]	@ 0x97c
 8003b62:	404b      	eors	r3, r1
 8003b64:	f8c7 3974 	str.w	r3, [r7, #2420]	@ 0x974
 8003b68:	f607 23f8 	addw	r3, r7, #2808	@ 0xaf8
 8003b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b70:	f8d7 1970 	ldr.w	r1, [r7, #2416]	@ 0x970
 8003b74:	4051      	eors	r1, r2
 8003b76:	f8c7 1968 	str.w	r1, [r7, #2408]	@ 0x968
 8003b7a:	f8d7 1974 	ldr.w	r1, [r7, #2420]	@ 0x974
 8003b7e:	404b      	eors	r3, r1
 8003b80:	f8c7 396c 	str.w	r3, [r7, #2412]	@ 0x96c
 8003b84:	f507 632d 	add.w	r3, r7, #2768	@ 0xad0
 8003b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8c:	f8d7 1968 	ldr.w	r1, [r7, #2408]	@ 0x968
 8003b90:	4051      	eors	r1, r2
 8003b92:	f8c7 1540 	str.w	r1, [r7, #1344]	@ 0x540
 8003b96:	f8d7 196c 	ldr.w	r1, [r7, #2412]	@ 0x96c
 8003b9a:	404b      	eors	r3, r1
 8003b9c:	f8c7 3544 	str.w	r3, [r7, #1348]	@ 0x544
 8003ba0:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8003ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba8:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 8003bac:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = Abi^Agi^Aki^Ami^Asi;
 8003bb0:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8003bb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003bb8:	f507 6334 	add.w	r3, r7, #2880	@ 0xb40
 8003bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc0:	ea80 0602 	eor.w	r6, r0, r2
 8003bc4:	f8c7 6960 	str.w	r6, [r7, #2400]	@ 0x960
 8003bc8:	404b      	eors	r3, r1
 8003bca:	f8c7 3964 	str.w	r3, [r7, #2404]	@ 0x964
 8003bce:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8003bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd6:	f8d7 1960 	ldr.w	r1, [r7, #2400]	@ 0x960
 8003bda:	4051      	eors	r1, r2
 8003bdc:	f8c7 1958 	str.w	r1, [r7, #2392]	@ 0x958
 8003be0:	f8d7 1964 	ldr.w	r1, [r7, #2404]	@ 0x964
 8003be4:	404b      	eors	r3, r1
 8003be6:	f8c7 395c 	str.w	r3, [r7, #2396]	@ 0x95c
 8003bea:	f507 632f 	add.w	r3, r7, #2800	@ 0xaf0
 8003bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf2:	f8d7 1958 	ldr.w	r1, [r7, #2392]	@ 0x958
 8003bf6:	4051      	eors	r1, r2
 8003bf8:	f8c7 1950 	str.w	r1, [r7, #2384]	@ 0x950
 8003bfc:	f8d7 195c 	ldr.w	r1, [r7, #2396]	@ 0x95c
 8003c00:	404b      	eors	r3, r1
 8003c02:	f8c7 3954 	str.w	r3, [r7, #2388]	@ 0x954
 8003c06:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 8003c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0e:	f8d7 1950 	ldr.w	r1, [r7, #2384]	@ 0x950
 8003c12:	4051      	eors	r1, r2
 8003c14:	f8c7 1538 	str.w	r1, [r7, #1336]	@ 0x538
 8003c18:	f8d7 1954 	ldr.w	r1, [r7, #2388]	@ 0x954
 8003c1c:	404b      	eors	r3, r1
 8003c1e:	f8c7 353c 	str.w	r3, [r7, #1340]	@ 0x53c
 8003c22:	f507 63a7 	add.w	r3, r7, #1336	@ 0x538
 8003c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2a:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 8003c2e:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = Abo^Ago^Ako^Amo^Aso;
 8003c32:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 8003c36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c3a:	f607 3338 	addw	r3, r7, #2872	@ 0xb38
 8003c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c42:	ea80 0602 	eor.w	r6, r0, r2
 8003c46:	f8c7 6948 	str.w	r6, [r7, #2376]	@ 0x948
 8003c4a:	404b      	eors	r3, r1
 8003c4c:	f8c7 394c 	str.w	r3, [r7, #2380]	@ 0x94c
 8003c50:	f507 6331 	add.w	r3, r7, #2832	@ 0xb10
 8003c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c58:	f8d7 1948 	ldr.w	r1, [r7, #2376]	@ 0x948
 8003c5c:	4051      	eors	r1, r2
 8003c5e:	f8c7 1940 	str.w	r1, [r7, #2368]	@ 0x940
 8003c62:	f8d7 194c 	ldr.w	r1, [r7, #2380]	@ 0x94c
 8003c66:	404b      	eors	r3, r1
 8003c68:	f8c7 3944 	str.w	r3, [r7, #2372]	@ 0x944
 8003c6c:	f607 23e8 	addw	r3, r7, #2792	@ 0xae8
 8003c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c74:	f8d7 1940 	ldr.w	r1, [r7, #2368]	@ 0x940
 8003c78:	4051      	eors	r1, r2
 8003c7a:	f8c7 1938 	str.w	r1, [r7, #2360]	@ 0x938
 8003c7e:	f8d7 1944 	ldr.w	r1, [r7, #2372]	@ 0x944
 8003c82:	404b      	eors	r3, r1
 8003c84:	f8c7 393c 	str.w	r3, [r7, #2364]	@ 0x93c
 8003c88:	f507 632c 	add.w	r3, r7, #2752	@ 0xac0
 8003c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c90:	f8d7 1938 	ldr.w	r1, [r7, #2360]	@ 0x938
 8003c94:	4051      	eors	r1, r2
 8003c96:	f8c7 1530 	str.w	r1, [r7, #1328]	@ 0x530
 8003c9a:	f8d7 193c 	ldr.w	r1, [r7, #2364]	@ 0x93c
 8003c9e:	404b      	eors	r3, r1
 8003ca0:	f8c7 3534 	str.w	r3, [r7, #1332]	@ 0x534
 8003ca4:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8003ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cac:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 8003cb0:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = Abu^Agu^Aku^Amu^Asu;
 8003cb4:	f607 3358 	addw	r3, r7, #2904	@ 0xb58
 8003cb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cbc:	f507 6333 	add.w	r3, r7, #2864	@ 0xb30
 8003cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc4:	ea80 0602 	eor.w	r6, r0, r2
 8003cc8:	f8c7 6930 	str.w	r6, [r7, #2352]	@ 0x930
 8003ccc:	404b      	eors	r3, r1
 8003cce:	f8c7 3934 	str.w	r3, [r7, #2356]	@ 0x934
 8003cd2:	f607 3308 	addw	r3, r7, #2824	@ 0xb08
 8003cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cda:	f8d7 1930 	ldr.w	r1, [r7, #2352]	@ 0x930
 8003cde:	4051      	eors	r1, r2
 8003ce0:	f8c7 1928 	str.w	r1, [r7, #2344]	@ 0x928
 8003ce4:	f8d7 1934 	ldr.w	r1, [r7, #2356]	@ 0x934
 8003ce8:	404b      	eors	r3, r1
 8003cea:	f8c7 392c 	str.w	r3, [r7, #2348]	@ 0x92c
 8003cee:	f507 632e 	add.w	r3, r7, #2784	@ 0xae0
 8003cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf6:	f8d7 1928 	ldr.w	r1, [r7, #2344]	@ 0x928
 8003cfa:	4051      	eors	r1, r2
 8003cfc:	f8c7 1920 	str.w	r1, [r7, #2336]	@ 0x920
 8003d00:	f8d7 192c 	ldr.w	r1, [r7, #2348]	@ 0x92c
 8003d04:	404b      	eors	r3, r1
 8003d06:	f8c7 3924 	str.w	r3, [r7, #2340]	@ 0x924
 8003d0a:	f607 23b8 	addw	r3, r7, #2744	@ 0xab8
 8003d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d12:	f8d7 1920 	ldr.w	r1, [r7, #2336]	@ 0x920
 8003d16:	4051      	eors	r1, r2
 8003d18:	f8c7 1528 	str.w	r1, [r7, #1320]	@ 0x528
 8003d1c:	f8d7 1924 	ldr.w	r1, [r7, #2340]	@ 0x924
 8003d20:	404b      	eors	r3, r1
 8003d22:	f8c7 352c 	str.w	r3, [r7, #1324]	@ 0x52c
 8003d26:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2e:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 8003d32:	e9c1 2300 	strd	r2, r3, [r1]

            //thetaRhoPiChiIotaPrepareTheta(round  , A, E)
            Da = BCu^ROL(BCe, 1);
 8003d36:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	@ 0xaa8
 8003d3a:	0fda      	lsrs	r2, r3, #31
 8003d3c:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	@ 0xaac
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	4313      	orrs	r3, r2
 8003d44:	f8c7 391c 	str.w	r3, [r7, #2332]	@ 0x91c
 8003d48:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	@ 0xaac
 8003d4c:	0fda      	lsrs	r2, r3, #31
 8003d4e:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	@ 0xaa8
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	4313      	orrs	r3, r2
 8003d56:	f8c7 3918 	str.w	r3, [r7, #2328]	@ 0x918
 8003d5a:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8003d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d62:	f8d7 1918 	ldr.w	r1, [r7, #2328]	@ 0x918
 8003d66:	4051      	eors	r1, r2
 8003d68:	f8c7 1520 	str.w	r1, [r7, #1312]	@ 0x520
 8003d6c:	f8d7 191c 	ldr.w	r1, [r7, #2332]	@ 0x91c
 8003d70:	404b      	eors	r3, r1
 8003d72:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
 8003d76:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7e:	f607 2188 	addw	r1, r7, #2696	@ 0xa88
 8003d82:	e9c1 2300 	strd	r2, r3, [r1]
            De = BCa^ROL(BCi, 1);
 8003d86:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	@ 0xaa0
 8003d8a:	0fda      	lsrs	r2, r3, #31
 8003d8c:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	@ 0xaa4
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	4313      	orrs	r3, r2
 8003d94:	f8c7 3914 	str.w	r3, [r7, #2324]	@ 0x914
 8003d98:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	@ 0xaa4
 8003d9c:	0fda      	lsrs	r2, r3, #31
 8003d9e:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	@ 0xaa0
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	4313      	orrs	r3, r2
 8003da6:	f8c7 3910 	str.w	r3, [r7, #2320]	@ 0x910
 8003daa:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8003dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db2:	f8d7 1910 	ldr.w	r1, [r7, #2320]	@ 0x910
 8003db6:	4051      	eors	r1, r2
 8003db8:	f8c7 1518 	str.w	r1, [r7, #1304]	@ 0x518
 8003dbc:	f8d7 1914 	ldr.w	r1, [r7, #2324]	@ 0x914
 8003dc0:	404b      	eors	r3, r1
 8003dc2:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
 8003dc6:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8003dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dce:	f507 6128 	add.w	r1, r7, #2688	@ 0xa80
 8003dd2:	e9c1 2300 	strd	r2, r3, [r1]
            Di = BCe^ROL(BCo, 1);
 8003dd6:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	@ 0xa98
 8003dda:	0fda      	lsrs	r2, r3, #31
 8003ddc:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	@ 0xa9c
 8003de0:	005b      	lsls	r3, r3, #1
 8003de2:	4313      	orrs	r3, r2
 8003de4:	f8c7 390c 	str.w	r3, [r7, #2316]	@ 0x90c
 8003de8:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	@ 0xa9c
 8003dec:	0fda      	lsrs	r2, r3, #31
 8003dee:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	@ 0xa98
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	4313      	orrs	r3, r2
 8003df6:	f8c7 3908 	str.w	r3, [r7, #2312]	@ 0x908
 8003dfa:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8003dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e02:	f8d7 1908 	ldr.w	r1, [r7, #2312]	@ 0x908
 8003e06:	4051      	eors	r1, r2
 8003e08:	f8c7 1510 	str.w	r1, [r7, #1296]	@ 0x510
 8003e0c:	f8d7 190c 	ldr.w	r1, [r7, #2316]	@ 0x90c
 8003e10:	404b      	eors	r3, r1
 8003e12:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
 8003e16:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8003e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1e:	f607 2178 	addw	r1, r7, #2680	@ 0xa78
 8003e22:	e9c1 2300 	strd	r2, r3, [r1]
            Do = BCi^ROL(BCu, 1);
 8003e26:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	@ 0xa90
 8003e2a:	0fda      	lsrs	r2, r3, #31
 8003e2c:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	@ 0xa94
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	4313      	orrs	r3, r2
 8003e34:	f8c7 3904 	str.w	r3, [r7, #2308]	@ 0x904
 8003e38:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	@ 0xa94
 8003e3c:	0fda      	lsrs	r2, r3, #31
 8003e3e:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	@ 0xa90
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	4313      	orrs	r3, r2
 8003e46:	f8c7 3900 	str.w	r3, [r7, #2304]	@ 0x900
 8003e4a:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8003e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e52:	f8d7 1900 	ldr.w	r1, [r7, #2304]	@ 0x900
 8003e56:	4051      	eors	r1, r2
 8003e58:	f8c7 1508 	str.w	r1, [r7, #1288]	@ 0x508
 8003e5c:	f8d7 1904 	ldr.w	r1, [r7, #2308]	@ 0x904
 8003e60:	404b      	eors	r3, r1
 8003e62:	f8c7 350c 	str.w	r3, [r7, #1292]	@ 0x50c
 8003e66:	f507 63a1 	add.w	r3, r7, #1288	@ 0x508
 8003e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6e:	f507 6127 	add.w	r1, r7, #2672	@ 0xa70
 8003e72:	e9c1 2300 	strd	r2, r3, [r1]
            Du = BCo^ROL(BCa, 1);
 8003e76:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	@ 0xab0
 8003e7a:	0fda      	lsrs	r2, r3, #31
 8003e7c:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	@ 0xab4
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	4313      	orrs	r3, r2
 8003e84:	f8c7 38fc 	str.w	r3, [r7, #2300]	@ 0x8fc
 8003e88:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	@ 0xab4
 8003e8c:	0fda      	lsrs	r2, r3, #31
 8003e8e:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	@ 0xab0
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	4313      	orrs	r3, r2
 8003e96:	f8c7 38f8 	str.w	r3, [r7, #2296]	@ 0x8f8
 8003e9a:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8003e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea2:	f8d7 18f8 	ldr.w	r1, [r7, #2296]	@ 0x8f8
 8003ea6:	4051      	eors	r1, r2
 8003ea8:	f8c7 1500 	str.w	r1, [r7, #1280]	@ 0x500
 8003eac:	f8d7 18fc 	ldr.w	r1, [r7, #2300]	@ 0x8fc
 8003eb0:	404b      	eors	r3, r1
 8003eb2:	f8c7 3504 	str.w	r3, [r7, #1284]	@ 0x504
 8003eb6:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8003eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ebe:	f607 2168 	addw	r1, r7, #2664	@ 0xa68
 8003ec2:	e9c1 2300 	strd	r2, r3, [r1]

            Aba ^= Da;
 8003ec6:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 8003eca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ece:	f607 2388 	addw	r3, r7, #2696	@ 0xa88
 8003ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed6:	ea80 0602 	eor.w	r6, r0, r2
 8003eda:	f8c7 64f8 	str.w	r6, [r7, #1272]	@ 0x4f8
 8003ede:	404b      	eors	r3, r1
 8003ee0:	f8c7 34fc 	str.w	r3, [r7, #1276]	@ 0x4fc
 8003ee4:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8003ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eec:	f607 3178 	addw	r1, r7, #2936	@ 0xb78
 8003ef0:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = Aba;
 8003ef4:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 8003ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efc:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 8003f00:	e9c1 2300 	strd	r2, r3, [r1]
            Age ^= De;
 8003f04:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 8003f08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f0c:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8003f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f14:	ea80 0602 	eor.w	r6, r0, r2
 8003f18:	f8c7 64f0 	str.w	r6, [r7, #1264]	@ 0x4f0
 8003f1c:	404b      	eors	r3, r1
 8003f1e:	f8c7 34f4 	str.w	r3, [r7, #1268]	@ 0x4f4
 8003f22:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8003f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2a:	f607 3148 	addw	r1, r7, #2888	@ 0xb48
 8003f2e:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Age, 44);
 8003f32:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	@ 0xb4c
 8003f36:	031a      	lsls	r2, r3, #12
 8003f38:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	@ 0xb48
 8003f3c:	0d1b      	lsrs	r3, r3, #20
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	f8c7 34e8 	str.w	r3, [r7, #1256]	@ 0x4e8
 8003f44:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	@ 0xb48
 8003f48:	031a      	lsls	r2, r3, #12
 8003f4a:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	@ 0xb4c
 8003f4e:	0d1b      	lsrs	r3, r3, #20
 8003f50:	4313      	orrs	r3, r2
 8003f52:	f8c7 34ec 	str.w	r3, [r7, #1260]	@ 0x4ec
 8003f56:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8003f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f5e:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 8003f62:	e9c1 2300 	strd	r2, r3, [r1]
            Aki ^= Di;
 8003f66:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8003f6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f6e:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 8003f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f76:	ea80 0602 	eor.w	r6, r0, r2
 8003f7a:	f8c7 64e0 	str.w	r6, [r7, #1248]	@ 0x4e0
 8003f7e:	404b      	eors	r3, r1
 8003f80:	f8c7 34e4 	str.w	r3, [r7, #1252]	@ 0x4e4
 8003f84:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8003f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8c:	f607 3118 	addw	r1, r7, #2840	@ 0xb18
 8003f90:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Aki, 43);
 8003f94:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	@ 0xb1c
 8003f98:	02da      	lsls	r2, r3, #11
 8003f9a:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	@ 0xb18
 8003f9e:	0d5b      	lsrs	r3, r3, #21
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	f8c7 34d8 	str.w	r3, [r7, #1240]	@ 0x4d8
 8003fa6:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	@ 0xb18
 8003faa:	02da      	lsls	r2, r3, #11
 8003fac:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	@ 0xb1c
 8003fb0:	0d5b      	lsrs	r3, r3, #21
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	f8c7 34dc 	str.w	r3, [r7, #1244]	@ 0x4dc
 8003fb8:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8003fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc0:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 8003fc4:	e9c1 2300 	strd	r2, r3, [r1]
            Amo ^= Do;
 8003fc8:	f607 23e8 	addw	r3, r7, #2792	@ 0xae8
 8003fcc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003fd0:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 8003fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd8:	ea80 0602 	eor.w	r6, r0, r2
 8003fdc:	f8c7 64d0 	str.w	r6, [r7, #1232]	@ 0x4d0
 8003fe0:	404b      	eors	r3, r1
 8003fe2:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
 8003fe6:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8003fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fee:	f607 21e8 	addw	r1, r7, #2792	@ 0xae8
 8003ff2:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Amo, 21);
 8003ff6:	f8d7 3ae8 	ldr.w	r3, [r7, #2792]	@ 0xae8
 8003ffa:	0ada      	lsrs	r2, r3, #11
 8003ffc:	f8d7 3aec 	ldr.w	r3, [r7, #2796]	@ 0xaec
 8004000:	055b      	lsls	r3, r3, #21
 8004002:	4313      	orrs	r3, r2
 8004004:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc
 8004008:	f8d7 3aec 	ldr.w	r3, [r7, #2796]	@ 0xaec
 800400c:	0ada      	lsrs	r2, r3, #11
 800400e:	f8d7 3ae8 	ldr.w	r3, [r7, #2792]	@ 0xae8
 8004012:	055b      	lsls	r3, r3, #21
 8004014:	4313      	orrs	r3, r2
 8004016:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
 800401a:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800401e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004022:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 8004026:	e9c1 2300 	strd	r2, r3, [r1]
            Asu ^= Du;
 800402a:	f607 23b8 	addw	r3, r7, #2744	@ 0xab8
 800402e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004032:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 8004036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403a:	ea80 0602 	eor.w	r6, r0, r2
 800403e:	f8c7 64c0 	str.w	r6, [r7, #1216]	@ 0x4c0
 8004042:	404b      	eors	r3, r1
 8004044:	f8c7 34c4 	str.w	r3, [r7, #1220]	@ 0x4c4
 8004048:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 800404c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004050:	f607 21b8 	addw	r1, r7, #2744	@ 0xab8
 8004054:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Asu, 14);
 8004058:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	@ 0xab8
 800405c:	0c9a      	lsrs	r2, r3, #18
 800405e:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	@ 0xabc
 8004062:	039b      	lsls	r3, r3, #14
 8004064:	4313      	orrs	r3, r2
 8004066:	f8c7 34bc 	str.w	r3, [r7, #1212]	@ 0x4bc
 800406a:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	@ 0xabc
 800406e:	0c9a      	lsrs	r2, r3, #18
 8004070:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	@ 0xab8
 8004074:	039b      	lsls	r3, r3, #14
 8004076:	4313      	orrs	r3, r2
 8004078:	f8c7 34b8 	str.w	r3, [r7, #1208]	@ 0x4b8
 800407c:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8004080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004084:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 8004088:	e9c1 2300 	strd	r2, r3, [r1]
            Eba =   BCa ^((~BCe)&  BCi );
 800408c:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8004090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004094:	43d1      	mvns	r1, r2
 8004096:	f8c7 18f0 	str.w	r1, [r7, #2288]	@ 0x8f0
 800409a:	43db      	mvns	r3, r3
 800409c:	f8c7 38f4 	str.w	r3, [r7, #2292]	@ 0x8f4
 80040a0:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 80040a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a8:	f8d7 18f0 	ldr.w	r1, [r7, #2288]	@ 0x8f0
 80040ac:	4011      	ands	r1, r2
 80040ae:	f8c7 18e8 	str.w	r1, [r7, #2280]	@ 0x8e8
 80040b2:	f8d7 18f4 	ldr.w	r1, [r7, #2292]	@ 0x8f4
 80040b6:	400b      	ands	r3, r1
 80040b8:	f8c7 38ec 	str.w	r3, [r7, #2284]	@ 0x8ec
 80040bc:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 80040c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c4:	f8d7 18e8 	ldr.w	r1, [r7, #2280]	@ 0x8e8
 80040c8:	4051      	eors	r1, r2
 80040ca:	f8c7 14b0 	str.w	r1, [r7, #1200]	@ 0x4b0
 80040ce:	f8d7 18ec 	ldr.w	r1, [r7, #2284]	@ 0x8ec
 80040d2:	404b      	eors	r3, r1
 80040d4:	f8c7 34b4 	str.w	r3, [r7, #1204]	@ 0x4b4
 80040d8:	f507 6396 	add.w	r3, r7, #1200	@ 0x4b0
 80040dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e0:	f507 6126 	add.w	r1, r7, #2656	@ 0xa60
 80040e4:	e9c1 2300 	strd	r2, r3, [r1]
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 80040e8:	4afd      	ldr	r2, [pc, #1012]	@ (80044e0 <KeccakF1600_StatePermute+0xc78>)
 80040ea:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	@ 0xb84
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	4413      	add	r3, r2
 80040f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80040f6:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 80040fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fe:	ea82 0600 	eor.w	r6, r2, r0
 8004102:	f8c7 64a8 	str.w	r6, [r7, #1192]	@ 0x4a8
 8004106:	404b      	eors	r3, r1
 8004108:	f8c7 34ac 	str.w	r3, [r7, #1196]	@ 0x4ac
 800410c:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8004110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004114:	f507 6126 	add.w	r1, r7, #2656	@ 0xa60
 8004118:	e9c1 2300 	strd	r2, r3, [r1]
            Ebe =   BCe ^((~BCi)&  BCo );
 800411c:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8004120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004124:	43d1      	mvns	r1, r2
 8004126:	f8c7 18e0 	str.w	r1, [r7, #2272]	@ 0x8e0
 800412a:	43db      	mvns	r3, r3
 800412c:	f8c7 38e4 	str.w	r3, [r7, #2276]	@ 0x8e4
 8004130:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8004134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004138:	f8d7 18e0 	ldr.w	r1, [r7, #2272]	@ 0x8e0
 800413c:	4011      	ands	r1, r2
 800413e:	f8c7 18d8 	str.w	r1, [r7, #2264]	@ 0x8d8
 8004142:	f8d7 18e4 	ldr.w	r1, [r7, #2276]	@ 0x8e4
 8004146:	400b      	ands	r3, r1
 8004148:	f8c7 38dc 	str.w	r3, [r7, #2268]	@ 0x8dc
 800414c:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8004150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004154:	f8d7 18d8 	ldr.w	r1, [r7, #2264]	@ 0x8d8
 8004158:	4051      	eors	r1, r2
 800415a:	f8c7 14a0 	str.w	r1, [r7, #1184]	@ 0x4a0
 800415e:	f8d7 18dc 	ldr.w	r1, [r7, #2268]	@ 0x8dc
 8004162:	404b      	eors	r3, r1
 8004164:	f8c7 34a4 	str.w	r3, [r7, #1188]	@ 0x4a4
 8004168:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 800416c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004170:	f607 2158 	addw	r1, r7, #2648	@ 0xa58
 8004174:	e9c1 2300 	strd	r2, r3, [r1]
            Ebi =   BCi ^((~BCo)&  BCu );
 8004178:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 800417c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004180:	43d1      	mvns	r1, r2
 8004182:	f8c7 18d0 	str.w	r1, [r7, #2256]	@ 0x8d0
 8004186:	43db      	mvns	r3, r3
 8004188:	f8c7 38d4 	str.w	r3, [r7, #2260]	@ 0x8d4
 800418c:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8004190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004194:	f8d7 18d0 	ldr.w	r1, [r7, #2256]	@ 0x8d0
 8004198:	4011      	ands	r1, r2
 800419a:	f8c7 18c8 	str.w	r1, [r7, #2248]	@ 0x8c8
 800419e:	f8d7 18d4 	ldr.w	r1, [r7, #2260]	@ 0x8d4
 80041a2:	400b      	ands	r3, r1
 80041a4:	f8c7 38cc 	str.w	r3, [r7, #2252]	@ 0x8cc
 80041a8:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 80041ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b0:	f8d7 18c8 	ldr.w	r1, [r7, #2248]	@ 0x8c8
 80041b4:	4051      	eors	r1, r2
 80041b6:	f8c7 1498 	str.w	r1, [r7, #1176]	@ 0x498
 80041ba:	f8d7 18cc 	ldr.w	r1, [r7, #2252]	@ 0x8cc
 80041be:	404b      	eors	r3, r1
 80041c0:	f8c7 349c 	str.w	r3, [r7, #1180]	@ 0x49c
 80041c4:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 80041c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041cc:	f507 6125 	add.w	r1, r7, #2640	@ 0xa50
 80041d0:	e9c1 2300 	strd	r2, r3, [r1]
            Ebo =   BCo ^((~BCu)&  BCa );
 80041d4:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 80041d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041dc:	43d1      	mvns	r1, r2
 80041de:	f8c7 18c0 	str.w	r1, [r7, #2240]	@ 0x8c0
 80041e2:	43db      	mvns	r3, r3
 80041e4:	f8c7 38c4 	str.w	r3, [r7, #2244]	@ 0x8c4
 80041e8:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 80041ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f0:	f8d7 18c0 	ldr.w	r1, [r7, #2240]	@ 0x8c0
 80041f4:	4011      	ands	r1, r2
 80041f6:	f8c7 18b8 	str.w	r1, [r7, #2232]	@ 0x8b8
 80041fa:	f8d7 18c4 	ldr.w	r1, [r7, #2244]	@ 0x8c4
 80041fe:	400b      	ands	r3, r1
 8004200:	f8c7 38bc 	str.w	r3, [r7, #2236]	@ 0x8bc
 8004204:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8004208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420c:	f8d7 18b8 	ldr.w	r1, [r7, #2232]	@ 0x8b8
 8004210:	4051      	eors	r1, r2
 8004212:	f8c7 1490 	str.w	r1, [r7, #1168]	@ 0x490
 8004216:	f8d7 18bc 	ldr.w	r1, [r7, #2236]	@ 0x8bc
 800421a:	404b      	eors	r3, r1
 800421c:	f8c7 3494 	str.w	r3, [r7, #1172]	@ 0x494
 8004220:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 8004224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004228:	f607 2148 	addw	r1, r7, #2632	@ 0xa48
 800422c:	e9c1 2300 	strd	r2, r3, [r1]
            Ebu =   BCu ^((~BCa)&  BCe );
 8004230:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8004234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004238:	43d1      	mvns	r1, r2
 800423a:	f8c7 18b0 	str.w	r1, [r7, #2224]	@ 0x8b0
 800423e:	43db      	mvns	r3, r3
 8004240:	f8c7 38b4 	str.w	r3, [r7, #2228]	@ 0x8b4
 8004244:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8004248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424c:	f8d7 18b0 	ldr.w	r1, [r7, #2224]	@ 0x8b0
 8004250:	4011      	ands	r1, r2
 8004252:	f8c7 18a8 	str.w	r1, [r7, #2216]	@ 0x8a8
 8004256:	f8d7 18b4 	ldr.w	r1, [r7, #2228]	@ 0x8b4
 800425a:	400b      	ands	r3, r1
 800425c:	f8c7 38ac 	str.w	r3, [r7, #2220]	@ 0x8ac
 8004260:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8004264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004268:	f8d7 18a8 	ldr.w	r1, [r7, #2216]	@ 0x8a8
 800426c:	4051      	eors	r1, r2
 800426e:	f8c7 1488 	str.w	r1, [r7, #1160]	@ 0x488
 8004272:	f8d7 18ac 	ldr.w	r1, [r7, #2220]	@ 0x8ac
 8004276:	404b      	eors	r3, r1
 8004278:	f8c7 348c 	str.w	r3, [r7, #1164]	@ 0x48c
 800427c:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 8004280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004284:	f507 6124 	add.w	r1, r7, #2624	@ 0xa40
 8004288:	e9c1 2300 	strd	r2, r3, [r1]

            Abo ^= Do;
 800428c:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 8004290:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004294:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 8004298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429c:	ea80 0602 	eor.w	r6, r0, r2
 80042a0:	f8c7 6480 	str.w	r6, [r7, #1152]	@ 0x480
 80042a4:	404b      	eors	r3, r1
 80042a6:	f8c7 3484 	str.w	r3, [r7, #1156]	@ 0x484
 80042aa:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80042ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b2:	f507 6136 	add.w	r1, r7, #2912	@ 0xb60
 80042b6:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abo, 28);
 80042ba:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	@ 0xb60
 80042be:	091a      	lsrs	r2, r3, #4
 80042c0:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	@ 0xb64
 80042c4:	071b      	lsls	r3, r3, #28
 80042c6:	4313      	orrs	r3, r2
 80042c8:	f8c7 347c 	str.w	r3, [r7, #1148]	@ 0x47c
 80042cc:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	@ 0xb64
 80042d0:	091a      	lsrs	r2, r3, #4
 80042d2:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	@ 0xb60
 80042d6:	071b      	lsls	r3, r3, #28
 80042d8:	4313      	orrs	r3, r2
 80042da:	f8c7 3478 	str.w	r3, [r7, #1144]	@ 0x478
 80042de:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 80042e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e6:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 80042ea:	e9c1 2300 	strd	r2, r3, [r1]
            Agu ^= Du;
 80042ee:	f507 6333 	add.w	r3, r7, #2864	@ 0xb30
 80042f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80042f6:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 80042fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042fe:	ea80 0602 	eor.w	r6, r0, r2
 8004302:	f8c7 6470 	str.w	r6, [r7, #1136]	@ 0x470
 8004306:	404b      	eors	r3, r1
 8004308:	f8c7 3474 	str.w	r3, [r7, #1140]	@ 0x474
 800430c:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8004310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004314:	f507 6133 	add.w	r1, r7, #2864	@ 0xb30
 8004318:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Agu, 20);
 800431c:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8004320:	0b1a      	lsrs	r2, r3, #12
 8004322:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8004326:	051b      	lsls	r3, r3, #20
 8004328:	4313      	orrs	r3, r2
 800432a:	f8c7 346c 	str.w	r3, [r7, #1132]	@ 0x46c
 800432e:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8004332:	0b1a      	lsrs	r2, r3, #12
 8004334:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8004338:	051b      	lsls	r3, r3, #20
 800433a:	4313      	orrs	r3, r2
 800433c:	f8c7 3468 	str.w	r3, [r7, #1128]	@ 0x468
 8004340:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8004344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004348:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 800434c:	e9c1 2300 	strd	r2, r3, [r1]
            Aka ^= Da;
 8004350:	f607 3328 	addw	r3, r7, #2856	@ 0xb28
 8004354:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004358:	f607 2388 	addw	r3, r7, #2696	@ 0xa88
 800435c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004360:	ea80 0602 	eor.w	r6, r0, r2
 8004364:	f8c7 6460 	str.w	r6, [r7, #1120]	@ 0x460
 8004368:	404b      	eors	r3, r1
 800436a:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 800436e:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 8004372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004376:	f607 3128 	addw	r1, r7, #2856	@ 0xb28
 800437a:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Aka,  3);
 800437e:	f8d7 3b28 	ldr.w	r3, [r7, #2856]	@ 0xb28
 8004382:	0f5a      	lsrs	r2, r3, #29
 8004384:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	@ 0xb2c
 8004388:	00db      	lsls	r3, r3, #3
 800438a:	4313      	orrs	r3, r2
 800438c:	f8c7 345c 	str.w	r3, [r7, #1116]	@ 0x45c
 8004390:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	@ 0xb2c
 8004394:	0f5a      	lsrs	r2, r3, #29
 8004396:	f8d7 3b28 	ldr.w	r3, [r7, #2856]	@ 0xb28
 800439a:	00db      	lsls	r3, r3, #3
 800439c:	4313      	orrs	r3, r2
 800439e:	f8c7 3458 	str.w	r3, [r7, #1112]	@ 0x458
 80043a2:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80043a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043aa:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 80043ae:	e9c1 2300 	strd	r2, r3, [r1]
            Ame ^= De;
 80043b2:	f607 23f8 	addw	r3, r7, #2808	@ 0xaf8
 80043b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80043ba:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80043be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c2:	ea80 0602 	eor.w	r6, r0, r2
 80043c6:	f8c7 6450 	str.w	r6, [r7, #1104]	@ 0x450
 80043ca:	404b      	eors	r3, r1
 80043cc:	f8c7 3454 	str.w	r3, [r7, #1108]	@ 0x454
 80043d0:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 80043d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d8:	f607 21f8 	addw	r1, r7, #2808	@ 0xaf8
 80043dc:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ame, 45);
 80043e0:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	@ 0xafc
 80043e4:	035a      	lsls	r2, r3, #13
 80043e6:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	@ 0xaf8
 80043ea:	0cdb      	lsrs	r3, r3, #19
 80043ec:	4313      	orrs	r3, r2
 80043ee:	f8c7 3448 	str.w	r3, [r7, #1096]	@ 0x448
 80043f2:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	@ 0xaf8
 80043f6:	035a      	lsls	r2, r3, #13
 80043f8:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	@ 0xafc
 80043fc:	0cdb      	lsrs	r3, r3, #19
 80043fe:	4313      	orrs	r3, r2
 8004400:	f8c7 344c 	str.w	r3, [r7, #1100]	@ 0x44c
 8004404:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8004408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440c:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 8004410:	e9c1 2300 	strd	r2, r3, [r1]
            Asi ^= Di;
 8004414:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 8004418:	e9d3 0100 	ldrd	r0, r1, [r3]
 800441c:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 8004420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004424:	ea80 0602 	eor.w	r6, r0, r2
 8004428:	f8c7 6440 	str.w	r6, [r7, #1088]	@ 0x440
 800442c:	404b      	eors	r3, r1
 800442e:	f8c7 3444 	str.w	r3, [r7, #1092]	@ 0x444
 8004432:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8004436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443a:	f607 21c8 	addw	r1, r7, #2760	@ 0xac8
 800443e:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Asi, 61);
 8004442:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	@ 0xacc
 8004446:	075a      	lsls	r2, r3, #29
 8004448:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	@ 0xac8
 800444c:	08db      	lsrs	r3, r3, #3
 800444e:	4313      	orrs	r3, r2
 8004450:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438
 8004454:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	@ 0xac8
 8004458:	075a      	lsls	r2, r3, #29
 800445a:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	@ 0xacc
 800445e:	08db      	lsrs	r3, r3, #3
 8004460:	4313      	orrs	r3, r2
 8004462:	f8c7 343c 	str.w	r3, [r7, #1084]	@ 0x43c
 8004466:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800446a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446e:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 8004472:	e9c1 2300 	strd	r2, r3, [r1]
            Ega =   BCa ^((~BCe)&  BCi );
 8004476:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 800447a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800447e:	43d1      	mvns	r1, r2
 8004480:	f8c7 18a0 	str.w	r1, [r7, #2208]	@ 0x8a0
 8004484:	43db      	mvns	r3, r3
 8004486:	f8c7 38a4 	str.w	r3, [r7, #2212]	@ 0x8a4
 800448a:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 800448e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004492:	f8d7 18a0 	ldr.w	r1, [r7, #2208]	@ 0x8a0
 8004496:	4011      	ands	r1, r2
 8004498:	f8c7 1898 	str.w	r1, [r7, #2200]	@ 0x898
 800449c:	f8d7 18a4 	ldr.w	r1, [r7, #2212]	@ 0x8a4
 80044a0:	400b      	ands	r3, r1
 80044a2:	f8c7 389c 	str.w	r3, [r7, #2204]	@ 0x89c
 80044a6:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 80044aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ae:	f8d7 1898 	ldr.w	r1, [r7, #2200]	@ 0x898
 80044b2:	4051      	eors	r1, r2
 80044b4:	f8c7 1430 	str.w	r1, [r7, #1072]	@ 0x430
 80044b8:	f8d7 189c 	ldr.w	r1, [r7, #2204]	@ 0x89c
 80044bc:	404b      	eors	r3, r1
 80044be:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
 80044c2:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 80044c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ca:	f607 2138 	addw	r1, r7, #2616	@ 0xa38
 80044ce:	e9c1 2300 	strd	r2, r3, [r1]
            Ege =   BCe ^((~BCi)&  BCo );
 80044d2:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 80044d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044da:	43d1      	mvns	r1, r2
 80044dc:	e002      	b.n	80044e4 <KeccakF1600_StatePermute+0xc7c>
 80044de:	bf00      	nop
 80044e0:	08017b20 	.word	0x08017b20
 80044e4:	f8c7 1890 	str.w	r1, [r7, #2192]	@ 0x890
 80044e8:	43db      	mvns	r3, r3
 80044ea:	f8c7 3894 	str.w	r3, [r7, #2196]	@ 0x894
 80044ee:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 80044f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f6:	f8d7 1890 	ldr.w	r1, [r7, #2192]	@ 0x890
 80044fa:	4011      	ands	r1, r2
 80044fc:	f8c7 1888 	str.w	r1, [r7, #2184]	@ 0x888
 8004500:	f8d7 1894 	ldr.w	r1, [r7, #2196]	@ 0x894
 8004504:	400b      	ands	r3, r1
 8004506:	f8c7 388c 	str.w	r3, [r7, #2188]	@ 0x88c
 800450a:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 800450e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004512:	f8d7 1888 	ldr.w	r1, [r7, #2184]	@ 0x888
 8004516:	4051      	eors	r1, r2
 8004518:	f8c7 1428 	str.w	r1, [r7, #1064]	@ 0x428
 800451c:	f8d7 188c 	ldr.w	r1, [r7, #2188]	@ 0x88c
 8004520:	404b      	eors	r3, r1
 8004522:	f8c7 342c 	str.w	r3, [r7, #1068]	@ 0x42c
 8004526:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800452a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452e:	f507 6123 	add.w	r1, r7, #2608	@ 0xa30
 8004532:	e9c1 2300 	strd	r2, r3, [r1]
            Egi =   BCi ^((~BCo)&  BCu );
 8004536:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 800453a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453e:	43d1      	mvns	r1, r2
 8004540:	f8c7 1880 	str.w	r1, [r7, #2176]	@ 0x880
 8004544:	43db      	mvns	r3, r3
 8004546:	f8c7 3884 	str.w	r3, [r7, #2180]	@ 0x884
 800454a:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 800454e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004552:	f8d7 1880 	ldr.w	r1, [r7, #2176]	@ 0x880
 8004556:	4011      	ands	r1, r2
 8004558:	f8c7 1878 	str.w	r1, [r7, #2168]	@ 0x878
 800455c:	f8d7 1884 	ldr.w	r1, [r7, #2180]	@ 0x884
 8004560:	400b      	ands	r3, r1
 8004562:	f8c7 387c 	str.w	r3, [r7, #2172]	@ 0x87c
 8004566:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 800456a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456e:	f8d7 1878 	ldr.w	r1, [r7, #2168]	@ 0x878
 8004572:	4051      	eors	r1, r2
 8004574:	f8c7 1420 	str.w	r1, [r7, #1056]	@ 0x420
 8004578:	f8d7 187c 	ldr.w	r1, [r7, #2172]	@ 0x87c
 800457c:	404b      	eors	r3, r1
 800457e:	f8c7 3424 	str.w	r3, [r7, #1060]	@ 0x424
 8004582:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8004586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458a:	f607 2128 	addw	r1, r7, #2600	@ 0xa28
 800458e:	e9c1 2300 	strd	r2, r3, [r1]
            Ego =   BCo ^((~BCu)&  BCa );
 8004592:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8004596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459a:	43d1      	mvns	r1, r2
 800459c:	f8c7 1870 	str.w	r1, [r7, #2160]	@ 0x870
 80045a0:	43db      	mvns	r3, r3
 80045a2:	f8c7 3874 	str.w	r3, [r7, #2164]	@ 0x874
 80045a6:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 80045aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ae:	f8d7 1870 	ldr.w	r1, [r7, #2160]	@ 0x870
 80045b2:	4011      	ands	r1, r2
 80045b4:	f8c7 1868 	str.w	r1, [r7, #2152]	@ 0x868
 80045b8:	f8d7 1874 	ldr.w	r1, [r7, #2164]	@ 0x874
 80045bc:	400b      	ands	r3, r1
 80045be:	f8c7 386c 	str.w	r3, [r7, #2156]	@ 0x86c
 80045c2:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 80045c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ca:	f8d7 1868 	ldr.w	r1, [r7, #2152]	@ 0x868
 80045ce:	4051      	eors	r1, r2
 80045d0:	f8c7 1418 	str.w	r1, [r7, #1048]	@ 0x418
 80045d4:	f8d7 186c 	ldr.w	r1, [r7, #2156]	@ 0x86c
 80045d8:	404b      	eors	r3, r1
 80045da:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
 80045de:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 80045e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e6:	f507 6122 	add.w	r1, r7, #2592	@ 0xa20
 80045ea:	e9c1 2300 	strd	r2, r3, [r1]
            Egu =   BCu ^((~BCa)&  BCe );
 80045ee:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 80045f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f6:	43d1      	mvns	r1, r2
 80045f8:	f8c7 1860 	str.w	r1, [r7, #2144]	@ 0x860
 80045fc:	43db      	mvns	r3, r3
 80045fe:	f8c7 3864 	str.w	r3, [r7, #2148]	@ 0x864
 8004602:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8004606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460a:	f8d7 1860 	ldr.w	r1, [r7, #2144]	@ 0x860
 800460e:	4011      	ands	r1, r2
 8004610:	f8c7 1858 	str.w	r1, [r7, #2136]	@ 0x858
 8004614:	f8d7 1864 	ldr.w	r1, [r7, #2148]	@ 0x864
 8004618:	400b      	ands	r3, r1
 800461a:	f8c7 385c 	str.w	r3, [r7, #2140]	@ 0x85c
 800461e:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8004622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004626:	f8d7 1858 	ldr.w	r1, [r7, #2136]	@ 0x858
 800462a:	4051      	eors	r1, r2
 800462c:	f8c7 1410 	str.w	r1, [r7, #1040]	@ 0x410
 8004630:	f8d7 185c 	ldr.w	r1, [r7, #2140]	@ 0x85c
 8004634:	404b      	eors	r3, r1
 8004636:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
 800463a:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800463e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004642:	f607 2118 	addw	r1, r7, #2584	@ 0xa18
 8004646:	e9c1 2300 	strd	r2, r3, [r1]

            Abe ^= De;
 800464a:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 800464e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004652:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8004656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465a:	ea80 0602 	eor.w	r6, r0, r2
 800465e:	f8c7 6408 	str.w	r6, [r7, #1032]	@ 0x408
 8004662:	404b      	eors	r3, r1
 8004664:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
 8004668:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 800466c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004670:	f507 6137 	add.w	r1, r7, #2928	@ 0xb70
 8004674:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abe,  1);
 8004678:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	@ 0xb70
 800467c:	0fda      	lsrs	r2, r3, #31
 800467e:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	@ 0xb74
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	4313      	orrs	r3, r2
 8004686:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
 800468a:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	@ 0xb74
 800468e:	0fda      	lsrs	r2, r3, #31
 8004690:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	@ 0xb70
 8004694:	005b      	lsls	r3, r3, #1
 8004696:	4313      	orrs	r3, r2
 8004698:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400
 800469c:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 80046a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a4:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 80046a8:	e9c1 2300 	strd	r2, r3, [r1]
            Agi ^= Di;
 80046ac:	f507 6334 	add.w	r3, r7, #2880	@ 0xb40
 80046b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80046b4:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 80046b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046bc:	ea80 0602 	eor.w	r6, r0, r2
 80046c0:	f8c7 63f8 	str.w	r6, [r7, #1016]	@ 0x3f8
 80046c4:	404b      	eors	r3, r1
 80046c6:	f8c7 33fc 	str.w	r3, [r7, #1020]	@ 0x3fc
 80046ca:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	@ 0x3f8
 80046ce:	f507 6134 	add.w	r1, r7, #2880	@ 0xb40
 80046d2:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Agi,  6);
 80046d6:	f8d7 3b40 	ldr.w	r3, [r7, #2880]	@ 0xb40
 80046da:	0e9a      	lsrs	r2, r3, #26
 80046dc:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	@ 0xb44
 80046e0:	019b      	lsls	r3, r3, #6
 80046e2:	4313      	orrs	r3, r2
 80046e4:	f8c7 33f4 	str.w	r3, [r7, #1012]	@ 0x3f4
 80046e8:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	@ 0xb44
 80046ec:	0e9a      	lsrs	r2, r3, #26
 80046ee:	f8d7 3b40 	ldr.w	r3, [r7, #2880]	@ 0xb40
 80046f2:	019b      	lsls	r3, r3, #6
 80046f4:	4313      	orrs	r3, r2
 80046f6:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0
 80046fa:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	@ 0x3f0
 80046fe:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 8004702:	e9c1 2300 	strd	r2, r3, [r1]
            Ako ^= Do;
 8004706:	f507 6331 	add.w	r3, r7, #2832	@ 0xb10
 800470a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800470e:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 8004712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004716:	ea80 0602 	eor.w	r6, r0, r2
 800471a:	f8c7 63e8 	str.w	r6, [r7, #1000]	@ 0x3e8
 800471e:	404b      	eors	r3, r1
 8004720:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
 8004724:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	@ 0x3e8
 8004728:	f507 6131 	add.w	r1, r7, #2832	@ 0xb10
 800472c:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Ako, 25);
 8004730:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	@ 0xb10
 8004734:	09da      	lsrs	r2, r3, #7
 8004736:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	@ 0xb14
 800473a:	065b      	lsls	r3, r3, #25
 800473c:	4313      	orrs	r3, r2
 800473e:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4
 8004742:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	@ 0xb14
 8004746:	09da      	lsrs	r2, r3, #7
 8004748:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	@ 0xb10
 800474c:	065b      	lsls	r3, r3, #25
 800474e:	4313      	orrs	r3, r2
 8004750:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
 8004754:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	@ 0x3e0
 8004758:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 800475c:	e9c1 2300 	strd	r2, r3, [r1]
            Amu ^= Du;
 8004760:	f507 632e 	add.w	r3, r7, #2784	@ 0xae0
 8004764:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004768:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 800476c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004770:	ea80 0602 	eor.w	r6, r0, r2
 8004774:	f8c7 63d8 	str.w	r6, [r7, #984]	@ 0x3d8
 8004778:	404b      	eors	r3, r1
 800477a:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc
 800477e:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	@ 0x3d8
 8004782:	f507 612e 	add.w	r1, r7, #2784	@ 0xae0
 8004786:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Amu,  8);
 800478a:	f8d7 3ae0 	ldr.w	r3, [r7, #2784]	@ 0xae0
 800478e:	0e1a      	lsrs	r2, r3, #24
 8004790:	f8d7 3ae4 	ldr.w	r3, [r7, #2788]	@ 0xae4
 8004794:	021b      	lsls	r3, r3, #8
 8004796:	4313      	orrs	r3, r2
 8004798:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
 800479c:	f8d7 3ae4 	ldr.w	r3, [r7, #2788]	@ 0xae4
 80047a0:	0e1a      	lsrs	r2, r3, #24
 80047a2:	f8d7 3ae0 	ldr.w	r3, [r7, #2784]	@ 0xae0
 80047a6:	021b      	lsls	r3, r3, #8
 80047a8:	4313      	orrs	r3, r2
 80047aa:	f8c7 33d0 	str.w	r3, [r7, #976]	@ 0x3d0
 80047ae:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	@ 0x3d0
 80047b2:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 80047b6:	e9c1 2300 	strd	r2, r3, [r1]
            Asa ^= Da;
 80047ba:	f607 23d8 	addw	r3, r7, #2776	@ 0xad8
 80047be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80047c2:	f607 2388 	addw	r3, r7, #2696	@ 0xa88
 80047c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ca:	ea80 0602 	eor.w	r6, r0, r2
 80047ce:	f8c7 63c8 	str.w	r6, [r7, #968]	@ 0x3c8
 80047d2:	404b      	eors	r3, r1
 80047d4:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
 80047d8:	e9d7 23f2 	ldrd	r2, r3, [r7, #968]	@ 0x3c8
 80047dc:	f607 21d8 	addw	r1, r7, #2776	@ 0xad8
 80047e0:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Asa, 18);
 80047e4:	f8d7 3ad8 	ldr.w	r3, [r7, #2776]	@ 0xad8
 80047e8:	0b9a      	lsrs	r2, r3, #14
 80047ea:	f8d7 3adc 	ldr.w	r3, [r7, #2780]	@ 0xadc
 80047ee:	049b      	lsls	r3, r3, #18
 80047f0:	4313      	orrs	r3, r2
 80047f2:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 80047f6:	f8d7 3adc 	ldr.w	r3, [r7, #2780]	@ 0xadc
 80047fa:	0b9a      	lsrs	r2, r3, #14
 80047fc:	f8d7 3ad8 	ldr.w	r3, [r7, #2776]	@ 0xad8
 8004800:	049b      	lsls	r3, r3, #18
 8004802:	4313      	orrs	r3, r2
 8004804:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0
 8004808:	e9d7 23f0 	ldrd	r2, r3, [r7, #960]	@ 0x3c0
 800480c:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 8004810:	e9c1 2300 	strd	r2, r3, [r1]
            Eka =   BCa ^((~BCe)&  BCi );
 8004814:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8004818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481c:	43d1      	mvns	r1, r2
 800481e:	f8c7 1850 	str.w	r1, [r7, #2128]	@ 0x850
 8004822:	43db      	mvns	r3, r3
 8004824:	f8c7 3854 	str.w	r3, [r7, #2132]	@ 0x854
 8004828:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 800482c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004830:	f8d7 1850 	ldr.w	r1, [r7, #2128]	@ 0x850
 8004834:	4011      	ands	r1, r2
 8004836:	f8c7 1848 	str.w	r1, [r7, #2120]	@ 0x848
 800483a:	f8d7 1854 	ldr.w	r1, [r7, #2132]	@ 0x854
 800483e:	400b      	ands	r3, r1
 8004840:	f8c7 384c 	str.w	r3, [r7, #2124]	@ 0x84c
 8004844:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8004848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484c:	f8d7 1848 	ldr.w	r1, [r7, #2120]	@ 0x848
 8004850:	4051      	eors	r1, r2
 8004852:	f8c7 13b8 	str.w	r1, [r7, #952]	@ 0x3b8
 8004856:	f8d7 184c 	ldr.w	r1, [r7, #2124]	@ 0x84c
 800485a:	404b      	eors	r3, r1
 800485c:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
 8004860:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	@ 0x3b8
 8004864:	f507 6121 	add.w	r1, r7, #2576	@ 0xa10
 8004868:	e9c1 2300 	strd	r2, r3, [r1]
            Eke =   BCe ^((~BCi)&  BCo );
 800486c:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8004870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004874:	43d1      	mvns	r1, r2
 8004876:	f8c7 1840 	str.w	r1, [r7, #2112]	@ 0x840
 800487a:	43db      	mvns	r3, r3
 800487c:	f8c7 3844 	str.w	r3, [r7, #2116]	@ 0x844
 8004880:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8004884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004888:	f8d7 1840 	ldr.w	r1, [r7, #2112]	@ 0x840
 800488c:	4011      	ands	r1, r2
 800488e:	f8c7 1838 	str.w	r1, [r7, #2104]	@ 0x838
 8004892:	f8d7 1844 	ldr.w	r1, [r7, #2116]	@ 0x844
 8004896:	400b      	ands	r3, r1
 8004898:	f8c7 383c 	str.w	r3, [r7, #2108]	@ 0x83c
 800489c:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 80048a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a4:	f8d7 1838 	ldr.w	r1, [r7, #2104]	@ 0x838
 80048a8:	4051      	eors	r1, r2
 80048aa:	f8c7 13b0 	str.w	r1, [r7, #944]	@ 0x3b0
 80048ae:	f8d7 183c 	ldr.w	r1, [r7, #2108]	@ 0x83c
 80048b2:	404b      	eors	r3, r1
 80048b4:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 80048b8:	e9d7 23ec 	ldrd	r2, r3, [r7, #944]	@ 0x3b0
 80048bc:	f607 2108 	addw	r1, r7, #2568	@ 0xa08
 80048c0:	e9c1 2300 	strd	r2, r3, [r1]
            Eki =   BCi ^((~BCo)&  BCu );
 80048c4:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 80048c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048cc:	43d1      	mvns	r1, r2
 80048ce:	f8c7 1830 	str.w	r1, [r7, #2096]	@ 0x830
 80048d2:	43db      	mvns	r3, r3
 80048d4:	f8c7 3834 	str.w	r3, [r7, #2100]	@ 0x834
 80048d8:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 80048dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e0:	f8d7 1830 	ldr.w	r1, [r7, #2096]	@ 0x830
 80048e4:	4011      	ands	r1, r2
 80048e6:	f8c7 1828 	str.w	r1, [r7, #2088]	@ 0x828
 80048ea:	f8d7 1834 	ldr.w	r1, [r7, #2100]	@ 0x834
 80048ee:	400b      	ands	r3, r1
 80048f0:	f8c7 382c 	str.w	r3, [r7, #2092]	@ 0x82c
 80048f4:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 80048f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fc:	f8d7 1828 	ldr.w	r1, [r7, #2088]	@ 0x828
 8004900:	4051      	eors	r1, r2
 8004902:	f8c7 13a8 	str.w	r1, [r7, #936]	@ 0x3a8
 8004906:	f8d7 182c 	ldr.w	r1, [r7, #2092]	@ 0x82c
 800490a:	404b      	eors	r3, r1
 800490c:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
 8004910:	e9d7 23ea 	ldrd	r2, r3, [r7, #936]	@ 0x3a8
 8004914:	f507 6120 	add.w	r1, r7, #2560	@ 0xa00
 8004918:	e9c1 2300 	strd	r2, r3, [r1]
            Eko =   BCo ^((~BCu)&  BCa );
 800491c:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8004920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004924:	43d1      	mvns	r1, r2
 8004926:	f8c7 1820 	str.w	r1, [r7, #2080]	@ 0x820
 800492a:	43db      	mvns	r3, r3
 800492c:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
 8004930:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8004934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004938:	f8d7 1820 	ldr.w	r1, [r7, #2080]	@ 0x820
 800493c:	4011      	ands	r1, r2
 800493e:	f8c7 1818 	str.w	r1, [r7, #2072]	@ 0x818
 8004942:	f8d7 1824 	ldr.w	r1, [r7, #2084]	@ 0x824
 8004946:	400b      	ands	r3, r1
 8004948:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
 800494c:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8004950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004954:	f8d7 1818 	ldr.w	r1, [r7, #2072]	@ 0x818
 8004958:	4051      	eors	r1, r2
 800495a:	f8c7 13a0 	str.w	r1, [r7, #928]	@ 0x3a0
 800495e:	f8d7 181c 	ldr.w	r1, [r7, #2076]	@ 0x81c
 8004962:	404b      	eors	r3, r1
 8004964:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
 8004968:	e9d7 23e8 	ldrd	r2, r3, [r7, #928]	@ 0x3a0
 800496c:	f607 11f8 	addw	r1, r7, #2552	@ 0x9f8
 8004970:	e9c1 2300 	strd	r2, r3, [r1]
            Eku =   BCu ^((~BCa)&  BCe );
 8004974:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8004978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497c:	43d1      	mvns	r1, r2
 800497e:	f8c7 1810 	str.w	r1, [r7, #2064]	@ 0x810
 8004982:	43db      	mvns	r3, r3
 8004984:	f8c7 3814 	str.w	r3, [r7, #2068]	@ 0x814
 8004988:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 800498c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004990:	f8d7 1810 	ldr.w	r1, [r7, #2064]	@ 0x810
 8004994:	4011      	ands	r1, r2
 8004996:	f8c7 1808 	str.w	r1, [r7, #2056]	@ 0x808
 800499a:	f8d7 1814 	ldr.w	r1, [r7, #2068]	@ 0x814
 800499e:	400b      	ands	r3, r1
 80049a0:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 80049a4:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 80049a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ac:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 80049b0:	4051      	eors	r1, r2
 80049b2:	f8c7 1398 	str.w	r1, [r7, #920]	@ 0x398
 80049b6:	f8d7 180c 	ldr.w	r1, [r7, #2060]	@ 0x80c
 80049ba:	404b      	eors	r3, r1
 80049bc:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
 80049c0:	e9d7 23e6 	ldrd	r2, r3, [r7, #920]	@ 0x398
 80049c4:	f507 611f 	add.w	r1, r7, #2544	@ 0x9f0
 80049c8:	e9c1 2300 	strd	r2, r3, [r1]

            Abu ^= Du;
 80049cc:	f607 3358 	addw	r3, r7, #2904	@ 0xb58
 80049d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80049d4:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 80049d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049dc:	ea80 0602 	eor.w	r6, r0, r2
 80049e0:	f8c7 6390 	str.w	r6, [r7, #912]	@ 0x390
 80049e4:	404b      	eors	r3, r1
 80049e6:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 80049ea:	e9d7 23e4 	ldrd	r2, r3, [r7, #912]	@ 0x390
 80049ee:	f607 3158 	addw	r1, r7, #2904	@ 0xb58
 80049f2:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abu, 27);
 80049f6:	f8d7 3b58 	ldr.w	r3, [r7, #2904]	@ 0xb58
 80049fa:	095a      	lsrs	r2, r3, #5
 80049fc:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	@ 0xb5c
 8004a00:	06db      	lsls	r3, r3, #27
 8004a02:	4313      	orrs	r3, r2
 8004a04:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
 8004a08:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	@ 0xb5c
 8004a0c:	095a      	lsrs	r2, r3, #5
 8004a0e:	f8d7 3b58 	ldr.w	r3, [r7, #2904]	@ 0xb58
 8004a12:	06db      	lsls	r3, r3, #27
 8004a14:	4313      	orrs	r3, r2
 8004a16:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
 8004a1a:	e9d7 23e2 	ldrd	r2, r3, [r7, #904]	@ 0x388
 8004a1e:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 8004a22:	e9c1 2300 	strd	r2, r3, [r1]
            Aga ^= Da;
 8004a26:	f507 6335 	add.w	r3, r7, #2896	@ 0xb50
 8004a2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a2e:	f607 2388 	addw	r3, r7, #2696	@ 0xa88
 8004a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a36:	ea80 0602 	eor.w	r6, r0, r2
 8004a3a:	f8c7 6380 	str.w	r6, [r7, #896]	@ 0x380
 8004a3e:	404b      	eors	r3, r1
 8004a40:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
 8004a44:	e9d7 23e0 	ldrd	r2, r3, [r7, #896]	@ 0x380
 8004a48:	f507 6135 	add.w	r1, r7, #2896	@ 0xb50
 8004a4c:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Aga, 36);
 8004a50:	f8d7 3b54 	ldr.w	r3, [r7, #2900]	@ 0xb54
 8004a54:	011a      	lsls	r2, r3, #4
 8004a56:	f8d7 3b50 	ldr.w	r3, [r7, #2896]	@ 0xb50
 8004a5a:	0f1b      	lsrs	r3, r3, #28
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
 8004a62:	f8d7 3b50 	ldr.w	r3, [r7, #2896]	@ 0xb50
 8004a66:	011a      	lsls	r2, r3, #4
 8004a68:	f8d7 3b54 	ldr.w	r3, [r7, #2900]	@ 0xb54
 8004a6c:	0f1b      	lsrs	r3, r3, #28
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
 8004a74:	e9d7 23de 	ldrd	r2, r3, [r7, #888]	@ 0x378
 8004a78:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 8004a7c:	e9c1 2300 	strd	r2, r3, [r1]
            Ake ^= De;
 8004a80:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 8004a84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a88:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8004a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a90:	ea80 0602 	eor.w	r6, r0, r2
 8004a94:	f8c7 6370 	str.w	r6, [r7, #880]	@ 0x370
 8004a98:	404b      	eors	r3, r1
 8004a9a:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
 8004a9e:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	@ 0x370
 8004aa2:	f507 6132 	add.w	r1, r7, #2848	@ 0xb20
 8004aa6:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Ake, 10);
 8004aaa:	f8d7 3b20 	ldr.w	r3, [r7, #2848]	@ 0xb20
 8004aae:	0d9a      	lsrs	r2, r3, #22
 8004ab0:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	@ 0xb24
 8004ab4:	029b      	lsls	r3, r3, #10
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
 8004abc:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	@ 0xb24
 8004ac0:	0d9a      	lsrs	r2, r3, #22
 8004ac2:	f8d7 3b20 	ldr.w	r3, [r7, #2848]	@ 0xb20
 8004ac6:	029b      	lsls	r3, r3, #10
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
 8004ace:	e9d7 23da 	ldrd	r2, r3, [r7, #872]	@ 0x368
 8004ad2:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 8004ad6:	e9c1 2300 	strd	r2, r3, [r1]
            Ami ^= Di;
 8004ada:	f507 632f 	add.w	r3, r7, #2800	@ 0xaf0
 8004ade:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ae2:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 8004ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aea:	ea80 0602 	eor.w	r6, r0, r2
 8004aee:	f8c7 6360 	str.w	r6, [r7, #864]	@ 0x360
 8004af2:	404b      	eors	r3, r1
 8004af4:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
 8004af8:	e9d7 23d8 	ldrd	r2, r3, [r7, #864]	@ 0x360
 8004afc:	f507 612f 	add.w	r1, r7, #2800	@ 0xaf0
 8004b00:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ami, 15);
 8004b04:	f8d7 3af0 	ldr.w	r3, [r7, #2800]	@ 0xaf0
 8004b08:	0c5a      	lsrs	r2, r3, #17
 8004b0a:	f8d7 3af4 	ldr.w	r3, [r7, #2804]	@ 0xaf4
 8004b0e:	03db      	lsls	r3, r3, #15
 8004b10:	4313      	orrs	r3, r2
 8004b12:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
 8004b16:	f8d7 3af4 	ldr.w	r3, [r7, #2804]	@ 0xaf4
 8004b1a:	0c5a      	lsrs	r2, r3, #17
 8004b1c:	f8d7 3af0 	ldr.w	r3, [r7, #2800]	@ 0xaf0
 8004b20:	03db      	lsls	r3, r3, #15
 8004b22:	4313      	orrs	r3, r2
 8004b24:	f8c7 3358 	str.w	r3, [r7, #856]	@ 0x358
 8004b28:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	@ 0x358
 8004b2c:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 8004b30:	e9c1 2300 	strd	r2, r3, [r1]
            Aso ^= Do;
 8004b34:	f507 632c 	add.w	r3, r7, #2752	@ 0xac0
 8004b38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b3c:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 8004b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b44:	ea80 0602 	eor.w	r6, r0, r2
 8004b48:	f8c7 6350 	str.w	r6, [r7, #848]	@ 0x350
 8004b4c:	404b      	eors	r3, r1
 8004b4e:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8004b52:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	@ 0x350
 8004b56:	f507 612c 	add.w	r1, r7, #2752	@ 0xac0
 8004b5a:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Aso, 56);
 8004b5e:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	@ 0xac4
 8004b62:	061a      	lsls	r2, r3, #24
 8004b64:	f8d7 3ac0 	ldr.w	r3, [r7, #2752]	@ 0xac0
 8004b68:	0a1b      	lsrs	r3, r3, #8
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	f8c7 3348 	str.w	r3, [r7, #840]	@ 0x348
 8004b70:	f8d7 3ac0 	ldr.w	r3, [r7, #2752]	@ 0xac0
 8004b74:	061a      	lsls	r2, r3, #24
 8004b76:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	@ 0xac4
 8004b7a:	0a1b      	lsrs	r3, r3, #8
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
 8004b82:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	@ 0x348
 8004b86:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 8004b8a:	e9c1 2300 	strd	r2, r3, [r1]
            Ema =   BCa ^((~BCe)&  BCi );
 8004b8e:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8004b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b96:	43d1      	mvns	r1, r2
 8004b98:	f8c7 1800 	str.w	r1, [r7, #2048]	@ 0x800
 8004b9c:	43db      	mvns	r3, r3
 8004b9e:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
 8004ba2:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8004ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004baa:	f8d7 1800 	ldr.w	r1, [r7, #2048]	@ 0x800
 8004bae:	4011      	ands	r1, r2
 8004bb0:	f8c7 17f8 	str.w	r1, [r7, #2040]	@ 0x7f8
 8004bb4:	f8d7 1804 	ldr.w	r1, [r7, #2052]	@ 0x804
 8004bb8:	400b      	ands	r3, r1
 8004bba:	f8c7 37fc 	str.w	r3, [r7, #2044]	@ 0x7fc
 8004bbe:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8004bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc6:	f8d7 17f8 	ldr.w	r1, [r7, #2040]	@ 0x7f8
 8004bca:	4051      	eors	r1, r2
 8004bcc:	f8c7 1340 	str.w	r1, [r7, #832]	@ 0x340
 8004bd0:	f8d7 17fc 	ldr.w	r1, [r7, #2044]	@ 0x7fc
 8004bd4:	404b      	eors	r3, r1
 8004bd6:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
 8004bda:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	@ 0x340
 8004bde:	f607 11e8 	addw	r1, r7, #2536	@ 0x9e8
 8004be2:	e9c1 2300 	strd	r2, r3, [r1]
            Eme =   BCe ^((~BCi)&  BCo );
 8004be6:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8004bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bee:	43d1      	mvns	r1, r2
 8004bf0:	f8c7 17f0 	str.w	r1, [r7, #2032]	@ 0x7f0
 8004bf4:	43db      	mvns	r3, r3
 8004bf6:	f8c7 37f4 	str.w	r3, [r7, #2036]	@ 0x7f4
 8004bfa:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8004bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c02:	f8d7 17f0 	ldr.w	r1, [r7, #2032]	@ 0x7f0
 8004c06:	4011      	ands	r1, r2
 8004c08:	f8c7 17e8 	str.w	r1, [r7, #2024]	@ 0x7e8
 8004c0c:	f8d7 17f4 	ldr.w	r1, [r7, #2036]	@ 0x7f4
 8004c10:	400b      	ands	r3, r1
 8004c12:	f8c7 37ec 	str.w	r3, [r7, #2028]	@ 0x7ec
 8004c16:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8004c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1e:	f8d7 17e8 	ldr.w	r1, [r7, #2024]	@ 0x7e8
 8004c22:	4051      	eors	r1, r2
 8004c24:	f8c7 1338 	str.w	r1, [r7, #824]	@ 0x338
 8004c28:	f8d7 17ec 	ldr.w	r1, [r7, #2028]	@ 0x7ec
 8004c2c:	404b      	eors	r3, r1
 8004c2e:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8004c32:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	@ 0x338
 8004c36:	f507 611e 	add.w	r1, r7, #2528	@ 0x9e0
 8004c3a:	e9c1 2300 	strd	r2, r3, [r1]
            Emi =   BCi ^((~BCo)&  BCu );
 8004c3e:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8004c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c46:	43d1      	mvns	r1, r2
 8004c48:	f8c7 17e0 	str.w	r1, [r7, #2016]	@ 0x7e0
 8004c4c:	43db      	mvns	r3, r3
 8004c4e:	f8c7 37e4 	str.w	r3, [r7, #2020]	@ 0x7e4
 8004c52:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8004c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5a:	f8d7 17e0 	ldr.w	r1, [r7, #2016]	@ 0x7e0
 8004c5e:	4011      	ands	r1, r2
 8004c60:	f8c7 17d8 	str.w	r1, [r7, #2008]	@ 0x7d8
 8004c64:	f8d7 17e4 	ldr.w	r1, [r7, #2020]	@ 0x7e4
 8004c68:	400b      	ands	r3, r1
 8004c6a:	f8c7 37dc 	str.w	r3, [r7, #2012]	@ 0x7dc
 8004c6e:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8004c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c76:	f8d7 17d8 	ldr.w	r1, [r7, #2008]	@ 0x7d8
 8004c7a:	4051      	eors	r1, r2
 8004c7c:	f8c7 1330 	str.w	r1, [r7, #816]	@ 0x330
 8004c80:	f8d7 17dc 	ldr.w	r1, [r7, #2012]	@ 0x7dc
 8004c84:	404b      	eors	r3, r1
 8004c86:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 8004c8a:	e9d7 23cc 	ldrd	r2, r3, [r7, #816]	@ 0x330
 8004c8e:	f607 11d8 	addw	r1, r7, #2520	@ 0x9d8
 8004c92:	e9c1 2300 	strd	r2, r3, [r1]
            Emo =   BCo ^((~BCu)&  BCa );
 8004c96:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8004c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9e:	43d1      	mvns	r1, r2
 8004ca0:	f8c7 17d0 	str.w	r1, [r7, #2000]	@ 0x7d0
 8004ca4:	43db      	mvns	r3, r3
 8004ca6:	f8c7 37d4 	str.w	r3, [r7, #2004]	@ 0x7d4
 8004caa:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8004cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb2:	f8d7 17d0 	ldr.w	r1, [r7, #2000]	@ 0x7d0
 8004cb6:	4011      	ands	r1, r2
 8004cb8:	f8c7 17c8 	str.w	r1, [r7, #1992]	@ 0x7c8
 8004cbc:	f8d7 17d4 	ldr.w	r1, [r7, #2004]	@ 0x7d4
 8004cc0:	400b      	ands	r3, r1
 8004cc2:	f8c7 37cc 	str.w	r3, [r7, #1996]	@ 0x7cc
 8004cc6:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8004cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cce:	f8d7 17c8 	ldr.w	r1, [r7, #1992]	@ 0x7c8
 8004cd2:	4051      	eors	r1, r2
 8004cd4:	f8c7 1328 	str.w	r1, [r7, #808]	@ 0x328
 8004cd8:	f8d7 17cc 	ldr.w	r1, [r7, #1996]	@ 0x7cc
 8004cdc:	404b      	eors	r3, r1
 8004cde:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
 8004ce2:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	@ 0x328
 8004ce6:	f507 611d 	add.w	r1, r7, #2512	@ 0x9d0
 8004cea:	e9c1 2300 	strd	r2, r3, [r1]
            Emu =   BCu ^((~BCa)&  BCe );
 8004cee:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8004cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf6:	43d1      	mvns	r1, r2
 8004cf8:	f8c7 17c0 	str.w	r1, [r7, #1984]	@ 0x7c0
 8004cfc:	43db      	mvns	r3, r3
 8004cfe:	f8c7 37c4 	str.w	r3, [r7, #1988]	@ 0x7c4
 8004d02:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8004d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0a:	f8d7 17c0 	ldr.w	r1, [r7, #1984]	@ 0x7c0
 8004d0e:	4011      	ands	r1, r2
 8004d10:	f8c7 17b8 	str.w	r1, [r7, #1976]	@ 0x7b8
 8004d14:	f8d7 17c4 	ldr.w	r1, [r7, #1988]	@ 0x7c4
 8004d18:	400b      	ands	r3, r1
 8004d1a:	f8c7 37bc 	str.w	r3, [r7, #1980]	@ 0x7bc
 8004d1e:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8004d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d26:	f8d7 17b8 	ldr.w	r1, [r7, #1976]	@ 0x7b8
 8004d2a:	4051      	eors	r1, r2
 8004d2c:	f8c7 1320 	str.w	r1, [r7, #800]	@ 0x320
 8004d30:	f8d7 17bc 	ldr.w	r1, [r7, #1980]	@ 0x7bc
 8004d34:	404b      	eors	r3, r1
 8004d36:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
 8004d3a:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	@ 0x320
 8004d3e:	f607 11c8 	addw	r1, r7, #2504	@ 0x9c8
 8004d42:	e9c1 2300 	strd	r2, r3, [r1]

            Abi ^= Di;
 8004d46:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8004d4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d4e:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 8004d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d56:	ea80 0602 	eor.w	r6, r0, r2
 8004d5a:	f8c7 6318 	str.w	r6, [r7, #792]	@ 0x318
 8004d5e:	404b      	eors	r3, r1
 8004d60:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 8004d64:	e9d7 23c6 	ldrd	r2, r3, [r7, #792]	@ 0x318
 8004d68:	f607 3168 	addw	r1, r7, #2920	@ 0xb68
 8004d6c:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abi, 62);
 8004d70:	f8d7 3b6c 	ldr.w	r3, [r7, #2924]	@ 0xb6c
 8004d74:	079a      	lsls	r2, r3, #30
 8004d76:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	@ 0xb68
 8004d7a:	089b      	lsrs	r3, r3, #2
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
 8004d82:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	@ 0xb68
 8004d86:	079a      	lsls	r2, r3, #30
 8004d88:	f8d7 3b6c 	ldr.w	r3, [r7, #2924]	@ 0xb6c
 8004d8c:	089b      	lsrs	r3, r3, #2
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
 8004d94:	e9d7 23c4 	ldrd	r2, r3, [r7, #784]	@ 0x310
 8004d98:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 8004d9c:	e9c1 2300 	strd	r2, r3, [r1]
            Ago ^= Do;
 8004da0:	f607 3338 	addw	r3, r7, #2872	@ 0xb38
 8004da4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004da8:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 8004dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db0:	ea80 0602 	eor.w	r6, r0, r2
 8004db4:	f8c7 6308 	str.w	r6, [r7, #776]	@ 0x308
 8004db8:	404b      	eors	r3, r1
 8004dba:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 8004dbe:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	@ 0x308
 8004dc2:	f607 3138 	addw	r1, r7, #2872	@ 0xb38
 8004dc6:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ago, 55);
 8004dca:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	@ 0xb3c
 8004dce:	05da      	lsls	r2, r3, #23
 8004dd0:	f8d7 3b38 	ldr.w	r3, [r7, #2872]	@ 0xb38
 8004dd4:	0a5b      	lsrs	r3, r3, #9
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
 8004ddc:	f8d7 3b38 	ldr.w	r3, [r7, #2872]	@ 0xb38
 8004de0:	05da      	lsls	r2, r3, #23
 8004de2:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	@ 0xb3c
 8004de6:	0a5b      	lsrs	r3, r3, #9
 8004de8:	4313      	orrs	r3, r2
 8004dea:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
 8004dee:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	@ 0x300
 8004df2:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 8004df6:	e9c1 2300 	strd	r2, r3, [r1]
            Aku ^= Du;
 8004dfa:	f607 3308 	addw	r3, r7, #2824	@ 0xb08
 8004dfe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e02:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 8004e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0a:	ea80 0602 	eor.w	r6, r0, r2
 8004e0e:	f8c7 62f8 	str.w	r6, [r7, #760]	@ 0x2f8
 8004e12:	404b      	eors	r3, r1
 8004e14:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 8004e18:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	@ 0x2f8
 8004e1c:	f607 3108 	addw	r1, r7, #2824	@ 0xb08
 8004e20:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Aku, 39);
 8004e24:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	@ 0xb0c
 8004e28:	01da      	lsls	r2, r3, #7
 8004e2a:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	@ 0xb08
 8004e2e:	0e5b      	lsrs	r3, r3, #25
 8004e30:	4313      	orrs	r3, r2
 8004e32:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
 8004e36:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	@ 0xb08
 8004e3a:	01da      	lsls	r2, r3, #7
 8004e3c:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	@ 0xb0c
 8004e40:	0e5b      	lsrs	r3, r3, #25
 8004e42:	4313      	orrs	r3, r2
 8004e44:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
 8004e48:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	@ 0x2f0
 8004e4c:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 8004e50:	e9c1 2300 	strd	r2, r3, [r1]
            Ama ^= Da;
 8004e54:	f507 6330 	add.w	r3, r7, #2816	@ 0xb00
 8004e58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e5c:	f607 2388 	addw	r3, r7, #2696	@ 0xa88
 8004e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e64:	ea80 0602 	eor.w	r6, r0, r2
 8004e68:	f8c7 62e8 	str.w	r6, [r7, #744]	@ 0x2e8
 8004e6c:	404b      	eors	r3, r1
 8004e6e:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 8004e72:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	@ 0x2e8
 8004e76:	f507 6130 	add.w	r1, r7, #2816	@ 0xb00
 8004e7a:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ama, 41);
 8004e7e:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	@ 0xb04
 8004e82:	025a      	lsls	r2, r3, #9
 8004e84:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	@ 0xb00
 8004e88:	0ddb      	lsrs	r3, r3, #23
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 8004e90:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	@ 0xb00
 8004e94:	025a      	lsls	r2, r3, #9
 8004e96:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	@ 0xb04
 8004e9a:	0ddb      	lsrs	r3, r3, #23
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
 8004ea2:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	@ 0x2e0
 8004ea6:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 8004eaa:	e9c1 2300 	strd	r2, r3, [r1]
            Ase ^= De;
 8004eae:	f507 632d 	add.w	r3, r7, #2768	@ 0xad0
 8004eb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004eb6:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8004eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ebe:	ea80 0602 	eor.w	r6, r0, r2
 8004ec2:	f8c7 62d8 	str.w	r6, [r7, #728]	@ 0x2d8
 8004ec6:	404b      	eors	r3, r1
 8004ec8:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc
 8004ecc:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	@ 0x2d8
 8004ed0:	f507 612d 	add.w	r1, r7, #2768	@ 0xad0
 8004ed4:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Ase,  2);
 8004ed8:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	@ 0xad0
 8004edc:	0f9a      	lsrs	r2, r3, #30
 8004ede:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	@ 0xad4
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
 8004eea:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	@ 0xad4
 8004eee:	0f9a      	lsrs	r2, r3, #30
 8004ef0:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	@ 0xad0
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 8004efc:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	@ 0x2d0
 8004f00:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 8004f04:	e9c1 2300 	strd	r2, r3, [r1]
            Esa =   BCa ^((~BCe)&  BCi );
 8004f08:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8004f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f10:	43d1      	mvns	r1, r2
 8004f12:	f8c7 17b0 	str.w	r1, [r7, #1968]	@ 0x7b0
 8004f16:	43db      	mvns	r3, r3
 8004f18:	f8c7 37b4 	str.w	r3, [r7, #1972]	@ 0x7b4
 8004f1c:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8004f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f24:	f8d7 17b0 	ldr.w	r1, [r7, #1968]	@ 0x7b0
 8004f28:	4011      	ands	r1, r2
 8004f2a:	f8c7 17a8 	str.w	r1, [r7, #1960]	@ 0x7a8
 8004f2e:	f8d7 17b4 	ldr.w	r1, [r7, #1972]	@ 0x7b4
 8004f32:	400b      	ands	r3, r1
 8004f34:	f8c7 37ac 	str.w	r3, [r7, #1964]	@ 0x7ac
 8004f38:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8004f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f40:	f8d7 17a8 	ldr.w	r1, [r7, #1960]	@ 0x7a8
 8004f44:	4051      	eors	r1, r2
 8004f46:	f8c7 12c8 	str.w	r1, [r7, #712]	@ 0x2c8
 8004f4a:	f8d7 17ac 	ldr.w	r1, [r7, #1964]	@ 0x7ac
 8004f4e:	404b      	eors	r3, r1
 8004f50:	f8c7 32cc 	str.w	r3, [r7, #716]	@ 0x2cc
 8004f54:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	@ 0x2c8
 8004f58:	f507 611c 	add.w	r1, r7, #2496	@ 0x9c0
 8004f5c:	e9c1 2300 	strd	r2, r3, [r1]
            Ese =   BCe ^((~BCi)&  BCo );
 8004f60:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8004f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f68:	43d1      	mvns	r1, r2
 8004f6a:	f8c7 17a0 	str.w	r1, [r7, #1952]	@ 0x7a0
 8004f6e:	43db      	mvns	r3, r3
 8004f70:	f8c7 37a4 	str.w	r3, [r7, #1956]	@ 0x7a4
 8004f74:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8004f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7c:	f8d7 17a0 	ldr.w	r1, [r7, #1952]	@ 0x7a0
 8004f80:	4011      	ands	r1, r2
 8004f82:	f8c7 1798 	str.w	r1, [r7, #1944]	@ 0x798
 8004f86:	f8d7 17a4 	ldr.w	r1, [r7, #1956]	@ 0x7a4
 8004f8a:	400b      	ands	r3, r1
 8004f8c:	f8c7 379c 	str.w	r3, [r7, #1948]	@ 0x79c
 8004f90:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8004f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f98:	f8d7 1798 	ldr.w	r1, [r7, #1944]	@ 0x798
 8004f9c:	4051      	eors	r1, r2
 8004f9e:	f8c7 12c0 	str.w	r1, [r7, #704]	@ 0x2c0
 8004fa2:	f8d7 179c 	ldr.w	r1, [r7, #1948]	@ 0x79c
 8004fa6:	404b      	eors	r3, r1
 8004fa8:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
 8004fac:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 8004fb0:	f607 11b8 	addw	r1, r7, #2488	@ 0x9b8
 8004fb4:	e9c1 2300 	strd	r2, r3, [r1]
            Esi =   BCi ^((~BCo)&  BCu );
 8004fb8:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8004fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc0:	43d1      	mvns	r1, r2
 8004fc2:	f8c7 1790 	str.w	r1, [r7, #1936]	@ 0x790
 8004fc6:	43db      	mvns	r3, r3
 8004fc8:	f8c7 3794 	str.w	r3, [r7, #1940]	@ 0x794
 8004fcc:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8004fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd4:	f8d7 1790 	ldr.w	r1, [r7, #1936]	@ 0x790
 8004fd8:	4011      	ands	r1, r2
 8004fda:	f8c7 1788 	str.w	r1, [r7, #1928]	@ 0x788
 8004fde:	f8d7 1794 	ldr.w	r1, [r7, #1940]	@ 0x794
 8004fe2:	400b      	ands	r3, r1
 8004fe4:	f8c7 378c 	str.w	r3, [r7, #1932]	@ 0x78c
 8004fe8:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8004fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff0:	f8d7 1788 	ldr.w	r1, [r7, #1928]	@ 0x788
 8004ff4:	4051      	eors	r1, r2
 8004ff6:	f8c7 12b8 	str.w	r1, [r7, #696]	@ 0x2b8
 8004ffa:	f8d7 178c 	ldr.w	r1, [r7, #1932]	@ 0x78c
 8004ffe:	404b      	eors	r3, r1
 8005000:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc
 8005004:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	@ 0x2b8
 8005008:	f507 611b 	add.w	r1, r7, #2480	@ 0x9b0
 800500c:	e9c1 2300 	strd	r2, r3, [r1]
            Eso =   BCo ^((~BCu)&  BCa );
 8005010:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8005014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005018:	43d1      	mvns	r1, r2
 800501a:	f8c7 1780 	str.w	r1, [r7, #1920]	@ 0x780
 800501e:	43db      	mvns	r3, r3
 8005020:	f8c7 3784 	str.w	r3, [r7, #1924]	@ 0x784
 8005024:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8005028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502c:	f8d7 1780 	ldr.w	r1, [r7, #1920]	@ 0x780
 8005030:	4011      	ands	r1, r2
 8005032:	f8c7 1778 	str.w	r1, [r7, #1912]	@ 0x778
 8005036:	f8d7 1784 	ldr.w	r1, [r7, #1924]	@ 0x784
 800503a:	400b      	ands	r3, r1
 800503c:	f8c7 377c 	str.w	r3, [r7, #1916]	@ 0x77c
 8005040:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8005044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005048:	f8d7 1778 	ldr.w	r1, [r7, #1912]	@ 0x778
 800504c:	4051      	eors	r1, r2
 800504e:	f8c7 12b0 	str.w	r1, [r7, #688]	@ 0x2b0
 8005052:	f8d7 177c 	ldr.w	r1, [r7, #1916]	@ 0x77c
 8005056:	404b      	eors	r3, r1
 8005058:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 800505c:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	@ 0x2b0
 8005060:	f607 11a8 	addw	r1, r7, #2472	@ 0x9a8
 8005064:	e9c1 2300 	strd	r2, r3, [r1]
            Esu =   BCu ^((~BCa)&  BCe );
 8005068:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 800506c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005070:	43d1      	mvns	r1, r2
 8005072:	f8c7 1770 	str.w	r1, [r7, #1904]	@ 0x770
 8005076:	43db      	mvns	r3, r3
 8005078:	f8c7 3774 	str.w	r3, [r7, #1908]	@ 0x774
 800507c:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8005080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005084:	f8d7 1770 	ldr.w	r1, [r7, #1904]	@ 0x770
 8005088:	4011      	ands	r1, r2
 800508a:	f8c7 1768 	str.w	r1, [r7, #1896]	@ 0x768
 800508e:	f8d7 1774 	ldr.w	r1, [r7, #1908]	@ 0x774
 8005092:	400b      	ands	r3, r1
 8005094:	f8c7 376c 	str.w	r3, [r7, #1900]	@ 0x76c
 8005098:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 800509c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a0:	f8d7 1768 	ldr.w	r1, [r7, #1896]	@ 0x768
 80050a4:	4051      	eors	r1, r2
 80050a6:	f8c7 12a8 	str.w	r1, [r7, #680]	@ 0x2a8
 80050aa:	f8d7 176c 	ldr.w	r1, [r7, #1900]	@ 0x76c
 80050ae:	404b      	eors	r3, r1
 80050b0:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 80050b4:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 80050b8:	f507 611a 	add.w	r1, r7, #2464	@ 0x9a0
 80050bc:	e9c1 2300 	strd	r2, r3, [r1]

            //    prepareTheta
            BCa = Eba^Ega^Eka^Ema^Esa;
 80050c0:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 80050c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80050c8:	f607 2338 	addw	r3, r7, #2616	@ 0xa38
 80050cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d0:	ea80 0602 	eor.w	r6, r0, r2
 80050d4:	f8c7 6760 	str.w	r6, [r7, #1888]	@ 0x760
 80050d8:	404b      	eors	r3, r1
 80050da:	f8c7 3764 	str.w	r3, [r7, #1892]	@ 0x764
 80050de:	f507 6321 	add.w	r3, r7, #2576	@ 0xa10
 80050e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e6:	f8d7 1760 	ldr.w	r1, [r7, #1888]	@ 0x760
 80050ea:	4051      	eors	r1, r2
 80050ec:	f8c7 1758 	str.w	r1, [r7, #1880]	@ 0x758
 80050f0:	f8d7 1764 	ldr.w	r1, [r7, #1892]	@ 0x764
 80050f4:	404b      	eors	r3, r1
 80050f6:	f8c7 375c 	str.w	r3, [r7, #1884]	@ 0x75c
 80050fa:	f607 13e8 	addw	r3, r7, #2536	@ 0x9e8
 80050fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005102:	f8d7 1758 	ldr.w	r1, [r7, #1880]	@ 0x758
 8005106:	4051      	eors	r1, r2
 8005108:	f8c7 1750 	str.w	r1, [r7, #1872]	@ 0x750
 800510c:	f8d7 175c 	ldr.w	r1, [r7, #1884]	@ 0x75c
 8005110:	404b      	eors	r3, r1
 8005112:	f8c7 3754 	str.w	r3, [r7, #1876]	@ 0x754
 8005116:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 800511a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511e:	f8d7 1750 	ldr.w	r1, [r7, #1872]	@ 0x750
 8005122:	4051      	eors	r1, r2
 8005124:	f8c7 12a0 	str.w	r1, [r7, #672]	@ 0x2a0
 8005128:	f8d7 1754 	ldr.w	r1, [r7, #1876]	@ 0x754
 800512c:	404b      	eors	r3, r1
 800512e:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 8005132:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	@ 0x2a0
 8005136:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 800513a:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = Ebe^Ege^Eke^Eme^Ese;
 800513e:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 8005142:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005146:	f507 6323 	add.w	r3, r7, #2608	@ 0xa30
 800514a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514e:	ea80 0602 	eor.w	r6, r0, r2
 8005152:	f8c7 6748 	str.w	r6, [r7, #1864]	@ 0x748
 8005156:	404b      	eors	r3, r1
 8005158:	f8c7 374c 	str.w	r3, [r7, #1868]	@ 0x74c
 800515c:	f607 2308 	addw	r3, r7, #2568	@ 0xa08
 8005160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005164:	f8d7 1748 	ldr.w	r1, [r7, #1864]	@ 0x748
 8005168:	4051      	eors	r1, r2
 800516a:	f8c7 1740 	str.w	r1, [r7, #1856]	@ 0x740
 800516e:	f8d7 174c 	ldr.w	r1, [r7, #1868]	@ 0x74c
 8005172:	404b      	eors	r3, r1
 8005174:	f8c7 3744 	str.w	r3, [r7, #1860]	@ 0x744
 8005178:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800517c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005180:	f8d7 1740 	ldr.w	r1, [r7, #1856]	@ 0x740
 8005184:	4051      	eors	r1, r2
 8005186:	f8c7 1738 	str.w	r1, [r7, #1848]	@ 0x738
 800518a:	f8d7 1744 	ldr.w	r1, [r7, #1860]	@ 0x744
 800518e:	404b      	eors	r3, r1
 8005190:	f8c7 373c 	str.w	r3, [r7, #1852]	@ 0x73c
 8005194:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 8005198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519c:	f8d7 1738 	ldr.w	r1, [r7, #1848]	@ 0x738
 80051a0:	4051      	eors	r1, r2
 80051a2:	f8c7 1298 	str.w	r1, [r7, #664]	@ 0x298
 80051a6:	f8d7 173c 	ldr.w	r1, [r7, #1852]	@ 0x73c
 80051aa:	404b      	eors	r3, r1
 80051ac:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 80051b0:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	@ 0x298
 80051b4:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 80051b8:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = Ebi^Egi^Eki^Emi^Esi;
 80051bc:	f507 6325 	add.w	r3, r7, #2640	@ 0xa50
 80051c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80051c4:	f607 2328 	addw	r3, r7, #2600	@ 0xa28
 80051c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051cc:	ea80 0602 	eor.w	r6, r0, r2
 80051d0:	f8c7 6730 	str.w	r6, [r7, #1840]	@ 0x730
 80051d4:	404b      	eors	r3, r1
 80051d6:	f8c7 3734 	str.w	r3, [r7, #1844]	@ 0x734
 80051da:	f507 6320 	add.w	r3, r7, #2560	@ 0xa00
 80051de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e2:	f8d7 1730 	ldr.w	r1, [r7, #1840]	@ 0x730
 80051e6:	4051      	eors	r1, r2
 80051e8:	f8c7 1728 	str.w	r1, [r7, #1832]	@ 0x728
 80051ec:	f8d7 1734 	ldr.w	r1, [r7, #1844]	@ 0x734
 80051f0:	404b      	eors	r3, r1
 80051f2:	f8c7 372c 	str.w	r3, [r7, #1836]	@ 0x72c
 80051f6:	f607 13d8 	addw	r3, r7, #2520	@ 0x9d8
 80051fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fe:	f8d7 1728 	ldr.w	r1, [r7, #1832]	@ 0x728
 8005202:	4051      	eors	r1, r2
 8005204:	f8c7 1720 	str.w	r1, [r7, #1824]	@ 0x720
 8005208:	f8d7 172c 	ldr.w	r1, [r7, #1836]	@ 0x72c
 800520c:	404b      	eors	r3, r1
 800520e:	f8c7 3724 	str.w	r3, [r7, #1828]	@ 0x724
 8005212:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 8005216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521a:	f8d7 1720 	ldr.w	r1, [r7, #1824]	@ 0x720
 800521e:	4051      	eors	r1, r2
 8005220:	f8c7 1290 	str.w	r1, [r7, #656]	@ 0x290
 8005224:	f8d7 1724 	ldr.w	r1, [r7, #1828]	@ 0x724
 8005228:	404b      	eors	r3, r1
 800522a:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
 800522e:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	@ 0x290
 8005232:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 8005236:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = Ebo^Ego^Eko^Emo^Eso;
 800523a:	f607 2348 	addw	r3, r7, #2632	@ 0xa48
 800523e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005242:	f507 6322 	add.w	r3, r7, #2592	@ 0xa20
 8005246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524a:	ea80 0602 	eor.w	r6, r0, r2
 800524e:	f8c7 6718 	str.w	r6, [r7, #1816]	@ 0x718
 8005252:	404b      	eors	r3, r1
 8005254:	f8c7 371c 	str.w	r3, [r7, #1820]	@ 0x71c
 8005258:	f607 13f8 	addw	r3, r7, #2552	@ 0x9f8
 800525c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005260:	f8d7 1718 	ldr.w	r1, [r7, #1816]	@ 0x718
 8005264:	4051      	eors	r1, r2
 8005266:	f8c7 1710 	str.w	r1, [r7, #1808]	@ 0x710
 800526a:	f8d7 171c 	ldr.w	r1, [r7, #1820]	@ 0x71c
 800526e:	404b      	eors	r3, r1
 8005270:	f8c7 3714 	str.w	r3, [r7, #1812]	@ 0x714
 8005274:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 8005278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527c:	f8d7 1710 	ldr.w	r1, [r7, #1808]	@ 0x710
 8005280:	4051      	eors	r1, r2
 8005282:	f8c7 1708 	str.w	r1, [r7, #1800]	@ 0x708
 8005286:	f8d7 1714 	ldr.w	r1, [r7, #1812]	@ 0x714
 800528a:	404b      	eors	r3, r1
 800528c:	f8c7 370c 	str.w	r3, [r7, #1804]	@ 0x70c
 8005290:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 8005294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005298:	f8d7 1708 	ldr.w	r1, [r7, #1800]	@ 0x708
 800529c:	4051      	eors	r1, r2
 800529e:	f8c7 1288 	str.w	r1, [r7, #648]	@ 0x288
 80052a2:	f8d7 170c 	ldr.w	r1, [r7, #1804]	@ 0x70c
 80052a6:	404b      	eors	r3, r1
 80052a8:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
 80052ac:	e9d7 23a2 	ldrd	r2, r3, [r7, #648]	@ 0x288
 80052b0:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 80052b4:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = Ebu^Egu^Eku^Emu^Esu;
 80052b8:	f507 6324 	add.w	r3, r7, #2624	@ 0xa40
 80052bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80052c0:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 80052c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c8:	ea80 0602 	eor.w	r6, r0, r2
 80052cc:	f8c7 6700 	str.w	r6, [r7, #1792]	@ 0x700
 80052d0:	404b      	eors	r3, r1
 80052d2:	f8c7 3704 	str.w	r3, [r7, #1796]	@ 0x704
 80052d6:	f507 631f 	add.w	r3, r7, #2544	@ 0x9f0
 80052da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052de:	f8d7 1700 	ldr.w	r1, [r7, #1792]	@ 0x700
 80052e2:	4051      	eors	r1, r2
 80052e4:	f8c7 16f8 	str.w	r1, [r7, #1784]	@ 0x6f8
 80052e8:	f8d7 1704 	ldr.w	r1, [r7, #1796]	@ 0x704
 80052ec:	404b      	eors	r3, r1
 80052ee:	f8c7 36fc 	str.w	r3, [r7, #1788]	@ 0x6fc
 80052f2:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 80052f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fa:	f8d7 16f8 	ldr.w	r1, [r7, #1784]	@ 0x6f8
 80052fe:	4051      	eors	r1, r2
 8005300:	f8c7 16f0 	str.w	r1, [r7, #1776]	@ 0x6f0
 8005304:	f8d7 16fc 	ldr.w	r1, [r7, #1788]	@ 0x6fc
 8005308:	404b      	eors	r3, r1
 800530a:	f8c7 36f4 	str.w	r3, [r7, #1780]	@ 0x6f4
 800530e:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 8005312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005316:	f8d7 16f0 	ldr.w	r1, [r7, #1776]	@ 0x6f0
 800531a:	4051      	eors	r1, r2
 800531c:	f8c7 1280 	str.w	r1, [r7, #640]	@ 0x280
 8005320:	f8d7 16f4 	ldr.w	r1, [r7, #1780]	@ 0x6f4
 8005324:	404b      	eors	r3, r1
 8005326:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 800532a:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	@ 0x280
 800532e:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 8005332:	e9c1 2300 	strd	r2, r3, [r1]

            //thetaRhoPiChiIotaPrepareTheta(round+1, E, A)
            Da = BCu^ROL(BCe, 1);
 8005336:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	@ 0xaa8
 800533a:	0fda      	lsrs	r2, r3, #31
 800533c:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	@ 0xaac
 8005340:	005b      	lsls	r3, r3, #1
 8005342:	4313      	orrs	r3, r2
 8005344:	f8c7 36ec 	str.w	r3, [r7, #1772]	@ 0x6ec
 8005348:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	@ 0xaac
 800534c:	0fda      	lsrs	r2, r3, #31
 800534e:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	@ 0xaa8
 8005352:	005b      	lsls	r3, r3, #1
 8005354:	4313      	orrs	r3, r2
 8005356:	f8c7 36e8 	str.w	r3, [r7, #1768]	@ 0x6e8
 800535a:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 800535e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005362:	f8d7 16e8 	ldr.w	r1, [r7, #1768]	@ 0x6e8
 8005366:	4051      	eors	r1, r2
 8005368:	f8c7 1278 	str.w	r1, [r7, #632]	@ 0x278
 800536c:	f8d7 16ec 	ldr.w	r1, [r7, #1772]	@ 0x6ec
 8005370:	404b      	eors	r3, r1
 8005372:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8005376:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	@ 0x278
 800537a:	f607 2188 	addw	r1, r7, #2696	@ 0xa88
 800537e:	e9c1 2300 	strd	r2, r3, [r1]
            De = BCa^ROL(BCi, 1);
 8005382:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	@ 0xaa0
 8005386:	0fda      	lsrs	r2, r3, #31
 8005388:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	@ 0xaa4
 800538c:	005b      	lsls	r3, r3, #1
 800538e:	4313      	orrs	r3, r2
 8005390:	f8c7 36e4 	str.w	r3, [r7, #1764]	@ 0x6e4
 8005394:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	@ 0xaa4
 8005398:	0fda      	lsrs	r2, r3, #31
 800539a:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	@ 0xaa0
 800539e:	005b      	lsls	r3, r3, #1
 80053a0:	4313      	orrs	r3, r2
 80053a2:	f8c7 36e0 	str.w	r3, [r7, #1760]	@ 0x6e0
 80053a6:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 80053aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ae:	f8d7 16e0 	ldr.w	r1, [r7, #1760]	@ 0x6e0
 80053b2:	4051      	eors	r1, r2
 80053b4:	f8c7 1270 	str.w	r1, [r7, #624]	@ 0x270
 80053b8:	f8d7 16e4 	ldr.w	r1, [r7, #1764]	@ 0x6e4
 80053bc:	404b      	eors	r3, r1
 80053be:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
 80053c2:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	@ 0x270
 80053c6:	f507 6128 	add.w	r1, r7, #2688	@ 0xa80
 80053ca:	e9c1 2300 	strd	r2, r3, [r1]
            Di = BCe^ROL(BCo, 1);
 80053ce:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	@ 0xa98
 80053d2:	0fda      	lsrs	r2, r3, #31
 80053d4:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	@ 0xa9c
 80053d8:	005b      	lsls	r3, r3, #1
 80053da:	4313      	orrs	r3, r2
 80053dc:	f8c7 36dc 	str.w	r3, [r7, #1756]	@ 0x6dc
 80053e0:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	@ 0xa9c
 80053e4:	0fda      	lsrs	r2, r3, #31
 80053e6:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	@ 0xa98
 80053ea:	005b      	lsls	r3, r3, #1
 80053ec:	4313      	orrs	r3, r2
 80053ee:	f8c7 36d8 	str.w	r3, [r7, #1752]	@ 0x6d8
 80053f2:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 80053f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fa:	f8d7 16d8 	ldr.w	r1, [r7, #1752]	@ 0x6d8
 80053fe:	4051      	eors	r1, r2
 8005400:	f8c7 1268 	str.w	r1, [r7, #616]	@ 0x268
 8005404:	f8d7 16dc 	ldr.w	r1, [r7, #1756]	@ 0x6dc
 8005408:	404b      	eors	r3, r1
 800540a:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
 800540e:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	@ 0x268
 8005412:	f607 2178 	addw	r1, r7, #2680	@ 0xa78
 8005416:	e9c1 2300 	strd	r2, r3, [r1]
            Do = BCi^ROL(BCu, 1);
 800541a:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	@ 0xa90
 800541e:	0fda      	lsrs	r2, r3, #31
 8005420:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	@ 0xa94
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	4313      	orrs	r3, r2
 8005428:	f8c7 36d4 	str.w	r3, [r7, #1748]	@ 0x6d4
 800542c:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	@ 0xa94
 8005430:	0fda      	lsrs	r2, r3, #31
 8005432:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	@ 0xa90
 8005436:	005b      	lsls	r3, r3, #1
 8005438:	4313      	orrs	r3, r2
 800543a:	f8c7 36d0 	str.w	r3, [r7, #1744]	@ 0x6d0
 800543e:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8005442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005446:	f8d7 16d0 	ldr.w	r1, [r7, #1744]	@ 0x6d0
 800544a:	4051      	eors	r1, r2
 800544c:	f8c7 1260 	str.w	r1, [r7, #608]	@ 0x260
 8005450:	f8d7 16d4 	ldr.w	r1, [r7, #1748]	@ 0x6d4
 8005454:	404b      	eors	r3, r1
 8005456:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
 800545a:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	@ 0x260
 800545e:	f507 6127 	add.w	r1, r7, #2672	@ 0xa70
 8005462:	e9c1 2300 	strd	r2, r3, [r1]
            Du = BCo^ROL(BCa, 1);
 8005466:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	@ 0xab0
 800546a:	0fda      	lsrs	r2, r3, #31
 800546c:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	@ 0xab4
 8005470:	005b      	lsls	r3, r3, #1
 8005472:	4313      	orrs	r3, r2
 8005474:	f8c7 36cc 	str.w	r3, [r7, #1740]	@ 0x6cc
 8005478:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	@ 0xab4
 800547c:	0fda      	lsrs	r2, r3, #31
 800547e:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	@ 0xab0
 8005482:	005b      	lsls	r3, r3, #1
 8005484:	4313      	orrs	r3, r2
 8005486:	f8c7 36c8 	str.w	r3, [r7, #1736]	@ 0x6c8
 800548a:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 800548e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005492:	f8d7 16c8 	ldr.w	r1, [r7, #1736]	@ 0x6c8
 8005496:	4051      	eors	r1, r2
 8005498:	f8c7 1258 	str.w	r1, [r7, #600]	@ 0x258
 800549c:	f8d7 16cc 	ldr.w	r1, [r7, #1740]	@ 0x6cc
 80054a0:	404b      	eors	r3, r1
 80054a2:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 80054a6:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	@ 0x258
 80054aa:	f607 2168 	addw	r1, r7, #2664	@ 0xa68
 80054ae:	e9c1 2300 	strd	r2, r3, [r1]

            Eba ^= Da;
 80054b2:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 80054b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80054ba:	f607 2388 	addw	r3, r7, #2696	@ 0xa88
 80054be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c2:	ea80 0602 	eor.w	r6, r0, r2
 80054c6:	f8c7 6250 	str.w	r6, [r7, #592]	@ 0x250
 80054ca:	404b      	eors	r3, r1
 80054cc:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
 80054d0:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	@ 0x250
 80054d4:	f507 6126 	add.w	r1, r7, #2656	@ 0xa60
 80054d8:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = Eba;
 80054dc:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 80054e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e4:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 80054e8:	e9c1 2300 	strd	r2, r3, [r1]
            Ege ^= De;
 80054ec:	f507 6323 	add.w	r3, r7, #2608	@ 0xa30
 80054f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80054f4:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80054f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fc:	ea80 0602 	eor.w	r6, r0, r2
 8005500:	f8c7 6248 	str.w	r6, [r7, #584]	@ 0x248
 8005504:	404b      	eors	r3, r1
 8005506:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 800550a:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	@ 0x248
 800550e:	f507 6123 	add.w	r1, r7, #2608	@ 0xa30
 8005512:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ege, 44);
 8005516:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800551a:	f5a3 70aa 	sub.w	r0, r3, #340	@ 0x154
 800551e:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8005522:	f5a3 71ac 	sub.w	r1, r3, #344	@ 0x158
 8005526:	6803      	ldr	r3, [r0, #0]
 8005528:	031a      	lsls	r2, r3, #12
 800552a:	680b      	ldr	r3, [r1, #0]
 800552c:	0d1b      	lsrs	r3, r3, #20
 800552e:	4313      	orrs	r3, r2
 8005530:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 8005534:	680b      	ldr	r3, [r1, #0]
 8005536:	031a      	lsls	r2, r3, #12
 8005538:	6803      	ldr	r3, [r0, #0]
 800553a:	0d1b      	lsrs	r3, r3, #20
 800553c:	4313      	orrs	r3, r2
 800553e:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 8005542:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	@ 0x240
 8005546:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 800554a:	e9c1 2300 	strd	r2, r3, [r1]
            Eki ^= Di;
 800554e:	f507 6320 	add.w	r3, r7, #2560	@ 0xa00
 8005552:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005556:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 800555a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555e:	ea80 0602 	eor.w	r6, r0, r2
 8005562:	f8c7 6238 	str.w	r6, [r7, #568]	@ 0x238
 8005566:	404b      	eors	r3, r1
 8005568:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
 800556c:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	@ 0x238
 8005570:	f507 6120 	add.w	r1, r7, #2560	@ 0xa00
 8005574:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eki, 43);
 8005578:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800557c:	f5a3 70c2 	sub.w	r0, r3, #388	@ 0x184
 8005580:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8005584:	f5a3 71c4 	sub.w	r1, r3, #392	@ 0x188
 8005588:	6803      	ldr	r3, [r0, #0]
 800558a:	02da      	lsls	r2, r3, #11
 800558c:	680b      	ldr	r3, [r1, #0]
 800558e:	0d5b      	lsrs	r3, r3, #21
 8005590:	4313      	orrs	r3, r2
 8005592:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
 8005596:	680b      	ldr	r3, [r1, #0]
 8005598:	02da      	lsls	r2, r3, #11
 800559a:	6803      	ldr	r3, [r0, #0]
 800559c:	0d5b      	lsrs	r3, r3, #21
 800559e:	4313      	orrs	r3, r2
 80055a0:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 80055a4:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	@ 0x230
 80055a8:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 80055ac:	e9c1 2300 	strd	r2, r3, [r1]
            Emo ^= Do;
 80055b0:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 80055b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80055b8:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 80055bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c0:	ea80 0602 	eor.w	r6, r0, r2
 80055c4:	f8c7 6228 	str.w	r6, [r7, #552]	@ 0x228
 80055c8:	404b      	eors	r3, r1
 80055ca:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
 80055ce:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	@ 0x228
 80055d2:	f507 611d 	add.w	r1, r7, #2512	@ 0x9d0
 80055d6:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Emo, 21);
 80055da:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80055de:	f5a3 70dc 	sub.w	r0, r3, #440	@ 0x1b8
 80055e2:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80055e6:	f5a3 71da 	sub.w	r1, r3, #436	@ 0x1b4
 80055ea:	6803      	ldr	r3, [r0, #0]
 80055ec:	0ada      	lsrs	r2, r3, #11
 80055ee:	680b      	ldr	r3, [r1, #0]
 80055f0:	055b      	lsls	r3, r3, #21
 80055f2:	4313      	orrs	r3, r2
 80055f4:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 80055f8:	680b      	ldr	r3, [r1, #0]
 80055fa:	0ada      	lsrs	r2, r3, #11
 80055fc:	6803      	ldr	r3, [r0, #0]
 80055fe:	055b      	lsls	r3, r3, #21
 8005600:	4313      	orrs	r3, r2
 8005602:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
 8005606:	e9d7 2388 	ldrd	r2, r3, [r7, #544]	@ 0x220
 800560a:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 800560e:	e9c1 2300 	strd	r2, r3, [r1]
            Esu ^= Du;
 8005612:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 8005616:	e9d3 0100 	ldrd	r0, r1, [r3]
 800561a:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 800561e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005622:	ea80 0602 	eor.w	r6, r0, r2
 8005626:	f8c7 6218 	str.w	r6, [r7, #536]	@ 0x218
 800562a:	404b      	eors	r3, r1
 800562c:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8005630:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	@ 0x218
 8005634:	f507 611a 	add.w	r1, r7, #2464	@ 0x9a0
 8005638:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Esu, 14);
 800563c:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8005640:	f5a3 70f4 	sub.w	r0, r3, #488	@ 0x1e8
 8005644:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8005648:	f5a3 71f2 	sub.w	r1, r3, #484	@ 0x1e4
 800564c:	6803      	ldr	r3, [r0, #0]
 800564e:	0c9a      	lsrs	r2, r3, #18
 8005650:	680b      	ldr	r3, [r1, #0]
 8005652:	039b      	lsls	r3, r3, #14
 8005654:	4313      	orrs	r3, r2
 8005656:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 800565a:	680b      	ldr	r3, [r1, #0]
 800565c:	0c9a      	lsrs	r2, r3, #18
 800565e:	6803      	ldr	r3, [r0, #0]
 8005660:	039b      	lsls	r3, r3, #14
 8005662:	4313      	orrs	r3, r2
 8005664:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8005668:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	@ 0x210
 800566c:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 8005670:	e9c1 2300 	strd	r2, r3, [r1]
            Aba =   BCa ^((~BCe)&  BCi );
 8005674:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8005678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567c:	43d1      	mvns	r1, r2
 800567e:	f8c7 16c0 	str.w	r1, [r7, #1728]	@ 0x6c0
 8005682:	43db      	mvns	r3, r3
 8005684:	f8c7 36c4 	str.w	r3, [r7, #1732]	@ 0x6c4
 8005688:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 800568c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005690:	f8d7 16c0 	ldr.w	r1, [r7, #1728]	@ 0x6c0
 8005694:	4011      	ands	r1, r2
 8005696:	f8c7 16b8 	str.w	r1, [r7, #1720]	@ 0x6b8
 800569a:	f8d7 16c4 	ldr.w	r1, [r7, #1732]	@ 0x6c4
 800569e:	400b      	ands	r3, r1
 80056a0:	f8c7 36bc 	str.w	r3, [r7, #1724]	@ 0x6bc
 80056a4:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 80056a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ac:	f8d7 16b8 	ldr.w	r1, [r7, #1720]	@ 0x6b8
 80056b0:	4051      	eors	r1, r2
 80056b2:	f8c7 1208 	str.w	r1, [r7, #520]	@ 0x208
 80056b6:	f8d7 16bc 	ldr.w	r1, [r7, #1724]	@ 0x6bc
 80056ba:	404b      	eors	r3, r1
 80056bc:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 80056c0:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 80056c4:	f607 3178 	addw	r1, r7, #2936	@ 0xb78
 80056c8:	e9c1 2300 	strd	r2, r3, [r1]
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 80056cc:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	@ 0xb84
 80056d0:	3301      	adds	r3, #1
 80056d2:	4af4      	ldr	r2, [pc, #976]	@ (8005aa4 <KeccakF1600_StatePermute+0x223c>)
 80056d4:	00db      	lsls	r3, r3, #3
 80056d6:	4413      	add	r3, r2
 80056d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80056dc:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 80056e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e4:	ea82 0600 	eor.w	r6, r2, r0
 80056e8:	f8c7 6200 	str.w	r6, [r7, #512]	@ 0x200
 80056ec:	404b      	eors	r3, r1
 80056ee:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 80056f2:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	@ 0x200
 80056f6:	f607 3178 	addw	r1, r7, #2936	@ 0xb78
 80056fa:	e9c1 2300 	strd	r2, r3, [r1]
            Abe =   BCe ^((~BCi)&  BCo );
 80056fe:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8005702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005706:	43d1      	mvns	r1, r2
 8005708:	f8c7 16b0 	str.w	r1, [r7, #1712]	@ 0x6b0
 800570c:	43db      	mvns	r3, r3
 800570e:	f8c7 36b4 	str.w	r3, [r7, #1716]	@ 0x6b4
 8005712:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8005716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571a:	f8d7 16b0 	ldr.w	r1, [r7, #1712]	@ 0x6b0
 800571e:	4011      	ands	r1, r2
 8005720:	f8c7 16a8 	str.w	r1, [r7, #1704]	@ 0x6a8
 8005724:	f8d7 16b4 	ldr.w	r1, [r7, #1716]	@ 0x6b4
 8005728:	400b      	ands	r3, r1
 800572a:	f8c7 36ac 	str.w	r3, [r7, #1708]	@ 0x6ac
 800572e:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8005732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005736:	f8d7 16a8 	ldr.w	r1, [r7, #1704]	@ 0x6a8
 800573a:	4051      	eors	r1, r2
 800573c:	f8c7 11f8 	str.w	r1, [r7, #504]	@ 0x1f8
 8005740:	f8d7 16ac 	ldr.w	r1, [r7, #1708]	@ 0x6ac
 8005744:	404b      	eors	r3, r1
 8005746:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
 800574a:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 800574e:	f507 6137 	add.w	r1, r7, #2928	@ 0xb70
 8005752:	e9c1 2300 	strd	r2, r3, [r1]
            Abi =   BCi ^((~BCo)&  BCu );
 8005756:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 800575a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575e:	43d1      	mvns	r1, r2
 8005760:	f8c7 16a0 	str.w	r1, [r7, #1696]	@ 0x6a0
 8005764:	43db      	mvns	r3, r3
 8005766:	f8c7 36a4 	str.w	r3, [r7, #1700]	@ 0x6a4
 800576a:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 800576e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005772:	f8d7 16a0 	ldr.w	r1, [r7, #1696]	@ 0x6a0
 8005776:	4011      	ands	r1, r2
 8005778:	f8c7 1698 	str.w	r1, [r7, #1688]	@ 0x698
 800577c:	f8d7 16a4 	ldr.w	r1, [r7, #1700]	@ 0x6a4
 8005780:	400b      	ands	r3, r1
 8005782:	f8c7 369c 	str.w	r3, [r7, #1692]	@ 0x69c
 8005786:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 800578a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578e:	f8d7 1698 	ldr.w	r1, [r7, #1688]	@ 0x698
 8005792:	4051      	eors	r1, r2
 8005794:	f8c7 11f0 	str.w	r1, [r7, #496]	@ 0x1f0
 8005798:	f8d7 169c 	ldr.w	r1, [r7, #1692]	@ 0x69c
 800579c:	404b      	eors	r3, r1
 800579e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 80057a2:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 80057a6:	f607 3168 	addw	r1, r7, #2920	@ 0xb68
 80057aa:	e9c1 2300 	strd	r2, r3, [r1]
            Abo =   BCo ^((~BCu)&  BCa );
 80057ae:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 80057b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b6:	43d1      	mvns	r1, r2
 80057b8:	f8c7 1690 	str.w	r1, [r7, #1680]	@ 0x690
 80057bc:	43db      	mvns	r3, r3
 80057be:	f8c7 3694 	str.w	r3, [r7, #1684]	@ 0x694
 80057c2:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 80057c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ca:	f8d7 1690 	ldr.w	r1, [r7, #1680]	@ 0x690
 80057ce:	4011      	ands	r1, r2
 80057d0:	f8c7 1688 	str.w	r1, [r7, #1672]	@ 0x688
 80057d4:	f8d7 1694 	ldr.w	r1, [r7, #1684]	@ 0x694
 80057d8:	400b      	ands	r3, r1
 80057da:	f8c7 368c 	str.w	r3, [r7, #1676]	@ 0x68c
 80057de:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 80057e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e6:	f8d7 1688 	ldr.w	r1, [r7, #1672]	@ 0x688
 80057ea:	4051      	eors	r1, r2
 80057ec:	f8c7 11e8 	str.w	r1, [r7, #488]	@ 0x1e8
 80057f0:	f8d7 168c 	ldr.w	r1, [r7, #1676]	@ 0x68c
 80057f4:	404b      	eors	r3, r1
 80057f6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 80057fa:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 80057fe:	f507 6136 	add.w	r1, r7, #2912	@ 0xb60
 8005802:	e9c1 2300 	strd	r2, r3, [r1]
            Abu =   BCu ^((~BCa)&  BCe );
 8005806:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 800580a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580e:	43d1      	mvns	r1, r2
 8005810:	f8c7 1680 	str.w	r1, [r7, #1664]	@ 0x680
 8005814:	43db      	mvns	r3, r3
 8005816:	f8c7 3684 	str.w	r3, [r7, #1668]	@ 0x684
 800581a:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 800581e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005822:	f8d7 1680 	ldr.w	r1, [r7, #1664]	@ 0x680
 8005826:	4011      	ands	r1, r2
 8005828:	f8c7 1678 	str.w	r1, [r7, #1656]	@ 0x678
 800582c:	f8d7 1684 	ldr.w	r1, [r7, #1668]	@ 0x684
 8005830:	400b      	ands	r3, r1
 8005832:	f8c7 367c 	str.w	r3, [r7, #1660]	@ 0x67c
 8005836:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 800583a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583e:	f8d7 1678 	ldr.w	r1, [r7, #1656]	@ 0x678
 8005842:	4051      	eors	r1, r2
 8005844:	f8c7 11e0 	str.w	r1, [r7, #480]	@ 0x1e0
 8005848:	f8d7 167c 	ldr.w	r1, [r7, #1660]	@ 0x67c
 800584c:	404b      	eors	r3, r1
 800584e:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8005852:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 8005856:	f607 3158 	addw	r1, r7, #2904	@ 0xb58
 800585a:	e9c1 2300 	strd	r2, r3, [r1]

            Ebo ^= Do;
 800585e:	f607 2348 	addw	r3, r7, #2632	@ 0xa48
 8005862:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005866:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 800586a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586e:	ea80 0602 	eor.w	r6, r0, r2
 8005872:	f8c7 61d8 	str.w	r6, [r7, #472]	@ 0x1d8
 8005876:	404b      	eors	r3, r1
 8005878:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800587c:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	@ 0x1d8
 8005880:	f607 2148 	addw	r1, r7, #2632	@ 0xa48
 8005884:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebo, 28);
 8005888:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800588c:	f5a3 70a0 	sub.w	r0, r3, #320	@ 0x140
 8005890:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8005894:	f5a3 719e 	sub.w	r1, r3, #316	@ 0x13c
 8005898:	6803      	ldr	r3, [r0, #0]
 800589a:	091a      	lsrs	r2, r3, #4
 800589c:	680b      	ldr	r3, [r1, #0]
 800589e:	071b      	lsls	r3, r3, #28
 80058a0:	4313      	orrs	r3, r2
 80058a2:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 80058a6:	680b      	ldr	r3, [r1, #0]
 80058a8:	091a      	lsrs	r2, r3, #4
 80058aa:	6803      	ldr	r3, [r0, #0]
 80058ac:	071b      	lsls	r3, r3, #28
 80058ae:	4313      	orrs	r3, r2
 80058b0:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 80058b4:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	@ 0x1d0
 80058b8:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 80058bc:	e9c1 2300 	strd	r2, r3, [r1]
            Egu ^= Du;
 80058c0:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 80058c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80058c8:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 80058cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d0:	ea80 0602 	eor.w	r6, r0, r2
 80058d4:	f8c7 61c8 	str.w	r6, [r7, #456]	@ 0x1c8
 80058d8:	404b      	eors	r3, r1
 80058da:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 80058de:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 80058e2:	f607 2118 	addw	r1, r7, #2584	@ 0xa18
 80058e6:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Egu, 20);
 80058ea:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80058ee:	f5a3 70b8 	sub.w	r0, r3, #368	@ 0x170
 80058f2:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80058f6:	f5a3 71b6 	sub.w	r1, r3, #364	@ 0x16c
 80058fa:	6803      	ldr	r3, [r0, #0]
 80058fc:	0b1a      	lsrs	r2, r3, #12
 80058fe:	680b      	ldr	r3, [r1, #0]
 8005900:	051b      	lsls	r3, r3, #20
 8005902:	4313      	orrs	r3, r2
 8005904:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8005908:	680b      	ldr	r3, [r1, #0]
 800590a:	0b1a      	lsrs	r2, r3, #12
 800590c:	6803      	ldr	r3, [r0, #0]
 800590e:	051b      	lsls	r3, r3, #20
 8005910:	4313      	orrs	r3, r2
 8005912:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8005916:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
 800591a:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 800591e:	e9c1 2300 	strd	r2, r3, [r1]
            Eka ^= Da;
 8005922:	f507 6321 	add.w	r3, r7, #2576	@ 0xa10
 8005926:	e9d3 0100 	ldrd	r0, r1, [r3]
 800592a:	f607 2388 	addw	r3, r7, #2696	@ 0xa88
 800592e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005932:	ea80 0602 	eor.w	r6, r0, r2
 8005936:	f8c7 61b8 	str.w	r6, [r7, #440]	@ 0x1b8
 800593a:	404b      	eors	r3, r1
 800593c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8005940:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	@ 0x1b8
 8005944:	f507 6121 	add.w	r1, r7, #2576	@ 0xa10
 8005948:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eka, 3);
 800594c:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8005950:	f5a3 70bc 	sub.w	r0, r3, #376	@ 0x178
 8005954:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8005958:	f5a3 71ba 	sub.w	r1, r3, #372	@ 0x174
 800595c:	6803      	ldr	r3, [r0, #0]
 800595e:	0f5a      	lsrs	r2, r3, #29
 8005960:	680b      	ldr	r3, [r1, #0]
 8005962:	00db      	lsls	r3, r3, #3
 8005964:	4313      	orrs	r3, r2
 8005966:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 800596a:	680b      	ldr	r3, [r1, #0]
 800596c:	0f5a      	lsrs	r2, r3, #29
 800596e:	6803      	ldr	r3, [r0, #0]
 8005970:	00db      	lsls	r3, r3, #3
 8005972:	4313      	orrs	r3, r2
 8005974:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8005978:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	@ 0x1b0
 800597c:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 8005980:	e9c1 2300 	strd	r2, r3, [r1]
            Eme ^= De;
 8005984:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8005988:	e9d3 0100 	ldrd	r0, r1, [r3]
 800598c:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8005990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005994:	ea80 0602 	eor.w	r6, r0, r2
 8005998:	f8c7 61a8 	str.w	r6, [r7, #424]	@ 0x1a8
 800599c:	404b      	eors	r3, r1
 800599e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 80059a2:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	@ 0x1a8
 80059a6:	f507 611e 	add.w	r1, r7, #2528	@ 0x9e0
 80059aa:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Eme, 45);
 80059ae:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80059b2:	f5a3 70d2 	sub.w	r0, r3, #420	@ 0x1a4
 80059b6:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80059ba:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
 80059be:	6803      	ldr	r3, [r0, #0]
 80059c0:	035a      	lsls	r2, r3, #13
 80059c2:	680b      	ldr	r3, [r1, #0]
 80059c4:	0cdb      	lsrs	r3, r3, #19
 80059c6:	4313      	orrs	r3, r2
 80059c8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80059cc:	680b      	ldr	r3, [r1, #0]
 80059ce:	035a      	lsls	r2, r3, #13
 80059d0:	6803      	ldr	r3, [r0, #0]
 80059d2:	0cdb      	lsrs	r3, r3, #19
 80059d4:	4313      	orrs	r3, r2
 80059d6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80059da:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	@ 0x1a0
 80059de:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 80059e2:	e9c1 2300 	strd	r2, r3, [r1]
            Esi ^= Di;
 80059e6:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 80059ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80059ee:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 80059f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f6:	ea80 0602 	eor.w	r6, r0, r2
 80059fa:	f8c7 6198 	str.w	r6, [r7, #408]	@ 0x198
 80059fe:	404b      	eors	r3, r1
 8005a00:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8005a04:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 8005a08:	f507 611b 	add.w	r1, r7, #2480	@ 0x9b0
 8005a0c:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Esi, 61);
 8005a10:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8005a14:	f5a3 70ea 	sub.w	r0, r3, #468	@ 0x1d4
 8005a18:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8005a1c:	f5a3 71ec 	sub.w	r1, r3, #472	@ 0x1d8
 8005a20:	6803      	ldr	r3, [r0, #0]
 8005a22:	075a      	lsls	r2, r3, #29
 8005a24:	680b      	ldr	r3, [r1, #0]
 8005a26:	08db      	lsrs	r3, r3, #3
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8005a2e:	680b      	ldr	r3, [r1, #0]
 8005a30:	075a      	lsls	r2, r3, #29
 8005a32:	6803      	ldr	r3, [r0, #0]
 8005a34:	08db      	lsrs	r3, r3, #3
 8005a36:	4313      	orrs	r3, r2
 8005a38:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8005a3c:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8005a40:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 8005a44:	e9c1 2300 	strd	r2, r3, [r1]
            Aga =   BCa ^((~BCe)&  BCi );
 8005a48:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8005a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a50:	43d1      	mvns	r1, r2
 8005a52:	f8c7 1670 	str.w	r1, [r7, #1648]	@ 0x670
 8005a56:	43db      	mvns	r3, r3
 8005a58:	f8c7 3674 	str.w	r3, [r7, #1652]	@ 0x674
 8005a5c:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8005a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a64:	f8d7 1670 	ldr.w	r1, [r7, #1648]	@ 0x670
 8005a68:	4011      	ands	r1, r2
 8005a6a:	f8c7 1668 	str.w	r1, [r7, #1640]	@ 0x668
 8005a6e:	f8d7 1674 	ldr.w	r1, [r7, #1652]	@ 0x674
 8005a72:	400b      	ands	r3, r1
 8005a74:	f8c7 366c 	str.w	r3, [r7, #1644]	@ 0x66c
 8005a78:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8005a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a80:	f8d7 1668 	ldr.w	r1, [r7, #1640]	@ 0x668
 8005a84:	4051      	eors	r1, r2
 8005a86:	f8c7 1188 	str.w	r1, [r7, #392]	@ 0x188
 8005a8a:	f8d7 166c 	ldr.w	r1, [r7, #1644]	@ 0x66c
 8005a8e:	404b      	eors	r3, r1
 8005a90:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8005a94:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8005a98:	f507 6135 	add.w	r1, r7, #2896	@ 0xb50
 8005a9c:	e9c1 2300 	strd	r2, r3, [r1]
 8005aa0:	e002      	b.n	8005aa8 <KeccakF1600_StatePermute+0x2240>
 8005aa2:	bf00      	nop
 8005aa4:	08017b20 	.word	0x08017b20
            Age =   BCe ^((~BCi)&  BCo );
 8005aa8:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8005aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab0:	43d1      	mvns	r1, r2
 8005ab2:	f8c7 1660 	str.w	r1, [r7, #1632]	@ 0x660
 8005ab6:	43db      	mvns	r3, r3
 8005ab8:	f8c7 3664 	str.w	r3, [r7, #1636]	@ 0x664
 8005abc:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8005ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac4:	f8d7 1660 	ldr.w	r1, [r7, #1632]	@ 0x660
 8005ac8:	4011      	ands	r1, r2
 8005aca:	f8c7 1658 	str.w	r1, [r7, #1624]	@ 0x658
 8005ace:	f8d7 1664 	ldr.w	r1, [r7, #1636]	@ 0x664
 8005ad2:	400b      	ands	r3, r1
 8005ad4:	f8c7 365c 	str.w	r3, [r7, #1628]	@ 0x65c
 8005ad8:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8005adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae0:	f8d7 1658 	ldr.w	r1, [r7, #1624]	@ 0x658
 8005ae4:	4051      	eors	r1, r2
 8005ae6:	f8c7 1180 	str.w	r1, [r7, #384]	@ 0x180
 8005aea:	f8d7 165c 	ldr.w	r1, [r7, #1628]	@ 0x65c
 8005aee:	404b      	eors	r3, r1
 8005af0:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8005af4:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
 8005af8:	f607 3148 	addw	r1, r7, #2888	@ 0xb48
 8005afc:	e9c1 2300 	strd	r2, r3, [r1]
            Agi =   BCi ^((~BCo)&  BCu );
 8005b00:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8005b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b08:	43d1      	mvns	r1, r2
 8005b0a:	f8c7 1650 	str.w	r1, [r7, #1616]	@ 0x650
 8005b0e:	43db      	mvns	r3, r3
 8005b10:	f8c7 3654 	str.w	r3, [r7, #1620]	@ 0x654
 8005b14:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8005b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1c:	f8d7 1650 	ldr.w	r1, [r7, #1616]	@ 0x650
 8005b20:	4011      	ands	r1, r2
 8005b22:	f8c7 1648 	str.w	r1, [r7, #1608]	@ 0x648
 8005b26:	f8d7 1654 	ldr.w	r1, [r7, #1620]	@ 0x654
 8005b2a:	400b      	ands	r3, r1
 8005b2c:	f8c7 364c 	str.w	r3, [r7, #1612]	@ 0x64c
 8005b30:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8005b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b38:	f8d7 1648 	ldr.w	r1, [r7, #1608]	@ 0x648
 8005b3c:	4051      	eors	r1, r2
 8005b3e:	f8c7 1178 	str.w	r1, [r7, #376]	@ 0x178
 8005b42:	f8d7 164c 	ldr.w	r1, [r7, #1612]	@ 0x64c
 8005b46:	404b      	eors	r3, r1
 8005b48:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8005b4c:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8005b50:	f507 6134 	add.w	r1, r7, #2880	@ 0xb40
 8005b54:	e9c1 2300 	strd	r2, r3, [r1]
            Ago =   BCo ^((~BCu)&  BCa );
 8005b58:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8005b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b60:	43d1      	mvns	r1, r2
 8005b62:	f8c7 1640 	str.w	r1, [r7, #1600]	@ 0x640
 8005b66:	43db      	mvns	r3, r3
 8005b68:	f8c7 3644 	str.w	r3, [r7, #1604]	@ 0x644
 8005b6c:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8005b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b74:	f8d7 1640 	ldr.w	r1, [r7, #1600]	@ 0x640
 8005b78:	4011      	ands	r1, r2
 8005b7a:	f8c7 1638 	str.w	r1, [r7, #1592]	@ 0x638
 8005b7e:	f8d7 1644 	ldr.w	r1, [r7, #1604]	@ 0x644
 8005b82:	400b      	ands	r3, r1
 8005b84:	f8c7 363c 	str.w	r3, [r7, #1596]	@ 0x63c
 8005b88:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8005b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b90:	f8d7 1638 	ldr.w	r1, [r7, #1592]	@ 0x638
 8005b94:	4051      	eors	r1, r2
 8005b96:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
 8005b9a:	f8d7 163c 	ldr.w	r1, [r7, #1596]	@ 0x63c
 8005b9e:	404b      	eors	r3, r1
 8005ba0:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8005ba4:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
 8005ba8:	f607 3138 	addw	r1, r7, #2872	@ 0xb38
 8005bac:	e9c1 2300 	strd	r2, r3, [r1]
            Agu =   BCu ^((~BCa)&  BCe );
 8005bb0:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8005bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb8:	43d1      	mvns	r1, r2
 8005bba:	f8c7 1630 	str.w	r1, [r7, #1584]	@ 0x630
 8005bbe:	43db      	mvns	r3, r3
 8005bc0:	f8c7 3634 	str.w	r3, [r7, #1588]	@ 0x634
 8005bc4:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8005bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bcc:	f8d7 1630 	ldr.w	r1, [r7, #1584]	@ 0x630
 8005bd0:	4011      	ands	r1, r2
 8005bd2:	f8c7 1628 	str.w	r1, [r7, #1576]	@ 0x628
 8005bd6:	f8d7 1634 	ldr.w	r1, [r7, #1588]	@ 0x634
 8005bda:	400b      	ands	r3, r1
 8005bdc:	f8c7 362c 	str.w	r3, [r7, #1580]	@ 0x62c
 8005be0:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8005be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be8:	f8d7 1628 	ldr.w	r1, [r7, #1576]	@ 0x628
 8005bec:	4051      	eors	r1, r2
 8005bee:	f8c7 1168 	str.w	r1, [r7, #360]	@ 0x168
 8005bf2:	f8d7 162c 	ldr.w	r1, [r7, #1580]	@ 0x62c
 8005bf6:	404b      	eors	r3, r1
 8005bf8:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8005bfc:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	@ 0x168
 8005c00:	f507 6133 	add.w	r1, r7, #2864	@ 0xb30
 8005c04:	e9c1 2300 	strd	r2, r3, [r1]

            Ebe ^= De;
 8005c08:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 8005c0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c10:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8005c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c18:	ea80 0602 	eor.w	r6, r0, r2
 8005c1c:	f8c7 6160 	str.w	r6, [r7, #352]	@ 0x160
 8005c20:	404b      	eors	r3, r1
 8005c22:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8005c26:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 8005c2a:	f607 2158 	addw	r1, r7, #2648	@ 0xa58
 8005c2e:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebe, 1);
 8005c32:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8005c36:	f5a3 7098 	sub.w	r0, r3, #304	@ 0x130
 8005c3a:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8005c3e:	f5a3 7196 	sub.w	r1, r3, #300	@ 0x12c
 8005c42:	6803      	ldr	r3, [r0, #0]
 8005c44:	0fda      	lsrs	r2, r3, #31
 8005c46:	680b      	ldr	r3, [r1, #0]
 8005c48:	005b      	lsls	r3, r3, #1
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8005c50:	680b      	ldr	r3, [r1, #0]
 8005c52:	0fda      	lsrs	r2, r3, #31
 8005c54:	6803      	ldr	r3, [r0, #0]
 8005c56:	005b      	lsls	r3, r3, #1
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8005c5e:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8005c62:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 8005c66:	e9c1 2300 	strd	r2, r3, [r1]
            Egi ^= Di;
 8005c6a:	f607 2328 	addw	r3, r7, #2600	@ 0xa28
 8005c6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c72:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 8005c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7a:	ea80 0602 	eor.w	r6, r0, r2
 8005c7e:	f8c7 6150 	str.w	r6, [r7, #336]	@ 0x150
 8005c82:	404b      	eors	r3, r1
 8005c84:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8005c88:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8005c8c:	f607 2128 	addw	r1, r7, #2600	@ 0xa28
 8005c90:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Egi, 6);
 8005c94:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8005c98:	f5a3 70b0 	sub.w	r0, r3, #352	@ 0x160
 8005c9c:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8005ca0:	f5a3 71ae 	sub.w	r1, r3, #348	@ 0x15c
 8005ca4:	6803      	ldr	r3, [r0, #0]
 8005ca6:	0e9a      	lsrs	r2, r3, #26
 8005ca8:	680b      	ldr	r3, [r1, #0]
 8005caa:	019b      	lsls	r3, r3, #6
 8005cac:	4313      	orrs	r3, r2
 8005cae:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8005cb2:	680b      	ldr	r3, [r1, #0]
 8005cb4:	0e9a      	lsrs	r2, r3, #26
 8005cb6:	6803      	ldr	r3, [r0, #0]
 8005cb8:	019b      	lsls	r3, r3, #6
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8005cc0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8005cc4:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 8005cc8:	e9c1 2300 	strd	r2, r3, [r1]
            Eko ^= Do;
 8005ccc:	f607 13f8 	addw	r3, r7, #2552	@ 0x9f8
 8005cd0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005cd4:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 8005cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cdc:	ea80 0602 	eor.w	r6, r0, r2
 8005ce0:	f8c7 6140 	str.w	r6, [r7, #320]	@ 0x140
 8005ce4:	404b      	eors	r3, r1
 8005ce6:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8005cea:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8005cee:	f607 11f8 	addw	r1, r7, #2552	@ 0x9f8
 8005cf2:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eko, 25);
 8005cf6:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8005cfa:	f5a3 70c8 	sub.w	r0, r3, #400	@ 0x190
 8005cfe:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8005d02:	f5a3 71c6 	sub.w	r1, r3, #396	@ 0x18c
 8005d06:	6803      	ldr	r3, [r0, #0]
 8005d08:	09da      	lsrs	r2, r3, #7
 8005d0a:	680b      	ldr	r3, [r1, #0]
 8005d0c:	065b      	lsls	r3, r3, #25
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8005d14:	680b      	ldr	r3, [r1, #0]
 8005d16:	09da      	lsrs	r2, r3, #7
 8005d18:	6803      	ldr	r3, [r0, #0]
 8005d1a:	065b      	lsls	r3, r3, #25
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8005d22:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8005d26:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 8005d2a:	e9c1 2300 	strd	r2, r3, [r1]
            Emu ^= Du;
 8005d2e:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 8005d32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d36:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 8005d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3e:	ea80 0602 	eor.w	r6, r0, r2
 8005d42:	f8c7 6130 	str.w	r6, [r7, #304]	@ 0x130
 8005d46:	404b      	eors	r3, r1
 8005d48:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8005d4c:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8005d50:	f607 11c8 	addw	r1, r7, #2504	@ 0x9c8
 8005d54:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Emu, 8);
 8005d58:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8005d5c:	f5a3 70e0 	sub.w	r0, r3, #448	@ 0x1c0
 8005d60:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8005d64:	f5a3 71de 	sub.w	r1, r3, #444	@ 0x1bc
 8005d68:	6803      	ldr	r3, [r0, #0]
 8005d6a:	0e1a      	lsrs	r2, r3, #24
 8005d6c:	680b      	ldr	r3, [r1, #0]
 8005d6e:	021b      	lsls	r3, r3, #8
 8005d70:	4313      	orrs	r3, r2
 8005d72:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8005d76:	680b      	ldr	r3, [r1, #0]
 8005d78:	0e1a      	lsrs	r2, r3, #24
 8005d7a:	6803      	ldr	r3, [r0, #0]
 8005d7c:	021b      	lsls	r3, r3, #8
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8005d84:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8005d88:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 8005d8c:	e9c1 2300 	strd	r2, r3, [r1]
            Esa ^= Da;
 8005d90:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 8005d94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d98:	f607 2388 	addw	r3, r7, #2696	@ 0xa88
 8005d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da0:	ea80 0602 	eor.w	r6, r0, r2
 8005da4:	f8c7 6120 	str.w	r6, [r7, #288]	@ 0x120
 8005da8:	404b      	eors	r3, r1
 8005daa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8005dae:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8005db2:	f507 611c 	add.w	r1, r7, #2496	@ 0x9c0
 8005db6:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Esa, 18);
 8005dba:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8005dbe:	f5a3 70e4 	sub.w	r0, r3, #456	@ 0x1c8
 8005dc2:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8005dc6:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8005dca:	6803      	ldr	r3, [r0, #0]
 8005dcc:	0b9a      	lsrs	r2, r3, #14
 8005dce:	680b      	ldr	r3, [r1, #0]
 8005dd0:	049b      	lsls	r3, r3, #18
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8005dd8:	680b      	ldr	r3, [r1, #0]
 8005dda:	0b9a      	lsrs	r2, r3, #14
 8005ddc:	6803      	ldr	r3, [r0, #0]
 8005dde:	049b      	lsls	r3, r3, #18
 8005de0:	4313      	orrs	r3, r2
 8005de2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005de6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8005dea:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 8005dee:	e9c1 2300 	strd	r2, r3, [r1]
            Aka =   BCa ^((~BCe)&  BCi );
 8005df2:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8005df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfa:	43d1      	mvns	r1, r2
 8005dfc:	f8c7 1620 	str.w	r1, [r7, #1568]	@ 0x620
 8005e00:	43db      	mvns	r3, r3
 8005e02:	f8c7 3624 	str.w	r3, [r7, #1572]	@ 0x624
 8005e06:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8005e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0e:	f8d7 1620 	ldr.w	r1, [r7, #1568]	@ 0x620
 8005e12:	4011      	ands	r1, r2
 8005e14:	f8c7 1618 	str.w	r1, [r7, #1560]	@ 0x618
 8005e18:	f8d7 1624 	ldr.w	r1, [r7, #1572]	@ 0x624
 8005e1c:	400b      	ands	r3, r1
 8005e1e:	f8c7 361c 	str.w	r3, [r7, #1564]	@ 0x61c
 8005e22:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8005e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2a:	f8d7 1618 	ldr.w	r1, [r7, #1560]	@ 0x618
 8005e2e:	4051      	eors	r1, r2
 8005e30:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 8005e34:	f8d7 161c 	ldr.w	r1, [r7, #1564]	@ 0x61c
 8005e38:	404b      	eors	r3, r1
 8005e3a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8005e3e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8005e42:	f607 3128 	addw	r1, r7, #2856	@ 0xb28
 8005e46:	e9c1 2300 	strd	r2, r3, [r1]
            Ake =   BCe ^((~BCi)&  BCo );
 8005e4a:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8005e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e52:	43d1      	mvns	r1, r2
 8005e54:	f8c7 1610 	str.w	r1, [r7, #1552]	@ 0x610
 8005e58:	43db      	mvns	r3, r3
 8005e5a:	f8c7 3614 	str.w	r3, [r7, #1556]	@ 0x614
 8005e5e:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8005e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e66:	f8d7 1610 	ldr.w	r1, [r7, #1552]	@ 0x610
 8005e6a:	4011      	ands	r1, r2
 8005e6c:	f8c7 1608 	str.w	r1, [r7, #1544]	@ 0x608
 8005e70:	f8d7 1614 	ldr.w	r1, [r7, #1556]	@ 0x614
 8005e74:	400b      	ands	r3, r1
 8005e76:	f8c7 360c 	str.w	r3, [r7, #1548]	@ 0x60c
 8005e7a:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8005e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e82:	f8d7 1608 	ldr.w	r1, [r7, #1544]	@ 0x608
 8005e86:	4051      	eors	r1, r2
 8005e88:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
 8005e8c:	f8d7 160c 	ldr.w	r1, [r7, #1548]	@ 0x60c
 8005e90:	404b      	eors	r3, r1
 8005e92:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005e96:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 8005e9a:	f507 6132 	add.w	r1, r7, #2848	@ 0xb20
 8005e9e:	e9c1 2300 	strd	r2, r3, [r1]
            Aki =   BCi ^((~BCo)&  BCu );
 8005ea2:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8005ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eaa:	43d1      	mvns	r1, r2
 8005eac:	f8c7 1600 	str.w	r1, [r7, #1536]	@ 0x600
 8005eb0:	43db      	mvns	r3, r3
 8005eb2:	f8c7 3604 	str.w	r3, [r7, #1540]	@ 0x604
 8005eb6:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8005eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ebe:	f8d7 1600 	ldr.w	r1, [r7, #1536]	@ 0x600
 8005ec2:	4011      	ands	r1, r2
 8005ec4:	f8c7 15f8 	str.w	r1, [r7, #1528]	@ 0x5f8
 8005ec8:	f8d7 1604 	ldr.w	r1, [r7, #1540]	@ 0x604
 8005ecc:	400b      	ands	r3, r1
 8005ece:	f8c7 35fc 	str.w	r3, [r7, #1532]	@ 0x5fc
 8005ed2:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8005ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eda:	f8d7 15f8 	ldr.w	r1, [r7, #1528]	@ 0x5f8
 8005ede:	4051      	eors	r1, r2
 8005ee0:	f8c7 1100 	str.w	r1, [r7, #256]	@ 0x100
 8005ee4:	f8d7 15fc 	ldr.w	r1, [r7, #1532]	@ 0x5fc
 8005ee8:	404b      	eors	r3, r1
 8005eea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005eee:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 8005ef2:	f607 3118 	addw	r1, r7, #2840	@ 0xb18
 8005ef6:	e9c1 2300 	strd	r2, r3, [r1]
            Ako =   BCo ^((~BCu)&  BCa );
 8005efa:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8005efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f02:	43d1      	mvns	r1, r2
 8005f04:	f8c7 15f0 	str.w	r1, [r7, #1520]	@ 0x5f0
 8005f08:	43db      	mvns	r3, r3
 8005f0a:	f8c7 35f4 	str.w	r3, [r7, #1524]	@ 0x5f4
 8005f0e:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8005f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f16:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	@ 0x5f0
 8005f1a:	4011      	ands	r1, r2
 8005f1c:	f8c7 15e8 	str.w	r1, [r7, #1512]	@ 0x5e8
 8005f20:	f8d7 15f4 	ldr.w	r1, [r7, #1524]	@ 0x5f4
 8005f24:	400b      	ands	r3, r1
 8005f26:	f8c7 35ec 	str.w	r3, [r7, #1516]	@ 0x5ec
 8005f2a:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8005f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f32:	f8d7 15e8 	ldr.w	r1, [r7, #1512]	@ 0x5e8
 8005f36:	4051      	eors	r1, r2
 8005f38:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8005f3c:	f8d7 15ec 	ldr.w	r1, [r7, #1516]	@ 0x5ec
 8005f40:	404b      	eors	r3, r1
 8005f42:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005f46:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	@ 0xf8
 8005f4a:	f507 6131 	add.w	r1, r7, #2832	@ 0xb10
 8005f4e:	e9c1 2300 	strd	r2, r3, [r1]
            Aku =   BCu ^((~BCa)&  BCe );
 8005f52:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8005f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5a:	43d1      	mvns	r1, r2
 8005f5c:	f8c7 15e0 	str.w	r1, [r7, #1504]	@ 0x5e0
 8005f60:	43db      	mvns	r3, r3
 8005f62:	f8c7 35e4 	str.w	r3, [r7, #1508]	@ 0x5e4
 8005f66:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8005f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6e:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	@ 0x5e0
 8005f72:	4011      	ands	r1, r2
 8005f74:	f8c7 15d8 	str.w	r1, [r7, #1496]	@ 0x5d8
 8005f78:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	@ 0x5e4
 8005f7c:	400b      	ands	r3, r1
 8005f7e:	f8c7 35dc 	str.w	r3, [r7, #1500]	@ 0x5dc
 8005f82:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8005f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8a:	f8d7 15d8 	ldr.w	r1, [r7, #1496]	@ 0x5d8
 8005f8e:	4051      	eors	r1, r2
 8005f90:	f8c7 10f0 	str.w	r1, [r7, #240]	@ 0xf0
 8005f94:	f8d7 15dc 	ldr.w	r1, [r7, #1500]	@ 0x5dc
 8005f98:	404b      	eors	r3, r1
 8005f9a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005f9e:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 8005fa2:	f607 3108 	addw	r1, r7, #2824	@ 0xb08
 8005fa6:	e9c1 2300 	strd	r2, r3, [r1]

            Ebu ^= Du;
 8005faa:	f507 6324 	add.w	r3, r7, #2624	@ 0xa40
 8005fae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005fb2:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 8005fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fba:	ea80 0602 	eor.w	r6, r0, r2
 8005fbe:	f8c7 60e8 	str.w	r6, [r7, #232]	@ 0xe8
 8005fc2:	404b      	eors	r3, r1
 8005fc4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005fc8:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 8005fcc:	f507 6124 	add.w	r1, r7, #2624	@ 0xa40
 8005fd0:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebu, 27);
 8005fd4:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8005fd8:	f5a3 70a4 	sub.w	r0, r3, #328	@ 0x148
 8005fdc:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8005fe0:	f5a3 71a2 	sub.w	r1, r3, #324	@ 0x144
 8005fe4:	6803      	ldr	r3, [r0, #0]
 8005fe6:	095a      	lsrs	r2, r3, #5
 8005fe8:	680b      	ldr	r3, [r1, #0]
 8005fea:	06db      	lsls	r3, r3, #27
 8005fec:	4313      	orrs	r3, r2
 8005fee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005ff2:	680b      	ldr	r3, [r1, #0]
 8005ff4:	095a      	lsrs	r2, r3, #5
 8005ff6:	6803      	ldr	r3, [r0, #0]
 8005ff8:	06db      	lsls	r3, r3, #27
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006000:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 8006004:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 8006008:	e9c1 2300 	strd	r2, r3, [r1]
            Ega ^= Da;
 800600c:	f607 2338 	addw	r3, r7, #2616	@ 0xa38
 8006010:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006014:	f607 2388 	addw	r3, r7, #2696	@ 0xa88
 8006018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601c:	ea80 0602 	eor.w	r6, r0, r2
 8006020:	f8c7 60d8 	str.w	r6, [r7, #216]	@ 0xd8
 8006024:	404b      	eors	r3, r1
 8006026:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800602a:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 800602e:	f607 2138 	addw	r1, r7, #2616	@ 0xa38
 8006032:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ega, 36);
 8006036:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800603a:	f5a3 70a6 	sub.w	r0, r3, #332	@ 0x14c
 800603e:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8006042:	f5a3 71a8 	sub.w	r1, r3, #336	@ 0x150
 8006046:	6803      	ldr	r3, [r0, #0]
 8006048:	011a      	lsls	r2, r3, #4
 800604a:	680b      	ldr	r3, [r1, #0]
 800604c:	0f1b      	lsrs	r3, r3, #28
 800604e:	4313      	orrs	r3, r2
 8006050:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006054:	680b      	ldr	r3, [r1, #0]
 8006056:	011a      	lsls	r2, r3, #4
 8006058:	6803      	ldr	r3, [r0, #0]
 800605a:	0f1b      	lsrs	r3, r3, #28
 800605c:	4313      	orrs	r3, r2
 800605e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006062:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8006066:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 800606a:	e9c1 2300 	strd	r2, r3, [r1]
            Eke ^= De;
 800606e:	f607 2308 	addw	r3, r7, #2568	@ 0xa08
 8006072:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006076:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800607a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607e:	ea80 0602 	eor.w	r6, r0, r2
 8006082:	f8c7 60c8 	str.w	r6, [r7, #200]	@ 0xc8
 8006086:	404b      	eors	r3, r1
 8006088:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800608c:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 8006090:	f607 2108 	addw	r1, r7, #2568	@ 0xa08
 8006094:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eke, 10);
 8006098:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800609c:	f5a3 70c0 	sub.w	r0, r3, #384	@ 0x180
 80060a0:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80060a4:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 80060a8:	6803      	ldr	r3, [r0, #0]
 80060aa:	0d9a      	lsrs	r2, r3, #22
 80060ac:	680b      	ldr	r3, [r1, #0]
 80060ae:	029b      	lsls	r3, r3, #10
 80060b0:	4313      	orrs	r3, r2
 80060b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80060b6:	680b      	ldr	r3, [r1, #0]
 80060b8:	0d9a      	lsrs	r2, r3, #22
 80060ba:	6803      	ldr	r3, [r0, #0]
 80060bc:	029b      	lsls	r3, r3, #10
 80060be:	4313      	orrs	r3, r2
 80060c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80060c4:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 80060c8:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 80060cc:	e9c1 2300 	strd	r2, r3, [r1]
            Emi ^= Di;
 80060d0:	f607 13d8 	addw	r3, r7, #2520	@ 0x9d8
 80060d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80060d8:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 80060dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e0:	ea80 0602 	eor.w	r6, r0, r2
 80060e4:	f8c7 60b8 	str.w	r6, [r7, #184]	@ 0xb8
 80060e8:	404b      	eors	r3, r1
 80060ea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80060ee:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 80060f2:	f607 11d8 	addw	r1, r7, #2520	@ 0x9d8
 80060f6:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Emi, 15);
 80060fa:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80060fe:	f5a3 70d8 	sub.w	r0, r3, #432	@ 0x1b0
 8006102:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8006106:	f5a3 71d6 	sub.w	r1, r3, #428	@ 0x1ac
 800610a:	6803      	ldr	r3, [r0, #0]
 800610c:	0c5a      	lsrs	r2, r3, #17
 800610e:	680b      	ldr	r3, [r1, #0]
 8006110:	03db      	lsls	r3, r3, #15
 8006112:	4313      	orrs	r3, r2
 8006114:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006118:	680b      	ldr	r3, [r1, #0]
 800611a:	0c5a      	lsrs	r2, r3, #17
 800611c:	6803      	ldr	r3, [r0, #0]
 800611e:	03db      	lsls	r3, r3, #15
 8006120:	4313      	orrs	r3, r2
 8006122:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006126:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 800612a:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 800612e:	e9c1 2300 	strd	r2, r3, [r1]
            Eso ^= Do;
 8006132:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 8006136:	e9d3 0100 	ldrd	r0, r1, [r3]
 800613a:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 800613e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006142:	ea80 0602 	eor.w	r6, r0, r2
 8006146:	f8c7 60a8 	str.w	r6, [r7, #168]	@ 0xa8
 800614a:	404b      	eors	r3, r1
 800614c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006150:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8006154:	f607 11a8 	addw	r1, r7, #2472	@ 0x9a8
 8006158:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Eso, 56);
 800615c:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8006160:	f5a3 70ee 	sub.w	r0, r3, #476	@ 0x1dc
 8006164:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8006168:	f5a3 71f0 	sub.w	r1, r3, #480	@ 0x1e0
 800616c:	6803      	ldr	r3, [r0, #0]
 800616e:	061a      	lsls	r2, r3, #24
 8006170:	680b      	ldr	r3, [r1, #0]
 8006172:	0a1b      	lsrs	r3, r3, #8
 8006174:	4313      	orrs	r3, r2
 8006176:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800617a:	680b      	ldr	r3, [r1, #0]
 800617c:	061a      	lsls	r2, r3, #24
 800617e:	6803      	ldr	r3, [r0, #0]
 8006180:	0a1b      	lsrs	r3, r3, #8
 8006182:	4313      	orrs	r3, r2
 8006184:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006188:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800618c:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 8006190:	e9c1 2300 	strd	r2, r3, [r1]
            Ama =   BCa ^((~BCe)&  BCi );
 8006194:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8006198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619c:	43d1      	mvns	r1, r2
 800619e:	f8c7 15d0 	str.w	r1, [r7, #1488]	@ 0x5d0
 80061a2:	43db      	mvns	r3, r3
 80061a4:	f8c7 35d4 	str.w	r3, [r7, #1492]	@ 0x5d4
 80061a8:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 80061ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b0:	f8d7 15d0 	ldr.w	r1, [r7, #1488]	@ 0x5d0
 80061b4:	4011      	ands	r1, r2
 80061b6:	f8c7 15c8 	str.w	r1, [r7, #1480]	@ 0x5c8
 80061ba:	f8d7 15d4 	ldr.w	r1, [r7, #1492]	@ 0x5d4
 80061be:	400b      	ands	r3, r1
 80061c0:	f8c7 35cc 	str.w	r3, [r7, #1484]	@ 0x5cc
 80061c4:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 80061c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061cc:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	@ 0x5c8
 80061d0:	4051      	eors	r1, r2
 80061d2:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 80061d6:	f8d7 15cc 	ldr.w	r1, [r7, #1484]	@ 0x5cc
 80061da:	404b      	eors	r3, r1
 80061dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80061e0:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80061e4:	f507 6130 	add.w	r1, r7, #2816	@ 0xb00
 80061e8:	e9c1 2300 	strd	r2, r3, [r1]
            Ame =   BCe ^((~BCi)&  BCo );
 80061ec:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 80061f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f4:	43d1      	mvns	r1, r2
 80061f6:	f8c7 15c0 	str.w	r1, [r7, #1472]	@ 0x5c0
 80061fa:	43db      	mvns	r3, r3
 80061fc:	f8c7 35c4 	str.w	r3, [r7, #1476]	@ 0x5c4
 8006200:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8006204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006208:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	@ 0x5c0
 800620c:	4011      	ands	r1, r2
 800620e:	f8c7 15b8 	str.w	r1, [r7, #1464]	@ 0x5b8
 8006212:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	@ 0x5c4
 8006216:	400b      	ands	r3, r1
 8006218:	f8c7 35bc 	str.w	r3, [r7, #1468]	@ 0x5bc
 800621c:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8006220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006224:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	@ 0x5b8
 8006228:	4051      	eors	r1, r2
 800622a:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800622e:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	@ 0x5bc
 8006232:	404b      	eors	r3, r1
 8006234:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006238:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800623c:	f607 21f8 	addw	r1, r7, #2808	@ 0xaf8
 8006240:	e9c1 2300 	strd	r2, r3, [r1]
            Ami =   BCi ^((~BCo)&  BCu );
 8006244:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8006248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624c:	43d1      	mvns	r1, r2
 800624e:	f8c7 15b0 	str.w	r1, [r7, #1456]	@ 0x5b0
 8006252:	43db      	mvns	r3, r3
 8006254:	f8c7 35b4 	str.w	r3, [r7, #1460]	@ 0x5b4
 8006258:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 800625c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006260:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	@ 0x5b0
 8006264:	4011      	ands	r1, r2
 8006266:	f8c7 15a8 	str.w	r1, [r7, #1448]	@ 0x5a8
 800626a:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	@ 0x5b4
 800626e:	400b      	ands	r3, r1
 8006270:	f8c7 35ac 	str.w	r3, [r7, #1452]	@ 0x5ac
 8006274:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8006278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627c:	f8d7 15a8 	ldr.w	r1, [r7, #1448]	@ 0x5a8
 8006280:	4051      	eors	r1, r2
 8006282:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8006286:	f8d7 15ac 	ldr.w	r1, [r7, #1452]	@ 0x5ac
 800628a:	404b      	eors	r3, r1
 800628c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006290:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006294:	f507 612f 	add.w	r1, r7, #2800	@ 0xaf0
 8006298:	e9c1 2300 	strd	r2, r3, [r1]
            Amo =   BCo ^((~BCu)&  BCa );
 800629c:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 80062a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a4:	43d1      	mvns	r1, r2
 80062a6:	f8c7 15a0 	str.w	r1, [r7, #1440]	@ 0x5a0
 80062aa:	43db      	mvns	r3, r3
 80062ac:	f8c7 35a4 	str.w	r3, [r7, #1444]	@ 0x5a4
 80062b0:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 80062b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b8:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	@ 0x5a0
 80062bc:	4011      	ands	r1, r2
 80062be:	f8c7 1598 	str.w	r1, [r7, #1432]	@ 0x598
 80062c2:	f8d7 15a4 	ldr.w	r1, [r7, #1444]	@ 0x5a4
 80062c6:	400b      	ands	r3, r1
 80062c8:	f8c7 359c 	str.w	r3, [r7, #1436]	@ 0x59c
 80062cc:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 80062d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d4:	f8d7 1598 	ldr.w	r1, [r7, #1432]	@ 0x598
 80062d8:	4051      	eors	r1, r2
 80062da:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 80062de:	f8d7 159c 	ldr.w	r1, [r7, #1436]	@ 0x59c
 80062e2:	404b      	eors	r3, r1
 80062e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80062e8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80062ec:	f607 21e8 	addw	r1, r7, #2792	@ 0xae8
 80062f0:	e9c1 2300 	strd	r2, r3, [r1]
            Amu =   BCu ^((~BCa)&  BCe );
 80062f4:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 80062f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fc:	43d1      	mvns	r1, r2
 80062fe:	f8c7 1590 	str.w	r1, [r7, #1424]	@ 0x590
 8006302:	43db      	mvns	r3, r3
 8006304:	f8c7 3594 	str.w	r3, [r7, #1428]	@ 0x594
 8006308:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 800630c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006310:	f8d7 1590 	ldr.w	r1, [r7, #1424]	@ 0x590
 8006314:	4011      	ands	r1, r2
 8006316:	f8c7 1588 	str.w	r1, [r7, #1416]	@ 0x588
 800631a:	f8d7 1594 	ldr.w	r1, [r7, #1428]	@ 0x594
 800631e:	400b      	ands	r3, r1
 8006320:	f8c7 358c 	str.w	r3, [r7, #1420]	@ 0x58c
 8006324:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8006328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632c:	f8d7 1588 	ldr.w	r1, [r7, #1416]	@ 0x588
 8006330:	4051      	eors	r1, r2
 8006332:	67b9      	str	r1, [r7, #120]	@ 0x78
 8006334:	f8d7 158c 	ldr.w	r1, [r7, #1420]	@ 0x58c
 8006338:	404b      	eors	r3, r1
 800633a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800633c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8006340:	f507 612e 	add.w	r1, r7, #2784	@ 0xae0
 8006344:	e9c1 2300 	strd	r2, r3, [r1]

            Ebi ^= Di;
 8006348:	f507 6325 	add.w	r3, r7, #2640	@ 0xa50
 800634c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006350:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 8006354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006358:	ea80 0602 	eor.w	r6, r0, r2
 800635c:	673e      	str	r6, [r7, #112]	@ 0x70
 800635e:	404b      	eors	r3, r1
 8006360:	677b      	str	r3, [r7, #116]	@ 0x74
 8006362:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006366:	f507 6125 	add.w	r1, r7, #2640	@ 0xa50
 800636a:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebi, 62);
 800636e:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8006372:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 8006376:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800637a:	f5a3 719c 	sub.w	r1, r3, #312	@ 0x138
 800637e:	6803      	ldr	r3, [r0, #0]
 8006380:	079a      	lsls	r2, r3, #30
 8006382:	680b      	ldr	r3, [r1, #0]
 8006384:	089b      	lsrs	r3, r3, #2
 8006386:	4313      	orrs	r3, r2
 8006388:	66bb      	str	r3, [r7, #104]	@ 0x68
 800638a:	680b      	ldr	r3, [r1, #0]
 800638c:	079a      	lsls	r2, r3, #30
 800638e:	6803      	ldr	r3, [r0, #0]
 8006390:	089b      	lsrs	r3, r3, #2
 8006392:	4313      	orrs	r3, r2
 8006394:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006396:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800639a:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 800639e:	e9c1 2300 	strd	r2, r3, [r1]
            Ego ^= Do;
 80063a2:	f507 6322 	add.w	r3, r7, #2592	@ 0xa20
 80063a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80063aa:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 80063ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b2:	ea80 0602 	eor.w	r6, r0, r2
 80063b6:	663e      	str	r6, [r7, #96]	@ 0x60
 80063b8:	404b      	eors	r3, r1
 80063ba:	667b      	str	r3, [r7, #100]	@ 0x64
 80063bc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80063c0:	f507 6122 	add.w	r1, r7, #2592	@ 0xa20
 80063c4:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ego, 55);
 80063c8:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80063cc:	f5a3 70b2 	sub.w	r0, r3, #356	@ 0x164
 80063d0:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80063d4:	f5a3 71b4 	sub.w	r1, r3, #360	@ 0x168
 80063d8:	6803      	ldr	r3, [r0, #0]
 80063da:	05da      	lsls	r2, r3, #23
 80063dc:	680b      	ldr	r3, [r1, #0]
 80063de:	0a5b      	lsrs	r3, r3, #9
 80063e0:	4313      	orrs	r3, r2
 80063e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80063e4:	680b      	ldr	r3, [r1, #0]
 80063e6:	05da      	lsls	r2, r3, #23
 80063e8:	6803      	ldr	r3, [r0, #0]
 80063ea:	0a5b      	lsrs	r3, r3, #9
 80063ec:	4313      	orrs	r3, r2
 80063ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80063f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80063f4:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 80063f8:	e9c1 2300 	strd	r2, r3, [r1]
            Eku ^= Du;
 80063fc:	f507 631f 	add.w	r3, r7, #2544	@ 0x9f0
 8006400:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006404:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 8006408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640c:	ea80 0602 	eor.w	r6, r0, r2
 8006410:	653e      	str	r6, [r7, #80]	@ 0x50
 8006412:	404b      	eors	r3, r1
 8006414:	657b      	str	r3, [r7, #84]	@ 0x54
 8006416:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800641a:	f507 611f 	add.w	r1, r7, #2544	@ 0x9f0
 800641e:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eku, 39);
 8006422:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8006426:	f5a3 70ca 	sub.w	r0, r3, #404	@ 0x194
 800642a:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800642e:	f5a3 71cc 	sub.w	r1, r3, #408	@ 0x198
 8006432:	6803      	ldr	r3, [r0, #0]
 8006434:	01da      	lsls	r2, r3, #7
 8006436:	680b      	ldr	r3, [r1, #0]
 8006438:	0e5b      	lsrs	r3, r3, #25
 800643a:	4313      	orrs	r3, r2
 800643c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800643e:	680b      	ldr	r3, [r1, #0]
 8006440:	01da      	lsls	r2, r3, #7
 8006442:	6803      	ldr	r3, [r0, #0]
 8006444:	0e5b      	lsrs	r3, r3, #25
 8006446:	4313      	orrs	r3, r2
 8006448:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800644a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800644e:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 8006452:	e9c1 2300 	strd	r2, r3, [r1]
            Ema ^= Da;
 8006456:	f607 13e8 	addw	r3, r7, #2536	@ 0x9e8
 800645a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800645e:	f607 2388 	addw	r3, r7, #2696	@ 0xa88
 8006462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006466:	ea80 0602 	eor.w	r6, r0, r2
 800646a:	643e      	str	r6, [r7, #64]	@ 0x40
 800646c:	404b      	eors	r3, r1
 800646e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006470:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006474:	f607 11e8 	addw	r1, r7, #2536	@ 0x9e8
 8006478:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ema, 41);
 800647c:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8006480:	f5a3 70ce 	sub.w	r0, r3, #412	@ 0x19c
 8006484:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8006488:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 800648c:	6803      	ldr	r3, [r0, #0]
 800648e:	025a      	lsls	r2, r3, #9
 8006490:	680b      	ldr	r3, [r1, #0]
 8006492:	0ddb      	lsrs	r3, r3, #23
 8006494:	4313      	orrs	r3, r2
 8006496:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006498:	680b      	ldr	r3, [r1, #0]
 800649a:	025a      	lsls	r2, r3, #9
 800649c:	6803      	ldr	r3, [r0, #0]
 800649e:	0ddb      	lsrs	r3, r3, #23
 80064a0:	4313      	orrs	r3, r2
 80064a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80064a8:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 80064ac:	e9c1 2300 	strd	r2, r3, [r1]
            Ese ^= De;
 80064b0:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 80064b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80064b8:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80064bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c0:	ea80 0602 	eor.w	r6, r0, r2
 80064c4:	633e      	str	r6, [r7, #48]	@ 0x30
 80064c6:	404b      	eors	r3, r1
 80064c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80064ca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80064ce:	f607 11b8 	addw	r1, r7, #2488	@ 0x9b8
 80064d2:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Ese, 2);
 80064d6:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80064da:	f5a3 70e8 	sub.w	r0, r3, #464	@ 0x1d0
 80064de:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80064e2:	f5a3 71e6 	sub.w	r1, r3, #460	@ 0x1cc
 80064e6:	6803      	ldr	r3, [r0, #0]
 80064e8:	0f9a      	lsrs	r2, r3, #30
 80064ea:	680b      	ldr	r3, [r1, #0]
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4313      	orrs	r3, r2
 80064f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064f2:	680b      	ldr	r3, [r1, #0]
 80064f4:	0f9a      	lsrs	r2, r3, #30
 80064f6:	6803      	ldr	r3, [r0, #0]
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	4313      	orrs	r3, r2
 80064fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006502:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 8006506:	e9c1 2300 	strd	r2, r3, [r1]
            Asa =   BCa ^((~BCe)&  BCi );
 800650a:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 800650e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006512:	43d1      	mvns	r1, r2
 8006514:	f8c7 1580 	str.w	r1, [r7, #1408]	@ 0x580
 8006518:	43db      	mvns	r3, r3
 800651a:	f8c7 3584 	str.w	r3, [r7, #1412]	@ 0x584
 800651e:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8006522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006526:	f8d7 1580 	ldr.w	r1, [r7, #1408]	@ 0x580
 800652a:	4011      	ands	r1, r2
 800652c:	f8c7 1578 	str.w	r1, [r7, #1400]	@ 0x578
 8006530:	f8d7 1584 	ldr.w	r1, [r7, #1412]	@ 0x584
 8006534:	400b      	ands	r3, r1
 8006536:	f8c7 357c 	str.w	r3, [r7, #1404]	@ 0x57c
 800653a:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 800653e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006542:	f8d7 1578 	ldr.w	r1, [r7, #1400]	@ 0x578
 8006546:	4051      	eors	r1, r2
 8006548:	6239      	str	r1, [r7, #32]
 800654a:	f8d7 157c 	ldr.w	r1, [r7, #1404]	@ 0x57c
 800654e:	404b      	eors	r3, r1
 8006550:	627b      	str	r3, [r7, #36]	@ 0x24
 8006552:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006556:	f607 21d8 	addw	r1, r7, #2776	@ 0xad8
 800655a:	e9c1 2300 	strd	r2, r3, [r1]
            Ase =   BCe ^((~BCi)&  BCo );
 800655e:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8006562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006566:	43d1      	mvns	r1, r2
 8006568:	f8c7 1570 	str.w	r1, [r7, #1392]	@ 0x570
 800656c:	43db      	mvns	r3, r3
 800656e:	f8c7 3574 	str.w	r3, [r7, #1396]	@ 0x574
 8006572:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8006576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657a:	f8d7 1570 	ldr.w	r1, [r7, #1392]	@ 0x570
 800657e:	4011      	ands	r1, r2
 8006580:	f8c7 1568 	str.w	r1, [r7, #1384]	@ 0x568
 8006584:	f8d7 1574 	ldr.w	r1, [r7, #1396]	@ 0x574
 8006588:	400b      	ands	r3, r1
 800658a:	f8c7 356c 	str.w	r3, [r7, #1388]	@ 0x56c
 800658e:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8006592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006596:	f8d7 1568 	ldr.w	r1, [r7, #1384]	@ 0x568
 800659a:	4051      	eors	r1, r2
 800659c:	61b9      	str	r1, [r7, #24]
 800659e:	f8d7 156c 	ldr.w	r1, [r7, #1388]	@ 0x56c
 80065a2:	404b      	eors	r3, r1
 80065a4:	61fb      	str	r3, [r7, #28]
 80065a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065aa:	f507 612d 	add.w	r1, r7, #2768	@ 0xad0
 80065ae:	e9c1 2300 	strd	r2, r3, [r1]
            Asi =   BCi ^((~BCo)&  BCu );
 80065b2:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 80065b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ba:	43d1      	mvns	r1, r2
 80065bc:	f8c7 1560 	str.w	r1, [r7, #1376]	@ 0x560
 80065c0:	43db      	mvns	r3, r3
 80065c2:	f8c7 3564 	str.w	r3, [r7, #1380]	@ 0x564
 80065c6:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 80065ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ce:	f8d7 1560 	ldr.w	r1, [r7, #1376]	@ 0x560
 80065d2:	4011      	ands	r1, r2
 80065d4:	f8c7 1558 	str.w	r1, [r7, #1368]	@ 0x558
 80065d8:	f8d7 1564 	ldr.w	r1, [r7, #1380]	@ 0x564
 80065dc:	400b      	ands	r3, r1
 80065de:	f8c7 355c 	str.w	r3, [r7, #1372]	@ 0x55c
 80065e2:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 80065e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ea:	f8d7 1558 	ldr.w	r1, [r7, #1368]	@ 0x558
 80065ee:	4051      	eors	r1, r2
 80065f0:	6139      	str	r1, [r7, #16]
 80065f2:	f8d7 155c 	ldr.w	r1, [r7, #1372]	@ 0x55c
 80065f6:	404b      	eors	r3, r1
 80065f8:	617b      	str	r3, [r7, #20]
 80065fa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80065fe:	f607 21c8 	addw	r1, r7, #2760	@ 0xac8
 8006602:	e9c1 2300 	strd	r2, r3, [r1]
            Aso =   BCo ^((~BCu)&  BCa );
 8006606:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 800660a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660e:	43d1      	mvns	r1, r2
 8006610:	f8c7 1550 	str.w	r1, [r7, #1360]	@ 0x550
 8006614:	43db      	mvns	r3, r3
 8006616:	f8c7 3554 	str.w	r3, [r7, #1364]	@ 0x554
 800661a:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 800661e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006622:	f8d7 1550 	ldr.w	r1, [r7, #1360]	@ 0x550
 8006626:	ea01 0a02 	and.w	sl, r1, r2
 800662a:	f8d7 1554 	ldr.w	r1, [r7, #1364]	@ 0x554
 800662e:	ea01 0b03 	and.w	fp, r1, r3
 8006632:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8006636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663a:	ea82 010a 	eor.w	r1, r2, sl
 800663e:	60b9      	str	r1, [r7, #8]
 8006640:	ea83 030b 	eor.w	r3, r3, fp
 8006644:	60fb      	str	r3, [r7, #12]
 8006646:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800664a:	f507 612c 	add.w	r1, r7, #2752	@ 0xac0
 800664e:	e9c1 2300 	strd	r2, r3, [r1]
            Asu =   BCu ^((~BCa)&  BCe );
 8006652:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8006656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665a:	ea6f 0802 	mvn.w	r8, r2
 800665e:	ea6f 0903 	mvn.w	r9, r3
 8006662:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8006666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666a:	ea08 0402 	and.w	r4, r8, r2
 800666e:	ea09 0503 	and.w	r5, r9, r3
 8006672:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8006676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667a:	ea82 0104 	eor.w	r1, r2, r4
 800667e:	6039      	str	r1, [r7, #0]
 8006680:	406b      	eors	r3, r5
 8006682:	607b      	str	r3, [r7, #4]
 8006684:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006688:	f607 21b8 	addw	r1, r7, #2744	@ 0xab8
 800668c:	e9c1 2300 	strd	r2, r3, [r1]
        for( round = 0; round < NROUNDS; round += 2 )
 8006690:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	@ 0xb84
 8006694:	3302      	adds	r3, #2
 8006696:	f8c7 3b84 	str.w	r3, [r7, #2948]	@ 0xb84
 800669a:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	@ 0xb84
 800669e:	2b17      	cmp	r3, #23
 80066a0:	f77d aa04 	ble.w	8003aac <KeccakF1600_StatePermute+0x244>
        }

        //copyToState(state, A)
        state[ 0] = Aba;
 80066a4:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80066a8:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80066ac:	6819      	ldr	r1, [r3, #0]
 80066ae:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 80066b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b6:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 1] = Abe;
 80066ba:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80066be:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f103 0108 	add.w	r1, r3, #8
 80066c8:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 80066cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d0:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 2] = Abi;
 80066d4:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80066d8:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f103 0110 	add.w	r1, r3, #16
 80066e2:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 80066e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ea:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 3] = Abo;
 80066ee:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80066f2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f103 0118 	add.w	r1, r3, #24
 80066fc:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 8006700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006704:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 4] = Abu;
 8006708:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800670c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f103 0120 	add.w	r1, r3, #32
 8006716:	f607 3358 	addw	r3, r7, #2904	@ 0xb58
 800671a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671e:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 5] = Aga;
 8006722:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8006726:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8006730:	f507 6335 	add.w	r3, r7, #2896	@ 0xb50
 8006734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006738:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 6] = Age;
 800673c:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8006740:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800674a:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800674e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006752:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 7] = Agi;
 8006756:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800675a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006764:	f507 6334 	add.w	r3, r7, #2880	@ 0xb40
 8006768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676c:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 8] = Ago;
 8006770:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8006774:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800677e:	f607 3338 	addw	r3, r7, #2872	@ 0xb38
 8006782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006786:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 9] = Agu;
 800678a:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800678e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8006798:	f507 6333 	add.w	r3, r7, #2864	@ 0xb30
 800679c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a0:	e9c1 2300 	strd	r2, r3, [r1]
        state[10] = Aka;
 80067a4:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80067a8:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 80067b2:	f607 3328 	addw	r3, r7, #2856	@ 0xb28
 80067b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ba:	e9c1 2300 	strd	r2, r3, [r1]
        state[11] = Ake;
 80067be:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80067c2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 80067cc:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 80067d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d4:	e9c1 2300 	strd	r2, r3, [r1]
        state[12] = Aki;
 80067d8:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80067dc:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 80067e6:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80067ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ee:	e9c1 2300 	strd	r2, r3, [r1]
        state[13] = Ako;
 80067f2:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80067f6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8006800:	f507 6331 	add.w	r3, r7, #2832	@ 0xb10
 8006804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006808:	e9c1 2300 	strd	r2, r3, [r1]
        state[14] = Aku;
 800680c:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8006810:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800681a:	f607 3308 	addw	r3, r7, #2824	@ 0xb08
 800681e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006822:	e9c1 2300 	strd	r2, r3, [r1]
        state[15] = Ama;
 8006826:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800682a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 8006834:	f507 6330 	add.w	r3, r7, #2816	@ 0xb00
 8006838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683c:	e9c1 2300 	strd	r2, r3, [r1]
        state[16] = Ame;
 8006840:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8006844:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f103 0180 	add.w	r1, r3, #128	@ 0x80
 800684e:	f607 23f8 	addw	r3, r7, #2808	@ 0xaf8
 8006852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006856:	e9c1 2300 	strd	r2, r3, [r1]
        state[17] = Ami;
 800685a:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800685e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f103 0188 	add.w	r1, r3, #136	@ 0x88
 8006868:	f507 632f 	add.w	r3, r7, #2800	@ 0xaf0
 800686c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006870:	e9c1 2300 	strd	r2, r3, [r1]
        state[18] = Amo;
 8006874:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8006878:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 8006882:	f607 23e8 	addw	r3, r7, #2792	@ 0xae8
 8006886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688a:	e9c1 2300 	strd	r2, r3, [r1]
        state[19] = Amu;
 800688e:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8006892:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f103 0198 	add.w	r1, r3, #152	@ 0x98
 800689c:	f507 632e 	add.w	r3, r7, #2784	@ 0xae0
 80068a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a4:	e9c1 2300 	strd	r2, r3, [r1]
        state[20] = Asa;
 80068a8:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80068ac:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f103 01a0 	add.w	r1, r3, #160	@ 0xa0
 80068b6:	f607 23d8 	addw	r3, r7, #2776	@ 0xad8
 80068ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068be:	e9c1 2300 	strd	r2, r3, [r1]
        state[21] = Ase;
 80068c2:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80068c6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
 80068d0:	f507 632d 	add.w	r3, r7, #2768	@ 0xad0
 80068d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d8:	e9c1 2300 	strd	r2, r3, [r1]
        state[22] = Asi;
 80068dc:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80068e0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f103 01b0 	add.w	r1, r3, #176	@ 0xb0
 80068ea:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 80068ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f2:	e9c1 2300 	strd	r2, r3, [r1]
        state[23] = Aso;
 80068f6:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80068fa:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f103 01b8 	add.w	r1, r3, #184	@ 0xb8
 8006904:	f507 632c 	add.w	r3, r7, #2752	@ 0xac0
 8006908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690c:	e9c1 2300 	strd	r2, r3, [r1]
        state[24] = Asu;
 8006910:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8006914:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 800691e:	f607 23b8 	addw	r3, r7, #2744	@ 0xab8
 8006922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006926:	e9c1 2300 	strd	r2, r3, [r1]

        #undef    round
}
 800692a:	bf00      	nop
 800692c:	f607 3788 	addw	r7, r7, #2952	@ 0xb88
 8006930:	46bd      	mov	sp, r7
 8006932:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006936:	4770      	bx	lr

08006938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	f6ad 7d78 	subw	sp, sp, #3960	@ 0xf78
 800693e:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006940:	f006 ffda 	bl	800d8f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006944:	f000 f8d0 	bl	8006ae8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006948:	f000 f9cc 	bl	8006ce4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800694c:	f000 f936 	bl	8006bbc <MX_I2C1_Init>
  MX_I2S3_Init();
 8006950:	f000 f962 	bl	8006c18 <MX_I2S3_Init>
  MX_SPI1_Init();
 8006954:	f000 f990 	bl	8006c78 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8006958:	f00e fa66 	bl	8014e28 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  uint8_t pk[CRYPTO_PUBLICKEYBYTES] = {0};
 800695c:	f507 6377 	add.w	r3, r7, #3952	@ 0xf70
 8006960:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8006964:	2200      	movs	r2, #0
 8006966:	601a      	str	r2, [r3, #0]
 8006968:	3304      	adds	r3, #4
 800696a:	f44f 7277 	mov.w	r2, #988	@ 0x3dc
 800696e:	2100      	movs	r1, #0
 8006970:	4618      	mov	r0, r3
 8006972:	f00e fe21 	bl	80155b8 <memset>
  uint8_t sk[CRYPTO_SECRETKEYBYTES] = {0};
 8006976:	f507 6377 	add.w	r3, r7, #3952	@ 0xf70
 800697a:	f6a3 1388 	subw	r3, r3, #2440	@ 0x988
 800697e:	2200      	movs	r2, #0
 8006980:	601a      	str	r2, [r3, #0]
 8006982:	3304      	adds	r3, #4
 8006984:	f240 527c 	movw	r2, #1404	@ 0x57c
 8006988:	2100      	movs	r1, #0
 800698a:	4618      	mov	r0, r3
 800698c:	f00e fe14 	bl	80155b8 <memset>

  size_t siglen = 0;
 8006990:	f507 6377 	add.w	r3, r7, #3952	@ 0xf70
 8006994:	f6a3 138c 	subw	r3, r3, #2444	@ 0x98c
 8006998:	2200      	movs	r2, #0
 800699a:	601a      	str	r2, [r3, #0]
  uint8_t sig[CRYPTO_BYTES] = {0};
 800699c:	f507 6377 	add.w	r3, r7, #3952	@ 0xf70
 80069a0:	f5a3 6375 	sub.w	r3, r3, #3920	@ 0xf50
 80069a4:	2200      	movs	r2, #0
 80069a6:	601a      	str	r2, [r3, #0]
 80069a8:	3304      	adds	r3, #4
 80069aa:	f240 52be 	movw	r2, #1470	@ 0x5be
 80069ae:	2100      	movs	r1, #0
 80069b0:	4618      	mov	r0, r3
 80069b2:	f00e fe01 	bl	80155b8 <memset>
  uint8_t msg[SEEDBYTES] = {0};
 80069b6:	f507 6377 	add.w	r3, r7, #3952	@ 0xf70
 80069ba:	f5a3 6377 	sub.w	r3, r3, #3952	@ 0xf70
 80069be:	2200      	movs	r2, #0
 80069c0:	601a      	str	r2, [r3, #0]
 80069c2:	3304      	adds	r3, #4
 80069c4:	2200      	movs	r2, #0
 80069c6:	601a      	str	r2, [r3, #0]
 80069c8:	605a      	str	r2, [r3, #4]
 80069ca:	609a      	str	r2, [r3, #8]
 80069cc:	60da      	str	r2, [r3, #12]
 80069ce:	611a      	str	r2, [r3, #16]
 80069d0:	615a      	str	r2, [r3, #20]
 80069d2:	619a      	str	r2, [r3, #24]


  /* USER CODE END 2 */
  uint32_t start_tick_keypair = 0;
 80069d4:	2300      	movs	r3, #0
 80069d6:	f8c7 3f5c 	str.w	r3, [r7, #3932]	@ 0xf5c
  uint32_t end_tick_keypair = 0;
 80069da:	2300      	movs	r3, #0
 80069dc:	f8c7 3f58 	str.w	r3, [r7, #3928]	@ 0xf58
  uint32_t elapsed_time_keypair = 0;
 80069e0:	2300      	movs	r3, #0
 80069e2:	f8c7 3f6c 	str.w	r3, [r7, #3948]	@ 0xf6c
  uint32_t start_tick_sign = 0;
 80069e6:	2300      	movs	r3, #0
 80069e8:	f8c7 3f54 	str.w	r3, [r7, #3924]	@ 0xf54
  uint32_t end_tick_sign = 0;
 80069ec:	2300      	movs	r3, #0
 80069ee:	f8c7 3f50 	str.w	r3, [r7, #3920]	@ 0xf50
  uint32_t elapsed_time_sign = 0;
 80069f2:	2300      	movs	r3, #0
 80069f4:	f8c7 3f68 	str.w	r3, [r7, #3944]	@ 0xf68
  uint32_t start_tick_verify = 0;
 80069f8:	2300      	movs	r3, #0
 80069fa:	f8c7 3f4c 	str.w	r3, [r7, #3916]	@ 0xf4c
  uint32_t end_tick_verify = 0;
 80069fe:	2300      	movs	r3, #0
 8006a00:	f8c7 3f48 	str.w	r3, [r7, #3912]	@ 0xf48
  uint32_t elapsed_time_verify = 0;
 8006a04:	2300      	movs	r3, #0
 8006a06:	f8c7 3f64 	str.w	r3, [r7, #3940]	@ 0xf64
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8006a0a:	f00e fa33 	bl	8014e74 <MX_USB_HOST_Process>
    
    randombytes(msg, SEEDBYTES);
 8006a0e:	463b      	mov	r3, r7
 8006a10:	2120      	movs	r1, #32
 8006a12:	4618      	mov	r0, r3
 8006a14:	f003 fe8a 	bl	800a72c <randombytes>
    for(int i = 0; i < 5000; i++) {
 8006a18:	2300      	movs	r3, #0
 8006a1a:	f8c7 3f60 	str.w	r3, [r7, #3936]	@ 0xf60
 8006a1e:	e05b      	b.n	8006ad8 <main+0x1a0>
      start_tick_keypair = HAL_GetTick();
 8006a20:	f006 ffd0 	bl	800d9c4 <HAL_GetTick>
 8006a24:	f8c7 0f5c 	str.w	r0, [r7, #3932]	@ 0xf5c
      crypto_sign_keypair(pk, sk);
 8006a28:	f507 62bd 	add.w	r2, r7, #1512	@ 0x5e8
 8006a2c:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8006a30:	4611      	mov	r1, r2
 8006a32:	4618      	mov	r0, r3
 8006a34:	f004 ff68 	bl	800b908 <keypair>
      end_tick_keypair = HAL_GetTick();
 8006a38:	f006 ffc4 	bl	800d9c4 <HAL_GetTick>
 8006a3c:	f8c7 0f58 	str.w	r0, [r7, #3928]	@ 0xf58
      elapsed_time_keypair += end_tick_keypair - start_tick_keypair;
 8006a40:	f8d7 2f58 	ldr.w	r2, [r7, #3928]	@ 0xf58
 8006a44:	f8d7 3f5c 	ldr.w	r3, [r7, #3932]	@ 0xf5c
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	f8d7 2f6c 	ldr.w	r2, [r7, #3948]	@ 0xf6c
 8006a4e:	4413      	add	r3, r2
 8006a50:	f8c7 3f6c 	str.w	r3, [r7, #3948]	@ 0xf6c

      

      start_tick_sign = HAL_GetTick();
 8006a54:	f006 ffb6 	bl	800d9c4 <HAL_GetTick>
 8006a58:	f8c7 0f54 	str.w	r0, [r7, #3924]	@ 0xf54
      crypto_sign_signature(sig, &siglen, msg, SEEDBYTES, sk);
 8006a5c:	463a      	mov	r2, r7
 8006a5e:	f207 51e4 	addw	r1, r7, #1508	@ 0x5e4
 8006a62:	f107 0020 	add.w	r0, r7, #32
 8006a66:	f507 63bd 	add.w	r3, r7, #1512	@ 0x5e8
 8006a6a:	9300      	str	r3, [sp, #0]
 8006a6c:	2320      	movs	r3, #32
 8006a6e:	f005 ff10 	bl	800c892 <signature>
      end_tick_sign = HAL_GetTick();
 8006a72:	f006 ffa7 	bl	800d9c4 <HAL_GetTick>
 8006a76:	f8c7 0f50 	str.w	r0, [r7, #3920]	@ 0xf50
      elapsed_time_sign += end_tick_sign - start_tick_sign;
 8006a7a:	f8d7 2f50 	ldr.w	r2, [r7, #3920]	@ 0xf50
 8006a7e:	f8d7 3f54 	ldr.w	r3, [r7, #3924]	@ 0xf54
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	f8d7 2f68 	ldr.w	r2, [r7, #3944]	@ 0xf68
 8006a88:	4413      	add	r3, r2
 8006a8a:	f8c7 3f68 	str.w	r3, [r7, #3944]	@ 0xf68

      start_tick_verify = HAL_GetTick();
 8006a8e:	f006 ff99 	bl	800d9c4 <HAL_GetTick>
 8006a92:	f8c7 0f4c 	str.w	r0, [r7, #3916]	@ 0xf4c
      crypto_sign_verify(sig, siglen, msg, SEEDBYTES, pk);
 8006a96:	f507 6377 	add.w	r3, r7, #3952	@ 0xf70
 8006a9a:	f6a3 138c 	subw	r3, r3, #2444	@ 0x98c
 8006a9e:	6819      	ldr	r1, [r3, #0]
 8006aa0:	463a      	mov	r2, r7
 8006aa2:	f107 0020 	add.w	r0, r7, #32
 8006aa6:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8006aaa:	9300      	str	r3, [sp, #0]
 8006aac:	2320      	movs	r3, #32
 8006aae:	f006 f991 	bl	800cdd4 <verify>
      end_tick_verify = HAL_GetTick();
 8006ab2:	f006 ff87 	bl	800d9c4 <HAL_GetTick>
 8006ab6:	f8c7 0f48 	str.w	r0, [r7, #3912]	@ 0xf48
      elapsed_time_verify += end_tick_verify - start_tick_verify;
 8006aba:	f8d7 2f48 	ldr.w	r2, [r7, #3912]	@ 0xf48
 8006abe:	f8d7 3f4c 	ldr.w	r3, [r7, #3916]	@ 0xf4c
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	f8d7 2f64 	ldr.w	r2, [r7, #3940]	@ 0xf64
 8006ac8:	4413      	add	r3, r2
 8006aca:	f8c7 3f64 	str.w	r3, [r7, #3940]	@ 0xf64
    for(int i = 0; i < 5000; i++) {
 8006ace:	f8d7 3f60 	ldr.w	r3, [r7, #3936]	@ 0xf60
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	f8c7 3f60 	str.w	r3, [r7, #3936]	@ 0xf60
 8006ad8:	f8d7 3f60 	ldr.w	r3, [r7, #3936]	@ 0xf60
 8006adc:	f241 3287 	movw	r2, #4999	@ 0x1387
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	dd9d      	ble.n	8006a20 <main+0xe8>
  {
 8006ae4:	e791      	b.n	8006a0a <main+0xd2>
	...

08006ae8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b094      	sub	sp, #80	@ 0x50
 8006aec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006aee:	f107 0320 	add.w	r3, r7, #32
 8006af2:	2230      	movs	r2, #48	@ 0x30
 8006af4:	2100      	movs	r1, #0
 8006af6:	4618      	mov	r0, r3
 8006af8:	f00e fd5e 	bl	80155b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006afc:	f107 030c 	add.w	r3, r7, #12
 8006b00:	2200      	movs	r2, #0
 8006b02:	601a      	str	r2, [r3, #0]
 8006b04:	605a      	str	r2, [r3, #4]
 8006b06:	609a      	str	r2, [r3, #8]
 8006b08:	60da      	str	r2, [r3, #12]
 8006b0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	60bb      	str	r3, [r7, #8]
 8006b10:	4b28      	ldr	r3, [pc, #160]	@ (8006bb4 <SystemClock_Config+0xcc>)
 8006b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b14:	4a27      	ldr	r2, [pc, #156]	@ (8006bb4 <SystemClock_Config+0xcc>)
 8006b16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8006b1c:	4b25      	ldr	r3, [pc, #148]	@ (8006bb4 <SystemClock_Config+0xcc>)
 8006b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b24:	60bb      	str	r3, [r7, #8]
 8006b26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006b28:	2300      	movs	r3, #0
 8006b2a:	607b      	str	r3, [r7, #4]
 8006b2c:	4b22      	ldr	r3, [pc, #136]	@ (8006bb8 <SystemClock_Config+0xd0>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a21      	ldr	r2, [pc, #132]	@ (8006bb8 <SystemClock_Config+0xd0>)
 8006b32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006b36:	6013      	str	r3, [r2, #0]
 8006b38:	4b1f      	ldr	r3, [pc, #124]	@ (8006bb8 <SystemClock_Config+0xd0>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b40:	607b      	str	r3, [r7, #4]
 8006b42:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006b44:	2301      	movs	r3, #1
 8006b46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006b48:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006b4c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006b4e:	2302      	movs	r3, #2
 8006b50:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006b52:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006b58:	2308      	movs	r3, #8
 8006b5a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8006b5c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8006b60:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006b62:	2302      	movs	r3, #2
 8006b64:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8006b66:	2307      	movs	r3, #7
 8006b68:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006b6a:	f107 0320 	add.w	r3, r7, #32
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f00a f91e 	bl	8010db0 <HAL_RCC_OscConfig>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d001      	beq.n	8006b7e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8006b7a:	f000 f9b1 	bl	8006ee0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006b7e:	230f      	movs	r3, #15
 8006b80:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006b82:	2302      	movs	r3, #2
 8006b84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006b86:	2300      	movs	r3, #0
 8006b88:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006b8a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8006b8e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006b90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006b94:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006b96:	f107 030c 	add.w	r3, r7, #12
 8006b9a:	2105      	movs	r1, #5
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f00a fb7f 	bl	80112a0 <HAL_RCC_ClockConfig>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d001      	beq.n	8006bac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8006ba8:	f000 f99a 	bl	8006ee0 <Error_Handler>
  }
}
 8006bac:	bf00      	nop
 8006bae:	3750      	adds	r7, #80	@ 0x50
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	40023800 	.word	0x40023800
 8006bb8:	40007000 	.word	0x40007000

08006bbc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006bc0:	4b12      	ldr	r3, [pc, #72]	@ (8006c0c <MX_I2C1_Init+0x50>)
 8006bc2:	4a13      	ldr	r2, [pc, #76]	@ (8006c10 <MX_I2C1_Init+0x54>)
 8006bc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8006bc6:	4b11      	ldr	r3, [pc, #68]	@ (8006c0c <MX_I2C1_Init+0x50>)
 8006bc8:	4a12      	ldr	r2, [pc, #72]	@ (8006c14 <MX_I2C1_Init+0x58>)
 8006bca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8006c0c <MX_I2C1_Init+0x50>)
 8006bce:	2200      	movs	r2, #0
 8006bd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8006c0c <MX_I2C1_Init+0x50>)
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8006c0c <MX_I2C1_Init+0x50>)
 8006bda:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006bde:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006be0:	4b0a      	ldr	r3, [pc, #40]	@ (8006c0c <MX_I2C1_Init+0x50>)
 8006be2:	2200      	movs	r2, #0
 8006be4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006be6:	4b09      	ldr	r3, [pc, #36]	@ (8006c0c <MX_I2C1_Init+0x50>)
 8006be8:	2200      	movs	r2, #0
 8006bea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006bec:	4b07      	ldr	r3, [pc, #28]	@ (8006c0c <MX_I2C1_Init+0x50>)
 8006bee:	2200      	movs	r2, #0
 8006bf0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006bf2:	4b06      	ldr	r3, [pc, #24]	@ (8006c0c <MX_I2C1_Init+0x50>)
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006bf8:	4804      	ldr	r0, [pc, #16]	@ (8006c0c <MX_I2C1_Init+0x50>)
 8006bfa:	f009 faf5 	bl	80101e8 <HAL_I2C_Init>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d001      	beq.n	8006c08 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006c04:	f000 f96c 	bl	8006ee0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006c08:	bf00      	nop
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	20001320 	.word	0x20001320
 8006c10:	40005400 	.word	0x40005400
 8006c14:	000186a0 	.word	0x000186a0

08006c18 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8006c1c:	4b13      	ldr	r3, [pc, #76]	@ (8006c6c <MX_I2S3_Init+0x54>)
 8006c1e:	4a14      	ldr	r2, [pc, #80]	@ (8006c70 <MX_I2S3_Init+0x58>)
 8006c20:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8006c22:	4b12      	ldr	r3, [pc, #72]	@ (8006c6c <MX_I2S3_Init+0x54>)
 8006c24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c28:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8006c2a:	4b10      	ldr	r3, [pc, #64]	@ (8006c6c <MX_I2S3_Init+0x54>)
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8006c30:	4b0e      	ldr	r3, [pc, #56]	@ (8006c6c <MX_I2S3_Init+0x54>)
 8006c32:	2200      	movs	r2, #0
 8006c34:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8006c36:	4b0d      	ldr	r3, [pc, #52]	@ (8006c6c <MX_I2S3_Init+0x54>)
 8006c38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c3c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8006c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8006c6c <MX_I2S3_Init+0x54>)
 8006c40:	4a0c      	ldr	r2, [pc, #48]	@ (8006c74 <MX_I2S3_Init+0x5c>)
 8006c42:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8006c44:	4b09      	ldr	r3, [pc, #36]	@ (8006c6c <MX_I2S3_Init+0x54>)
 8006c46:	2200      	movs	r2, #0
 8006c48:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8006c4a:	4b08      	ldr	r3, [pc, #32]	@ (8006c6c <MX_I2S3_Init+0x54>)
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8006c50:	4b06      	ldr	r3, [pc, #24]	@ (8006c6c <MX_I2S3_Init+0x54>)
 8006c52:	2200      	movs	r2, #0
 8006c54:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8006c56:	4805      	ldr	r0, [pc, #20]	@ (8006c6c <MX_I2S3_Init+0x54>)
 8006c58:	f009 fc0a 	bl	8010470 <HAL_I2S_Init>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d001      	beq.n	8006c66 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8006c62:	f000 f93d 	bl	8006ee0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8006c66:	bf00      	nop
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	20001374 	.word	0x20001374
 8006c70:	40003c00 	.word	0x40003c00
 8006c74:	00017700 	.word	0x00017700

08006c78 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8006c7c:	4b17      	ldr	r3, [pc, #92]	@ (8006cdc <MX_SPI1_Init+0x64>)
 8006c7e:	4a18      	ldr	r2, [pc, #96]	@ (8006ce0 <MX_SPI1_Init+0x68>)
 8006c80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006c82:	4b16      	ldr	r3, [pc, #88]	@ (8006cdc <MX_SPI1_Init+0x64>)
 8006c84:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006c88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006c8a:	4b14      	ldr	r3, [pc, #80]	@ (8006cdc <MX_SPI1_Init+0x64>)
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006c90:	4b12      	ldr	r3, [pc, #72]	@ (8006cdc <MX_SPI1_Init+0x64>)
 8006c92:	2200      	movs	r2, #0
 8006c94:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c96:	4b11      	ldr	r3, [pc, #68]	@ (8006cdc <MX_SPI1_Init+0x64>)
 8006c98:	2200      	movs	r2, #0
 8006c9a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8006cdc <MX_SPI1_Init+0x64>)
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8006cdc <MX_SPI1_Init+0x64>)
 8006ca4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ca8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006caa:	4b0c      	ldr	r3, [pc, #48]	@ (8006cdc <MX_SPI1_Init+0x64>)
 8006cac:	2200      	movs	r2, #0
 8006cae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8006cdc <MX_SPI1_Init+0x64>)
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006cb6:	4b09      	ldr	r3, [pc, #36]	@ (8006cdc <MX_SPI1_Init+0x64>)
 8006cb8:	2200      	movs	r2, #0
 8006cba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006cbc:	4b07      	ldr	r3, [pc, #28]	@ (8006cdc <MX_SPI1_Init+0x64>)
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8006cc2:	4b06      	ldr	r3, [pc, #24]	@ (8006cdc <MX_SPI1_Init+0x64>)
 8006cc4:	220a      	movs	r2, #10
 8006cc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006cc8:	4804      	ldr	r0, [pc, #16]	@ (8006cdc <MX_SPI1_Init+0x64>)
 8006cca:	f00a fe37 	bl	801193c <HAL_SPI_Init>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d001      	beq.n	8006cd8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8006cd4:	f000 f904 	bl	8006ee0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006cd8:	bf00      	nop
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	200013bc 	.word	0x200013bc
 8006ce0:	40013000 	.word	0x40013000

08006ce4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b08c      	sub	sp, #48	@ 0x30
 8006ce8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cea:	f107 031c 	add.w	r3, r7, #28
 8006cee:	2200      	movs	r2, #0
 8006cf0:	601a      	str	r2, [r3, #0]
 8006cf2:	605a      	str	r2, [r3, #4]
 8006cf4:	609a      	str	r2, [r3, #8]
 8006cf6:	60da      	str	r2, [r3, #12]
 8006cf8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	61bb      	str	r3, [r7, #24]
 8006cfe:	4b72      	ldr	r3, [pc, #456]	@ (8006ec8 <MX_GPIO_Init+0x1e4>)
 8006d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d02:	4a71      	ldr	r2, [pc, #452]	@ (8006ec8 <MX_GPIO_Init+0x1e4>)
 8006d04:	f043 0310 	orr.w	r3, r3, #16
 8006d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8006d0a:	4b6f      	ldr	r3, [pc, #444]	@ (8006ec8 <MX_GPIO_Init+0x1e4>)
 8006d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d0e:	f003 0310 	and.w	r3, r3, #16
 8006d12:	61bb      	str	r3, [r7, #24]
 8006d14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d16:	2300      	movs	r3, #0
 8006d18:	617b      	str	r3, [r7, #20]
 8006d1a:	4b6b      	ldr	r3, [pc, #428]	@ (8006ec8 <MX_GPIO_Init+0x1e4>)
 8006d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d1e:	4a6a      	ldr	r2, [pc, #424]	@ (8006ec8 <MX_GPIO_Init+0x1e4>)
 8006d20:	f043 0304 	orr.w	r3, r3, #4
 8006d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8006d26:	4b68      	ldr	r3, [pc, #416]	@ (8006ec8 <MX_GPIO_Init+0x1e4>)
 8006d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d2a:	f003 0304 	and.w	r3, r3, #4
 8006d2e:	617b      	str	r3, [r7, #20]
 8006d30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006d32:	2300      	movs	r3, #0
 8006d34:	613b      	str	r3, [r7, #16]
 8006d36:	4b64      	ldr	r3, [pc, #400]	@ (8006ec8 <MX_GPIO_Init+0x1e4>)
 8006d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d3a:	4a63      	ldr	r2, [pc, #396]	@ (8006ec8 <MX_GPIO_Init+0x1e4>)
 8006d3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8006d42:	4b61      	ldr	r3, [pc, #388]	@ (8006ec8 <MX_GPIO_Init+0x1e4>)
 8006d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d4a:	613b      	str	r3, [r7, #16]
 8006d4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d4e:	2300      	movs	r3, #0
 8006d50:	60fb      	str	r3, [r7, #12]
 8006d52:	4b5d      	ldr	r3, [pc, #372]	@ (8006ec8 <MX_GPIO_Init+0x1e4>)
 8006d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d56:	4a5c      	ldr	r2, [pc, #368]	@ (8006ec8 <MX_GPIO_Init+0x1e4>)
 8006d58:	f043 0301 	orr.w	r3, r3, #1
 8006d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8006d5e:	4b5a      	ldr	r3, [pc, #360]	@ (8006ec8 <MX_GPIO_Init+0x1e4>)
 8006d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d62:	f003 0301 	and.w	r3, r3, #1
 8006d66:	60fb      	str	r3, [r7, #12]
 8006d68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	60bb      	str	r3, [r7, #8]
 8006d6e:	4b56      	ldr	r3, [pc, #344]	@ (8006ec8 <MX_GPIO_Init+0x1e4>)
 8006d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d72:	4a55      	ldr	r2, [pc, #340]	@ (8006ec8 <MX_GPIO_Init+0x1e4>)
 8006d74:	f043 0302 	orr.w	r3, r3, #2
 8006d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8006d7a:	4b53      	ldr	r3, [pc, #332]	@ (8006ec8 <MX_GPIO_Init+0x1e4>)
 8006d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d7e:	f003 0302 	and.w	r3, r3, #2
 8006d82:	60bb      	str	r3, [r7, #8]
 8006d84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d86:	2300      	movs	r3, #0
 8006d88:	607b      	str	r3, [r7, #4]
 8006d8a:	4b4f      	ldr	r3, [pc, #316]	@ (8006ec8 <MX_GPIO_Init+0x1e4>)
 8006d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d8e:	4a4e      	ldr	r2, [pc, #312]	@ (8006ec8 <MX_GPIO_Init+0x1e4>)
 8006d90:	f043 0308 	orr.w	r3, r3, #8
 8006d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8006d96:	4b4c      	ldr	r3, [pc, #304]	@ (8006ec8 <MX_GPIO_Init+0x1e4>)
 8006d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d9a:	f003 0308 	and.w	r3, r3, #8
 8006d9e:	607b      	str	r3, [r7, #4]
 8006da0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8006da2:	2200      	movs	r2, #0
 8006da4:	2108      	movs	r1, #8
 8006da6:	4849      	ldr	r0, [pc, #292]	@ (8006ecc <MX_GPIO_Init+0x1e8>)
 8006da8:	f007 f8ea 	bl	800df80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8006dac:	2201      	movs	r2, #1
 8006dae:	2101      	movs	r1, #1
 8006db0:	4847      	ldr	r0, [pc, #284]	@ (8006ed0 <MX_GPIO_Init+0x1ec>)
 8006db2:	f007 f8e5 	bl	800df80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8006db6:	2200      	movs	r2, #0
 8006db8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8006dbc:	4845      	ldr	r0, [pc, #276]	@ (8006ed4 <MX_GPIO_Init+0x1f0>)
 8006dbe:	f007 f8df 	bl	800df80 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8006dc2:	2308      	movs	r3, #8
 8006dc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8006dd2:	f107 031c 	add.w	r3, r7, #28
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	483c      	ldr	r0, [pc, #240]	@ (8006ecc <MX_GPIO_Init+0x1e8>)
 8006dda:	f006 ff35 	bl	800dc48 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8006dde:	2301      	movs	r3, #1
 8006de0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006de2:	2301      	movs	r3, #1
 8006de4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006de6:	2300      	movs	r3, #0
 8006de8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006dea:	2300      	movs	r3, #0
 8006dec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8006dee:	f107 031c 	add.w	r3, r7, #28
 8006df2:	4619      	mov	r1, r3
 8006df4:	4836      	ldr	r0, [pc, #216]	@ (8006ed0 <MX_GPIO_Init+0x1ec>)
 8006df6:	f006 ff27 	bl	800dc48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8006dfa:	2308      	movs	r3, #8
 8006dfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dfe:	2302      	movs	r3, #2
 8006e00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e02:	2300      	movs	r3, #0
 8006e04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e06:	2300      	movs	r3, #0
 8006e08:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006e0a:	2305      	movs	r3, #5
 8006e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8006e0e:	f107 031c 	add.w	r3, r7, #28
 8006e12:	4619      	mov	r1, r3
 8006e14:	482e      	ldr	r0, [pc, #184]	@ (8006ed0 <MX_GPIO_Init+0x1ec>)
 8006e16:	f006 ff17 	bl	800dc48 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8006e1e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8006e22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e24:	2300      	movs	r3, #0
 8006e26:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8006e28:	f107 031c 	add.w	r3, r7, #28
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	482a      	ldr	r0, [pc, #168]	@ (8006ed8 <MX_GPIO_Init+0x1f4>)
 8006e30:	f006 ff0a 	bl	800dc48 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8006e34:	2304      	movs	r3, #4
 8006e36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8006e40:	f107 031c 	add.w	r3, r7, #28
 8006e44:	4619      	mov	r1, r3
 8006e46:	4825      	ldr	r0, [pc, #148]	@ (8006edc <MX_GPIO_Init+0x1f8>)
 8006e48:	f006 fefe 	bl	800dc48 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8006e4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e52:	2302      	movs	r3, #2
 8006e54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e56:	2300      	movs	r3, #0
 8006e58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006e5e:	2305      	movs	r3, #5
 8006e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8006e62:	f107 031c 	add.w	r3, r7, #28
 8006e66:	4619      	mov	r1, r3
 8006e68:	481c      	ldr	r0, [pc, #112]	@ (8006edc <MX_GPIO_Init+0x1f8>)
 8006e6a:	f006 feed 	bl	800dc48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8006e6e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8006e72:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e74:	2301      	movs	r3, #1
 8006e76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e80:	f107 031c 	add.w	r3, r7, #28
 8006e84:	4619      	mov	r1, r3
 8006e86:	4813      	ldr	r0, [pc, #76]	@ (8006ed4 <MX_GPIO_Init+0x1f0>)
 8006e88:	f006 fede 	bl	800dc48 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8006e8c:	2320      	movs	r3, #32
 8006e8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006e90:	2300      	movs	r3, #0
 8006e92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e94:	2300      	movs	r3, #0
 8006e96:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8006e98:	f107 031c 	add.w	r3, r7, #28
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	480d      	ldr	r0, [pc, #52]	@ (8006ed4 <MX_GPIO_Init+0x1f0>)
 8006ea0:	f006 fed2 	bl	800dc48 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8006ea4:	2302      	movs	r3, #2
 8006ea6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8006ea8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8006eac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8006eb2:	f107 031c 	add.w	r3, r7, #28
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	4804      	ldr	r0, [pc, #16]	@ (8006ecc <MX_GPIO_Init+0x1e8>)
 8006eba:	f006 fec5 	bl	800dc48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8006ebe:	bf00      	nop
 8006ec0:	3730      	adds	r7, #48	@ 0x30
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	40023800 	.word	0x40023800
 8006ecc:	40021000 	.word	0x40021000
 8006ed0:	40020800 	.word	0x40020800
 8006ed4:	40020c00 	.word	0x40020c00
 8006ed8:	40020000 	.word	0x40020000
 8006edc:	40020400 	.word	0x40020400

08006ee0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006ee4:	b672      	cpsid	i
}
 8006ee6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006ee8:	bf00      	nop
 8006eea:	e7fd      	b.n	8006ee8 <Error_Handler+0x8>

08006eec <pack_pk>:
 * Arguments:   - uint8_t pk[]: output byte array
 *              - const polyveck *b: polynomial vector of length K containg b
 *              - const uint8_t seed[]: seed for A'
 **************************************************/
void pack_pk(uint8_t pk[CRYPTO_PUBLICKEYBYTES], polyveck *b,
             const uint8_t seed[SEEDBYTES]) {
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b086      	sub	sp, #24
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	60b9      	str	r1, [r7, #8]
 8006ef6:	607a      	str	r2, [r7, #4]
    unsigned int i;

    memcpy(pk, seed, SEEDBYTES);
 8006ef8:	2220      	movs	r2, #32
 8006efa:	6879      	ldr	r1, [r7, #4]
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	f00e fb9f 	bl	8015640 <memcpy>

    pk += SEEDBYTES;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	3320      	adds	r3, #32
 8006f06:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < K; ++i) {
 8006f08:	2300      	movs	r3, #0
 8006f0a:	617b      	str	r3, [r7, #20]
 8006f0c:	e011      	b.n	8006f32 <pack_pk+0x46>
        polyq_pack(pk + i * POLYQ_PACKEDBYTES, &b->vec[i]);
 8006f0e:	697a      	ldr	r2, [r7, #20]
 8006f10:	4613      	mov	r3, r2
 8006f12:	011b      	lsls	r3, r3, #4
 8006f14:	1a9b      	subs	r3, r3, r2
 8006f16:	015b      	lsls	r3, r3, #5
 8006f18:	461a      	mov	r2, r3
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	1898      	adds	r0, r3, r2
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	029b      	lsls	r3, r3, #10
 8006f22:	68ba      	ldr	r2, [r7, #8]
 8006f24:	4413      	add	r3, r2
 8006f26:	4619      	mov	r1, r3
 8006f28:	f001 f940 	bl	80081ac <polyq_pack>
    for (i = 0; i < K; ++i) {
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	617b      	str	r3, [r7, #20]
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d9ea      	bls.n	8006f0e <pack_pk+0x22>
    }
}
 8006f38:	bf00      	nop
 8006f3a:	bf00      	nop
 8006f3c:	3718      	adds	r7, #24
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <unpack_pk>:
 * Arguments:   - uint8_t seed[]: seed for A'
 *              - polyveck *b: polynomial vector of length K containg b
 *              - const uint8_t pk[]: output byte array
 **************************************************/
void unpack_pk(polyveck *b, uint8_t seed[SEEDBYTES],
               const uint8_t pk[CRYPTO_PUBLICKEYBYTES]) {
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b086      	sub	sp, #24
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	60f8      	str	r0, [r7, #12]
 8006f4a:	60b9      	str	r1, [r7, #8]
 8006f4c:	607a      	str	r2, [r7, #4]
    unsigned int i;

    memcpy(seed, pk, SEEDBYTES);
 8006f4e:	2220      	movs	r2, #32
 8006f50:	6879      	ldr	r1, [r7, #4]
 8006f52:	68b8      	ldr	r0, [r7, #8]
 8006f54:	f00e fb74 	bl	8015640 <memcpy>

    pk += SEEDBYTES;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	3320      	adds	r3, #32
 8006f5c:	607b      	str	r3, [r7, #4]
    for (i = 0; i < K; ++i) {
 8006f5e:	2300      	movs	r3, #0
 8006f60:	617b      	str	r3, [r7, #20]
 8006f62:	e011      	b.n	8006f88 <unpack_pk+0x46>
        polyq_unpack(&b->vec[i], pk + i * POLYQ_PACKEDBYTES);
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	029b      	lsls	r3, r3, #10
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	18d0      	adds	r0, r2, r3
 8006f6c:	697a      	ldr	r2, [r7, #20]
 8006f6e:	4613      	mov	r3, r2
 8006f70:	011b      	lsls	r3, r3, #4
 8006f72:	1a9b      	subs	r3, r3, r2
 8006f74:	015b      	lsls	r3, r3, #5
 8006f76:	461a      	mov	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	f001 fa42 	bl	8008406 <polyq_unpack>
    for (i = 0; i < K; ++i) {
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	3301      	adds	r3, #1
 8006f86:	617b      	str	r3, [r7, #20]
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d9ea      	bls.n	8006f64 <unpack_pk+0x22>
    }
}
 8006f8e:	bf00      	nop
 8006f90:	bf00      	nop
 8006f92:	3718      	adds	r7, #24
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <pack_sk>:
 *starting at offset 1)
 *              - const polyveck *s1: polyveck pointer containing s1
 **************************************************/
void pack_sk(uint8_t sk[CRYPTO_SECRETKEYBYTES],
             const uint8_t pk[CRYPTO_PUBLICKEYBYTES], const polyvecm *s0,
             const polyveck *s1, const uint8_t key[SEEDBYTES]) {
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b086      	sub	sp, #24
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	607a      	str	r2, [r7, #4]
 8006fa4:	603b      	str	r3, [r7, #0]
    unsigned int i;
    memcpy(sk, pk, CRYPTO_PUBLICKEYBYTES);
 8006fa6:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8006faa:	68b9      	ldr	r1, [r7, #8]
 8006fac:	68f8      	ldr	r0, [r7, #12]
 8006fae:	f00e fb47 	bl	8015640 <memcpy>

    sk += CRYPTO_PUBLICKEYBYTES;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 8006fb8:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < M; ++i)
 8006fba:	2300      	movs	r3, #0
 8006fbc:	617b      	str	r3, [r7, #20]
 8006fbe:	e00d      	b.n	8006fdc <pack_sk+0x44>
        polyeta_pack(sk + i * POLYETA_PACKEDBYTES, &s0->vec[i]);
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	019b      	lsls	r3, r3, #6
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	18d0      	adds	r0, r2, r3
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	029b      	lsls	r3, r3, #10
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	4413      	add	r3, r2
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	f001 fb1b 	bl	800860c <polyeta_pack>
    for (i = 0; i < M; ++i)
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	617b      	str	r3, [r7, #20]
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	d9ee      	bls.n	8006fc0 <pack_sk+0x28>

    sk += (L - 1) * POLYETA_PACKEDBYTES;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	33c0      	adds	r3, #192	@ 0xc0
 8006fe6:	60fb      	str	r3, [r7, #12]
#if D == 1
    for (i = 0; i < K; ++i)
 8006fe8:	2300      	movs	r3, #0
 8006fea:	617b      	str	r3, [r7, #20]
 8006fec:	e011      	b.n	8007012 <pack_sk+0x7a>
        poly2eta_pack(sk + i * POLY2ETA_PACKEDBYTES, &s1->vec[i]);
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	4613      	mov	r3, r2
 8006ff2:	005b      	lsls	r3, r3, #1
 8006ff4:	4413      	add	r3, r2
 8006ff6:	015b      	lsls	r3, r3, #5
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	1898      	adds	r0, r3, r2
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	029b      	lsls	r3, r3, #10
 8007002:	683a      	ldr	r2, [r7, #0]
 8007004:	4413      	add	r3, r2
 8007006:	4619      	mov	r1, r3
 8007008:	f001 fc21 	bl	800884e <poly2eta_pack>
    for (i = 0; i < K; ++i)
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	3301      	adds	r3, #1
 8007010:	617b      	str	r3, [r7, #20]
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	2b01      	cmp	r3, #1
 8007016:	d9ea      	bls.n	8006fee <pack_sk+0x56>
    sk += K * POLY2ETA_PACKEDBYTES;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	33c0      	adds	r3, #192	@ 0xc0
 800701c:	60fb      	str	r3, [r7, #12]
        polyeta_pack(sk + i * POLYETA_PACKEDBYTES, &s1->vec[i]);
    sk += K * POLYETA_PACKEDBYTES;
#else
#error "Not yet implemented."
#endif
    memcpy(sk, key, SEEDBYTES);
 800701e:	2220      	movs	r2, #32
 8007020:	6a39      	ldr	r1, [r7, #32]
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	f00e fb0c 	bl	8015640 <memcpy>
}
 8007028:	bf00      	nop
 800702a:	3718      	adds	r7, #24
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <unpack_sk>:
 *              - polyvecl s0: output polyvecl pointer for s0
 *              - polyveck s1: output polyveck pointer for s1
 *              - const uint8_t sk[]: byte array containing bit-packed sk
 **************************************************/
void unpack_sk(polyvecl_frozen A[K], polyvecm *s0, polyveck *s1, uint8_t *key,
               const uint8_t sk[CRYPTO_SECRETKEYBYTES]) {
 8007030:	b580      	push	{r7, lr}
 8007032:	b088      	sub	sp, #32
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]
 800703c:	603b      	str	r3, [r7, #0]

#ifdef ENABLE_SIGNATURE_MATRIX_BUFFER
    // Expand matrix A, if buffer is enabled. Otherwise
    // the matrix elements will be computed (repeatedly)
    // on demand.
    for (size_t row = 0; row < K; row++)
 800703e:	2300      	movs	r3, #0
 8007040:	61bb      	str	r3, [r7, #24]
 8007042:	e017      	b.n	8007074 <unpack_sk+0x44>
        for (size_t column = 0; column < L; column++)
 8007044:	2300      	movs	r3, #0
 8007046:	617b      	str	r3, [r7, #20]
 8007048:	e00e      	b.n	8007068 <unpack_sk+0x38>
            expand_pk_matrix_elem_frozen(&A[row].vec[column], row, column, sk);
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	02db      	lsls	r3, r3, #11
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	441a      	add	r2, r3
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	025b      	lsls	r3, r3, #9
 8007056:	18d0      	adds	r0, r2, r3
 8007058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800705a:	697a      	ldr	r2, [r7, #20]
 800705c:	69b9      	ldr	r1, [r7, #24]
 800705e:	f002 fcc0 	bl	80099e2 <expand_pk_matrix_elem_frozen>
        for (size_t column = 0; column < L; column++)
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	3301      	adds	r3, #1
 8007066:	617b      	str	r3, [r7, #20]
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	2b03      	cmp	r3, #3
 800706c:	d9ed      	bls.n	800704a <unpack_sk+0x1a>
    for (size_t row = 0; row < K; row++)
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	3301      	adds	r3, #1
 8007072:	61bb      	str	r3, [r7, #24]
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d9e4      	bls.n	8007044 <unpack_sk+0x14>
        dummy = A[K].vec[0].coeffs[0];
        A[K].vec[0].coeffs[0] = dummy;
    }
#endif  /* ENABLE_SIGNATURE_MATRIX_BUFFER */

    sk += CRYPTO_PUBLICKEYBYTES;
 800707a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800707c:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 8007080:	62bb      	str	r3, [r7, #40]	@ 0x28
    for (i = 0; i < M; ++i)
 8007082:	2300      	movs	r3, #0
 8007084:	61fb      	str	r3, [r7, #28]
 8007086:	e00d      	b.n	80070a4 <unpack_sk+0x74>
        polyeta_unpack(&s0->vec[i], sk + i * POLYETA_PACKEDBYTES);
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	029b      	lsls	r3, r3, #10
 800708c:	68ba      	ldr	r2, [r7, #8]
 800708e:	18d0      	adds	r0, r2, r3
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	019b      	lsls	r3, r3, #6
 8007094:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007096:	4413      	add	r3, r2
 8007098:	4619      	mov	r1, r3
 800709a:	f001 fb29 	bl	80086f0 <polyeta_unpack>
    for (i = 0; i < M; ++i)
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	3301      	adds	r3, #1
 80070a2:	61fb      	str	r3, [r7, #28]
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d9ee      	bls.n	8007088 <unpack_sk+0x58>

    sk += M * POLYETA_PACKEDBYTES;
 80070aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ac:	33c0      	adds	r3, #192	@ 0xc0
 80070ae:	62bb      	str	r3, [r7, #40]	@ 0x28
#if D == 1
    for (i = 0; i < K; ++i)
 80070b0:	2300      	movs	r3, #0
 80070b2:	61fb      	str	r3, [r7, #28]
 80070b4:	e011      	b.n	80070da <unpack_sk+0xaa>
        poly2eta_unpack(&s1->vec[i], sk + i * POLY2ETA_PACKEDBYTES);
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	029b      	lsls	r3, r3, #10
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	18d0      	adds	r0, r2, r3
 80070be:	69fa      	ldr	r2, [r7, #28]
 80070c0:	4613      	mov	r3, r2
 80070c2:	005b      	lsls	r3, r3, #1
 80070c4:	4413      	add	r3, r2
 80070c6:	015b      	lsls	r3, r3, #5
 80070c8:	461a      	mov	r2, r3
 80070ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070cc:	4413      	add	r3, r2
 80070ce:	4619      	mov	r1, r3
 80070d0:	f001 fc71 	bl	80089b6 <poly2eta_unpack>
    for (i = 0; i < K; ++i)
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	3301      	adds	r3, #1
 80070d8:	61fb      	str	r3, [r7, #28]
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d9ea      	bls.n	80070b6 <unpack_sk+0x86>

    sk += K * POLY2ETA_PACKEDBYTES;
 80070e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e2:	33c0      	adds	r3, #192	@ 0xc0
 80070e4:	62bb      	str	r3, [r7, #40]	@ 0x28

    sk += K * POLYETA_PACKEDBYTES;
#else
#error "Not yet implemented."
#endif
    memcpy(key, sk, SEEDBYTES);
 80070e6:	2220      	movs	r2, #32
 80070e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070ea:	6838      	ldr	r0, [r7, #0]
 80070ec:	f00e faa8 	bl	8015640 <memcpy>

}
 80070f0:	bf00      	nop
 80070f2:	3720      	adds	r7, #32
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <pack_sig>:
 *              - const polyveck *h: pointer t vector h of length K
 * Returns 1 in case the signature size is above the threshold; otherwise 0.
 **************************************************/
int pack_sig(uint8_t sig[CRYPTO_BYTES], const poly *c,
             const polyvecl *lowbits_z1, const polyvecl *highbits_z1,
             const polyveck *h) {
 80070f8:	b590      	push	{r4, r7, lr}
 80070fa:	f2ad 6d24 	subw	sp, sp, #1572	@ 0x624
 80070fe:	af00      	add	r7, sp, #0
 8007100:	f507 64c4 	add.w	r4, r7, #1568	@ 0x620
 8007104:	f2a4 6414 	subw	r4, r4, #1556	@ 0x614
 8007108:	6020      	str	r0, [r4, #0]
 800710a:	f507 60c4 	add.w	r0, r7, #1568	@ 0x620
 800710e:	f5a0 60c3 	sub.w	r0, r0, #1560	@ 0x618
 8007112:	6001      	str	r1, [r0, #0]
 8007114:	f507 61c4 	add.w	r1, r7, #1568	@ 0x620
 8007118:	f2a1 611c 	subw	r1, r1, #1564	@ 0x61c
 800711c:	600a      	str	r2, [r1, #0]
 800711e:	f507 62c4 	add.w	r2, r7, #1568	@ 0x620
 8007122:	f5a2 62c4 	sub.w	r2, r2, #1568	@ 0x620
 8007126:	6013      	str	r3, [r2, #0]
    uint8_t encoded_hb_z1[N * L];
    uint16_t size_enc_h, size_enc_hb_z1;
    uint8_t offset_enc_h, offset_enc_hb_z1;

    // init/padding with zeros:
    memset(sig, 0, CRYPTO_BYTES);
 8007128:	f507 63c4 	add.w	r3, r7, #1568	@ 0x620
 800712c:	f2a3 6314 	subw	r3, r3, #1556	@ 0x614
 8007130:	f240 52c2 	movw	r2, #1474	@ 0x5c2
 8007134:	2100      	movs	r1, #0
 8007136:	6818      	ldr	r0, [r3, #0]
 8007138:	f00e fa3e 	bl	80155b8 <memset>
    
    // encode challenge
    for (size_t i = 0; i < N; i++)
 800713c:	2300      	movs	r3, #0
 800713e:	f8c7 361c 	str.w	r3, [r7, #1564]	@ 0x61c
 8007142:	e029      	b.n	8007198 <pack_sig+0xa0>
    {
      sig[i/8] |= c->coeffs[i] << (i%8);
 8007144:	f8d7 361c 	ldr.w	r3, [r7, #1564]	@ 0x61c
 8007148:	08db      	lsrs	r3, r3, #3
 800714a:	f507 62c4 	add.w	r2, r7, #1568	@ 0x620
 800714e:	f2a2 6214 	subw	r2, r2, #1556	@ 0x614
 8007152:	6812      	ldr	r2, [r2, #0]
 8007154:	441a      	add	r2, r3
 8007156:	7812      	ldrb	r2, [r2, #0]
 8007158:	b251      	sxtb	r1, r2
 800715a:	f507 62c4 	add.w	r2, r7, #1568	@ 0x620
 800715e:	f5a2 62c3 	sub.w	r2, r2, #1560	@ 0x618
 8007162:	6812      	ldr	r2, [r2, #0]
 8007164:	f8d7 061c 	ldr.w	r0, [r7, #1564]	@ 0x61c
 8007168:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800716c:	f8d7 261c 	ldr.w	r2, [r7, #1564]	@ 0x61c
 8007170:	f002 0207 	and.w	r2, r2, #7
 8007174:	fa00 f202 	lsl.w	r2, r0, r2
 8007178:	b252      	sxtb	r2, r2
 800717a:	430a      	orrs	r2, r1
 800717c:	b251      	sxtb	r1, r2
 800717e:	f507 62c4 	add.w	r2, r7, #1568	@ 0x620
 8007182:	f2a2 6214 	subw	r2, r2, #1556	@ 0x614
 8007186:	6812      	ldr	r2, [r2, #0]
 8007188:	4413      	add	r3, r2
 800718a:	b2ca      	uxtb	r2, r1
 800718c:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < N; i++)
 800718e:	f8d7 361c 	ldr.w	r3, [r7, #1564]	@ 0x61c
 8007192:	3301      	adds	r3, #1
 8007194:	f8c7 361c 	str.w	r3, [r7, #1564]	@ 0x61c
 8007198:	f8d7 361c 	ldr.w	r3, [r7, #1564]	@ 0x61c
 800719c:	2bff      	cmp	r3, #255	@ 0xff
 800719e:	d9d1      	bls.n	8007144 <pack_sig+0x4c>
    }
    sig += N / 8;
 80071a0:	f507 63c4 	add.w	r3, r7, #1568	@ 0x620
 80071a4:	f2a3 6314 	subw	r3, r3, #1556	@ 0x614
 80071a8:	f507 62c4 	add.w	r2, r7, #1568	@ 0x620
 80071ac:	f2a2 6214 	subw	r2, r2, #1556	@ 0x614
 80071b0:	6812      	ldr	r2, [r2, #0]
 80071b2:	3220      	adds	r2, #32
 80071b4:	601a      	str	r2, [r3, #0]

    for (int i = 0; i < L; ++i)
 80071b6:	2300      	movs	r3, #0
 80071b8:	f8c7 3618 	str.w	r3, [r7, #1560]	@ 0x618
 80071bc:	e01a      	b.n	80071f4 <pack_sig+0xfc>
        poly_decomposed_pack(sig + N * i, &lowbits_z1->vec[i]);
 80071be:	f8d7 3618 	ldr.w	r3, [r7, #1560]	@ 0x618
 80071c2:	021b      	lsls	r3, r3, #8
 80071c4:	461a      	mov	r2, r3
 80071c6:	f507 63c4 	add.w	r3, r7, #1568	@ 0x620
 80071ca:	f2a3 6314 	subw	r3, r3, #1556	@ 0x614
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	1898      	adds	r0, r3, r2
 80071d2:	f507 63c4 	add.w	r3, r7, #1568	@ 0x620
 80071d6:	f2a3 621c 	subw	r2, r3, #1564	@ 0x61c
 80071da:	f8d7 3618 	ldr.w	r3, [r7, #1560]	@ 0x618
 80071de:	029b      	lsls	r3, r3, #10
 80071e0:	6812      	ldr	r2, [r2, #0]
 80071e2:	4413      	add	r3, r2
 80071e4:	4619      	mov	r1, r3
 80071e6:	f000 fdaf 	bl	8007d48 <poly_decomposed_pack>
    for (int i = 0; i < L; ++i)
 80071ea:	f8d7 3618 	ldr.w	r3, [r7, #1560]	@ 0x618
 80071ee:	3301      	adds	r3, #1
 80071f0:	f8c7 3618 	str.w	r3, [r7, #1560]	@ 0x618
 80071f4:	f8d7 3618 	ldr.w	r3, [r7, #1560]	@ 0x618
 80071f8:	2b03      	cmp	r3, #3
 80071fa:	dde0      	ble.n	80071be <pack_sig+0xc6>
    sig += L * N;
 80071fc:	f507 63c4 	add.w	r3, r7, #1568	@ 0x620
 8007200:	f2a3 6314 	subw	r3, r3, #1556	@ 0x614
 8007204:	f507 62c4 	add.w	r2, r7, #1568	@ 0x620
 8007208:	f2a2 6214 	subw	r2, r2, #1556	@ 0x614
 800720c:	6812      	ldr	r2, [r2, #0]
 800720e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007212:	601a      	str	r2, [r3, #0]

    size_enc_hb_z1 =
        encode_hb_z1(encoded_hb_z1, &highbits_z1->vec[0].coeffs[0]);
 8007214:	f507 63c4 	add.w	r3, r7, #1568	@ 0x620
 8007218:	f5a3 63c4 	sub.w	r3, r3, #1568	@ 0x620
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	f107 0310 	add.w	r3, r7, #16
 8007222:	4611      	mov	r1, r2
 8007224:	4618      	mov	r0, r3
 8007226:	f7fa fcf5 	bl	8001c14 <encode_hb_z1>
 800722a:	4603      	mov	r3, r0
 800722c:	f8a7 3616 	strh.w	r3, [r7, #1558]	@ 0x616
    size_enc_h = encode_h(encoded_h, &h->vec[0].coeffs[0]);
 8007230:	f8d7 2630 	ldr.w	r2, [r7, #1584]	@ 0x630
 8007234:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8007238:	4611      	mov	r1, r2
 800723a:	4618      	mov	r0, r3
 800723c:	f7fa fbec 	bl	8001a18 <encode_h>
 8007240:	4603      	mov	r3, r0
 8007242:	f8a7 3614 	strh.w	r3, [r7, #1556]	@ 0x614

    if(size_enc_h == 0 || size_enc_hb_z1 == 0) {
 8007246:	f8b7 3614 	ldrh.w	r3, [r7, #1556]	@ 0x614
 800724a:	2b00      	cmp	r3, #0
 800724c:	d003      	beq.n	8007256 <pack_sig+0x15e>
 800724e:	f8b7 3616 	ldrh.w	r3, [r7, #1558]	@ 0x616
 8007252:	2b00      	cmp	r3, #0
 8007254:	d101      	bne.n	800725a <pack_sig+0x162>
        return 1; // encoding failed
 8007256:	2301      	movs	r3, #1
 8007258:	e079      	b.n	800734e <pack_sig+0x256>
    }

    // The size of the encoded h and HB(z1) does not always fit in one byte,
    // thus we output a one byte offset to a fixed baseline
    if(size_enc_h < BASE_ENC_H || size_enc_hb_z1 < BASE_ENC_HB_Z1 ||
 800725a:	f8b7 3614 	ldrh.w	r3, [r7, #1556]	@ 0x614
 800725e:	2b06      	cmp	r3, #6
 8007260:	d90d      	bls.n	800727e <pack_sig+0x186>
 8007262:	f8b7 3616 	ldrh.w	r3, [r7, #1558]	@ 0x616
 8007266:	2b83      	cmp	r3, #131	@ 0x83
 8007268:	d909      	bls.n	800727e <pack_sig+0x186>
 800726a:	f8b7 3614 	ldrh.w	r3, [r7, #1556]	@ 0x614
 800726e:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 8007272:	d804      	bhi.n	800727e <pack_sig+0x186>
        size_enc_h > BASE_ENC_H + 255 || size_enc_hb_z1 > BASE_ENC_HB_Z1 + 255) {
 8007274:	f8b7 3616 	ldrh.w	r3, [r7, #1558]	@ 0x616
 8007278:	f5b3 7fc2 	cmp.w	r3, #388	@ 0x184
 800727c:	d301      	bcc.n	8007282 <pack_sig+0x18a>
            return 1; // encoding size offset out of range
 800727e:	2301      	movs	r3, #1
 8007280:	e065      	b.n	800734e <pack_sig+0x256>
        }
    
    offset_enc_hb_z1 = size_enc_hb_z1 - BASE_ENC_HB_Z1;
 8007282:	f8b7 3616 	ldrh.w	r3, [r7, #1558]	@ 0x616
 8007286:	b2db      	uxtb	r3, r3
 8007288:	337c      	adds	r3, #124	@ 0x7c
 800728a:	f887 3613 	strb.w	r3, [r7, #1555]	@ 0x613
    offset_enc_h = size_enc_h - BASE_ENC_H;
 800728e:	f8b7 3614 	ldrh.w	r3, [r7, #1556]	@ 0x614
 8007292:	b2db      	uxtb	r3, r3
 8007294:	3b07      	subs	r3, #7
 8007296:	f887 3612 	strb.w	r3, [r7, #1554]	@ 0x612

    if (SEEDBYTES + L * N + 2 + size_enc_hb_z1 + size_enc_h >
 800729a:	f8b7 3616 	ldrh.w	r3, [r7, #1558]	@ 0x616
 800729e:	f203 4222 	addw	r2, r3, #1058	@ 0x422
 80072a2:	f8b7 3614 	ldrh.w	r3, [r7, #1556]	@ 0x614
 80072a6:	4413      	add	r3, r2
 80072a8:	f240 52c2 	movw	r2, #1474	@ 0x5c2
 80072ac:	4293      	cmp	r3, r2
 80072ae:	dd01      	ble.n	80072b4 <pack_sig+0x1bc>
        CRYPTO_BYTES) {
        return 1; // signature too big     
 80072b0:	2301      	movs	r3, #1
 80072b2:	e04c      	b.n	800734e <pack_sig+0x256>
    }

    sig[0] = offset_enc_hb_z1;
 80072b4:	f507 63c4 	add.w	r3, r7, #1568	@ 0x620
 80072b8:	f2a3 6314 	subw	r3, r3, #1556	@ 0x614
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f897 2613 	ldrb.w	r2, [r7, #1555]	@ 0x613
 80072c2:	701a      	strb	r2, [r3, #0]
    sig[1] = offset_enc_h;
 80072c4:	f507 63c4 	add.w	r3, r7, #1568	@ 0x620
 80072c8:	f2a3 6314 	subw	r3, r3, #1556	@ 0x614
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	3301      	adds	r3, #1
 80072d0:	f897 2612 	ldrb.w	r2, [r7, #1554]	@ 0x612
 80072d4:	701a      	strb	r2, [r3, #0]
    sig += 2;
 80072d6:	f507 63c4 	add.w	r3, r7, #1568	@ 0x620
 80072da:	f2a3 6314 	subw	r3, r3, #1556	@ 0x614
 80072de:	f507 62c4 	add.w	r2, r7, #1568	@ 0x620
 80072e2:	f2a2 6214 	subw	r2, r2, #1556	@ 0x614
 80072e6:	6812      	ldr	r2, [r2, #0]
 80072e8:	3202      	adds	r2, #2
 80072ea:	601a      	str	r2, [r3, #0]

    memcpy(sig, encoded_hb_z1, size_enc_hb_z1);
 80072ec:	f8b7 2616 	ldrh.w	r2, [r7, #1558]	@ 0x616
 80072f0:	f107 0110 	add.w	r1, r7, #16
 80072f4:	f507 63c4 	add.w	r3, r7, #1568	@ 0x620
 80072f8:	f2a3 6314 	subw	r3, r3, #1556	@ 0x614
 80072fc:	6818      	ldr	r0, [r3, #0]
 80072fe:	f00e f99f 	bl	8015640 <memcpy>
    sig += size_enc_hb_z1;
 8007302:	f8b7 2616 	ldrh.w	r2, [r7, #1558]	@ 0x616
 8007306:	f507 63c4 	add.w	r3, r7, #1568	@ 0x620
 800730a:	f2a3 6314 	subw	r3, r3, #1556	@ 0x614
 800730e:	f507 61c4 	add.w	r1, r7, #1568	@ 0x620
 8007312:	f2a1 6114 	subw	r1, r1, #1556	@ 0x614
 8007316:	6809      	ldr	r1, [r1, #0]
 8007318:	440a      	add	r2, r1
 800731a:	601a      	str	r2, [r3, #0]

    memcpy(sig, encoded_h, size_enc_h);
 800731c:	f8b7 2614 	ldrh.w	r2, [r7, #1556]	@ 0x614
 8007320:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 8007324:	f507 63c4 	add.w	r3, r7, #1568	@ 0x620
 8007328:	f2a3 6314 	subw	r3, r3, #1556	@ 0x614
 800732c:	6818      	ldr	r0, [r3, #0]
 800732e:	f00e f987 	bl	8015640 <memcpy>
    sig += size_enc_h;
 8007332:	f8b7 2614 	ldrh.w	r2, [r7, #1556]	@ 0x614
 8007336:	f507 63c4 	add.w	r3, r7, #1568	@ 0x620
 800733a:	f2a3 6314 	subw	r3, r3, #1556	@ 0x614
 800733e:	f507 61c4 	add.w	r1, r7, #1568	@ 0x620
 8007342:	f2a1 6114 	subw	r1, r1, #1556	@ 0x614
 8007346:	6809      	ldr	r1, [r1, #0]
 8007348:	440a      	add	r2, r1
 800734a:	601a      	str	r2, [r3, #0]
  
    return 0;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	f207 6724 	addw	r7, r7, #1572	@ 0x624
 8007354:	46bd      	mov	sp, r7
 8007356:	bd90      	pop	{r4, r7, pc}

08007358 <unpack_sig>:
 *
 * Returns 1 in case of malformed signature; otherwise 0.
 **************************************************/
int unpack_sig(poly *c, polyvecl *lowbits_z1,
               polyvecl *highbits_z1, polyveck *h,
               const uint8_t sig[CRYPTO_BYTES]) {
 8007358:	b580      	push	{r7, lr}
 800735a:	b088      	sub	sp, #32
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]
 8007364:	603b      	str	r3, [r7, #0]

    uint16_t size_enc_hb_z1, size_enc_h;

    // decode challenge
    for (size_t i = 0; i < N; i++)
 8007366:	2300      	movs	r3, #0
 8007368:	61fb      	str	r3, [r7, #28]
 800736a:	e013      	b.n	8007394 <unpack_sig+0x3c>
    {
      c->coeffs[i] = (sig[i/8] >> (i%8)) & 1;
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	08db      	lsrs	r3, r3, #3
 8007370:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007372:	4413      	add	r3, r2
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	461a      	mov	r2, r3
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	f003 0307 	and.w	r3, r3, #7
 800737e:	fa42 f303 	asr.w	r3, r2, r3
 8007382:	f003 0101 	and.w	r1, r3, #1
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	69fa      	ldr	r2, [r7, #28]
 800738a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (size_t i = 0; i < N; i++)
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	3301      	adds	r3, #1
 8007392:	61fb      	str	r3, [r7, #28]
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	2bff      	cmp	r3, #255	@ 0xff
 8007398:	d9e8      	bls.n	800736c <unpack_sig+0x14>
    }
    sig += N / 8;
 800739a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800739c:	3320      	adds	r3, #32
 800739e:	62bb      	str	r3, [r7, #40]	@ 0x28

    for (unsigned int i = 0; i < L; ++i)
 80073a0:	2300      	movs	r3, #0
 80073a2:	61bb      	str	r3, [r7, #24]
 80073a4:	e00d      	b.n	80073c2 <unpack_sig+0x6a>
        poly_decomposed_unpack(&lowbits_z1->vec[i], sig + N * i);
 80073a6:	69bb      	ldr	r3, [r7, #24]
 80073a8:	029b      	lsls	r3, r3, #10
 80073aa:	68ba      	ldr	r2, [r7, #8]
 80073ac:	18d0      	adds	r0, r2, r3
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	021b      	lsls	r3, r3, #8
 80073b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80073b4:	4413      	add	r3, r2
 80073b6:	4619      	mov	r1, r3
 80073b8:	f000 fce4 	bl	8007d84 <poly_decomposed_unpack>
    for (unsigned int i = 0; i < L; ++i)
 80073bc:	69bb      	ldr	r3, [r7, #24]
 80073be:	3301      	adds	r3, #1
 80073c0:	61bb      	str	r3, [r7, #24]
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	2b03      	cmp	r3, #3
 80073c6:	d9ee      	bls.n	80073a6 <unpack_sig+0x4e>
    sig += L * N;
 80073c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80073ce:	62bb      	str	r3, [r7, #40]	@ 0x28

    size_enc_hb_z1 = (uint16_t)sig[0] + BASE_ENC_HB_Z1;
 80073d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	3384      	adds	r3, #132	@ 0x84
 80073d6:	827b      	strh	r3, [r7, #18]
    size_enc_h = (uint16_t)sig[1] + BASE_ENC_H;
 80073d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073da:	3301      	adds	r3, #1
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	3307      	adds	r3, #7
 80073e0:	823b      	strh	r3, [r7, #16]
    sig += 2;
 80073e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073e4:	3302      	adds	r3, #2
 80073e6:	62bb      	str	r3, [r7, #40]	@ 0x28

    if(CRYPTO_BYTES < (2 + L*N + SEEDBYTES + size_enc_h + size_enc_hb_z1))
 80073e8:	8a3b      	ldrh	r3, [r7, #16]
 80073ea:	f203 4222 	addw	r2, r3, #1058	@ 0x422
 80073ee:	8a7b      	ldrh	r3, [r7, #18]
 80073f0:	4413      	add	r3, r2
 80073f2:	f240 52c2 	movw	r2, #1474	@ 0x5c2
 80073f6:	4293      	cmp	r3, r2
 80073f8:	dd01      	ble.n	80073fe <unpack_sig+0xa6>
        return 1; // invalid size_enc_h and/or size_enc_hb_z1
 80073fa:	2301      	movs	r3, #1
 80073fc:	e037      	b.n	800746e <unpack_sig+0x116>

    if(decode_hb_z1(&highbits_z1->vec[0].coeffs[0], sig, size_enc_hb_z1)) {
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	8a7a      	ldrh	r2, [r7, #18]
 8007402:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007404:	4618      	mov	r0, r3
 8007406:	f7fa fc8b 	bl	8001d20 <decode_hb_z1>
 800740a:	4603      	mov	r3, r0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d001      	beq.n	8007414 <unpack_sig+0xbc>
        return 1; // decoding failed
 8007410:	2301      	movs	r3, #1
 8007412:	e02c      	b.n	800746e <unpack_sig+0x116>
    }
        
    sig += size_enc_hb_z1;
 8007414:	8a7b      	ldrh	r3, [r7, #18]
 8007416:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007418:	4413      	add	r3, r2
 800741a:	62bb      	str	r3, [r7, #40]	@ 0x28

    if(decode_h(&h->vec[0].coeffs[0], sig, size_enc_h)) {
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	8a3a      	ldrh	r2, [r7, #16]
 8007420:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007422:	4618      	mov	r0, r3
 8007424:	f7fa fb84 	bl	8001b30 <decode_h>
 8007428:	4603      	mov	r3, r0
 800742a:	2b00      	cmp	r3, #0
 800742c:	d001      	beq.n	8007432 <unpack_sig+0xda>
        return 1; // decoding failed
 800742e:	2301      	movs	r3, #1
 8007430:	e01d      	b.n	800746e <unpack_sig+0x116>
    }
        
    sig += size_enc_h;
 8007432:	8a3b      	ldrh	r3, [r7, #16]
 8007434:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007436:	4413      	add	r3, r2
 8007438:	62bb      	str	r3, [r7, #40]	@ 0x28

    for(int i=0; i < CRYPTO_BYTES - (SEEDBYTES + L * N + 2 + size_enc_hb_z1 + size_enc_h); i++)
 800743a:	2300      	movs	r3, #0
 800743c:	617b      	str	r3, [r7, #20]
 800743e:	e00a      	b.n	8007456 <unpack_sig+0xfe>
        if(sig[i] != 0) return 1; // verify zero padding
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007444:	4413      	add	r3, r2
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d001      	beq.n	8007450 <unpack_sig+0xf8>
 800744c:	2301      	movs	r3, #1
 800744e:	e00e      	b.n	800746e <unpack_sig+0x116>
    for(int i=0; i < CRYPTO_BYTES - (SEEDBYTES + L * N + 2 + size_enc_hb_z1 + size_enc_h); i++)
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	3301      	adds	r3, #1
 8007454:	617b      	str	r3, [r7, #20]
 8007456:	8a7b      	ldrh	r3, [r7, #18]
 8007458:	f203 4222 	addw	r2, r3, #1058	@ 0x422
 800745c:	8a3b      	ldrh	r3, [r7, #16]
 800745e:	4413      	add	r3, r2
 8007460:	f5c3 63b8 	rsb	r3, r3, #1472	@ 0x5c0
 8007464:	3302      	adds	r3, #2
 8007466:	697a      	ldr	r2, [r7, #20]
 8007468:	429a      	cmp	r2, r3
 800746a:	dbe9      	blt.n	8007440 <unpack_sig+0xe8>

    return 0;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3720      	adds	r7, #32
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}

08007476 <poly_decompose_vk>:
#include "symmetric.h"
#include "arm_simd.h"
#include <stdint.h>


void poly_decompose_vk(poly *v0, poly *v) {
 8007476:	b580      	push	{r7, lr}
 8007478:	b084      	sub	sp, #16
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
 800747e:	6039      	str	r1, [r7, #0]
    for (int j = 0; j < N; j++) {
 8007480:	2300      	movs	r3, #0
 8007482:	60fb      	str	r3, [r7, #12]
 8007484:	e012      	b.n	80074ac <poly_decompose_vk+0x36>
        v->coeffs[j] = decompose_vk(&v0->coeffs[j], v->coeffs[j]);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	18d0      	adds	r0, r2, r3
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	68fa      	ldr	r2, [r7, #12]
 8007492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007496:	4619      	mov	r1, r3
 8007498:	f7fa f950 	bl	800173c <decompose_vk>
 800749c:	4601      	mov	r1, r0
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int j = 0; j < N; j++) {
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	3301      	adds	r3, #1
 80074aa:	60fb      	str	r3, [r7, #12]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2bff      	cmp	r3, #255	@ 0xff
 80074b0:	dde9      	ble.n	8007486 <poly_decompose_vk+0x10>
    }
}
 80074b2:	bf00      	nop
 80074b4:	bf00      	nop
 80074b6:	3710      	adds	r7, #16
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <poly_clone>:
 * Description: Clones the contents of one poly to another.
 *
 * Arguments:   - poly src: polynomial to be cloned
 *              - poly dest: polynomial to clone to
 **************************************************/
void poly_clone(poly *dest, const poly *src){
 80074bc:	b480      	push	{r7}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
    for (size_t i=0; i<N; ++i) 
 80074c6:	2300      	movs	r3, #0
 80074c8:	60fb      	str	r3, [r7, #12]
 80074ca:	e00a      	b.n	80074e2 <poly_clone+0x26>
        dest->coeffs[i] = src->coeffs[i];
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	68fa      	ldr	r2, [r7, #12]
 80074d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (size_t i=0; i<N; ++i) 
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	3301      	adds	r3, #1
 80074e0:	60fb      	str	r3, [r7, #12]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2bff      	cmp	r3, #255	@ 0xff
 80074e6:	d9f1      	bls.n	80074cc <poly_clone+0x10>
}
 80074e8:	bf00      	nop
 80074ea:	bf00      	nop
 80074ec:	3714      	adds	r7, #20
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr

080074f6 <poly_add>:
 *
 * Arguments:   - poly *c: pointer to output polynomial
 *              - const poly *a: pointer to first summand
 *              - const poly *b: pointer to second summand
 **************************************************/
void poly_add(poly *c, const poly *a, const poly *b) {
 80074f6:	b480      	push	{r7}
 80074f8:	b087      	sub	sp, #28
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	60f8      	str	r0, [r7, #12]
 80074fe:	60b9      	str	r1, [r7, #8]
 8007500:	607a      	str	r2, [r7, #4]
    unsigned int i;

    for (i = 0; i < N; ++i)
 8007502:	2300      	movs	r3, #0
 8007504:	617b      	str	r3, [r7, #20]
 8007506:	e00f      	b.n	8007528 <poly_add+0x32>
        c->coeffs[i] = a->coeffs[i] + b->coeffs[i];
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	697a      	ldr	r2, [r7, #20]
 800750c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6979      	ldr	r1, [r7, #20]
 8007514:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007518:	18d1      	adds	r1, r2, r3
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	697a      	ldr	r2, [r7, #20]
 800751e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < N; ++i)
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	3301      	adds	r3, #1
 8007526:	617b      	str	r3, [r7, #20]
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	2bff      	cmp	r3, #255	@ 0xff
 800752c:	d9ec      	bls.n	8007508 <poly_add+0x12>
}
 800752e:	bf00      	nop
 8007530:	bf00      	nop
 8007532:	371c      	adds	r7, #28
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <poly_sub>:
 * Arguments:   - poly *c: pointer to output polynomial
 *              - const poly *a: pointer to first input polynomial
 *              - const poly *b: pointer to second input polynomial to be
 *                               subtraced from first input polynomial
 **************************************************/
void poly_sub(poly *c, const poly *a, const poly *b) {
 800753c:	b480      	push	{r7}
 800753e:	b087      	sub	sp, #28
 8007540:	af00      	add	r7, sp, #0
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	607a      	str	r2, [r7, #4]
    unsigned int i;

    for (i = 0; i < N; ++i)
 8007548:	2300      	movs	r3, #0
 800754a:	617b      	str	r3, [r7, #20]
 800754c:	e00f      	b.n	800756e <poly_sub+0x32>
        c->coeffs[i] = a->coeffs[i] - b->coeffs[i];
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	697a      	ldr	r2, [r7, #20]
 8007552:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6979      	ldr	r1, [r7, #20]
 800755a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800755e:	1ad1      	subs	r1, r2, r3
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	697a      	ldr	r2, [r7, #20]
 8007564:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < N; ++i)
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	3301      	adds	r3, #1
 800756c:	617b      	str	r3, [r7, #20]
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	2bff      	cmp	r3, #255	@ 0xff
 8007572:	d9ec      	bls.n	800754e <poly_sub+0x12>
}
 8007574:	bf00      	nop
 8007576:	bf00      	nop
 8007578:	371c      	adds	r7, #28
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr

08007582 <poly_cneg>:
 *
 * Arguments:   - poly *c: pointer to input/output polynomial
 *              - const uint8_t b: bit in [0,1]. If zero keep,
 *                                 else negate.
 **************************************************/
void poly_cneg(poly *c, const uint8_t b) {
 8007582:	b480      	push	{r7}
 8007584:	b085      	sub	sp, #20
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
 800758a:	460b      	mov	r3, r1
 800758c:	70fb      	strb	r3, [r7, #3]
    unsigned int j;
    for (j = 0; j < N; j++) {
 800758e:	2300      	movs	r3, #0
 8007590:	60fb      	str	r3, [r7, #12]
 8007592:	e010      	b.n	80075b6 <poly_cneg+0x34>
        c->coeffs[j] *= 1 - 2 * b;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800759c:	78fa      	ldrb	r2, [r7, #3]
 800759e:	0052      	lsls	r2, r2, #1
 80075a0:	f1c2 0201 	rsb	r2, r2, #1
 80075a4:	fb02 f103 	mul.w	r1, r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (j = 0; j < N; j++) {
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	3301      	adds	r3, #1
 80075b4:	60fb      	str	r3, [r7, #12]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2bff      	cmp	r3, #255	@ 0xff
 80075ba:	d9eb      	bls.n	8007594 <poly_cneg+0x12>
    }
}
 80075bc:	bf00      	nop
 80075be:	bf00      	nop
 80075c0:	3714      	adds	r7, #20
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr

080075ca <poly_shl>:
 *              No overflow checking is done.
 * 
 * Arguments:   - poly *r: pointer to polynomial to work on
 *              - const uint8_t shmnt: shift amount
 **************************************************/
void poly_shl(poly *r, const uint8_t shmnt){
 80075ca:	b480      	push	{r7}
 80075cc:	b085      	sub	sp, #20
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
 80075d2:	460b      	mov	r3, r1
 80075d4:	70fb      	strb	r3, [r7, #3]
    for (size_t k = 0; k < N; ++k) 
 80075d6:	2300      	movs	r3, #0
 80075d8:	60fb      	str	r3, [r7, #12]
 80075da:	e00d      	b.n	80075f8 <poly_shl+0x2e>
        r->coeffs[k] <<= shmnt;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80075e4:	78fb      	ldrb	r3, [r7, #3]
 80075e6:	fa02 f103 	lsl.w	r1, r2, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	68fa      	ldr	r2, [r7, #12]
 80075ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (size_t k = 0; k < N; ++k) 
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	3301      	adds	r3, #1
 80075f6:	60fb      	str	r3, [r7, #12]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2bff      	cmp	r3, #255	@ 0xff
 80075fc:	d9ee      	bls.n	80075dc <poly_shl+0x12>
}
 80075fe:	bf00      	nop
 8007600:	bf00      	nop
 8007602:	3714      	adds	r7, #20
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <poly_double>:
 * Description: Double vector of polynomials of length K.
 *              No modular reduction is performed.
 *
 * Arguments:   - polyveck *w: pointer to output vector
 **************************************************/
void poly_double(poly *b) {
 800760c:	b480      	push	{r7}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
    unsigned int j;

    for (j = 0; j < N; ++j)
 8007614:	2300      	movs	r3, #0
 8007616:	60fb      	str	r3, [r7, #12]
 8007618:	e00b      	b.n	8007632 <poly_double+0x26>
        b->coeffs[j] *= 2;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007622:	0059      	lsls	r1, r3, #1
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	68fa      	ldr	r2, [r7, #12]
 8007628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (j = 0; j < N; ++j)
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	3301      	adds	r3, #1
 8007630:	60fb      	str	r3, [r7, #12]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2bff      	cmp	r3, #255	@ 0xff
 8007636:	d9f0      	bls.n	800761a <poly_double+0xe>
}
 8007638:	bf00      	nop
 800763a:	bf00      	nop
 800763c:	3714      	adds	r7, #20
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr

08007646 <poly_pointwise_montgomery>:
 *
 * Arguments:   - poly *c: pointer to output polynomial
 *              - const poly *a: pointer to first input polynomial
 *              - const poly *b: pointer to second input polynomial
 **************************************************/
void poly_pointwise_montgomery(poly *c, const poly *a, const poly *b) {
 8007646:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800764a:	b086      	sub	sp, #24
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	607a      	str	r2, [r7, #4]
    unsigned int i;

    for (i = 0; i < N; ++i)
 8007654:	2300      	movs	r3, #0
 8007656:	617b      	str	r3, [r7, #20]
 8007658:	e022      	b.n	80076a0 <poly_pointwise_montgomery+0x5a>
        c->coeffs[i] = montgomery_reduce((int64_t)a->coeffs[i] * b->coeffs[i]);
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	697a      	ldr	r2, [r7, #20]
 800765e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007662:	17da      	asrs	r2, r3, #31
 8007664:	4698      	mov	r8, r3
 8007666:	4691      	mov	r9, r2
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	697a      	ldr	r2, [r7, #20]
 800766c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007670:	17da      	asrs	r2, r3, #31
 8007672:	469a      	mov	sl, r3
 8007674:	4693      	mov	fp, r2
 8007676:	fb0a f209 	mul.w	r2, sl, r9
 800767a:	fb08 f30b 	mul.w	r3, r8, fp
 800767e:	4413      	add	r3, r2
 8007680:	fba8 450a 	umull	r4, r5, r8, sl
 8007684:	442b      	add	r3, r5
 8007686:	461d      	mov	r5, r3
 8007688:	4620      	mov	r0, r4
 800768a:	4629      	mov	r1, r5
 800768c:	f003 f878 	bl	800a780 <montgomery_reduce>
 8007690:	4601      	mov	r1, r0
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < N; ++i)
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	3301      	adds	r3, #1
 800769e:	617b      	str	r3, [r7, #20]
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	2bff      	cmp	r3, #255	@ 0xff
 80076a4:	d9d9      	bls.n	800765a <poly_pointwise_montgomery+0x14>
}
 80076a6:	bf00      	nop
 80076a8:	bf00      	nop
 80076aa:	3718      	adds	r7, #24
 80076ac:	46bd      	mov	sp, r7
 80076ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080076b2 <poly_pointwise_montgomery_mixed>:
 *
 * Arguments:   - poly *c: pointer to output polynomial
 *              - const poly_frozen *a: pointer to first input polynomial
 *              - const poly *b: pointer to second input polynomial
 **************************************************/
void poly_pointwise_montgomery_mixed(poly *c, const poly_frozen *a, const poly *b) {
 80076b2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076b6:	b086      	sub	sp, #24
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	607a      	str	r2, [r7, #4]
    unsigned int i;

    for (i = 0; i < N; ++i)
 80076c0:	2300      	movs	r3, #0
 80076c2:	617b      	str	r3, [r7, #20]
 80076c4:	e023      	b.n	800770e <poly_pointwise_montgomery_mixed+0x5c>
        c->coeffs[i] = _montgomery_reduce((int64_t)a->coeffs[i] * b->coeffs[i]);
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	697a      	ldr	r2, [r7, #20]
 80076ca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	2200      	movs	r2, #0
 80076d2:	4698      	mov	r8, r3
 80076d4:	4691      	mov	r9, r2
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	697a      	ldr	r2, [r7, #20]
 80076da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076de:	17da      	asrs	r2, r3, #31
 80076e0:	469a      	mov	sl, r3
 80076e2:	4693      	mov	fp, r2
 80076e4:	fb0a f209 	mul.w	r2, sl, r9
 80076e8:	fb08 f30b 	mul.w	r3, r8, fp
 80076ec:	4413      	add	r3, r2
 80076ee:	fba8 450a 	umull	r4, r5, r8, sl
 80076f2:	442b      	add	r3, r5
 80076f4:	461d      	mov	r5, r3
 80076f6:	4620      	mov	r0, r4
 80076f8:	4629      	mov	r1, r5
 80076fa:	f003 f84f 	bl	800a79c <_montgomery_reduce>
 80076fe:	4601      	mov	r1, r0
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	697a      	ldr	r2, [r7, #20]
 8007704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < N; ++i)
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	3301      	adds	r3, #1
 800770c:	617b      	str	r3, [r7, #20]
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	2bff      	cmp	r3, #255	@ 0xff
 8007712:	d9d8      	bls.n	80076c6 <poly_pointwise_montgomery_mixed+0x14>
}
 8007714:	bf00      	nop
 8007716:	bf00      	nop
 8007718:	3718      	adds	r7, #24
 800771a:	46bd      	mov	sp, r7
 800771c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007720 <poly_reduce2q>:
 *
 * Description: Inplace reduction of all coefficients of polynomial to 2q
 *
 * Arguments:   - poly *a: pointer to input/output polynomial
 **************************************************/
void poly_reduce2q(poly *a) {
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
    unsigned int i;

    for (i = 0; i < N; ++i)
 8007728:	2300      	movs	r3, #0
 800772a:	60fb      	str	r3, [r7, #12]
 800772c:	e00e      	b.n	800774c <poly_reduce2q+0x2c>
        a->coeffs[i] = reduce32_2q(a->coeffs[i]);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	68fa      	ldr	r2, [r7, #12]
 8007732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007736:	4618      	mov	r0, r3
 8007738:	f003 f960 	bl	800a9fc <reduce32_2q>
 800773c:	4601      	mov	r1, r0
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < N; ++i)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	3301      	adds	r3, #1
 800774a:	60fb      	str	r3, [r7, #12]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2bff      	cmp	r3, #255	@ 0xff
 8007750:	d9ed      	bls.n	800772e <poly_reduce2q+0xe>
}
 8007752:	bf00      	nop
 8007754:	bf00      	nop
 8007756:	3710      	adds	r7, #16
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <poly_freeze2q>:
 * Description: For all coefficients of in/out polynomial compute standard
 *              representative r = a mod^+ 2Q
 *
 * Arguments:   - poly *a: pointer to input/output polynomial
 **************************************************/
void poly_freeze2q(poly *a) {
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
    unsigned int i;

    for (i = 0; i < N; ++i)
 8007764:	2300      	movs	r3, #0
 8007766:	60fb      	str	r3, [r7, #12]
 8007768:	e00e      	b.n	8007788 <poly_freeze2q+0x2c>
        a->coeffs[i] = freeze2q(a->coeffs[i]);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007772:	4618      	mov	r0, r3
 8007774:	f003 fa7c 	bl	800ac70 <freeze2q>
 8007778:	4601      	mov	r1, r0
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < N; ++i)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	3301      	adds	r3, #1
 8007786:	60fb      	str	r3, [r7, #12]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2bff      	cmp	r3, #255	@ 0xff
 800778c:	d9ed      	bls.n	800776a <poly_freeze2q+0xe>
}
 800778e:	bf00      	nop
 8007790:	bf00      	nop
 8007792:	3710      	adds	r7, #16
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <poly_freeze>:
 * Description: For all coefficients of in/out polynomial compute standard
 *              representative r = a mod^+ Q
 *
 * Arguments:   - poly *a: pointer to input/output polynomial
 **************************************************/
void poly_freeze(poly *a) {
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
    unsigned int i;

    for (i = 0; i < N; ++i)
 80077a0:	2300      	movs	r3, #0
 80077a2:	60fb      	str	r3, [r7, #12]
 80077a4:	e00e      	b.n	80077c4 <poly_freeze+0x2c>
        a->coeffs[i] = freeze(a->coeffs[i]);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ae:	4618      	mov	r0, r3
 80077b0:	f003 f838 	bl	800a824 <freeze>
 80077b4:	4601      	mov	r1, r0
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < N; ++i)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	3301      	adds	r3, #1
 80077c2:	60fb      	str	r3, [r7, #12]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2bff      	cmp	r3, #255	@ 0xff
 80077c8:	d9ed      	bls.n	80077a6 <poly_freeze+0xe>
}
 80077ca:	bf00      	nop
 80077cc:	bf00      	nop
 80077ce:	3710      	adds	r7, #16
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <poly_highbits>:
 * Description: Compute HighBits of polynomial
 *
 * Arguments:   - poly *a2: pointer to output polynomial
 *              - const poly *a: pointer to input polynomial
 **************************************************/
void poly_highbits(poly *a2, const poly *a) {
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
    unsigned int i;
    int32_t a1tmp;

    for (i = 0; i < N; ++i)
 80077de:	2300      	movs	r3, #0
 80077e0:	60fb      	str	r3, [r7, #12]
 80077e2:	e00f      	b.n	8007804 <poly_highbits+0x30>
        decompose_z1(&a2->coeffs[i], &a1tmp, a->coeffs[i]);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	18d0      	adds	r0, r2, r3
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	68fa      	ldr	r2, [r7, #12]
 80077f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80077f4:	f107 0308 	add.w	r3, r7, #8
 80077f8:	4619      	mov	r1, r3
 80077fa:	f7f9 ff51 	bl	80016a0 <decompose_z1>
    for (i = 0; i < N; ++i)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	3301      	adds	r3, #1
 8007802:	60fb      	str	r3, [r7, #12]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2bff      	cmp	r3, #255	@ 0xff
 8007808:	d9ec      	bls.n	80077e4 <poly_highbits+0x10>
}
 800780a:	bf00      	nop
 800780c:	bf00      	nop
 800780e:	3710      	adds	r7, #16
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <poly_lowbits>:
 * Description: Compute LowBits of polynomial
 *
 * Arguments:   - poly *a1: pointer to output polynomial
 *              - const poly *a: pointer to input polynomial
 **************************************************/
void poly_lowbits(poly *a1, const poly *a) {
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
    unsigned int i = 0;
 800781e:	2300      	movs	r3, #0
 8007820:	60fb      	str	r3, [r7, #12]
    int32_t a2tmp = 0;
 8007822:	2300      	movs	r3, #0
 8007824:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < N; ++i)
 8007826:	2300      	movs	r3, #0
 8007828:	60fb      	str	r3, [r7, #12]
 800782a:	e00f      	b.n	800784c <poly_lowbits+0x38>
        decompose_z1(&a2tmp, &a1->coeffs[i], a->coeffs[i]);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	18d1      	adds	r1, r2, r3
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	68fa      	ldr	r2, [r7, #12]
 8007838:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800783c:	f107 0308 	add.w	r3, r7, #8
 8007840:	4618      	mov	r0, r3
 8007842:	f7f9 ff2d 	bl	80016a0 <decompose_z1>
    for (i = 0; i < N; ++i)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	3301      	adds	r3, #1
 800784a:	60fb      	str	r3, [r7, #12]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2bff      	cmp	r3, #255	@ 0xff
 8007850:	d9ec      	bls.n	800782c <poly_lowbits+0x18>
}
 8007852:	bf00      	nop
 8007854:	bf00      	nop
 8007856:	3710      	adds	r7, #16
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <poly_compose>:
 *
 * Arguments:   - poly *a3: pointer to output polynomial
 *              - const poly *ha: pointer to HighBits polynomial
 *              - const poly *la: pointer to HighBits polynomial
 **************************************************/
void poly_compose(poly *a, const poly *ha, const poly *la) {
 800785c:	b480      	push	{r7}
 800785e:	b087      	sub	sp, #28
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	607a      	str	r2, [r7, #4]
    unsigned int i = 0;
 8007868:	2300      	movs	r3, #0
 800786a:	617b      	str	r3, [r7, #20]

    for (i = 0; i < N; ++i)
 800786c:	2300      	movs	r3, #0
 800786e:	617b      	str	r3, [r7, #20]
 8007870:	e010      	b.n	8007894 <poly_compose+0x38>
        a->coeffs[i] = (ha->coeffs[i] << 8) + la->coeffs[i];
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	697a      	ldr	r2, [r7, #20]
 8007876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800787a:	021a      	lsls	r2, r3, #8
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6979      	ldr	r1, [r7, #20]
 8007880:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007884:	18d1      	adds	r1, r2, r3
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	697a      	ldr	r2, [r7, #20]
 800788a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < N; ++i)
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	3301      	adds	r3, #1
 8007892:	617b      	str	r3, [r7, #20]
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	2bff      	cmp	r3, #255	@ 0xff
 8007898:	d9eb      	bls.n	8007872 <poly_compose+0x16>
}
 800789a:	bf00      	nop
 800789c:	bf00      	nop
 800789e:	371c      	adds	r7, #28
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <poly_lsb>:
 * Description: Compute least significant bits of polynomial
 *
 * Arguments:   - poly *a0: pointer to output polynomial
 *              - const poly *a: pointer to input polynomial
 **************************************************/
void poly_lsb(poly *a0, const poly *a) {
 80078a8:	b480      	push	{r7}
 80078aa:	b085      	sub	sp, #20
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
    unsigned int i;

    for (i = 0; i < N; ++i)
 80078b2:	2300      	movs	r3, #0
 80078b4:	60fb      	str	r3, [r7, #12]
 80078b6:	e00c      	b.n	80078d2 <poly_lsb+0x2a>
        a0->coeffs[i] = a->coeffs[i] & 1;
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078c0:	f003 0101 	and.w	r1, r3, #1
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < N; ++i)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	3301      	adds	r3, #1
 80078d0:	60fb      	str	r3, [r7, #12]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2bff      	cmp	r3, #255	@ 0xff
 80078d6:	d9ef      	bls.n	80078b8 <poly_lsb+0x10>
}
 80078d8:	bf00      	nop
 80078da:	bf00      	nop
 80078dc:	3714      	adds	r7, #20
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr

080078e6 <poly_uniform>:
 **************************************************/
#define POLY_UNIFORM_NBLOCKS                                                   \
    ((512 + STREAM128_BLOCKBYTES - 1) / STREAM128_BLOCKBYTES)
// N * 2(random bytes for [0, Q - 1])

void poly_uniform(poly *a, const uint8_t seed[SEEDBYTES], uint16_t nonce) {
 80078e6:	b580      	push	{r7, lr}
 80078e8:	f5ad 7d66 	sub.w	sp, sp, #920	@ 0x398
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	f507 7366 	add.w	r3, r7, #920	@ 0x398
 80078f2:	f5a3 7363 	sub.w	r3, r3, #908	@ 0x38c
 80078f6:	6018      	str	r0, [r3, #0]
 80078f8:	f507 7366 	add.w	r3, r7, #920	@ 0x398
 80078fc:	f5a3 7364 	sub.w	r3, r3, #912	@ 0x390
 8007900:	6019      	str	r1, [r3, #0]
 8007902:	f507 7366 	add.w	r3, r7, #920	@ 0x398
 8007906:	f2a3 3392 	subw	r3, r3, #914	@ 0x392
 800790a:	801a      	strh	r2, [r3, #0]
    unsigned int i, ctr, off;
    unsigned int buflen = POLY_UNIFORM_NBLOCKS * STREAM128_BLOCKBYTES;
 800790c:	f44f 7328 	mov.w	r3, #672	@ 0x2a0
 8007910:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
    uint8_t buf[POLY_UNIFORM_NBLOCKS * STREAM128_BLOCKBYTES + 1];
    stream128_state state;

    stream128_init(&state, seed, nonce);
 8007914:	f507 7366 	add.w	r3, r7, #920	@ 0x398
 8007918:	f2a3 3392 	subw	r3, r3, #914	@ 0x392
 800791c:	881a      	ldrh	r2, [r3, #0]
 800791e:	f507 7366 	add.w	r3, r7, #920	@ 0x398
 8007922:	f5a3 7364 	sub.w	r3, r3, #912	@ 0x390
 8007926:	f107 0010 	add.w	r0, r7, #16
 800792a:	6819      	ldr	r1, [r3, #0]
 800792c:	f005 febc 	bl	800d6a8 <haetae_shake128_stream_init>
    stream128_squeezeblocks(buf, POLY_UNIFORM_NBLOCKS, &state);
 8007930:	f107 0210 	add.w	r2, r7, #16
 8007934:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8007938:	2104      	movs	r1, #4
 800793a:	4618      	mov	r0, r3
 800793c:	f005 ff42 	bl	800d7c4 <haetae_shake128_stream_squeezeblocks>

    ctr = rej_uniform(a->coeffs, N, buf, buflen);
 8007940:	f507 7366 	add.w	r3, r7, #920	@ 0x398
 8007944:	f5a3 7363 	sub.w	r3, r3, #908	@ 0x38c
 8007948:	6818      	ldr	r0, [r3, #0]
 800794a:	f107 02e4 	add.w	r2, r7, #228	@ 0xe4
 800794e:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8007952:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007956:	f003 fa81 	bl	800ae5c <rej_uniform>
 800795a:	f8c7 0390 	str.w	r0, [r7, #912]	@ 0x390

    while (ctr < N) {
 800795e:	e053      	b.n	8007a08 <poly_uniform+0x122>
        off = buflen % 2;
 8007960:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8007964:	f003 0301 	and.w	r3, r3, #1
 8007968:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
        for (i = 0; i < off; ++i)
 800796c:	2300      	movs	r3, #0
 800796e:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 8007972:	e01a      	b.n	80079aa <poly_uniform+0xc4>
            buf[i] = buf[buflen - off + i];
 8007974:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 8007978:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 800797c:	1ad2      	subs	r2, r2, r3
 800797e:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8007982:	4413      	add	r3, r2
 8007984:	f507 7266 	add.w	r2, r7, #920	@ 0x398
 8007988:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 800798c:	5cd1      	ldrb	r1, [r2, r3]
 800798e:	f507 7366 	add.w	r3, r7, #920	@ 0x398
 8007992:	f5a3 722d 	sub.w	r2, r3, #692	@ 0x2b4
 8007996:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 800799a:	4413      	add	r3, r2
 800799c:	460a      	mov	r2, r1
 800799e:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < off; ++i)
 80079a0:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 80079a4:	3301      	adds	r3, #1
 80079a6:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 80079aa:	f8d7 2394 	ldr.w	r2, [r7, #916]	@ 0x394
 80079ae:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d3de      	bcc.n	8007974 <poly_uniform+0x8e>

        stream128_squeezeblocks(buf + off, 1, &state);
 80079b6:	f107 02e4 	add.w	r2, r7, #228	@ 0xe4
 80079ba:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 80079be:	4413      	add	r3, r2
 80079c0:	f107 0210 	add.w	r2, r7, #16
 80079c4:	2101      	movs	r1, #1
 80079c6:	4618      	mov	r0, r3
 80079c8:	f005 fefc 	bl	800d7c4 <haetae_shake128_stream_squeezeblocks>
        buflen = STREAM128_BLOCKBYTES + off;
 80079cc:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 80079d0:	33a8      	adds	r3, #168	@ 0xa8
 80079d2:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
        ctr += rej_uniform(a->coeffs + ctr, N - ctr, buf, buflen);
 80079d6:	f507 7366 	add.w	r3, r7, #920	@ 0x398
 80079da:	f5a3 7363 	sub.w	r3, r3, #908	@ 0x38c
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	18d0      	adds	r0, r2, r3
 80079e8:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80079ec:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 80079f0:	f107 02e4 	add.w	r2, r7, #228	@ 0xe4
 80079f4:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 80079f8:	f003 fa30 	bl	800ae5c <rej_uniform>
 80079fc:	4602      	mov	r2, r0
 80079fe:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8007a02:	4413      	add	r3, r2
 8007a04:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
    while (ctr < N) {
 8007a08:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8007a0c:	2bff      	cmp	r3, #255	@ 0xff
 8007a0e:	d9a7      	bls.n	8007960 <poly_uniform+0x7a>
    }
}
 8007a10:	bf00      	nop
 8007a12:	bf00      	nop
 8007a14:	f507 7766 	add.w	r7, r7, #920	@ 0x398
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <poly_uniform_frozen>:
 *
 * Arguments:   - poly *a: pointer to output polynomial
 *              - const uint8_t seed[]: byte array with seed of length SEEDBYTES
 *              - uint16_t nonce: 2-byte nonce
 **************************************************/
void poly_uniform_frozen(poly_frozen *a, const uint8_t seed[SEEDBYTES], uint16_t nonce) {
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	f5ad 7d66 	sub.w	sp, sp, #920	@ 0x398
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	f507 7366 	add.w	r3, r7, #920	@ 0x398
 8007a28:	f5a3 7363 	sub.w	r3, r3, #908	@ 0x38c
 8007a2c:	6018      	str	r0, [r3, #0]
 8007a2e:	f507 7366 	add.w	r3, r7, #920	@ 0x398
 8007a32:	f5a3 7364 	sub.w	r3, r3, #912	@ 0x390
 8007a36:	6019      	str	r1, [r3, #0]
 8007a38:	f507 7366 	add.w	r3, r7, #920	@ 0x398
 8007a3c:	f2a3 3392 	subw	r3, r3, #914	@ 0x392
 8007a40:	801a      	strh	r2, [r3, #0]
    unsigned int i, ctr, off;
    unsigned int buflen = POLY_UNIFORM_NBLOCKS * STREAM128_BLOCKBYTES;
 8007a42:	f44f 7328 	mov.w	r3, #672	@ 0x2a0
 8007a46:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
    uint8_t buf[POLY_UNIFORM_NBLOCKS * STREAM128_BLOCKBYTES + 1];
    stream128_state state;

    stream128_init(&state, seed, nonce);
 8007a4a:	f507 7366 	add.w	r3, r7, #920	@ 0x398
 8007a4e:	f2a3 3392 	subw	r3, r3, #914	@ 0x392
 8007a52:	881a      	ldrh	r2, [r3, #0]
 8007a54:	f507 7366 	add.w	r3, r7, #920	@ 0x398
 8007a58:	f5a3 7364 	sub.w	r3, r3, #912	@ 0x390
 8007a5c:	f107 0010 	add.w	r0, r7, #16
 8007a60:	6819      	ldr	r1, [r3, #0]
 8007a62:	f005 fe21 	bl	800d6a8 <haetae_shake128_stream_init>
    stream128_squeezeblocks(buf, POLY_UNIFORM_NBLOCKS, &state);
 8007a66:	f107 0210 	add.w	r2, r7, #16
 8007a6a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8007a6e:	2104      	movs	r1, #4
 8007a70:	4618      	mov	r0, r3
 8007a72:	f005 fea7 	bl	800d7c4 <haetae_shake128_stream_squeezeblocks>

    ctr = rej_uniform_frozen(a->coeffs, N, buf, buflen);
 8007a76:	f507 7366 	add.w	r3, r7, #920	@ 0x398
 8007a7a:	f5a3 7363 	sub.w	r3, r3, #908	@ 0x38c
 8007a7e:	6818      	ldr	r0, [r3, #0]
 8007a80:	f107 02e4 	add.w	r2, r7, #228	@ 0xe4
 8007a84:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8007a88:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007a8c:	f003 fa1f 	bl	800aece <rej_uniform_frozen>
 8007a90:	f8c7 0390 	str.w	r0, [r7, #912]	@ 0x390

    while (ctr < N) {
 8007a94:	e053      	b.n	8007b3e <poly_uniform_frozen+0x122>
        off = buflen % 2;
 8007a96:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8007a9a:	f003 0301 	and.w	r3, r3, #1
 8007a9e:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
        for (i = 0; i < off; ++i)
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 8007aa8:	e01a      	b.n	8007ae0 <poly_uniform_frozen+0xc4>
            buf[i] = buf[buflen - off + i];
 8007aaa:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 8007aae:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 8007ab2:	1ad2      	subs	r2, r2, r3
 8007ab4:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8007ab8:	4413      	add	r3, r2
 8007aba:	f507 7266 	add.w	r2, r7, #920	@ 0x398
 8007abe:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 8007ac2:	5cd1      	ldrb	r1, [r2, r3]
 8007ac4:	f507 7366 	add.w	r3, r7, #920	@ 0x398
 8007ac8:	f5a3 722d 	sub.w	r2, r3, #692	@ 0x2b4
 8007acc:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8007ad0:	4413      	add	r3, r2
 8007ad2:	460a      	mov	r2, r1
 8007ad4:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < off; ++i)
 8007ad6:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8007ada:	3301      	adds	r3, #1
 8007adc:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 8007ae0:	f8d7 2394 	ldr.w	r2, [r7, #916]	@ 0x394
 8007ae4:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d3de      	bcc.n	8007aaa <poly_uniform_frozen+0x8e>

        stream128_squeezeblocks(buf + off, 1, &state);
 8007aec:	f107 02e4 	add.w	r2, r7, #228	@ 0xe4
 8007af0:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 8007af4:	4413      	add	r3, r2
 8007af6:	f107 0210 	add.w	r2, r7, #16
 8007afa:	2101      	movs	r1, #1
 8007afc:	4618      	mov	r0, r3
 8007afe:	f005 fe61 	bl	800d7c4 <haetae_shake128_stream_squeezeblocks>
        buflen = STREAM128_BLOCKBYTES + off;
 8007b02:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 8007b06:	33a8      	adds	r3, #168	@ 0xa8
 8007b08:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
        ctr += rej_uniform_frozen(a->coeffs + ctr, N - ctr, buf, buflen);
 8007b0c:	f507 7366 	add.w	r3, r7, #920	@ 0x398
 8007b10:	f5a3 7363 	sub.w	r3, r3, #908	@ 0x38c
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8007b1a:	005b      	lsls	r3, r3, #1
 8007b1c:	18d0      	adds	r0, r2, r3
 8007b1e:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8007b22:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 8007b26:	f107 02e4 	add.w	r2, r7, #228	@ 0xe4
 8007b2a:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8007b2e:	f003 f9ce 	bl	800aece <rej_uniform_frozen>
 8007b32:	4602      	mov	r2, r0
 8007b34:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8007b38:	4413      	add	r3, r2
 8007b3a:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
    while (ctr < N) {
 8007b3e:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8007b42:	2bff      	cmp	r3, #255	@ 0xff
 8007b44:	d9a7      	bls.n	8007a96 <poly_uniform_frozen+0x7a>
    }
}
 8007b46:	bf00      	nop
 8007b48:	bf00      	nop
 8007b4a:	f507 7766 	add.w	r7, r7, #920	@ 0x398
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}

08007b52 <poly_uniform_eta>:
#elif ETA == 2
#define POLY_UNIFORM_ETA_NBLOCKS                                               \
    ((136 + STREAM256_BLOCKBYTES - 1) / STREAM256_BLOCKBYTES)
#endif

void poly_uniform_eta(poly *a, const uint8_t seed[CRHBYTES], uint16_t nonce) {
 8007b52:	b580      	push	{r7, lr}
 8007b54:	b0dc      	sub	sp, #368	@ 0x170
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8007b5c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8007b60:	6018      	str	r0, [r3, #0]
 8007b62:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8007b66:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8007b6a:	6019      	str	r1, [r3, #0]
 8007b6c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8007b70:	f5a3 73b5 	sub.w	r3, r3, #362	@ 0x16a
 8007b74:	801a      	strh	r2, [r3, #0]
    unsigned int ctr;
    unsigned int buflen = POLY_UNIFORM_ETA_NBLOCKS * STREAM256_BLOCKBYTES;
 8007b76:	2388      	movs	r3, #136	@ 0x88
 8007b78:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    uint8_t buf[POLY_UNIFORM_ETA_NBLOCKS * STREAM256_BLOCKBYTES];
    stream256_state state;

    stream256_init(&state, seed, nonce);
 8007b7c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8007b80:	f5a3 73b5 	sub.w	r3, r3, #362	@ 0x16a
 8007b84:	881a      	ldrh	r2, [r3, #0]
 8007b86:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8007b8a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8007b8e:	f107 0010 	add.w	r0, r7, #16
 8007b92:	6819      	ldr	r1, [r3, #0]
 8007b94:	f005 fdad 	bl	800d6f2 <haetae_shake256_stream_init>
    stream256_squeezeblocks(buf, POLY_UNIFORM_ETA_NBLOCKS, &state);
 8007b98:	f107 0210 	add.w	r2, r7, #16
 8007b9c:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8007ba0:	2101      	movs	r1, #1
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f005 fe21 	bl	800d7ea <haetae_shake256_stream_squeezeblocks>

    ctr = rej_eta(a->coeffs, N, buf, buflen);
 8007ba8:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8007bac:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8007bb0:	6818      	ldr	r0, [r3, #0]
 8007bb2:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 8007bb6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8007bba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007bbe:	f003 fa3d 	bl	800b03c <rej_eta>
 8007bc2:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c

    while (ctr < N) {
 8007bc6:	e01f      	b.n	8007c08 <poly_uniform_eta+0xb6>
        stream256_squeezeblocks(buf, 1, &state);
 8007bc8:	f107 0210 	add.w	r2, r7, #16
 8007bcc:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8007bd0:	2101      	movs	r1, #1
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f005 fe09 	bl	800d7ea <haetae_shake256_stream_squeezeblocks>
        ctr += rej_eta(a->coeffs + ctr, N - ctr, buf, STREAM256_BLOCKBYTES);
 8007bd8:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8007bdc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	18d0      	adds	r0, r2, r3
 8007bea:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8007bee:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 8007bf2:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 8007bf6:	2388      	movs	r3, #136	@ 0x88
 8007bf8:	f003 fa20 	bl	800b03c <rej_eta>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8007c02:	4413      	add	r3, r2
 8007c04:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    while (ctr < N) {
 8007c08:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8007c0c:	2bff      	cmp	r3, #255	@ 0xff
 8007c0e:	d9db      	bls.n	8007bc8 <poly_uniform_eta+0x76>
    }
}
 8007c10:	bf00      	nop
 8007c12:	bf00      	nop
 8007c14:	f507 77b8 	add.w	r7, r7, #368	@ 0x170
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <poly_challenge>:
 * Arguments:   - poly *c: pointer to output polynomial
 *              - const uint8_t seed[]: byte array containing seed of length
 *                SEEDBYTES
 **************************************************/
void poly_challenge(poly *c, const uint8_t highbits_lsb[POLYVECK_HIGHBITS_PACKEDBYTES + 
                    POLYC_PACKEDBYTES], const uint8_t mu[SEEDBYTES]) {
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b0e0      	sub	sp, #384	@ 0x180
 8007c20:	af02      	add	r7, sp, #8
 8007c22:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8007c26:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8007c2a:	6018      	str	r0, [r3, #0]
 8007c2c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8007c30:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8007c34:	6019      	str	r1, [r3, #0]
 8007c36:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8007c3a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8007c3e:	601a      	str	r2, [r3, #0]
#if (HAETAE_MODE == 2) || (HAETAE_MODE == 3)
    unsigned int i, b, pos = 0;
 8007c40:	2300      	movs	r3, #0
 8007c42:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    uint8_t buf[XOF256_BLOCKBYTES];
    xof256_state state;

    // H(HighBits(A * y mod 2q), LSB(round(y0) * j), M)
    xof256_absorb_twice(&state, 
 8007c46:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8007c4a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8007c4e:	f507 72bc 	add.w	r2, r7, #376	@ 0x178
 8007c52:	f5a2 71b8 	sub.w	r1, r2, #368	@ 0x170
 8007c56:	f107 0010 	add.w	r0, r7, #16
 8007c5a:	2220      	movs	r2, #32
 8007c5c:	9200      	str	r2, [sp, #0]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f44f 7218 	mov.w	r2, #608	@ 0x260
 8007c64:	6809      	ldr	r1, [r1, #0]
 8007c66:	f005 fd69 	bl	800d73c <haetae_shake256_absorb_twice>
                        highbits_lsb, POLYVECK_HIGHBITS_PACKEDBYTES + POLYC_PACKEDBYTES, 
                        mu, SEEDBYTES);    
    xof256_squeezeblocks(buf, 1, &state);
 8007c6a:	f107 0210 	add.w	r2, r7, #16
 8007c6e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8007c72:	2101      	movs	r1, #1
 8007c74:	4618      	mov	r0, r3
 8007c76:	f005 fd91 	bl	800d79c <haetae_shake256_squeezeblocks>

    for (i = 0; i < N; ++i)
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8007c80:	e00e      	b.n	8007ca0 <poly_challenge+0x84>
        c->coeffs[i] = 0;
 8007c82:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8007c86:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8007c90:	2100      	movs	r1, #0
 8007c92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < N; ++i)
 8007c96:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8007ca0:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8007ca4:	2bff      	cmp	r3, #255	@ 0xff
 8007ca6:	d9ec      	bls.n	8007c82 <poly_challenge+0x66>
    for (i = N - TAU; i < N; ++i) {
 8007ca8:	23c6      	movs	r3, #198	@ 0xc6
 8007caa:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8007cae:	e041      	b.n	8007d34 <poly_challenge+0x118>
        do {
            if (pos >= XOF256_BLOCKBYTES) {
 8007cb0:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8007cb4:	2b87      	cmp	r3, #135	@ 0x87
 8007cb6:	d90a      	bls.n	8007cce <poly_challenge+0xb2>
                xof256_squeezeblocks(buf, 1, &state);
 8007cb8:	f107 0210 	add.w	r2, r7, #16
 8007cbc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8007cc0:	2101      	movs	r1, #1
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f005 fd6a 	bl	800d79c <haetae_shake256_squeezeblocks>
                pos = 0;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
            }

            b = buf[pos++];
 8007cce:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8007cd2:	1c5a      	adds	r2, r3, #1
 8007cd4:	f8c7 2170 	str.w	r2, [r7, #368]	@ 0x170
 8007cd8:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8007cdc:	443b      	add	r3, r7
 8007cde:	f813 3c94 	ldrb.w	r3, [r3, #-148]
 8007ce2:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
        } while (b > i);
 8007ce6:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8007cea:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d8de      	bhi.n	8007cb0 <poly_challenge+0x94>

        c->coeffs[i] = c->coeffs[b];
 8007cf2:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8007cf6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8007d00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d04:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8007d08:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8007d12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        c->coeffs[b] = 1;
 8007d16:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8007d1a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8007d24:	2101      	movs	r1, #1
 8007d26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = N - TAU; i < N; ++i) {
 8007d2a:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8007d2e:	3301      	adds	r3, #1
 8007d30:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8007d34:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8007d38:	2bff      	cmp	r3, #255	@ 0xff
 8007d3a:	d9b9      	bls.n	8007cb0 <poly_challenge+0x94>
        c->coeffs[8 * i + 5] = (buf[i] >> 5) & 1;
        c->coeffs[8 * i + 6] = (buf[i] >> 6) & 1;
        c->coeffs[8 * i + 7] = (buf[i] >> 7) & 1;
    }
#endif
}
 8007d3c:	bf00      	nop
 8007d3e:	bf00      	nop
 8007d40:	f507 77bc 	add.w	r7, r7, #376	@ 0x178
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <poly_decomposed_pack>:

void poly_decomposed_pack(uint8_t *buf, const poly *a) {
 8007d48:	b480      	push	{r7}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
    unsigned int i;
    for (i = 0; i < N; i++) {
 8007d52:	2300      	movs	r3, #0
 8007d54:	60fb      	str	r3, [r7, #12]
 8007d56:	e00b      	b.n	8007d70 <poly_decomposed_pack+0x28>
        buf[i] = a->coeffs[i];
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	4413      	add	r3, r2
 8007d66:	b2ca      	uxtb	r2, r1
 8007d68:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < N; i++) {
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	60fb      	str	r3, [r7, #12]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2bff      	cmp	r3, #255	@ 0xff
 8007d74:	d9f0      	bls.n	8007d58 <poly_decomposed_pack+0x10>
    }
}
 8007d76:	bf00      	nop
 8007d78:	bf00      	nop
 8007d7a:	3714      	adds	r7, #20
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr

08007d84 <poly_decomposed_unpack>:

void poly_decomposed_unpack(poly *a, const uint8_t *buf) {
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
    unsigned int i;
    for (i = 0; i < N; i++) {
 8007d8e:	2300      	movs	r3, #0
 8007d90:	60fb      	str	r3, [r7, #12]
 8007d92:	e00c      	b.n	8007dae <poly_decomposed_unpack+0x2a>
        a->coeffs[i] = (int8_t)buf[i];
 8007d94:	683a      	ldr	r2, [r7, #0]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	4413      	add	r3, r2
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	b25b      	sxtb	r3, r3
 8007d9e:	4619      	mov	r1, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < N; i++) {
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	3301      	adds	r3, #1
 8007dac:	60fb      	str	r3, [r7, #12]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2bff      	cmp	r3, #255	@ 0xff
 8007db2:	d9ef      	bls.n	8007d94 <poly_decomposed_unpack+0x10>
    }
}
 8007db4:	bf00      	nop
 8007db6:	bf00      	nop
 8007db8:	3714      	adds	r7, #20
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr

08007dc2 <poly_caddDQ2ALPHA>:

void poly_caddDQ2ALPHA(poly *h) {
 8007dc2:	b480      	push	{r7}
 8007dc4:	b085      	sub	sp, #20
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
    unsigned int j;
    for (j = 0; j < N; j++) {
 8007dca:	2300      	movs	r3, #0
 8007dcc:	60fb      	str	r3, [r7, #12]
 8007dce:	e012      	b.n	8007df6 <poly_caddDQ2ALPHA+0x34>
        h->coeffs[j] +=
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	68fa      	ldr	r2, [r7, #12]
 8007dd4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
            (h->coeffs[j] >> 31) & ((DQ - 2) / ALPHA_HINT);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	68f9      	ldr	r1, [r7, #12]
 8007ddc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007de0:	17db      	asrs	r3, r3, #31
 8007de2:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
        h->coeffs[j] +=
 8007de6:	18d1      	adds	r1, r2, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (j = 0; j < N; j++) {
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	3301      	adds	r3, #1
 8007df4:	60fb      	str	r3, [r7, #12]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2bff      	cmp	r3, #255	@ 0xff
 8007dfa:	d9e9      	bls.n	8007dd0 <poly_caddDQ2ALPHA+0xe>
    }
}
 8007dfc:	bf00      	nop
 8007dfe:	bf00      	nop
 8007e00:	3714      	adds	r7, #20
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr

08007e0a <poly_highbits_hint>:

void poly_highbits_hint(poly *w, const poly *v) {
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b084      	sub	sp, #16
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
 8007e12:	6039      	str	r1, [r7, #0]
    unsigned int j;
    for (j = 0; j < N; j++) {
 8007e14:	2300      	movs	r3, #0
 8007e16:	60fb      	str	r3, [r7, #12]
 8007e18:	e00d      	b.n	8007e36 <poly_highbits_hint+0x2c>
        decompose_hint(&w->coeffs[j], v->coeffs[j]);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	18d0      	adds	r0, r2, r3
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	68fa      	ldr	r2, [r7, #12]
 8007e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	f7f9 fc68 	bl	8001700 <decompose_hint>
    for (j = 0; j < N; j++) {
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	3301      	adds	r3, #1
 8007e34:	60fb      	str	r3, [r7, #12]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2bff      	cmp	r3, #255	@ 0xff
 8007e3a:	d9ee      	bls.n	8007e1a <poly_highbits_hint+0x10>
    }
}
 8007e3c:	bf00      	nop
 8007e3e:	bf00      	nop
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <poly_pack_highbits>:

void poly_pack_highbits(uint8_t *buf, const poly *a) {
 8007e46:	b480      	push	{r7}
 8007e48:	b085      	sub	sp, #20
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
 8007e4e:	6039      	str	r1, [r7, #0]
    unsigned int i;
    for (i = 0; i < N / 8; i++) {
 8007e50:	2300      	movs	r3, #0
 8007e52:	60fb      	str	r3, [r7, #12]
 8007e54:	e167      	b.n	8008126 <poly_pack_highbits+0x2e0>
        buf[9 * i + 0] = a->coeffs[8 * i + 0] & 0xff;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	00da      	lsls	r2, r3, #3
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	4613      	mov	r3, r2
 8007e64:	00db      	lsls	r3, r3, #3
 8007e66:	4413      	add	r3, r2
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	4413      	add	r3, r2
 8007e6c:	b2ca      	uxtb	r2, r1
 8007e6e:	701a      	strb	r2, [r3, #0]

        buf[9 * i + 1] = (a->coeffs[8 * i + 0] >> 8) & 0x01;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	00da      	lsls	r2, r3, #3
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e7a:	121b      	asrs	r3, r3, #8
 8007e7c:	b2d9      	uxtb	r1, r3
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	4613      	mov	r3, r2
 8007e82:	00db      	lsls	r3, r3, #3
 8007e84:	4413      	add	r3, r2
 8007e86:	3301      	adds	r3, #1
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	4413      	add	r3, r2
 8007e8c:	f001 0201 	and.w	r2, r1, #1
 8007e90:	b2d2      	uxtb	r2, r2
 8007e92:	701a      	strb	r2, [r3, #0]
        buf[9 * i + 1] |= (a->coeffs[8 * i + 1] << 1) & 0xff;
 8007e94:	68fa      	ldr	r2, [r7, #12]
 8007e96:	4613      	mov	r3, r2
 8007e98:	00db      	lsls	r3, r3, #3
 8007e9a:	4413      	add	r3, r2
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	b25a      	sxtb	r2, r3
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	00db      	lsls	r3, r3, #3
 8007eaa:	1c59      	adds	r1, r3, #1
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007eb2:	005b      	lsls	r3, r3, #1
 8007eb4:	b25b      	sxtb	r3, r3
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	b259      	sxtb	r1, r3
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	4613      	mov	r3, r2
 8007ebe:	00db      	lsls	r3, r3, #3
 8007ec0:	4413      	add	r3, r2
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	b2ca      	uxtb	r2, r1
 8007eca:	701a      	strb	r2, [r3, #0]

        buf[9 * i + 2] = (a->coeffs[8 * i + 1] >> 7) & 0x03;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	00db      	lsls	r3, r3, #3
 8007ed0:	1c5a      	adds	r2, r3, #1
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ed8:	11db      	asrs	r3, r3, #7
 8007eda:	b2d9      	uxtb	r1, r3
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	4613      	mov	r3, r2
 8007ee0:	00db      	lsls	r3, r3, #3
 8007ee2:	4413      	add	r3, r2
 8007ee4:	3302      	adds	r3, #2
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	4413      	add	r3, r2
 8007eea:	f001 0203 	and.w	r2, r1, #3
 8007eee:	b2d2      	uxtb	r2, r2
 8007ef0:	701a      	strb	r2, [r3, #0]
        buf[9 * i + 2] |= (a->coeffs[8 * i + 2] << 2) & 0xff;
 8007ef2:	68fa      	ldr	r2, [r7, #12]
 8007ef4:	4613      	mov	r3, r2
 8007ef6:	00db      	lsls	r3, r3, #3
 8007ef8:	4413      	add	r3, r2
 8007efa:	3302      	adds	r3, #2
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	4413      	add	r3, r2
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	b25a      	sxtb	r2, r3
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	00db      	lsls	r3, r3, #3
 8007f08:	1c99      	adds	r1, r3, #2
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	b25b      	sxtb	r3, r3
 8007f14:	4313      	orrs	r3, r2
 8007f16:	b259      	sxtb	r1, r3
 8007f18:	68fa      	ldr	r2, [r7, #12]
 8007f1a:	4613      	mov	r3, r2
 8007f1c:	00db      	lsls	r3, r3, #3
 8007f1e:	4413      	add	r3, r2
 8007f20:	3302      	adds	r3, #2
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	4413      	add	r3, r2
 8007f26:	b2ca      	uxtb	r2, r1
 8007f28:	701a      	strb	r2, [r3, #0]

        buf[9 * i + 3] = (a->coeffs[8 * i + 2] >> 6) & 0x07;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	00db      	lsls	r3, r3, #3
 8007f2e:	1c9a      	adds	r2, r3, #2
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f36:	119b      	asrs	r3, r3, #6
 8007f38:	b2d9      	uxtb	r1, r3
 8007f3a:	68fa      	ldr	r2, [r7, #12]
 8007f3c:	4613      	mov	r3, r2
 8007f3e:	00db      	lsls	r3, r3, #3
 8007f40:	4413      	add	r3, r2
 8007f42:	3303      	adds	r3, #3
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	4413      	add	r3, r2
 8007f48:	f001 0207 	and.w	r2, r1, #7
 8007f4c:	b2d2      	uxtb	r2, r2
 8007f4e:	701a      	strb	r2, [r3, #0]
        buf[9 * i + 3] |= (a->coeffs[8 * i + 3] << 3) & 0xff;
 8007f50:	68fa      	ldr	r2, [r7, #12]
 8007f52:	4613      	mov	r3, r2
 8007f54:	00db      	lsls	r3, r3, #3
 8007f56:	4413      	add	r3, r2
 8007f58:	3303      	adds	r3, #3
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	b25a      	sxtb	r2, r3
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	00db      	lsls	r3, r3, #3
 8007f66:	1cd9      	adds	r1, r3, #3
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007f6e:	00db      	lsls	r3, r3, #3
 8007f70:	b25b      	sxtb	r3, r3
 8007f72:	4313      	orrs	r3, r2
 8007f74:	b259      	sxtb	r1, r3
 8007f76:	68fa      	ldr	r2, [r7, #12]
 8007f78:	4613      	mov	r3, r2
 8007f7a:	00db      	lsls	r3, r3, #3
 8007f7c:	4413      	add	r3, r2
 8007f7e:	3303      	adds	r3, #3
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	4413      	add	r3, r2
 8007f84:	b2ca      	uxtb	r2, r1
 8007f86:	701a      	strb	r2, [r3, #0]

        buf[9 * i + 4] = (a->coeffs[8 * i + 3] >> 5) & 0x0f;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	00db      	lsls	r3, r3, #3
 8007f8c:	1cda      	adds	r2, r3, #3
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f94:	115b      	asrs	r3, r3, #5
 8007f96:	b2d9      	uxtb	r1, r3
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	00db      	lsls	r3, r3, #3
 8007f9e:	4413      	add	r3, r2
 8007fa0:	3304      	adds	r3, #4
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	4413      	add	r3, r2
 8007fa6:	f001 020f 	and.w	r2, r1, #15
 8007faa:	b2d2      	uxtb	r2, r2
 8007fac:	701a      	strb	r2, [r3, #0]
        buf[9 * i + 4] |= (a->coeffs[8 * i + 4] << 4) & 0xff;
 8007fae:	68fa      	ldr	r2, [r7, #12]
 8007fb0:	4613      	mov	r3, r2
 8007fb2:	00db      	lsls	r3, r3, #3
 8007fb4:	4413      	add	r3, r2
 8007fb6:	3304      	adds	r3, #4
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	4413      	add	r3, r2
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	b25a      	sxtb	r2, r3
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	00db      	lsls	r3, r3, #3
 8007fc4:	1d19      	adds	r1, r3, #4
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007fcc:	011b      	lsls	r3, r3, #4
 8007fce:	b25b      	sxtb	r3, r3
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	b259      	sxtb	r1, r3
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	00db      	lsls	r3, r3, #3
 8007fda:	4413      	add	r3, r2
 8007fdc:	3304      	adds	r3, #4
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	b2ca      	uxtb	r2, r1
 8007fe4:	701a      	strb	r2, [r3, #0]

        buf[9 * i + 5] = (a->coeffs[8 * i + 4] >> 4) & 0x1f;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	00db      	lsls	r3, r3, #3
 8007fea:	1d1a      	adds	r2, r3, #4
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ff2:	111b      	asrs	r3, r3, #4
 8007ff4:	b2d9      	uxtb	r1, r3
 8007ff6:	68fa      	ldr	r2, [r7, #12]
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	00db      	lsls	r3, r3, #3
 8007ffc:	4413      	add	r3, r2
 8007ffe:	3305      	adds	r3, #5
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	4413      	add	r3, r2
 8008004:	f001 021f 	and.w	r2, r1, #31
 8008008:	b2d2      	uxtb	r2, r2
 800800a:	701a      	strb	r2, [r3, #0]
        buf[9 * i + 5] |= (a->coeffs[8 * i + 5] << 5) & 0xff;
 800800c:	68fa      	ldr	r2, [r7, #12]
 800800e:	4613      	mov	r3, r2
 8008010:	00db      	lsls	r3, r3, #3
 8008012:	4413      	add	r3, r2
 8008014:	3305      	adds	r3, #5
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	4413      	add	r3, r2
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	b25a      	sxtb	r2, r3
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	00db      	lsls	r3, r3, #3
 8008022:	1d59      	adds	r1, r3, #5
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800802a:	015b      	lsls	r3, r3, #5
 800802c:	b25b      	sxtb	r3, r3
 800802e:	4313      	orrs	r3, r2
 8008030:	b259      	sxtb	r1, r3
 8008032:	68fa      	ldr	r2, [r7, #12]
 8008034:	4613      	mov	r3, r2
 8008036:	00db      	lsls	r3, r3, #3
 8008038:	4413      	add	r3, r2
 800803a:	3305      	adds	r3, #5
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	4413      	add	r3, r2
 8008040:	b2ca      	uxtb	r2, r1
 8008042:	701a      	strb	r2, [r3, #0]

        buf[9 * i + 6] = (a->coeffs[8 * i + 5] >> 3) & 0x3f;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	00db      	lsls	r3, r3, #3
 8008048:	1d5a      	adds	r2, r3, #5
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008050:	10db      	asrs	r3, r3, #3
 8008052:	b2d9      	uxtb	r1, r3
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	4613      	mov	r3, r2
 8008058:	00db      	lsls	r3, r3, #3
 800805a:	4413      	add	r3, r2
 800805c:	3306      	adds	r3, #6
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	4413      	add	r3, r2
 8008062:	f001 023f 	and.w	r2, r1, #63	@ 0x3f
 8008066:	b2d2      	uxtb	r2, r2
 8008068:	701a      	strb	r2, [r3, #0]
        buf[9 * i + 6] |= (a->coeffs[8 * i + 6] << 6) & 0xff;
 800806a:	68fa      	ldr	r2, [r7, #12]
 800806c:	4613      	mov	r3, r2
 800806e:	00db      	lsls	r3, r3, #3
 8008070:	4413      	add	r3, r2
 8008072:	3306      	adds	r3, #6
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	4413      	add	r3, r2
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	b25a      	sxtb	r2, r3
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	00db      	lsls	r3, r3, #3
 8008080:	1d99      	adds	r1, r3, #6
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008088:	019b      	lsls	r3, r3, #6
 800808a:	b25b      	sxtb	r3, r3
 800808c:	4313      	orrs	r3, r2
 800808e:	b259      	sxtb	r1, r3
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	4613      	mov	r3, r2
 8008094:	00db      	lsls	r3, r3, #3
 8008096:	4413      	add	r3, r2
 8008098:	3306      	adds	r3, #6
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	4413      	add	r3, r2
 800809e:	b2ca      	uxtb	r2, r1
 80080a0:	701a      	strb	r2, [r3, #0]

        buf[9 * i + 7] = (a->coeffs[8 * i + 6] >> 2) & 0x7f;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	00db      	lsls	r3, r3, #3
 80080a6:	1d9a      	adds	r2, r3, #6
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ae:	109b      	asrs	r3, r3, #2
 80080b0:	b2d9      	uxtb	r1, r3
 80080b2:	68fa      	ldr	r2, [r7, #12]
 80080b4:	4613      	mov	r3, r2
 80080b6:	00db      	lsls	r3, r3, #3
 80080b8:	4413      	add	r3, r2
 80080ba:	3307      	adds	r3, #7
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	4413      	add	r3, r2
 80080c0:	f001 027f 	and.w	r2, r1, #127	@ 0x7f
 80080c4:	b2d2      	uxtb	r2, r2
 80080c6:	701a      	strb	r2, [r3, #0]
        buf[9 * i + 7] |= (a->coeffs[8 * i + 7] << 7) & 0xff;
 80080c8:	68fa      	ldr	r2, [r7, #12]
 80080ca:	4613      	mov	r3, r2
 80080cc:	00db      	lsls	r3, r3, #3
 80080ce:	4413      	add	r3, r2
 80080d0:	3307      	adds	r3, #7
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	4413      	add	r3, r2
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	b25a      	sxtb	r2, r3
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	00db      	lsls	r3, r3, #3
 80080de:	1dd9      	adds	r1, r3, #7
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80080e6:	01db      	lsls	r3, r3, #7
 80080e8:	b25b      	sxtb	r3, r3
 80080ea:	4313      	orrs	r3, r2
 80080ec:	b259      	sxtb	r1, r3
 80080ee:	68fa      	ldr	r2, [r7, #12]
 80080f0:	4613      	mov	r3, r2
 80080f2:	00db      	lsls	r3, r3, #3
 80080f4:	4413      	add	r3, r2
 80080f6:	3307      	adds	r3, #7
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	4413      	add	r3, r2
 80080fc:	b2ca      	uxtb	r2, r1
 80080fe:	701a      	strb	r2, [r3, #0]

        buf[9 * i + 8] = (a->coeffs[8 * i + 7] >> 1) & 0xff;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	00db      	lsls	r3, r3, #3
 8008104:	1dda      	adds	r2, r3, #7
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800810c:	1059      	asrs	r1, r3, #1
 800810e:	68fa      	ldr	r2, [r7, #12]
 8008110:	4613      	mov	r3, r2
 8008112:	00db      	lsls	r3, r3, #3
 8008114:	4413      	add	r3, r2
 8008116:	3308      	adds	r3, #8
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	4413      	add	r3, r2
 800811c:	b2ca      	uxtb	r2, r1
 800811e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < N / 8; i++) {
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	3301      	adds	r3, #1
 8008124:	60fb      	str	r3, [r7, #12]
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2b1f      	cmp	r3, #31
 800812a:	f67f ae94 	bls.w	8007e56 <poly_pack_highbits+0x10>
    }
}
 800812e:	bf00      	nop
 8008130:	bf00      	nop
 8008132:	3714      	adds	r7, #20
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <poly_pack_lsb>:

void poly_pack_lsb(uint8_t *buf, const poly *a) {
 800813c:	b480      	push	{r7}
 800813e:	b085      	sub	sp, #20
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
    unsigned int i;
    for (i = 0; i < N; i++) {
 8008146:	2300      	movs	r3, #0
 8008148:	60fb      	str	r3, [r7, #12]
 800814a:	e025      	b.n	8008198 <poly_pack_lsb+0x5c>
        if ((i % 8) == 0) {
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f003 0307 	and.w	r3, r3, #7
 8008152:	2b00      	cmp	r3, #0
 8008154:	d105      	bne.n	8008162 <poly_pack_lsb+0x26>
            buf[i / 8] = 0;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	08db      	lsrs	r3, r3, #3
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	4413      	add	r3, r2
 800815e:	2200      	movs	r2, #0
 8008160:	701a      	strb	r2, [r3, #0]
        }
        buf[i / 8] |= (a->coeffs[i] & 1) << (i % 8);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	08db      	lsrs	r3, r3, #3
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	441a      	add	r2, r3
 800816a:	7812      	ldrb	r2, [r2, #0]
 800816c:	b251      	sxtb	r1, r2
 800816e:	683a      	ldr	r2, [r7, #0]
 8008170:	68f8      	ldr	r0, [r7, #12]
 8008172:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8008176:	f002 0001 	and.w	r0, r2, #1
 800817a:	68fa      	ldr	r2, [r7, #12]
 800817c:	f002 0207 	and.w	r2, r2, #7
 8008180:	fa00 f202 	lsl.w	r2, r0, r2
 8008184:	b252      	sxtb	r2, r2
 8008186:	430a      	orrs	r2, r1
 8008188:	b251      	sxtb	r1, r2
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	4413      	add	r3, r2
 800818e:	b2ca      	uxtb	r2, r1
 8008190:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < N; i++) {
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	3301      	adds	r3, #1
 8008196:	60fb      	str	r3, [r7, #12]
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2bff      	cmp	r3, #255	@ 0xff
 800819c:	d9d6      	bls.n	800814c <poly_pack_lsb+0x10>
    }
}
 800819e:	bf00      	nop
 80081a0:	bf00      	nop
 80081a2:	3714      	adds	r7, #20
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <polyq_pack>:
 *
 * Arguments:   - uint8_t *r: pointer to output byte array with at least
 *                            POLYQ_PACKEDBYTES bytes
 *              - const poly *a: pointer to input polynomial
 **************************************************/
void polyq_pack(uint8_t *r, const poly *a) {
 80081ac:	b480      	push	{r7}
 80081ae:	b087      	sub	sp, #28
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
    unsigned int i;
#if D == 1
    int b_idx = 0, d_idx = 0;
 80081b6:	2300      	movs	r3, #0
 80081b8:	613b      	str	r3, [r7, #16]
 80081ba:	2300      	movs	r3, #0
 80081bc:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < (N >> 3); ++i) {
 80081be:	2300      	movs	r3, #0
 80081c0:	617b      	str	r3, [r7, #20]
 80081c2:	e115      	b.n	80083f0 <polyq_pack+0x244>
        b_idx = 15 * i;
 80081c4:	697a      	ldr	r2, [r7, #20]
 80081c6:	4613      	mov	r3, r2
 80081c8:	011b      	lsls	r3, r3, #4
 80081ca:	1a9b      	subs	r3, r3, r2
 80081cc:	613b      	str	r3, [r7, #16]
        d_idx = 8 * i;
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	00db      	lsls	r3, r3, #3
 80081d2:	60fb      	str	r3, [r7, #12]

        r[b_idx] = (a->coeffs[d_idx] & 0xff);
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	68fa      	ldr	r2, [r7, #12]
 80081d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	4413      	add	r3, r2
 80081e2:	b2ca      	uxtb	r2, r1
 80081e4:	701a      	strb	r2, [r3, #0]
        r[b_idx + 1] = ((a->coeffs[d_idx] >> 8) & 0x7f) |
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	68fa      	ldr	r2, [r7, #12]
 80081ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ee:	121b      	asrs	r3, r3, #8
 80081f0:	b25b      	sxtb	r3, r3
 80081f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081f6:	b25a      	sxtb	r2, r3
                       ((a->coeffs[d_idx + 1] & 0x1) << 7);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	1c59      	adds	r1, r3, #1
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008202:	01db      	lsls	r3, r3, #7
        r[b_idx + 1] = ((a->coeffs[d_idx] >> 8) & 0x7f) |
 8008204:	b25b      	sxtb	r3, r3
 8008206:	4313      	orrs	r3, r2
 8008208:	b259      	sxtb	r1, r3
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	3301      	adds	r3, #1
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	4413      	add	r3, r2
 8008212:	b2ca      	uxtb	r2, r1
 8008214:	701a      	strb	r2, [r3, #0]
        r[b_idx + 2] = ((a->coeffs[d_idx + 1] >> 1) & 0xff);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	1c5a      	adds	r2, r3, #1
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008220:	1059      	asrs	r1, r3, #1
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	3302      	adds	r3, #2
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	4413      	add	r3, r2
 800822a:	b2ca      	uxtb	r2, r1
 800822c:	701a      	strb	r2, [r3, #0]
        r[b_idx + 3] = ((a->coeffs[d_idx + 1] >> 9) & 0x3f) |
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	1c5a      	adds	r2, r3, #1
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008238:	125b      	asrs	r3, r3, #9
 800823a:	b25b      	sxtb	r3, r3
 800823c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008240:	b25a      	sxtb	r2, r3
                       ((a->coeffs[d_idx + 2] & 0x3) << 6);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	1c99      	adds	r1, r3, #2
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800824c:	019b      	lsls	r3, r3, #6
        r[b_idx + 3] = ((a->coeffs[d_idx + 1] >> 9) & 0x3f) |
 800824e:	b25b      	sxtb	r3, r3
 8008250:	4313      	orrs	r3, r2
 8008252:	b259      	sxtb	r1, r3
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	3303      	adds	r3, #3
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	4413      	add	r3, r2
 800825c:	b2ca      	uxtb	r2, r1
 800825e:	701a      	strb	r2, [r3, #0]
        r[b_idx + 4] = ((a->coeffs[d_idx + 2] >> 2) & 0xff);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	1c9a      	adds	r2, r3, #2
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800826a:	1099      	asrs	r1, r3, #2
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	3304      	adds	r3, #4
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	4413      	add	r3, r2
 8008274:	b2ca      	uxtb	r2, r1
 8008276:	701a      	strb	r2, [r3, #0]
        r[b_idx + 5] = ((a->coeffs[d_idx + 2] >> 10) & 0x1f) |
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	1c9a      	adds	r2, r3, #2
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008282:	129b      	asrs	r3, r3, #10
 8008284:	b25b      	sxtb	r3, r3
 8008286:	f003 031f 	and.w	r3, r3, #31
 800828a:	b25a      	sxtb	r2, r3
                       ((a->coeffs[d_idx + 3] & 0x7) << 5);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	1cd9      	adds	r1, r3, #3
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008296:	015b      	lsls	r3, r3, #5
        r[b_idx + 5] = ((a->coeffs[d_idx + 2] >> 10) & 0x1f) |
 8008298:	b25b      	sxtb	r3, r3
 800829a:	4313      	orrs	r3, r2
 800829c:	b259      	sxtb	r1, r3
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	3305      	adds	r3, #5
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	4413      	add	r3, r2
 80082a6:	b2ca      	uxtb	r2, r1
 80082a8:	701a      	strb	r2, [r3, #0]
        r[b_idx + 6] = ((a->coeffs[d_idx + 3] >> 3) & 0xff);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	1cda      	adds	r2, r3, #3
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082b4:	10d9      	asrs	r1, r3, #3
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	3306      	adds	r3, #6
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	4413      	add	r3, r2
 80082be:	b2ca      	uxtb	r2, r1
 80082c0:	701a      	strb	r2, [r3, #0]
        r[b_idx + 7] = ((a->coeffs[d_idx + 3] >> 11) & 0xf) |
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	1cda      	adds	r2, r3, #3
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082cc:	12db      	asrs	r3, r3, #11
 80082ce:	b25b      	sxtb	r3, r3
 80082d0:	f003 030f 	and.w	r3, r3, #15
 80082d4:	b25a      	sxtb	r2, r3
                       ((a->coeffs[d_idx + 4] & 0xf) << 4);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	1d19      	adds	r1, r3, #4
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80082e0:	011b      	lsls	r3, r3, #4
        r[b_idx + 7] = ((a->coeffs[d_idx + 3] >> 11) & 0xf) |
 80082e2:	b25b      	sxtb	r3, r3
 80082e4:	4313      	orrs	r3, r2
 80082e6:	b259      	sxtb	r1, r3
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	3307      	adds	r3, #7
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	4413      	add	r3, r2
 80082f0:	b2ca      	uxtb	r2, r1
 80082f2:	701a      	strb	r2, [r3, #0]
        r[b_idx + 8] = ((a->coeffs[d_idx + 4] >> 4) & 0xff);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	1d1a      	adds	r2, r3, #4
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082fe:	1119      	asrs	r1, r3, #4
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	3308      	adds	r3, #8
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	4413      	add	r3, r2
 8008308:	b2ca      	uxtb	r2, r1
 800830a:	701a      	strb	r2, [r3, #0]
        r[b_idx + 9] = ((a->coeffs[d_idx + 4] >> 12) & 0x7) |
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	1d1a      	adds	r2, r3, #4
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008316:	131b      	asrs	r3, r3, #12
 8008318:	b25b      	sxtb	r3, r3
 800831a:	f003 0307 	and.w	r3, r3, #7
 800831e:	b25a      	sxtb	r2, r3
                       ((a->coeffs[d_idx + 5] & 0x1f) << 3);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	1d59      	adds	r1, r3, #5
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800832a:	00db      	lsls	r3, r3, #3
        r[b_idx + 9] = ((a->coeffs[d_idx + 4] >> 12) & 0x7) |
 800832c:	b25b      	sxtb	r3, r3
 800832e:	4313      	orrs	r3, r2
 8008330:	b259      	sxtb	r1, r3
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	3309      	adds	r3, #9
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	4413      	add	r3, r2
 800833a:	b2ca      	uxtb	r2, r1
 800833c:	701a      	strb	r2, [r3, #0]
        r[b_idx + 10] = ((a->coeffs[d_idx + 5] >> 5) & 0xff);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	1d5a      	adds	r2, r3, #5
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008348:	1159      	asrs	r1, r3, #5
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	330a      	adds	r3, #10
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	4413      	add	r3, r2
 8008352:	b2ca      	uxtb	r2, r1
 8008354:	701a      	strb	r2, [r3, #0]
        r[b_idx + 11] = ((a->coeffs[d_idx + 5] >> 13) & 0x3) |
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	1d5a      	adds	r2, r3, #5
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008360:	135b      	asrs	r3, r3, #13
 8008362:	b25b      	sxtb	r3, r3
 8008364:	f003 0303 	and.w	r3, r3, #3
 8008368:	b25a      	sxtb	r2, r3
                        ((a->coeffs[d_idx + 6] & 0x3f) << 2);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	1d99      	adds	r1, r3, #6
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008374:	009b      	lsls	r3, r3, #2
        r[b_idx + 11] = ((a->coeffs[d_idx + 5] >> 13) & 0x3) |
 8008376:	b25b      	sxtb	r3, r3
 8008378:	4313      	orrs	r3, r2
 800837a:	b259      	sxtb	r1, r3
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	330b      	adds	r3, #11
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	4413      	add	r3, r2
 8008384:	b2ca      	uxtb	r2, r1
 8008386:	701a      	strb	r2, [r3, #0]
        r[b_idx + 12] = ((a->coeffs[d_idx + 6] >> 6) & 0xff);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	1d9a      	adds	r2, r3, #6
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008392:	1199      	asrs	r1, r3, #6
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	330c      	adds	r3, #12
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	4413      	add	r3, r2
 800839c:	b2ca      	uxtb	r2, r1
 800839e:	701a      	strb	r2, [r3, #0]
        r[b_idx + 13] = ((a->coeffs[d_idx + 6] >> 14) & 0x1) |
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	1d9a      	adds	r2, r3, #6
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083aa:	139b      	asrs	r3, r3, #14
 80083ac:	b25b      	sxtb	r3, r3
 80083ae:	f003 0301 	and.w	r3, r3, #1
 80083b2:	b25a      	sxtb	r2, r3
                        (a->coeffs[d_idx + 7] & 0x7f) << 1;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	1dd9      	adds	r1, r3, #7
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80083be:	005b      	lsls	r3, r3, #1
        r[b_idx + 13] = ((a->coeffs[d_idx + 6] >> 14) & 0x1) |
 80083c0:	b25b      	sxtb	r3, r3
 80083c2:	4313      	orrs	r3, r2
 80083c4:	b259      	sxtb	r1, r3
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	330d      	adds	r3, #13
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	4413      	add	r3, r2
 80083ce:	b2ca      	uxtb	r2, r1
 80083d0:	701a      	strb	r2, [r3, #0]
        r[b_idx + 14] = ((a->coeffs[d_idx + 7] >> 7) & 0xff);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	1dda      	adds	r2, r3, #7
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083dc:	11d9      	asrs	r1, r3, #7
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	330e      	adds	r3, #14
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	4413      	add	r3, r2
 80083e6:	b2ca      	uxtb	r2, r1
 80083e8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (N >> 3); ++i) {
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	3301      	adds	r3, #1
 80083ee:	617b      	str	r3, [r7, #20]
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	2b1f      	cmp	r3, #31
 80083f4:	f67f aee6 	bls.w	80081c4 <polyq_pack+0x18>
    for (i = 0; i < N / 1; ++i) {
        r[2 * i + 0] = a->coeffs[1 * i + 0] >> 0;
        r[2 * i + 1] = a->coeffs[1 * i + 0] >> 8;
    }
#endif
}
 80083f8:	bf00      	nop
 80083fa:	bf00      	nop
 80083fc:	371c      	adds	r7, #28
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr

08008406 <polyq_unpack>:
 * Description: Unpack polynomial with coefficients in [0, Q - 1].
 *
 * Arguments:   - poly *r: pointer to output polynomial
 *              - const uint8_t *a: byte array with bit-packed polynomial
 **************************************************/
void polyq_unpack(poly *r, const uint8_t *a) {
 8008406:	b480      	push	{r7}
 8008408:	b087      	sub	sp, #28
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
 800840e:	6039      	str	r1, [r7, #0]
    unsigned int i;
#if D == 1
    int b_idx = 0, d_idx = 0;
 8008410:	2300      	movs	r3, #0
 8008412:	613b      	str	r3, [r7, #16]
 8008414:	2300      	movs	r3, #0
 8008416:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < (N >> 3); ++i) {
 8008418:	2300      	movs	r3, #0
 800841a:	617b      	str	r3, [r7, #20]
 800841c:	e0eb      	b.n	80085f6 <polyq_unpack+0x1f0>
        b_idx = 15 * i;
 800841e:	697a      	ldr	r2, [r7, #20]
 8008420:	4613      	mov	r3, r2
 8008422:	011b      	lsls	r3, r3, #4
 8008424:	1a9b      	subs	r3, r3, r2
 8008426:	613b      	str	r3, [r7, #16]
        d_idx = 8 * i;
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	00db      	lsls	r3, r3, #3
 800842c:	60fb      	str	r3, [r7, #12]

        r->coeffs[d_idx] = (a[b_idx] & 0xff) | ((a[b_idx + 1] & 0x7f) << 8);
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	683a      	ldr	r2, [r7, #0]
 8008432:	4413      	add	r3, r2
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	4619      	mov	r1, r3
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	3301      	adds	r3, #1
 800843c:	683a      	ldr	r2, [r7, #0]
 800843e:	4413      	add	r3, r2
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	021b      	lsls	r3, r3, #8
 8008444:	f403 43fe 	and.w	r3, r3, #32512	@ 0x7f00
 8008448:	4319      	orrs	r1, r3
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        r->coeffs[d_idx + 1] = ((a[b_idx + 1] >> 7) & 0x1) |
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	3301      	adds	r3, #1
 8008456:	683a      	ldr	r2, [r7, #0]
 8008458:	4413      	add	r3, r2
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	09db      	lsrs	r3, r3, #7
 800845e:	b2db      	uxtb	r3, r3
 8008460:	f003 0201 	and.w	r2, r3, #1
                               ((a[b_idx + 2] & 0xff) << 1) |
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	3302      	adds	r3, #2
 8008468:	6839      	ldr	r1, [r7, #0]
 800846a:	440b      	add	r3, r1
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	005b      	lsls	r3, r3, #1
        r->coeffs[d_idx + 1] = ((a[b_idx + 1] >> 7) & 0x1) |
 8008470:	ea42 0103 	orr.w	r1, r2, r3
                               ((a[b_idx + 3] & 0x3f) << 9);
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	3303      	adds	r3, #3
 8008478:	683a      	ldr	r2, [r7, #0]
 800847a:	4413      	add	r3, r2
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	025b      	lsls	r3, r3, #9
 8008480:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
        r->coeffs[d_idx + 1] = ((a[b_idx + 1] >> 7) & 0x1) |
 8008484:	68fa      	ldr	r2, [r7, #12]
 8008486:	3201      	adds	r2, #1
                               ((a[b_idx + 2] & 0xff) << 1) |
 8008488:	4319      	orrs	r1, r3
        r->coeffs[d_idx + 1] = ((a[b_idx + 1] >> 7) & 0x1) |
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        r->coeffs[d_idx + 2] = ((a[b_idx + 3] >> 6) & 0x3) |
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	3303      	adds	r3, #3
 8008494:	683a      	ldr	r2, [r7, #0]
 8008496:	4413      	add	r3, r2
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	099b      	lsrs	r3, r3, #6
 800849c:	b2db      	uxtb	r3, r3
 800849e:	f003 0203 	and.w	r2, r3, #3
                               ((a[b_idx + 4] & 0xff) << 2) |
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	3304      	adds	r3, #4
 80084a6:	6839      	ldr	r1, [r7, #0]
 80084a8:	440b      	add	r3, r1
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	009b      	lsls	r3, r3, #2
        r->coeffs[d_idx + 2] = ((a[b_idx + 3] >> 6) & 0x3) |
 80084ae:	ea42 0103 	orr.w	r1, r2, r3
                               ((a[b_idx + 5] & 0x1f) << 10);
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	3305      	adds	r3, #5
 80084b6:	683a      	ldr	r2, [r7, #0]
 80084b8:	4413      	add	r3, r2
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	029b      	lsls	r3, r3, #10
 80084be:	f403 43f8 	and.w	r3, r3, #31744	@ 0x7c00
        r->coeffs[d_idx + 2] = ((a[b_idx + 3] >> 6) & 0x3) |
 80084c2:	68fa      	ldr	r2, [r7, #12]
 80084c4:	3202      	adds	r2, #2
                               ((a[b_idx + 4] & 0xff) << 2) |
 80084c6:	4319      	orrs	r1, r3
        r->coeffs[d_idx + 2] = ((a[b_idx + 3] >> 6) & 0x3) |
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        r->coeffs[d_idx + 3] = ((a[b_idx + 5] >> 5) & 0x7) |
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	3305      	adds	r3, #5
 80084d2:	683a      	ldr	r2, [r7, #0]
 80084d4:	4413      	add	r3, r2
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	095b      	lsrs	r3, r3, #5
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	f003 0207 	and.w	r2, r3, #7
                               ((a[b_idx + 6] & 0xff) << 3) |
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	3306      	adds	r3, #6
 80084e4:	6839      	ldr	r1, [r7, #0]
 80084e6:	440b      	add	r3, r1
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	00db      	lsls	r3, r3, #3
        r->coeffs[d_idx + 3] = ((a[b_idx + 5] >> 5) & 0x7) |
 80084ec:	ea42 0103 	orr.w	r1, r2, r3
                               ((a[b_idx + 7] & 0xf) << 11);
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	3307      	adds	r3, #7
 80084f4:	683a      	ldr	r2, [r7, #0]
 80084f6:	4413      	add	r3, r2
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	02db      	lsls	r3, r3, #11
 80084fc:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
        r->coeffs[d_idx + 3] = ((a[b_idx + 5] >> 5) & 0x7) |
 8008500:	68fa      	ldr	r2, [r7, #12]
 8008502:	3203      	adds	r2, #3
                               ((a[b_idx + 6] & 0xff) << 3) |
 8008504:	4319      	orrs	r1, r3
        r->coeffs[d_idx + 3] = ((a[b_idx + 5] >> 5) & 0x7) |
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        r->coeffs[d_idx + 4] = ((a[b_idx + 7] >> 4) & 0xf) |
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	3307      	adds	r3, #7
 8008510:	683a      	ldr	r2, [r7, #0]
 8008512:	4413      	add	r3, r2
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	091b      	lsrs	r3, r3, #4
 8008518:	b2db      	uxtb	r3, r3
 800851a:	f003 020f 	and.w	r2, r3, #15
                               ((a[b_idx + 8] & 0xff) << 4) |
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	3308      	adds	r3, #8
 8008522:	6839      	ldr	r1, [r7, #0]
 8008524:	440b      	add	r3, r1
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	011b      	lsls	r3, r3, #4
        r->coeffs[d_idx + 4] = ((a[b_idx + 7] >> 4) & 0xf) |
 800852a:	ea42 0103 	orr.w	r1, r2, r3
                               ((a[b_idx + 9] & 0x7) << 12);
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	3309      	adds	r3, #9
 8008532:	683a      	ldr	r2, [r7, #0]
 8008534:	4413      	add	r3, r2
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	031b      	lsls	r3, r3, #12
 800853a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
        r->coeffs[d_idx + 4] = ((a[b_idx + 7] >> 4) & 0xf) |
 800853e:	68fa      	ldr	r2, [r7, #12]
 8008540:	3204      	adds	r2, #4
                               ((a[b_idx + 8] & 0xff) << 4) |
 8008542:	4319      	orrs	r1, r3
        r->coeffs[d_idx + 4] = ((a[b_idx + 7] >> 4) & 0xf) |
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        r->coeffs[d_idx + 5] = ((a[b_idx + 9] >> 3) & 0x1f) |
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	3309      	adds	r3, #9
 800854e:	683a      	ldr	r2, [r7, #0]
 8008550:	4413      	add	r3, r2
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	08db      	lsrs	r3, r3, #3
 8008556:	b2db      	uxtb	r3, r3
 8008558:	f003 021f 	and.w	r2, r3, #31
                               ((a[b_idx + 10] & 0xff) << 5) |
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	330a      	adds	r3, #10
 8008560:	6839      	ldr	r1, [r7, #0]
 8008562:	440b      	add	r3, r1
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	015b      	lsls	r3, r3, #5
        r->coeffs[d_idx + 5] = ((a[b_idx + 9] >> 3) & 0x1f) |
 8008568:	ea42 0103 	orr.w	r1, r2, r3
                               ((a[b_idx + 11] & 0x3) << 13);
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	330b      	adds	r3, #11
 8008570:	683a      	ldr	r2, [r7, #0]
 8008572:	4413      	add	r3, r2
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	035b      	lsls	r3, r3, #13
 8008578:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
        r->coeffs[d_idx + 5] = ((a[b_idx + 9] >> 3) & 0x1f) |
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	3205      	adds	r2, #5
                               ((a[b_idx + 10] & 0xff) << 5) |
 8008580:	4319      	orrs	r1, r3
        r->coeffs[d_idx + 5] = ((a[b_idx + 9] >> 3) & 0x1f) |
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        r->coeffs[d_idx + 6] = ((a[b_idx + 11] >> 2) & 0x3f) |
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	330b      	adds	r3, #11
 800858c:	683a      	ldr	r2, [r7, #0]
 800858e:	4413      	add	r3, r2
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	089b      	lsrs	r3, r3, #2
 8008594:	b2db      	uxtb	r3, r3
 8008596:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
                               ((a[b_idx + 12] & 0xff) << 6) |
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	330c      	adds	r3, #12
 800859e:	6839      	ldr	r1, [r7, #0]
 80085a0:	440b      	add	r3, r1
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	019b      	lsls	r3, r3, #6
        r->coeffs[d_idx + 6] = ((a[b_idx + 11] >> 2) & 0x3f) |
 80085a6:	ea42 0103 	orr.w	r1, r2, r3
                               ((a[b_idx + 13] & 0x1) << 14);
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	330d      	adds	r3, #13
 80085ae:	683a      	ldr	r2, [r7, #0]
 80085b0:	4413      	add	r3, r2
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	039b      	lsls	r3, r3, #14
 80085b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
        r->coeffs[d_idx + 6] = ((a[b_idx + 11] >> 2) & 0x3f) |
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	3206      	adds	r2, #6
                               ((a[b_idx + 12] & 0xff) << 6) |
 80085be:	4319      	orrs	r1, r3
        r->coeffs[d_idx + 6] = ((a[b_idx + 11] >> 2) & 0x3f) |
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        r->coeffs[d_idx + 7] =
            ((a[b_idx + 13] >> 1) & 0x7f) | ((a[b_idx + 14] & 0xff) << 7);
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	330d      	adds	r3, #13
 80085ca:	683a      	ldr	r2, [r7, #0]
 80085cc:	4413      	add	r3, r2
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	085b      	lsrs	r3, r3, #1
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	f003 017f 	and.w	r1, r3, #127	@ 0x7f
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	330e      	adds	r3, #14
 80085dc:	683a      	ldr	r2, [r7, #0]
 80085de:	4413      	add	r3, r2
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	01db      	lsls	r3, r3, #7
        r->coeffs[d_idx + 7] =
 80085e4:	68fa      	ldr	r2, [r7, #12]
 80085e6:	3207      	adds	r2, #7
            ((a[b_idx + 13] >> 1) & 0x7f) | ((a[b_idx + 14] & 0xff) << 7);
 80085e8:	4319      	orrs	r1, r3
        r->coeffs[d_idx + 7] =
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < (N >> 3); ++i) {
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	3301      	adds	r3, #1
 80085f4:	617b      	str	r3, [r7, #20]
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	2b1f      	cmp	r3, #31
 80085fa:	f67f af10 	bls.w	800841e <polyq_unpack+0x18>
        r->coeffs[1 * i + 0] = a[2 * i + 0] >> 0;
        r->coeffs[1 * i + 0] |= (uint16_t)a[2 * i + 1] << 8;
        r->coeffs[1 * i + 0] &= 0xffff;
    }
#endif
}
 80085fe:	bf00      	nop
 8008600:	bf00      	nop
 8008602:	371c      	adds	r7, #28
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <polyeta_pack>:
 *
 * Arguments:   - uint8_t *r: pointer to output byte array with at least
 *                            POLYETA_PACKEDBYTES bytes
 *              - const poly *a: pointer to input polynomial
 **************************************************/
void polyeta_pack(uint8_t *r, const poly *a) {
 800860c:	b480      	push	{r7}
 800860e:	b087      	sub	sp, #28
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
    unsigned int i;
    uint8_t t[8];

#if ETA == 1
    for (i = 0; i < N / 4; ++i) {
 8008616:	2300      	movs	r3, #0
 8008618:	617b      	str	r3, [r7, #20]
 800861a:	e05f      	b.n	80086dc <polyeta_pack+0xd0>
        t[0] = ETA - a->coeffs[4 * i + 0];
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	009a      	lsls	r2, r3, #2
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008626:	b2db      	uxtb	r3, r3
 8008628:	f1c3 0301 	rsb	r3, r3, #1
 800862c:	b2db      	uxtb	r3, r3
 800862e:	733b      	strb	r3, [r7, #12]
        t[1] = ETA - a->coeffs[4 * i + 1];
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	1c5a      	adds	r2, r3, #1
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800863c:	b2db      	uxtb	r3, r3
 800863e:	f1c3 0301 	rsb	r3, r3, #1
 8008642:	b2db      	uxtb	r3, r3
 8008644:	737b      	strb	r3, [r7, #13]
        t[2] = ETA - a->coeffs[4 * i + 2];
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	1c9a      	adds	r2, r3, #2
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008652:	b2db      	uxtb	r3, r3
 8008654:	f1c3 0301 	rsb	r3, r3, #1
 8008658:	b2db      	uxtb	r3, r3
 800865a:	73bb      	strb	r3, [r7, #14]
        t[3] = ETA - a->coeffs[4 * i + 3];
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	1cda      	adds	r2, r3, #3
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008668:	b2db      	uxtb	r3, r3
 800866a:	f1c3 0301 	rsb	r3, r3, #1
 800866e:	b2db      	uxtb	r3, r3
 8008670:	73fb      	strb	r3, [r7, #15]
        r[i] = t[0] >> 0;
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	4413      	add	r3, r2
 8008678:	7b3a      	ldrb	r2, [r7, #12]
 800867a:	701a      	strb	r2, [r3, #0]
        r[i] |= t[1] << 2;
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	4413      	add	r3, r2
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	b25a      	sxtb	r2, r3
 8008686:	7b7b      	ldrb	r3, [r7, #13]
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	b25b      	sxtb	r3, r3
 800868c:	4313      	orrs	r3, r2
 800868e:	b259      	sxtb	r1, r3
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	4413      	add	r3, r2
 8008696:	b2ca      	uxtb	r2, r1
 8008698:	701a      	strb	r2, [r3, #0]
        r[i] |= t[2] << 4;
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	4413      	add	r3, r2
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	b25a      	sxtb	r2, r3
 80086a4:	7bbb      	ldrb	r3, [r7, #14]
 80086a6:	011b      	lsls	r3, r3, #4
 80086a8:	b25b      	sxtb	r3, r3
 80086aa:	4313      	orrs	r3, r2
 80086ac:	b259      	sxtb	r1, r3
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	4413      	add	r3, r2
 80086b4:	b2ca      	uxtb	r2, r1
 80086b6:	701a      	strb	r2, [r3, #0]
        r[i] |= t[3] << 6;
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	4413      	add	r3, r2
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	b25a      	sxtb	r2, r3
 80086c2:	7bfb      	ldrb	r3, [r7, #15]
 80086c4:	019b      	lsls	r3, r3, #6
 80086c6:	b25b      	sxtb	r3, r3
 80086c8:	4313      	orrs	r3, r2
 80086ca:	b259      	sxtb	r1, r3
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	4413      	add	r3, r2
 80086d2:	b2ca      	uxtb	r2, r1
 80086d4:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < N / 4; ++i) {
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	3301      	adds	r3, #1
 80086da:	617b      	str	r3, [r7, #20]
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	2b3f      	cmp	r3, #63	@ 0x3f
 80086e0:	d99c      	bls.n	800861c <polyeta_pack+0x10>
        r[3 * i + 0] = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
        r[3 * i + 1] = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
        r[3 * i + 2] = (t[5] >> 1) | (t[6] << 2) | (t[7] << 5);
    }
#endif
}
 80086e2:	bf00      	nop
 80086e4:	bf00      	nop
 80086e6:	371c      	adds	r7, #28
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <polyeta_unpack>:
 * Description: Unpack polynomial with coefficients in [-ETA,ETA].
 *
 * Arguments:   - poly *r: pointer to output polynomial
 *              - const uint8_t *a: byte array with bit-packed polynomial
 **************************************************/
void polyeta_unpack(poly *r, const uint8_t *a) {
 80086f0:	b480      	push	{r7}
 80086f2:	b085      	sub	sp, #20
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
    unsigned int i;

#if ETA == 1
    for (i = 0; i < N / 4; ++i) {
 80086fa:	2300      	movs	r3, #0
 80086fc:	60fb      	str	r3, [r7, #12]
 80086fe:	e09b      	b.n	8008838 <polyeta_unpack+0x148>
        r->coeffs[4 * i + 0] = a[i] >> 0;
 8008700:	683a      	ldr	r2, [r7, #0]
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	4413      	add	r3, r2
 8008706:	7819      	ldrb	r1, [r3, #0]
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	009a      	lsls	r2, r3, #2
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        r->coeffs[4 * i + 0] &= 0x3;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	009a      	lsls	r2, r3, #2
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800871c:	68fa      	ldr	r2, [r7, #12]
 800871e:	0092      	lsls	r2, r2, #2
 8008720:	f003 0103 	and.w	r1, r3, #3
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        r->coeffs[4 * i + 1] = a[i] >> 2;
 800872a:	683a      	ldr	r2, [r7, #0]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	4413      	add	r3, r2
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	089b      	lsrs	r3, r3, #2
 8008734:	b2d9      	uxtb	r1, r3
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	1c5a      	adds	r2, r3, #1
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        r->coeffs[4 * i + 1] &= 0x3;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	1c5a      	adds	r2, r3, #1
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	0092      	lsls	r2, r2, #2
 8008752:	3201      	adds	r2, #1
 8008754:	f003 0103 	and.w	r1, r3, #3
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        r->coeffs[4 * i + 2] = a[i] >> 4;
 800875e:	683a      	ldr	r2, [r7, #0]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	4413      	add	r3, r2
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	091b      	lsrs	r3, r3, #4
 8008768:	b2d9      	uxtb	r1, r3
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	1c9a      	adds	r2, r3, #2
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        r->coeffs[4 * i + 2] &= 0x3;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	1c9a      	adds	r2, r3, #2
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008782:	68fa      	ldr	r2, [r7, #12]
 8008784:	0092      	lsls	r2, r2, #2
 8008786:	3202      	adds	r2, #2
 8008788:	f003 0103 	and.w	r1, r3, #3
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        r->coeffs[4 * i + 3] = a[i] >> 6;
 8008792:	683a      	ldr	r2, [r7, #0]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	4413      	add	r3, r2
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	099b      	lsrs	r3, r3, #6
 800879c:	b2d9      	uxtb	r1, r3
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	1cda      	adds	r2, r3, #3
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        r->coeffs[4 * i + 3] &= 0x3;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	1cda      	adds	r2, r3, #3
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087b6:	68fa      	ldr	r2, [r7, #12]
 80087b8:	0092      	lsls	r2, r2, #2
 80087ba:	3203      	adds	r2, #3
 80087bc:	f003 0103 	and.w	r1, r3, #3
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        r->coeffs[4 * i + 0] = ETA - r->coeffs[4 * i + 0];
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	009a      	lsls	r2, r3, #2
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087d0:	68fa      	ldr	r2, [r7, #12]
 80087d2:	0092      	lsls	r2, r2, #2
 80087d4:	f1c3 0101 	rsb	r1, r3, #1
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        r->coeffs[4 * i + 1] = ETA - r->coeffs[4 * i + 1];
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	1c5a      	adds	r2, r3, #1
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087ea:	68fa      	ldr	r2, [r7, #12]
 80087ec:	0092      	lsls	r2, r2, #2
 80087ee:	3201      	adds	r2, #1
 80087f0:	f1c3 0101 	rsb	r1, r3, #1
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        r->coeffs[4 * i + 2] = ETA - r->coeffs[4 * i + 2];
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	1c9a      	adds	r2, r3, #2
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008806:	68fa      	ldr	r2, [r7, #12]
 8008808:	0092      	lsls	r2, r2, #2
 800880a:	3202      	adds	r2, #2
 800880c:	f1c3 0101 	rsb	r1, r3, #1
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        r->coeffs[4 * i + 3] = ETA - r->coeffs[4 * i + 3];
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	1cda      	adds	r2, r3, #3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008822:	68fa      	ldr	r2, [r7, #12]
 8008824:	0092      	lsls	r2, r2, #2
 8008826:	3203      	adds	r2, #3
 8008828:	f1c3 0101 	rsb	r1, r3, #1
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < N / 4; ++i) {
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	3301      	adds	r3, #1
 8008836:	60fb      	str	r3, [r7, #12]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2b3f      	cmp	r3, #63	@ 0x3f
 800883c:	f67f af60 	bls.w	8008700 <polyeta_unpack+0x10>
        r->coeffs[8 * i + 5] = ETA - r->coeffs[8 * i + 5];
        r->coeffs[8 * i + 6] = ETA - r->coeffs[8 * i + 6];
        r->coeffs[8 * i + 7] = ETA - r->coeffs[8 * i + 7];
    }
#endif
}
 8008840:	bf00      	nop
 8008842:	bf00      	nop
 8008844:	3714      	adds	r7, #20
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr

0800884e <poly2eta_pack>:
 *
 * Arguments:   - uint8_t *r: pointer to output byte array with at least
 *                            POLYETA_PACKEDBYTES bytes
 *              - const poly *a: pointer to input polynomial
 **************************************************/
void poly2eta_pack(uint8_t *r, const poly *a) {
 800884e:	b480      	push	{r7}
 8008850:	b087      	sub	sp, #28
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
 8008856:	6039      	str	r1, [r7, #0]
    unsigned int i;
    uint8_t t[8];

#if ETA == 1
    for (i = 0; i < N / 8; ++i) {
 8008858:	2300      	movs	r3, #0
 800885a:	617b      	str	r3, [r7, #20]
 800885c:	e0a0      	b.n	80089a0 <poly2eta_pack+0x152>
        t[0] = 2 * ETA - a->coeffs[8 * i + 0];
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	00da      	lsls	r2, r3, #3
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008868:	b2db      	uxtb	r3, r3
 800886a:	f1c3 0302 	rsb	r3, r3, #2
 800886e:	b2db      	uxtb	r3, r3
 8008870:	733b      	strb	r3, [r7, #12]
        t[1] = 2 * ETA - a->coeffs[8 * i + 1];
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	00db      	lsls	r3, r3, #3
 8008876:	1c5a      	adds	r2, r3, #1
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800887e:	b2db      	uxtb	r3, r3
 8008880:	f1c3 0302 	rsb	r3, r3, #2
 8008884:	b2db      	uxtb	r3, r3
 8008886:	737b      	strb	r3, [r7, #13]
        t[2] = 2 * ETA - a->coeffs[8 * i + 2];
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	00db      	lsls	r3, r3, #3
 800888c:	1c9a      	adds	r2, r3, #2
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008894:	b2db      	uxtb	r3, r3
 8008896:	f1c3 0302 	rsb	r3, r3, #2
 800889a:	b2db      	uxtb	r3, r3
 800889c:	73bb      	strb	r3, [r7, #14]
        t[3] = 2 * ETA - a->coeffs[8 * i + 3];
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	00db      	lsls	r3, r3, #3
 80088a2:	1cda      	adds	r2, r3, #3
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	f1c3 0302 	rsb	r3, r3, #2
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	73fb      	strb	r3, [r7, #15]
        t[4] = 2 * ETA - a->coeffs[8 * i + 4];
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	00db      	lsls	r3, r3, #3
 80088b8:	1d1a      	adds	r2, r3, #4
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	f1c3 0302 	rsb	r3, r3, #2
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	743b      	strb	r3, [r7, #16]
        t[5] = 2 * ETA - a->coeffs[8 * i + 5];
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	00db      	lsls	r3, r3, #3
 80088ce:	1d5a      	adds	r2, r3, #5
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	f1c3 0302 	rsb	r3, r3, #2
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	747b      	strb	r3, [r7, #17]
        t[6] = 2 * ETA - a->coeffs[8 * i + 6];
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	00db      	lsls	r3, r3, #3
 80088e4:	1d9a      	adds	r2, r3, #6
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	f1c3 0302 	rsb	r3, r3, #2
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	74bb      	strb	r3, [r7, #18]
        t[7] = 2 * ETA - a->coeffs[8 * i + 7];
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	00db      	lsls	r3, r3, #3
 80088fa:	1dda      	adds	r2, r3, #7
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008902:	b2db      	uxtb	r3, r3
 8008904:	f1c3 0302 	rsb	r3, r3, #2
 8008908:	b2db      	uxtb	r3, r3
 800890a:	74fb      	strb	r3, [r7, #19]

        r[3 * i + 0] = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
 800890c:	7b3b      	ldrb	r3, [r7, #12]
 800890e:	b25a      	sxtb	r2, r3
 8008910:	7b7b      	ldrb	r3, [r7, #13]
 8008912:	00db      	lsls	r3, r3, #3
 8008914:	b25b      	sxtb	r3, r3
 8008916:	4313      	orrs	r3, r2
 8008918:	b25a      	sxtb	r2, r3
 800891a:	7bbb      	ldrb	r3, [r7, #14]
 800891c:	019b      	lsls	r3, r3, #6
 800891e:	b25b      	sxtb	r3, r3
 8008920:	4313      	orrs	r3, r2
 8008922:	b259      	sxtb	r1, r3
 8008924:	697a      	ldr	r2, [r7, #20]
 8008926:	4613      	mov	r3, r2
 8008928:	005b      	lsls	r3, r3, #1
 800892a:	4413      	add	r3, r2
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	4413      	add	r3, r2
 8008930:	b2ca      	uxtb	r2, r1
 8008932:	701a      	strb	r2, [r3, #0]
        r[3 * i + 1] = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
 8008934:	7bbb      	ldrb	r3, [r7, #14]
 8008936:	089b      	lsrs	r3, r3, #2
 8008938:	b2db      	uxtb	r3, r3
 800893a:	b25a      	sxtb	r2, r3
 800893c:	7bfb      	ldrb	r3, [r7, #15]
 800893e:	005b      	lsls	r3, r3, #1
 8008940:	b25b      	sxtb	r3, r3
 8008942:	4313      	orrs	r3, r2
 8008944:	b25a      	sxtb	r2, r3
 8008946:	7c3b      	ldrb	r3, [r7, #16]
 8008948:	011b      	lsls	r3, r3, #4
 800894a:	b25b      	sxtb	r3, r3
 800894c:	4313      	orrs	r3, r2
 800894e:	b25a      	sxtb	r2, r3
 8008950:	7c7b      	ldrb	r3, [r7, #17]
 8008952:	01db      	lsls	r3, r3, #7
 8008954:	b25b      	sxtb	r3, r3
 8008956:	4313      	orrs	r3, r2
 8008958:	b259      	sxtb	r1, r3
 800895a:	697a      	ldr	r2, [r7, #20]
 800895c:	4613      	mov	r3, r2
 800895e:	005b      	lsls	r3, r3, #1
 8008960:	4413      	add	r3, r2
 8008962:	3301      	adds	r3, #1
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	4413      	add	r3, r2
 8008968:	b2ca      	uxtb	r2, r1
 800896a:	701a      	strb	r2, [r3, #0]
        r[3 * i + 2] = (t[5] >> 1) | (t[6] << 2) | (t[7] << 5);
 800896c:	7c7b      	ldrb	r3, [r7, #17]
 800896e:	085b      	lsrs	r3, r3, #1
 8008970:	b2db      	uxtb	r3, r3
 8008972:	b25a      	sxtb	r2, r3
 8008974:	7cbb      	ldrb	r3, [r7, #18]
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	b25b      	sxtb	r3, r3
 800897a:	4313      	orrs	r3, r2
 800897c:	b25a      	sxtb	r2, r3
 800897e:	7cfb      	ldrb	r3, [r7, #19]
 8008980:	015b      	lsls	r3, r3, #5
 8008982:	b25b      	sxtb	r3, r3
 8008984:	4313      	orrs	r3, r2
 8008986:	b259      	sxtb	r1, r3
 8008988:	697a      	ldr	r2, [r7, #20]
 800898a:	4613      	mov	r3, r2
 800898c:	005b      	lsls	r3, r3, #1
 800898e:	4413      	add	r3, r2
 8008990:	3302      	adds	r3, #2
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	4413      	add	r3, r2
 8008996:	b2ca      	uxtb	r2, r1
 8008998:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < N / 8; ++i) {
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	3301      	adds	r3, #1
 800899e:	617b      	str	r3, [r7, #20]
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	2b1f      	cmp	r3, #31
 80089a4:	f67f af5b 	bls.w	800885e <poly2eta_pack+0x10>
    }
#elif ETA == 2
#error "not yet implemented"
#endif
}
 80089a8:	bf00      	nop
 80089aa:	bf00      	nop
 80089ac:	371c      	adds	r7, #28
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr

080089b6 <poly2eta_unpack>:
 * Description: Unpack polynomial with coefficients in [-ETA-1,ETA+1].
 *
 * Arguments:   - poly *r: pointer to output polynomial
 *              - const uint8_t *a: byte array with bit-packed polynomial
 **************************************************/
void poly2eta_unpack(poly *r, const uint8_t *a) {
 80089b6:	b480      	push	{r7}
 80089b8:	b085      	sub	sp, #20
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
 80089be:	6039      	str	r1, [r7, #0]
    unsigned int i;

#if ETA == 1
    for (i = 0; i < N / 8; ++i) {
 80089c0:	2300      	movs	r3, #0
 80089c2:	60fb      	str	r3, [r7, #12]
 80089c4:	e116      	b.n	8008bf4 <poly2eta_unpack+0x23e>
        r->coeffs[8 * i + 0] = (a[3 * i + 0] >> 0) & 7;
 80089c6:	68fa      	ldr	r2, [r7, #12]
 80089c8:	4613      	mov	r3, r2
 80089ca:	005b      	lsls	r3, r3, #1
 80089cc:	4413      	add	r3, r2
 80089ce:	683a      	ldr	r2, [r7, #0]
 80089d0:	4413      	add	r3, r2
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	4619      	mov	r1, r3
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	00da      	lsls	r2, r3, #3
 80089da:	f001 0107 	and.w	r1, r1, #7
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        r->coeffs[8 * i + 1] = (a[3 * i + 0] >> 3) & 7;
 80089e4:	68fa      	ldr	r2, [r7, #12]
 80089e6:	4613      	mov	r3, r2
 80089e8:	005b      	lsls	r3, r3, #1
 80089ea:	4413      	add	r3, r2
 80089ec:	683a      	ldr	r2, [r7, #0]
 80089ee:	4413      	add	r3, r2
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	08db      	lsrs	r3, r3, #3
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	4619      	mov	r1, r3
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	00db      	lsls	r3, r3, #3
 80089fc:	1c5a      	adds	r2, r3, #1
 80089fe:	f001 0107 	and.w	r1, r1, #7
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        r->coeffs[8 * i + 2] = ((a[3 * i + 0] >> 6) | (a[3 * i + 1] << 2)) & 7;
 8008a08:	68fa      	ldr	r2, [r7, #12]
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	005b      	lsls	r3, r3, #1
 8008a0e:	4413      	add	r3, r2
 8008a10:	683a      	ldr	r2, [r7, #0]
 8008a12:	4413      	add	r3, r2
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	099b      	lsrs	r3, r3, #6
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	68fa      	ldr	r2, [r7, #12]
 8008a1e:	4613      	mov	r3, r2
 8008a20:	005b      	lsls	r3, r3, #1
 8008a22:	4413      	add	r3, r2
 8008a24:	3301      	adds	r3, #1
 8008a26:	683a      	ldr	r2, [r7, #0]
 8008a28:	4413      	add	r3, r2
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	430b      	orrs	r3, r1
 8008a30:	68fa      	ldr	r2, [r7, #12]
 8008a32:	00d2      	lsls	r2, r2, #3
 8008a34:	3202      	adds	r2, #2
 8008a36:	f003 0107 	and.w	r1, r3, #7
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        r->coeffs[8 * i + 3] = (a[3 * i + 1] >> 1) & 7;
 8008a40:	68fa      	ldr	r2, [r7, #12]
 8008a42:	4613      	mov	r3, r2
 8008a44:	005b      	lsls	r3, r3, #1
 8008a46:	4413      	add	r3, r2
 8008a48:	3301      	adds	r3, #1
 8008a4a:	683a      	ldr	r2, [r7, #0]
 8008a4c:	4413      	add	r3, r2
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	085b      	lsrs	r3, r3, #1
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	4619      	mov	r1, r3
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	00db      	lsls	r3, r3, #3
 8008a5a:	1cda      	adds	r2, r3, #3
 8008a5c:	f001 0107 	and.w	r1, r1, #7
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        r->coeffs[8 * i + 4] = (a[3 * i + 1] >> 4) & 7;
 8008a66:	68fa      	ldr	r2, [r7, #12]
 8008a68:	4613      	mov	r3, r2
 8008a6a:	005b      	lsls	r3, r3, #1
 8008a6c:	4413      	add	r3, r2
 8008a6e:	3301      	adds	r3, #1
 8008a70:	683a      	ldr	r2, [r7, #0]
 8008a72:	4413      	add	r3, r2
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	091b      	lsrs	r3, r3, #4
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	00db      	lsls	r3, r3, #3
 8008a80:	1d1a      	adds	r2, r3, #4
 8008a82:	f001 0107 	and.w	r1, r1, #7
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        r->coeffs[8 * i + 5] = ((a[3 * i + 1] >> 7) | (a[3 * i + 2] << 1)) & 7;
 8008a8c:	68fa      	ldr	r2, [r7, #12]
 8008a8e:	4613      	mov	r3, r2
 8008a90:	005b      	lsls	r3, r3, #1
 8008a92:	4413      	add	r3, r2
 8008a94:	3301      	adds	r3, #1
 8008a96:	683a      	ldr	r2, [r7, #0]
 8008a98:	4413      	add	r3, r2
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	09db      	lsrs	r3, r3, #7
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	68fa      	ldr	r2, [r7, #12]
 8008aa4:	4613      	mov	r3, r2
 8008aa6:	005b      	lsls	r3, r3, #1
 8008aa8:	4413      	add	r3, r2
 8008aaa:	3302      	adds	r3, #2
 8008aac:	683a      	ldr	r2, [r7, #0]
 8008aae:	4413      	add	r3, r2
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	005b      	lsls	r3, r3, #1
 8008ab4:	430b      	orrs	r3, r1
 8008ab6:	68fa      	ldr	r2, [r7, #12]
 8008ab8:	00d2      	lsls	r2, r2, #3
 8008aba:	3205      	adds	r2, #5
 8008abc:	f003 0107 	and.w	r1, r3, #7
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        r->coeffs[8 * i + 6] = (a[3 * i + 2] >> 2) & 7;
 8008ac6:	68fa      	ldr	r2, [r7, #12]
 8008ac8:	4613      	mov	r3, r2
 8008aca:	005b      	lsls	r3, r3, #1
 8008acc:	4413      	add	r3, r2
 8008ace:	3302      	adds	r3, #2
 8008ad0:	683a      	ldr	r2, [r7, #0]
 8008ad2:	4413      	add	r3, r2
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	089b      	lsrs	r3, r3, #2
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	4619      	mov	r1, r3
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	00db      	lsls	r3, r3, #3
 8008ae0:	1d9a      	adds	r2, r3, #6
 8008ae2:	f001 0107 	and.w	r1, r1, #7
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        r->coeffs[8 * i + 7] = (a[3 * i + 2] >> 5) & 7;
 8008aec:	68fa      	ldr	r2, [r7, #12]
 8008aee:	4613      	mov	r3, r2
 8008af0:	005b      	lsls	r3, r3, #1
 8008af2:	4413      	add	r3, r2
 8008af4:	3302      	adds	r3, #2
 8008af6:	683a      	ldr	r2, [r7, #0]
 8008af8:	4413      	add	r3, r2
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	095b      	lsrs	r3, r3, #5
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	4619      	mov	r1, r3
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	00db      	lsls	r3, r3, #3
 8008b06:	1dda      	adds	r2, r3, #7
 8008b08:	f001 0107 	and.w	r1, r1, #7
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        r->coeffs[8 * i + 0] = 2 * ETA - r->coeffs[8 * i + 0];
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	00da      	lsls	r2, r3, #3
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b1c:	68fa      	ldr	r2, [r7, #12]
 8008b1e:	00d2      	lsls	r2, r2, #3
 8008b20:	f1c3 0102 	rsb	r1, r3, #2
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        r->coeffs[8 * i + 1] = 2 * ETA - r->coeffs[8 * i + 1];
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	00db      	lsls	r3, r3, #3
 8008b2e:	1c5a      	adds	r2, r3, #1
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b36:	68fa      	ldr	r2, [r7, #12]
 8008b38:	00d2      	lsls	r2, r2, #3
 8008b3a:	3201      	adds	r2, #1
 8008b3c:	f1c3 0102 	rsb	r1, r3, #2
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        r->coeffs[8 * i + 2] = 2 * ETA - r->coeffs[8 * i + 2];
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	00db      	lsls	r3, r3, #3
 8008b4a:	1c9a      	adds	r2, r3, #2
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b52:	68fa      	ldr	r2, [r7, #12]
 8008b54:	00d2      	lsls	r2, r2, #3
 8008b56:	3202      	adds	r2, #2
 8008b58:	f1c3 0102 	rsb	r1, r3, #2
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        r->coeffs[8 * i + 3] = 2 * ETA - r->coeffs[8 * i + 3];
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	00db      	lsls	r3, r3, #3
 8008b66:	1cda      	adds	r2, r3, #3
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b6e:	68fa      	ldr	r2, [r7, #12]
 8008b70:	00d2      	lsls	r2, r2, #3
 8008b72:	3203      	adds	r2, #3
 8008b74:	f1c3 0102 	rsb	r1, r3, #2
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        r->coeffs[8 * i + 4] = 2 * ETA - r->coeffs[8 * i + 4];
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	00db      	lsls	r3, r3, #3
 8008b82:	1d1a      	adds	r2, r3, #4
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b8a:	68fa      	ldr	r2, [r7, #12]
 8008b8c:	00d2      	lsls	r2, r2, #3
 8008b8e:	3204      	adds	r2, #4
 8008b90:	f1c3 0102 	rsb	r1, r3, #2
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        r->coeffs[8 * i + 5] = 2 * ETA - r->coeffs[8 * i + 5];
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	00db      	lsls	r3, r3, #3
 8008b9e:	1d5a      	adds	r2, r3, #5
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ba6:	68fa      	ldr	r2, [r7, #12]
 8008ba8:	00d2      	lsls	r2, r2, #3
 8008baa:	3205      	adds	r2, #5
 8008bac:	f1c3 0102 	rsb	r1, r3, #2
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        r->coeffs[8 * i + 6] = 2 * ETA - r->coeffs[8 * i + 6];
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	00db      	lsls	r3, r3, #3
 8008bba:	1d9a      	adds	r2, r3, #6
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bc2:	68fa      	ldr	r2, [r7, #12]
 8008bc4:	00d2      	lsls	r2, r2, #3
 8008bc6:	3206      	adds	r2, #6
 8008bc8:	f1c3 0102 	rsb	r1, r3, #2
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        r->coeffs[8 * i + 7] = 2 * ETA - r->coeffs[8 * i + 7];
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	00db      	lsls	r3, r3, #3
 8008bd6:	1dda      	adds	r2, r3, #7
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bde:	68fa      	ldr	r2, [r7, #12]
 8008be0:	00d2      	lsls	r2, r2, #3
 8008be2:	3207      	adds	r2, #7
 8008be4:	f1c3 0102 	rsb	r1, r3, #2
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < N / 8; ++i) {
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	60fb      	str	r3, [r7, #12]
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2b1f      	cmp	r3, #31
 8008bf8:	f67f aee5 	bls.w	80089c6 <poly2eta_unpack+0x10>
    }
#elif ETA == 2
#error "not yet implemented"
#endif
}
 8008bfc:	bf00      	nop
 8008bfe:	bf00      	nop
 8008c00:	3714      	adds	r7, #20
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr

08008c0a <poly_fromcrt>:

void poly_fromcrt(poly *w, const poly *u, const poly *v) {
 8008c0a:	b480      	push	{r7}
 8008c0c:	b089      	sub	sp, #36	@ 0x24
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	60f8      	str	r0, [r7, #12]
 8008c12:	60b9      	str	r1, [r7, #8]
 8008c14:	607a      	str	r2, [r7, #4]
    unsigned int i;
    int32_t xq, x2;

    for (i = 0; i < N; i++) {
 8008c16:	2300      	movs	r3, #0
 8008c18:	61fb      	str	r3, [r7, #28]
 8008c1a:	e01b      	b.n	8008c54 <poly_fromcrt+0x4a>
        xq = u->coeffs[i];
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	69fa      	ldr	r2, [r7, #28]
 8008c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c24:	61bb      	str	r3, [r7, #24]
        x2 = v->coeffs[i];
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	69fa      	ldr	r2, [r7, #28]
 8008c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c2e:	617b      	str	r3, [r7, #20]
        w->coeffs[i] = xq + (Q & -((xq ^ x2) & 1));
 8008c30:	69ba      	ldr	r2, [r7, #24]
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	4053      	eors	r3, r2
 8008c36:	f003 0301 	and.w	r3, r3, #1
 8008c3a:	425a      	negs	r2, r3
 8008c3c:	f64f 4301 	movw	r3, #64513	@ 0xfc01
 8008c40:	4013      	ands	r3, r2
 8008c42:	69ba      	ldr	r2, [r7, #24]
 8008c44:	1899      	adds	r1, r3, r2
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	69fa      	ldr	r2, [r7, #28]
 8008c4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < N; i++) {
 8008c4e:	69fb      	ldr	r3, [r7, #28]
 8008c50:	3301      	adds	r3, #1
 8008c52:	61fb      	str	r3, [r7, #28]
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	2bff      	cmp	r3, #255	@ 0xff
 8008c58:	d9e0      	bls.n	8008c1c <poly_fromcrt+0x12>
    }
}
 8008c5a:	bf00      	nop
 8008c5c:	bf00      	nop
 8008c5e:	3724      	adds	r7, #36	@ 0x24
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <poly_fromcrt0>:

void poly_fromcrt0(poly *w, const poly *u) {
 8008c68:	b480      	push	{r7}
 8008c6a:	b085      	sub	sp, #20
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
    unsigned int i;
    int32_t xq;

    for (i = 0; i < N; i++) {
 8008c72:	2300      	movs	r3, #0
 8008c74:	60fb      	str	r3, [r7, #12]
 8008c76:	e014      	b.n	8008ca2 <poly_fromcrt0+0x3a>
        xq = u->coeffs[i];
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	68fa      	ldr	r2, [r7, #12]
 8008c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c80:	60bb      	str	r3, [r7, #8]
        w->coeffs[i] = xq + (Q & -(xq & 1));
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	f003 0301 	and.w	r3, r3, #1
 8008c88:	425a      	negs	r2, r3
 8008c8a:	f64f 4301 	movw	r3, #64513	@ 0xfc01
 8008c8e:	4013      	ands	r3, r2
 8008c90:	68ba      	ldr	r2, [r7, #8]
 8008c92:	1899      	adds	r1, r3, r2
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	68fa      	ldr	r2, [r7, #12]
 8008c98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < N; i++) {
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	60fb      	str	r3, [r7, #12]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2bff      	cmp	r3, #255	@ 0xff
 8008ca6:	d9e7      	bls.n	8008c78 <poly_fromcrt0+0x10>
    }
}
 8008ca8:	bf00      	nop
 8008caa:	bf00      	nop
 8008cac:	3714      	adds	r7, #20
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr

08008cb6 <poly_ntt>:

void poly_ntt(poly *a) { haetae_ntt332(&a->coeffs[0]); }
 8008cb6:	b580      	push	{r7, lr}
 8008cb8:	b082      	sub	sp, #8
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7f7 fc2f 	bl	8000524 <haetae_ntt332>
 8008cc6:	bf00      	nop
 8008cc8:	3708      	adds	r7, #8
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <poly_invntt_tomont>:

void poly_invntt_tomont(poly *a) { haetae_invntt332_tomont(&a->coeffs[0]); }
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b082      	sub	sp, #8
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f7f7 ff07 	bl	8000aec <haetae_invntt332_tomont>
 8008cde:	bf00      	nop
 8008ce0:	3708      	adds	r7, #8
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <renormalize>:
static inline void renormalize(fp96_76 *x) {
 8008ce6:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
    x->limb48[1] += x->limb48[0] >> 48;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8008cfc:	f04f 0200 	mov.w	r2, #0
 8008d00:	f04f 0300 	mov.w	r3, #0
 8008d04:	ea4f 421b 	mov.w	r2, fp, lsr #16
 8008d08:	2300      	movs	r3, #0
 8008d0a:	1884      	adds	r4, r0, r2
 8008d0c:	eb41 0503 	adc.w	r5, r1, r3
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	e9c3 4502 	strd	r4, r5, [r3, #8]
    x->limb48[0] &= (1ULL << 48) - 1;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1c:	4690      	mov	r8, r2
 8008d1e:	fa1f f983 	uxth.w	r9, r3
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	e9c3 8900 	strd	r8, r9, [r3]
}
 8008d28:	bf00      	nop
 8008d2a:	370c      	adds	r7, #12
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008d32:	4770      	bx	lr

08008d34 <mul64>:
static inline void mul64(uint64_t r[2], const uint64_t b, const uint64_t a) {
 8008d34:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008d38:	b09b      	sub	sp, #108	@ 0x6c
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6478      	str	r0, [r7, #68]	@ 0x44
 8008d3e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    uint64_t al = a & ((1ULL << 32) - 1), bl = b & ((1ULL << 32) - 1),
 8008d42:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8008d46:	4614      	mov	r4, r2
 8008d48:	2500      	movs	r5, #0
 8008d4a:	e9c7 4518 	strd	r4, r5, [r7, #96]	@ 0x60
 8008d4e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008d52:	603a      	str	r2, [r7, #0]
 8008d54:	2300      	movs	r3, #0
 8008d56:	607b      	str	r3, [r7, #4]
 8008d58:	e9d7 3400 	ldrd	r3, r4, [r7]
 8008d5c:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
             ah = a >> 32, bh = b >> 32;
 8008d60:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8008d64:	f04f 0000 	mov.w	r0, #0
 8008d68:	f04f 0100 	mov.w	r1, #0
 8008d6c:	0018      	movs	r0, r3
 8008d6e:	2100      	movs	r1, #0
 8008d70:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
 8008d74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008d78:	f04f 0000 	mov.w	r0, #0
 8008d7c:	f04f 0100 	mov.w	r1, #0
 8008d80:	0018      	movs	r0, r3
 8008d82:	2100      	movs	r1, #0
 8008d84:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
    r[0] = a * b;
 8008d88:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8008d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d8e:	fb03 f102 	mul.w	r1, r3, r2
 8008d92:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008d94:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008d98:	fb02 f303 	mul.w	r3, r2, r3
 8008d9c:	4419      	add	r1, r3
 8008d9e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8008da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008da4:	fba2 ab03 	umull	sl, fp, r2, r3
 8008da8:	eb01 030b 	add.w	r3, r1, fp
 8008dac:	469b      	mov	fp, r3
 8008dae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008db0:	e9c3 ab00 	strd	sl, fp, [r3]
    r[1] = ah * bl + al * bh + ((al * bl) >> 32);
 8008db4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008db6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008db8:	fb03 f102 	mul.w	r1, r3, r2
 8008dbc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008dbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008dc0:	fb02 f303 	mul.w	r3, r2, r3
 8008dc4:	4419      	add	r1, r3
 8008dc6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008dc8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008dca:	fba2 8903 	umull	r8, r9, r2, r3
 8008dce:	eb01 0309 	add.w	r3, r1, r9
 8008dd2:	4699      	mov	r9, r3
 8008dd4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008dd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008dd8:	fb03 f102 	mul.w	r1, r3, r2
 8008ddc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008dde:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008de0:	fb02 f303 	mul.w	r3, r2, r3
 8008de4:	4419      	add	r1, r3
 8008de6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008de8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008dea:	fba2 2303 	umull	r2, r3, r2, r3
 8008dee:	637b      	str	r3, [r7, #52]	@ 0x34
 8008df0:	4613      	mov	r3, r2
 8008df2:	633b      	str	r3, [r7, #48]	@ 0x30
 8008df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008df6:	18cb      	adds	r3, r1, r3
 8008df8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dfa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008dfe:	460b      	mov	r3, r1
 8008e00:	eb18 0303 	adds.w	r3, r8, r3
 8008e04:	61bb      	str	r3, [r7, #24]
 8008e06:	4613      	mov	r3, r2
 8008e08:	eb49 0303 	adc.w	r3, r9, r3
 8008e0c:	61fb      	str	r3, [r7, #28]
 8008e0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008e12:	fb03 f202 	mul.w	r2, r3, r2
 8008e16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e18:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008e1a:	fb01 f303 	mul.w	r3, r1, r3
 8008e1e:	4413      	add	r3, r2
 8008e20:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008e22:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008e24:	fba1 1202 	umull	r1, r2, r1, r2
 8008e28:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008e2a:	460a      	mov	r2, r1
 8008e2c:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008e2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e30:	4413      	add	r3, r2
 8008e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e34:	f04f 0200 	mov.w	r2, #0
 8008e38:	f04f 0300 	mov.w	r3, #0
 8008e3c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e3e:	000a      	movs	r2, r1
 8008e40:	2300      	movs	r3, #0
 8008e42:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008e44:	3108      	adds	r1, #8
 8008e46:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	1880      	adds	r0, r0, r2
 8008e4e:	6138      	str	r0, [r7, #16]
 8008e50:	4628      	mov	r0, r5
 8008e52:	eb43 0000 	adc.w	r0, r3, r0
 8008e56:	6178      	str	r0, [r7, #20]
 8008e58:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008e5c:	e9c1 3400 	strd	r3, r4, [r1]
    r[1] >>= 32;
 8008e60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e62:	3308      	adds	r3, #8
 8008e64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008e68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e6a:	f103 0408 	add.w	r4, r3, #8
 8008e6e:	f04f 0200 	mov.w	r2, #0
 8008e72:	f04f 0300 	mov.w	r3, #0
 8008e76:	000a      	movs	r2, r1
 8008e78:	2300      	movs	r3, #0
 8008e7a:	e9c4 2300 	strd	r2, r3, [r4]
    r[1] += ah * bh;
 8008e7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e80:	3308      	adds	r3, #8
 8008e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e86:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008e88:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8008e8a:	fb01 f000 	mul.w	r0, r1, r0
 8008e8e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8008e90:	6d3c      	ldr	r4, [r7, #80]	@ 0x50
 8008e92:	fb04 f101 	mul.w	r1, r4, r1
 8008e96:	4401      	add	r1, r0
 8008e98:	6d3c      	ldr	r4, [r7, #80]	@ 0x50
 8008e9a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8008e9c:	fba4 4000 	umull	r4, r0, r4, r0
 8008ea0:	6278      	str	r0, [r7, #36]	@ 0x24
 8008ea2:	4620      	mov	r0, r4
 8008ea4:	6238      	str	r0, [r7, #32]
 8008ea6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008ea8:	4401      	add	r1, r0
 8008eaa:	6279      	str	r1, [r7, #36]	@ 0x24
 8008eac:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008eae:	3108      	adds	r1, #8
 8008eb0:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	1810      	adds	r0, r2, r0
 8008eb8:	60b8      	str	r0, [r7, #8]
 8008eba:	4628      	mov	r0, r5
 8008ebc:	eb43 0000 	adc.w	r0, r3, r0
 8008ec0:	60f8      	str	r0, [r7, #12]
 8008ec2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8008ec6:	e9c1 3400 	strd	r3, r4, [r1]
}
 8008eca:	bf00      	nop
 8008ecc:	376c      	adds	r7, #108	@ 0x6c
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008ed4:	4770      	bx	lr

08008ed6 <mul48>:
static inline void mul48(uint64_t r[2], const uint64_t b, const uint64_t a) {
 8008ed6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eda:	b087      	sub	sp, #28
 8008edc:	af02      	add	r7, sp, #8
 8008ede:	60f8      	str	r0, [r7, #12]
 8008ee0:	e9c7 2300 	strd	r2, r3, [r7]
    mul64(r, b, a);
 8008ee4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008ee8:	e9cd 2300 	strd	r2, r3, [sp]
 8008eec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ef0:	68f8      	ldr	r0, [r7, #12]
 8008ef2:	f7ff ff1f 	bl	8008d34 <mul64>
    r[1] <<= 16;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	3308      	adds	r3, #8
 8008efa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f103 0608 	add.w	r6, r3, #8
 8008f04:	f04f 0200 	mov.w	r2, #0
 8008f08:	f04f 0300 	mov.w	r3, #0
 8008f0c:	040b      	lsls	r3, r1, #16
 8008f0e:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8008f12:	0402      	lsls	r2, r0, #16
 8008f14:	e9c6 2300 	strd	r2, r3, [r6]
    r[1] ^= r[0] >> 48;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	3308      	adds	r3, #8
 8008f1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8008f26:	f04f 0200 	mov.w	r2, #0
 8008f2a:	f04f 0300 	mov.w	r3, #0
 8008f2e:	ea4f 421b 	mov.w	r2, fp, lsr #16
 8008f32:	2300      	movs	r3, #0
 8008f34:	68fe      	ldr	r6, [r7, #12]
 8008f36:	3608      	adds	r6, #8
 8008f38:	ea80 0402 	eor.w	r4, r0, r2
 8008f3c:	ea81 0503 	eor.w	r5, r1, r3
 8008f40:	e9c6 4500 	strd	r4, r5, [r6]
    r[0] &= (1ULL << 48) - 1;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4a:	4690      	mov	r8, r2
 8008f4c:	fa1f f983 	uxth.w	r9, r3
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	e9c3 8900 	strd	r8, r9, [r3]
}
 8008f56:	bf00      	nop
 8008f58:	3714      	adds	r7, #20
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008f60 <fixpoint_mul_high>:

static inline void fixpoint_mul_high(fp96_76 *xy, const fp96_76 *x,
                                     const uint64_t y) {
 8008f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f64:	b08f      	sub	sp, #60	@ 0x3c
 8008f66:	af02      	add	r7, sp, #8
 8008f68:	61f8      	str	r0, [r7, #28]
 8008f6a:	61b9      	str	r1, [r7, #24]
 8008f6c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    uint64_t tmp[2];
    mul48(&xy->limb48[0], x->limb48[0], y); // implicitly shifted right by 48
 8008f70:	69fc      	ldr	r4, [r7, #28]
 8008f72:	69bb      	ldr	r3, [r7, #24]
 8008f74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008f78:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008f7c:	e9cd 2300 	strd	r2, r3, [sp]
 8008f80:	4602      	mov	r2, r0
 8008f82:	460b      	mov	r3, r1
 8008f84:	4620      	mov	r0, r4
 8008f86:	f7ff ffa6 	bl	8008ed6 <mul48>

    mul48(tmp, x->limb48[1], y);
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008f90:	f107 0420 	add.w	r4, r7, #32
 8008f94:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008f98:	e9cd 2300 	strd	r2, r3, [sp]
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	f7ff ff98 	bl	8008ed6 <mul48>
    xy->limb48[1] += tmp[0];
 8008fa6:	69fb      	ldr	r3, [r7, #28]
 8008fa8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008fac:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008fb0:	1884      	adds	r4, r0, r2
 8008fb2:	60bc      	str	r4, [r7, #8]
 8008fb4:	eb41 0303 	adc.w	r3, r1, r3
 8008fb8:	60fb      	str	r3, [r7, #12]
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008fc0:	e9c3 1202 	strd	r1, r2, [r3, #8]

    // shift right by 28, rounding
    xy->limb48[0] += 1UL << 27;
 8008fc4:	69fb      	ldr	r3, [r7, #28]
 8008fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fca:	f112 6500 	adds.w	r5, r2, #134217728	@ 0x8000000
 8008fce:	f143 0600 	adc.w	r6, r3, #0
 8008fd2:	69fb      	ldr	r3, [r7, #28]
 8008fd4:	e9c3 5600 	strd	r5, r6, [r3]
    xy->limb48[0] >>= 28;
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008fde:	f04f 0200 	mov.w	r2, #0
 8008fe2:	f04f 0300 	mov.w	r3, #0
 8008fe6:	0f02      	lsrs	r2, r0, #28
 8008fe8:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8008fec:	0f0b      	lsrs	r3, r1, #28
 8008fee:	69f9      	ldr	r1, [r7, #28]
 8008ff0:	e9c1 2300 	strd	r2, r3, [r1]
    xy->limb48[0] += (xy->limb48[1] << 20) & ((1ULL << 48) - 1);
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008ffa:	69fb      	ldr	r3, [r7, #28]
 8008ffc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8009000:	f04f 0200 	mov.w	r2, #0
 8009004:	f04f 0300 	mov.w	r3, #0
 8009008:	050b      	lsls	r3, r1, #20
 800900a:	ea43 3310 	orr.w	r3, r3, r0, lsr #12
 800900e:	0502      	lsls	r2, r0, #20
 8009010:	4690      	mov	r8, r2
 8009012:	fa1f f983 	uxth.w	r9, r3
 8009016:	eb14 0308 	adds.w	r3, r4, r8
 800901a:	603b      	str	r3, [r7, #0]
 800901c:	eb45 0309 	adc.w	r3, r5, r9
 8009020:	607b      	str	r3, [r7, #4]
 8009022:	69fb      	ldr	r3, [r7, #28]
 8009024:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009028:	e9c3 1200 	strd	r1, r2, [r3]
    xy->limb48[1] >>= 28;
 800902c:	69fb      	ldr	r3, [r7, #28]
 800902e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8009032:	f04f 0200 	mov.w	r2, #0
 8009036:	f04f 0300 	mov.w	r3, #0
 800903a:	0f02      	lsrs	r2, r0, #28
 800903c:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8009040:	0f0b      	lsrs	r3, r1, #28
 8009042:	69f9      	ldr	r1, [r7, #28]
 8009044:	e9c1 2302 	strd	r2, r3, [r1, #8]

    xy->limb48[1] += tmp[1] << 20;
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800904e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009052:	f04f 0200 	mov.w	r2, #0
 8009056:	f04f 0300 	mov.w	r3, #0
 800905a:	050b      	lsls	r3, r1, #20
 800905c:	ea43 3310 	orr.w	r3, r3, r0, lsr #12
 8009060:	0502      	lsls	r2, r0, #20
 8009062:	eb14 0a02 	adds.w	sl, r4, r2
 8009066:	eb45 0b03 	adc.w	fp, r5, r3
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	e9c3 ab02 	strd	sl, fp, [r3, #8]

    renormalize(xy);
 8009070:	69f8      	ldr	r0, [r7, #28]
 8009072:	f7ff fe38 	bl	8008ce6 <renormalize>
}
 8009076:	bf00      	nop
 8009078:	3734      	adds	r7, #52	@ 0x34
 800907a:	46bd      	mov	sp, r7
 800907c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009080 <polyfix_add>:
 *
 * Arguments:   - polyfix *c: pointer to output double polynomial
 *              - const polyfix *a: pointer to first summand
 *              - const poly *b: pointer to second summand
 **************************************************/
void polyfix_add(polyfix *c, const polyfix *a, const poly *b) {
 8009080:	b480      	push	{r7}
 8009082:	b087      	sub	sp, #28
 8009084:	af00      	add	r7, sp, #0
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	60b9      	str	r1, [r7, #8]
 800908a:	607a      	str	r2, [r7, #4]
    unsigned int i;

    for (i = 0; i < N; ++i)
 800908c:	2300      	movs	r3, #0
 800908e:	617b      	str	r3, [r7, #20]
 8009090:	e010      	b.n	80090b4 <polyfix_add+0x34>
        c->coeffs[i] = a->coeffs[i] + LN * b->coeffs[i];
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	697a      	ldr	r2, [r7, #20]
 8009096:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6979      	ldr	r1, [r7, #20]
 800909e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80090a2:	035b      	lsls	r3, r3, #13
 80090a4:	18d1      	adds	r1, r2, r3
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	697a      	ldr	r2, [r7, #20]
 80090aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < N; ++i)
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	3301      	adds	r3, #1
 80090b2:	617b      	str	r3, [r7, #20]
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	2bff      	cmp	r3, #255	@ 0xff
 80090b8:	d9eb      	bls.n	8009092 <polyfix_add+0x12>
}
 80090ba:	bf00      	nop
 80090bc:	bf00      	nop
 80090be:	371c      	adds	r7, #28
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr

080090c8 <polyfix_sub>:
 *
 * Arguments:   - polyfix *c: pointer to output fixed polynomial
 *              - const polyfix *a: pointer to first summand
 *              - const polyfix *b: pointer to second summand
 **************************************************/
void polyfix_sub(polyfix *c, const polyfix *a, const polyfix *b) {
 80090c8:	b480      	push	{r7}
 80090ca:	b087      	sub	sp, #28
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	607a      	str	r2, [r7, #4]
    unsigned int i;

    for (i = 0; i < N; ++i)
 80090d4:	2300      	movs	r3, #0
 80090d6:	617b      	str	r3, [r7, #20]
 80090d8:	e00f      	b.n	80090fa <polyfix_sub+0x32>
        c->coeffs[i] = a->coeffs[i] - b->coeffs[i];
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	697a      	ldr	r2, [r7, #20]
 80090de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6979      	ldr	r1, [r7, #20]
 80090e6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80090ea:	1ad1      	subs	r1, r2, r3
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	697a      	ldr	r2, [r7, #20]
 80090f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < N; ++i)
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	3301      	adds	r3, #1
 80090f8:	617b      	str	r3, [r7, #20]
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	2bff      	cmp	r3, #255	@ 0xff
 80090fe:	d9ec      	bls.n	80090da <polyfix_sub+0x12>
}
 8009100:	bf00      	nop
 8009102:	bf00      	nop
 8009104:	371c      	adds	r7, #28
 8009106:	46bd      	mov	sp, r7
 8009108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910c:	4770      	bx	lr

0800910e <fix_round>:

int32_t fix_round(int32_t num) {
 800910e:	b480      	push	{r7}
 8009110:	b083      	sub	sp, #12
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
    num += (num >> 31) & (-LN + 1);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	17db      	asrs	r3, r3, #31
 800911a:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 800911e:	f023 031e 	bic.w	r3, r3, #30
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	4413      	add	r3, r2
 8009126:	607b      	str	r3, [r7, #4]
    num +=
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800912e:	607b      	str	r3, [r7, #4]
        LN /
        2; // total \floor(LN / 2) if positive, -\floor(LN / 2) + 1 if negative
    return num / LN;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2b00      	cmp	r3, #0
 8009134:	da02      	bge.n	800913c <fix_round+0x2e>
 8009136:	f503 53ff 	add.w	r3, r3, #8160	@ 0x1fe0
 800913a:	331f      	adds	r3, #31
 800913c:	135b      	asrs	r3, r3, #13
}
 800913e:	4618      	mov	r0, r3
 8009140:	370c      	adds	r7, #12
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr

0800914a <polyfix_round>:
 * Description: rounds a fixed polynomial to integer polynomial
 *
 * Arguments:   - poly *a: output integer polynomial
 *              - poly *b: input fixed polynomial
 **************************************************/
void polyfix_round(poly *a, const polyfix *b) {
 800914a:	b580      	push	{r7, lr}
 800914c:	b084      	sub	sp, #16
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
 8009152:	6039      	str	r1, [r7, #0]
    unsigned i;

    for (i = 0; i < N; ++i)
 8009154:	2300      	movs	r3, #0
 8009156:	60fb      	str	r3, [r7, #12]
 8009158:	e00e      	b.n	8009178 <polyfix_round+0x2e>
        a->coeffs[i] = fix_round(b->coeffs[i]);
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	68fa      	ldr	r2, [r7, #12]
 800915e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009162:	4618      	mov	r0, r3
 8009164:	f7ff ffd3 	bl	800910e <fix_round>
 8009168:	4601      	mov	r1, r0
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	68fa      	ldr	r2, [r7, #12]
 800916e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < N; ++i)
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	3301      	adds	r3, #1
 8009176:	60fb      	str	r3, [r7, #12]
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2bff      	cmp	r3, #255	@ 0xff
 800917c:	d9ed      	bls.n	800915a <polyfix_round+0x10>
}
 800917e:	bf00      	nop
 8009180:	bf00      	nop
 8009182:	3710      	adds	r7, #16
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <polyfixveck_round>:
 * Description: rounds a fixed polynomial vector of length K
 *
 * Arguments:   - polyveck *a: output integer polynomial vector
 *              - polyfixveck *b: input fixed polynomial vector
 **************************************************/
void polyfixveck_round(polyveck *a, const polyfixveck *b) {
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	6039      	str	r1, [r7, #0]
    unsigned i;

    for (i = 0; i < K; ++i)
 8009192:	2300      	movs	r3, #0
 8009194:	60fb      	str	r3, [r7, #12]
 8009196:	e00d      	b.n	80091b4 <polyfixveck_round+0x2c>
        polyfix_round(&a->vec[i], &b->vec[i]);
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	029b      	lsls	r3, r3, #10
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	18d0      	adds	r0, r2, r3
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	029b      	lsls	r3, r3, #10
 80091a4:	683a      	ldr	r2, [r7, #0]
 80091a6:	4413      	add	r3, r2
 80091a8:	4619      	mov	r1, r3
 80091aa:	f7ff ffce 	bl	800914a <polyfix_round>
    for (i = 0; i < K; ++i)
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	3301      	adds	r3, #1
 80091b2:	60fb      	str	r3, [r7, #12]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d9ee      	bls.n	8009198 <polyfixveck_round+0x10>
}
 80091ba:	bf00      	nop
 80091bc:	bf00      	nop
 80091be:	3710      	adds	r7, #16
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <polyfix_double>:
 * Description: Double contents of polynomial.
 *
 * Arguments:   - polyveck *b: pointer to output polynomial
 *              - polyveck *a: pointer to input polynomial
 **************************************************/
void polyfix_double(polyfix *b, const polyfix *a) {
 80091c4:	b480      	push	{r7}
 80091c6:	b085      	sub	sp, #20
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
    unsigned int j;

    for (j = 0; j < N; ++j)
 80091ce:	2300      	movs	r3, #0
 80091d0:	60fb      	str	r3, [r7, #12]
 80091d2:	e00b      	b.n	80091ec <polyfix_double+0x28>
        b->coeffs[j] = 2 * a->coeffs[j];
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	68fa      	ldr	r2, [r7, #12]
 80091d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091dc:	0059      	lsls	r1, r3, #1
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	68fa      	ldr	r2, [r7, #12]
 80091e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (j = 0; j < N; ++j)
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	3301      	adds	r3, #1
 80091ea:	60fb      	str	r3, [r7, #12]
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2bff      	cmp	r3, #255	@ 0xff
 80091f0:	d9f0      	bls.n	80091d4 <polyfix_double+0x10>
}
 80091f2:	bf00      	nop
 80091f4:	bf00      	nop
 80091f6:	3714      	adds	r7, #20
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <polyfix_sqnorm2>:
 *
 * Description: Calculates L2 norm of a fixed point polynomial 
 *
 * Arguments:   - polyfix *a: polynomial to calculate norm
 **************************************************/
uint64_t polyfix_sqnorm2(const polyfix *a) {
 8009200:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009204:	b088      	sub	sp, #32
 8009206:	af00      	add	r7, sp, #0
 8009208:	60f8      	str	r0, [r7, #12]
    unsigned int j;
    uint64_t ret = 0;
 800920a:	f04f 0000 	mov.w	r0, #0
 800920e:	f04f 0100 	mov.w	r1, #0
 8009212:	e9c7 0104 	strd	r0, r1, [r7, #16]

    for (j = 0; j < N; ++j)
 8009216:	2100      	movs	r1, #0
 8009218:	61f9      	str	r1, [r7, #28]
 800921a:	e027      	b.n	800926c <polyfix_sqnorm2+0x6c>
        ret += (int64_t)a->coeffs[j] * a->coeffs[j];
 800921c:	68f9      	ldr	r1, [r7, #12]
 800921e:	69f8      	ldr	r0, [r7, #28]
 8009220:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8009224:	17c8      	asrs	r0, r1, #31
 8009226:	460a      	mov	r2, r1
 8009228:	4603      	mov	r3, r0
 800922a:	68f9      	ldr	r1, [r7, #12]
 800922c:	69f8      	ldr	r0, [r7, #28]
 800922e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8009232:	17c8      	asrs	r0, r1, #31
 8009234:	460c      	mov	r4, r1
 8009236:	4605      	mov	r5, r0
 8009238:	fb04 f003 	mul.w	r0, r4, r3
 800923c:	fb02 f105 	mul.w	r1, r2, r5
 8009240:	4401      	add	r1, r0
 8009242:	fba2 8904 	umull	r8, r9, r2, r4
 8009246:	4449      	add	r1, r9
 8009248:	4689      	mov	r9, r1
 800924a:	46c2      	mov	sl, r8
 800924c:	46cb      	mov	fp, r9
 800924e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009252:	eb10 060a 	adds.w	r6, r0, sl
 8009256:	603e      	str	r6, [r7, #0]
 8009258:	eb41 010b 	adc.w	r1, r1, fp
 800925c:	6079      	str	r1, [r7, #4]
 800925e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009262:	e9c7 0104 	strd	r0, r1, [r7, #16]
    for (j = 0; j < N; ++j)
 8009266:	69f9      	ldr	r1, [r7, #28]
 8009268:	3101      	adds	r1, #1
 800926a:	61f9      	str	r1, [r7, #28]
 800926c:	69f9      	ldr	r1, [r7, #28]
 800926e:	29ff      	cmp	r1, #255	@ 0xff
 8009270:	d9d4      	bls.n	800921c <polyfix_sqnorm2+0x1c>

    return ret;
 8009272:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8009276:	4610      	mov	r0, r2
 8009278:	4619      	mov	r1, r3
 800927a:	3720      	adds	r7, #32
 800927c:	46bd      	mov	sp, r7
 800927e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009282:	4770      	bx	lr

08009284 <polyfixveclk_sqnorm2>:
 * Arguments:   - polyfixvecl *a: polynomial vector with length L to calculate
 *                norm
 *              - polyfixveck *a: polynomial vector with length K to calculate
 *                norm
 **************************************************/
uint64_t polyfixveclk_sqnorm2(const polyfixvecl *a, const polyfixveck *b) {
 8009284:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009288:	b086      	sub	sp, #24
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
 800928e:	6039      	str	r1, [r7, #0]
    unsigned int i;
    uint64_t ret = 0;
 8009290:	f04f 0200 	mov.w	r2, #0
 8009294:	f04f 0300 	mov.w	r3, #0
 8009298:	e9c7 2302 	strd	r2, r3, [r7, #8]

    for (i = 0; i < L; ++i) {
 800929c:	2300      	movs	r3, #0
 800929e:	617b      	str	r3, [r7, #20]
 80092a0:	e011      	b.n	80092c6 <polyfixveclk_sqnorm2+0x42>
        ret += polyfix_sqnorm2(&a->vec[i]);
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	029b      	lsls	r3, r3, #10
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	4413      	add	r3, r2
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7ff ffa8 	bl	8009200 <polyfix_sqnorm2>
 80092b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80092b4:	eb12 0800 	adds.w	r8, r2, r0
 80092b8:	eb43 0901 	adc.w	r9, r3, r1
 80092bc:	e9c7 8902 	strd	r8, r9, [r7, #8]
    for (i = 0; i < L; ++i) {
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	3301      	adds	r3, #1
 80092c4:	617b      	str	r3, [r7, #20]
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	2b03      	cmp	r3, #3
 80092ca:	d9ea      	bls.n	80092a2 <polyfixveclk_sqnorm2+0x1e>
    }

    for (i = 0; i < K; ++i) {
 80092cc:	2300      	movs	r3, #0
 80092ce:	617b      	str	r3, [r7, #20]
 80092d0:	e010      	b.n	80092f4 <polyfixveclk_sqnorm2+0x70>
        ret += polyfix_sqnorm2(&b->vec[i]);
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	029b      	lsls	r3, r3, #10
 80092d6:	683a      	ldr	r2, [r7, #0]
 80092d8:	4413      	add	r3, r2
 80092da:	4618      	mov	r0, r3
 80092dc:	f7ff ff90 	bl	8009200 <polyfix_sqnorm2>
 80092e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80092e4:	1814      	adds	r4, r2, r0
 80092e6:	eb43 0501 	adc.w	r5, r3, r1
 80092ea:	e9c7 4502 	strd	r4, r5, [r7, #8]
    for (i = 0; i < K; ++i) {
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	3301      	adds	r3, #1
 80092f2:	617b      	str	r3, [r7, #20]
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d9eb      	bls.n	80092d2 <polyfixveclk_sqnorm2+0x4e>
    }

    return ret;
 80092fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 80092fe:	4610      	mov	r0, r2
 8009300:	4619      	mov	r1, r3
 8009302:	3718      	adds	r7, #24
 8009304:	46bd      	mov	sp, r7
 8009306:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0800930c <polyfixveclk_sample_hyperball>:

uint16_t polyfixveclk_sample_hyperball(polyfixvecl *y1, polyfixveck *y2, uint8_t *b,
                                       const uint8_t seed[CRHBYTES],
                                       const uint16_t nonce) {
 800930c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009310:	f5ad 5d46 	sub.w	sp, sp, #12672	@ 0x3180
 8009314:	b082      	sub	sp, #8
 8009316:	af02      	add	r7, sp, #8
 8009318:	f507 74c0 	add.w	r4, r7, #384	@ 0x180
 800931c:	f5a4 74aa 	sub.w	r4, r4, #340	@ 0x154
 8009320:	6020      	str	r0, [r4, #0]
 8009322:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8009326:	f5a0 70ac 	sub.w	r0, r0, #344	@ 0x158
 800932a:	6001      	str	r1, [r0, #0]
 800932c:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 8009330:	f5a1 71ae 	sub.w	r1, r1, #348	@ 0x15c
 8009334:	600a      	str	r2, [r1, #0]
 8009336:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 800933a:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800933e:	6013      	str	r3, [r2, #0]
    uint16_t ni = nonce;
 8009340:	f507 5346 	add.w	r3, r7, #12672	@ 0x3180
 8009344:	f103 0320 	add.w	r3, r3, #32
 8009348:	881b      	ldrh	r3, [r3, #0]
 800934a:	f507 5245 	add.w	r2, r7, #12608	@ 0x3140
 800934e:	f102 023e 	add.w	r2, r2, #62	@ 0x3e
 8009352:	8013      	strh	r3, [r2, #0]
    uint64_t samples[N * (L + K)];
    fp112_76 sqsum112 = {{0}};
 8009354:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009358:	3b28      	subs	r3, #40	@ 0x28
 800935a:	2200      	movs	r2, #0
 800935c:	601a      	str	r2, [r3, #0]
 800935e:	605a      	str	r2, [r3, #4]
 8009360:	609a      	str	r2, [r3, #8]
 8009362:	60da      	str	r2, [r3, #12]
    uint64_t sqnorm2;
    unsigned int i, j;
    uint8_t signs[N * (L + K) / 8];

    do {
        set_to_zero_112(&sqsum112);
 8009364:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009368:	3b28      	subs	r3, #40	@ 0x28
 800936a:	4618      	mov	r0, r3
 800936c:	f7fa f9e2 	bl	8003734 <set_to_zero_112>
        sample_gauss_N(&samples[0], &signs[0], &sqsum112, seed, ni++, N + 1);
 8009370:	f507 5345 	add.w	r3, r7, #12608	@ 0x3140
 8009374:	f103 033e 	add.w	r3, r3, #62	@ 0x3e
 8009378:	8818      	ldrh	r0, [r3, #0]
 800937a:	1c43      	adds	r3, r0, #1
 800937c:	f507 5245 	add.w	r2, r7, #12608	@ 0x3140
 8009380:	f102 023e 	add.w	r2, r2, #62	@ 0x3e
 8009384:	8013      	strh	r3, [r2, #0]
 8009386:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800938a:	f5a3 75b0 	sub.w	r5, r3, #352	@ 0x160
 800938e:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8009392:	3a28      	subs	r2, #40	@ 0x28
 8009394:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 8009398:	3908      	subs	r1, #8
 800939a:	f507 74c0 	add.w	r4, r7, #384	@ 0x180
 800939e:	3c18      	subs	r4, #24
 80093a0:	f240 1301 	movw	r3, #257	@ 0x101
 80093a4:	9301      	str	r3, [sp, #4]
 80093a6:	9000      	str	r0, [sp, #0]
 80093a8:	682b      	ldr	r3, [r5, #0]
 80093aa:	4620      	mov	r0, r4
 80093ac:	f002 f8a2 	bl	800b4f4 <sample_gauss_N>
        sample_gauss_N(&samples[N], &signs[N / 8], &sqsum112, seed, ni++, N + 1);
 80093b0:	f507 5345 	add.w	r3, r7, #12608	@ 0x3140
 80093b4:	f103 033e 	add.w	r3, r3, #62	@ 0x3e
 80093b8:	8819      	ldrh	r1, [r3, #0]
 80093ba:	1c4b      	adds	r3, r1, #1
 80093bc:	f507 5245 	add.w	r2, r7, #12608	@ 0x3140
 80093c0:	f102 023e 	add.w	r2, r2, #62	@ 0x3e
 80093c4:	8013      	strh	r3, [r2, #0]
 80093c6:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80093ca:	f5a3 74b0 	sub.w	r4, r3, #352	@ 0x160
 80093ce:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 80093d2:	3a28      	subs	r2, #40	@ 0x28
 80093d4:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80093d8:	3b08      	subs	r3, #8
 80093da:	f103 0520 	add.w	r5, r3, #32
 80093de:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80093e2:	3b18      	subs	r3, #24
 80093e4:	f503 6000 	add.w	r0, r3, #2048	@ 0x800
 80093e8:	f240 1301 	movw	r3, #257	@ 0x101
 80093ec:	9301      	str	r3, [sp, #4]
 80093ee:	9100      	str	r1, [sp, #0]
 80093f0:	6823      	ldr	r3, [r4, #0]
 80093f2:	4629      	mov	r1, r5
 80093f4:	f002 f87e 	bl	800b4f4 <sample_gauss_N>

        for (i = 2; i < L + K; i++)
 80093f8:	2302      	movs	r3, #2
 80093fa:	f507 5245 	add.w	r2, r7, #12608	@ 0x3140
 80093fe:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8009402:	6013      	str	r3, [r2, #0]
 8009404:	e03a      	b.n	800947c <polyfixveclk_sample_hyperball+0x170>
            sample_gauss_N(&samples[N * i], &signs[N / 8 * i], &sqsum112, seed,
 8009406:	f507 5345 	add.w	r3, r7, #12608	@ 0x3140
 800940a:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	021a      	lsls	r2, r3, #8
 8009412:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009416:	3b18      	subs	r3, #24
 8009418:	00d2      	lsls	r2, r2, #3
 800941a:	189d      	adds	r5, r3, r2
 800941c:	f507 5345 	add.w	r3, r7, #12608	@ 0x3140
 8009420:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	015a      	lsls	r2, r3, #5
 8009428:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800942c:	3b08      	subs	r3, #8
 800942e:	189c      	adds	r4, r3, r2
 8009430:	f507 5345 	add.w	r3, r7, #12608	@ 0x3140
 8009434:	f103 033e 	add.w	r3, r3, #62	@ 0x3e
 8009438:	8818      	ldrh	r0, [r3, #0]
 800943a:	1c43      	adds	r3, r0, #1
 800943c:	f507 5245 	add.w	r2, r7, #12608	@ 0x3140
 8009440:	f102 023e 	add.w	r2, r2, #62	@ 0x3e
 8009444:	8013      	strh	r3, [r2, #0]
 8009446:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800944a:	f5a3 71b0 	sub.w	r1, r3, #352	@ 0x160
 800944e:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8009452:	3a28      	subs	r2, #40	@ 0x28
 8009454:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009458:	9301      	str	r3, [sp, #4]
 800945a:	9000      	str	r0, [sp, #0]
 800945c:	680b      	ldr	r3, [r1, #0]
 800945e:	4621      	mov	r1, r4
 8009460:	4628      	mov	r0, r5
 8009462:	f002 f847 	bl	800b4f4 <sample_gauss_N>
        for (i = 2; i < L + K; i++)
 8009466:	f507 5345 	add.w	r3, r7, #12608	@ 0x3140
 800946a:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	3301      	adds	r3, #1
 8009472:	f507 5245 	add.w	r2, r7, #12608	@ 0x3140
 8009476:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 800947a:	6013      	str	r3, [r2, #0]
 800947c:	f507 5345 	add.w	r3, r7, #12608	@ 0x3140
 8009480:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	2b05      	cmp	r3, #5
 8009488:	d9bd      	bls.n	8009406 <polyfixveclk_sample_hyperball+0xfa>
                           ni++, N);

        convert_fp112_76_to_fp96_76(&sqsum, &sqsum112);
 800948a:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 800948e:	3a28      	subs	r2, #40	@ 0x28
 8009490:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009494:	3b38      	subs	r3, #56	@ 0x38
 8009496:	4611      	mov	r1, r2
 8009498:	4618      	mov	r0, r3
 800949a:	f7fa f851 	bl	8003540 <convert_fp112_76_to_fp96_76>

        // divide sqsum by 2 and approximate inverse square root
        sqsum.limb48[0] += 1; // rounding
 800949e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80094a2:	e953 230e 	ldrd	r2, r3, [r3, #-56]	@ 0x38
 80094a6:	1c51      	adds	r1, r2, #1
 80094a8:	61b9      	str	r1, [r7, #24]
 80094aa:	f143 0300 	adc.w	r3, r3, #0
 80094ae:	61fb      	str	r3, [r7, #28]
 80094b0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80094b4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80094b8:	e943 120e 	strd	r1, r2, [r3, #-56]	@ 0x38
        sqsum.limb48[0] >>= 1;
 80094bc:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80094c0:	e953 010e 	ldrd	r0, r1, [r3, #-56]	@ 0x38
 80094c4:	f04f 0200 	mov.w	r2, #0
 80094c8:	f04f 0300 	mov.w	r3, #0
 80094cc:	0842      	lsrs	r2, r0, #1
 80094ce:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80094d2:	084b      	lsrs	r3, r1, #1
 80094d4:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 80094d8:	e941 230e 	strd	r2, r3, [r1, #-56]	@ 0x38
        sqsum.limb48[0] += (sqsum.limb48[1] & 1) << 47;
 80094dc:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80094e0:	e953 450e 	ldrd	r4, r5, [r3, #-56]	@ 0x38
 80094e4:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80094e8:	e953 230c 	ldrd	r2, r3, [r3, #-48]	@ 0x30
 80094ec:	f04f 0000 	mov.w	r0, #0
 80094f0:	f04f 0100 	mov.w	r1, #0
 80094f4:	03d1      	lsls	r1, r2, #15
 80094f6:	2000      	movs	r0, #0
 80094f8:	f04f 0a00 	mov.w	sl, #0
 80094fc:	f401 4b00 	and.w	fp, r1, #32768	@ 0x8000
 8009500:	eb14 030a 	adds.w	r3, r4, sl
 8009504:	613b      	str	r3, [r7, #16]
 8009506:	eb45 030b 	adc.w	r3, r5, fp
 800950a:	617b      	str	r3, [r7, #20]
 800950c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009510:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009514:	e943 120e 	strd	r1, r2, [r3, #-56]	@ 0x38
        sqsum.limb48[1] >>= 1;
 8009518:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800951c:	e953 010c 	ldrd	r0, r1, [r3, #-48]	@ 0x30
 8009520:	f04f 0200 	mov.w	r2, #0
 8009524:	f04f 0300 	mov.w	r3, #0
 8009528:	0842      	lsrs	r2, r0, #1
 800952a:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800952e:	084b      	lsrs	r3, r1, #1
 8009530:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 8009534:	e941 230c 	strd	r2, r3, [r1, #-48]	@ 0x30
        sqsum.limb48[1] += sqsum.limb48[0] >> 48;
 8009538:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800953c:	e953 450c 	ldrd	r4, r5, [r3, #-48]	@ 0x30
 8009540:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009544:	e953 010e 	ldrd	r0, r1, [r3, #-56]	@ 0x38
 8009548:	f04f 0200 	mov.w	r2, #0
 800954c:	f04f 0300 	mov.w	r3, #0
 8009550:	0c0a      	lsrs	r2, r1, #16
 8009552:	2300      	movs	r3, #0
 8009554:	18a1      	adds	r1, r4, r2
 8009556:	60b9      	str	r1, [r7, #8]
 8009558:	eb45 0303 	adc.w	r3, r5, r3
 800955c:	60fb      	str	r3, [r7, #12]
 800955e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009562:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009566:	e943 120c 	strd	r1, r2, [r3, #-48]	@ 0x30
        sqsum.limb48[0] &= (1ULL << 48) - 1;
 800956a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800956e:	e953 230e 	ldrd	r2, r3, [r3, #-56]	@ 0x38
 8009572:	603a      	str	r2, [r7, #0]
 8009574:	b29b      	uxth	r3, r3
 8009576:	607b      	str	r3, [r7, #4]
 8009578:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800957c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009580:	e943 120e 	strd	r1, r2, [r3, #-56]	@ 0x38
        fixpoint_newton_invsqrt(&invsqrt, &sqsum);
 8009584:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8009588:	3a38      	subs	r2, #56	@ 0x38
 800958a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800958e:	3b08      	subs	r3, #8
 8009590:	4611      	mov	r1, r2
 8009592:	4618      	mov	r0, r3
 8009594:	f7f9 fd16 	bl	8002fc4 <fixpoint_newton_invsqrt>
        fixpoint_mul_high(&sqsum, &invsqrt,
 8009598:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800959c:	3908      	subs	r1, #8
 800959e:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 80095a2:	3838      	subs	r0, #56	@ 0x38
 80095a4:	4ac8      	ldr	r2, [pc, #800]	@ (80098c8 <polyfixveclk_sample_hyperball+0x5bc>)
 80095a6:	f240 2367 	movw	r3, #615	@ 0x267
 80095aa:	f7ff fcd9 	bl	8008f60 <fixpoint_mul_high>
                          (uint64_t)(B0 * LN + SQNM / 2) << (28 - 13));

        for (i = 0; i < L; i++) {
 80095ae:	2300      	movs	r3, #0
 80095b0:	f507 5245 	add.w	r2, r7, #12608	@ 0x3140
 80095b4:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 80095b8:	6013      	str	r3, [r2, #0]
 80095ba:	e075      	b.n	80096a8 <polyfixveclk_sample_hyperball+0x39c>
            for (j = 0; j < N; j++)
 80095bc:	2300      	movs	r3, #0
 80095be:	f507 5245 	add.w	r2, r7, #12608	@ 0x3140
 80095c2:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 80095c6:	6013      	str	r3, [r2, #0]
 80095c8:	e05c      	b.n	8009684 <polyfixveclk_sample_hyperball+0x378>
                y1->vec[i].coeffs[j] = fixpoint_mul_rnd13(
                    samples[(i * N + j)], &sqsum,
 80095ca:	f507 5345 	add.w	r3, r7, #12608	@ 0x3140
 80095ce:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	021a      	lsls	r2, r3, #8
 80095d6:	f507 5345 	add.w	r3, r7, #12608	@ 0x3140
 80095da:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4413      	add	r3, r2
                y1->vec[i].coeffs[j] = fixpoint_mul_rnd13(
 80095e2:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 80095e6:	00db      	lsls	r3, r3, #3
 80095e8:	4413      	add	r3, r2
 80095ea:	3b18      	subs	r3, #24
 80095ec:	e9d3 0100 	ldrd	r0, r1, [r3]
                    (signs[(i * N + j) / 8] >> ((i * N + j) % 8)) & 1);
 80095f0:	f507 5345 	add.w	r3, r7, #12608	@ 0x3140
 80095f4:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	021a      	lsls	r2, r3, #8
 80095fc:	f507 5345 	add.w	r3, r7, #12608	@ 0x3140
 8009600:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4413      	add	r3, r2
 8009608:	08da      	lsrs	r2, r3, #3
 800960a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800960e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009612:	5c9b      	ldrb	r3, [r3, r2]
 8009614:	461c      	mov	r4, r3
 8009616:	f507 5345 	add.w	r3, r7, #12608	@ 0x3140
 800961a:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	021a      	lsls	r2, r3, #8
 8009622:	f507 5345 	add.w	r3, r7, #12608	@ 0x3140
 8009626:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4413      	add	r3, r2
 800962e:	f003 0307 	and.w	r3, r3, #7
 8009632:	fa44 f303 	asr.w	r3, r4, r3
 8009636:	b2db      	uxtb	r3, r3
                y1->vec[i].coeffs[j] = fixpoint_mul_rnd13(
 8009638:	f003 0301 	and.w	r3, r3, #1
 800963c:	b2db      	uxtb	r3, r3
 800963e:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8009642:	3a38      	subs	r2, #56	@ 0x38
 8009644:	f7f9 fcfc 	bl	8003040 <fixpoint_mul_rnd13>
 8009648:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800964c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8009650:	681a      	ldr	r2, [r3, #0]
 8009652:	f507 5345 	add.w	r3, r7, #12608	@ 0x3140
 8009656:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	0219      	lsls	r1, r3, #8
 800965e:	f507 5345 	add.w	r3, r7, #12608	@ 0x3140
 8009662:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	440b      	add	r3, r1
 800966a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
            for (j = 0; j < N; j++)
 800966e:	f507 5345 	add.w	r3, r7, #12608	@ 0x3140
 8009672:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	3301      	adds	r3, #1
 800967a:	f507 5245 	add.w	r2, r7, #12608	@ 0x3140
 800967e:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8009682:	6013      	str	r3, [r2, #0]
 8009684:	f507 5345 	add.w	r3, r7, #12608	@ 0x3140
 8009688:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	2bff      	cmp	r3, #255	@ 0xff
 8009690:	d99b      	bls.n	80095ca <polyfixveclk_sample_hyperball+0x2be>
        for (i = 0; i < L; i++) {
 8009692:	f507 5345 	add.w	r3, r7, #12608	@ 0x3140
 8009696:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	3301      	adds	r3, #1
 800969e:	f507 5245 	add.w	r2, r7, #12608	@ 0x3140
 80096a2:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 80096a6:	6013      	str	r3, [r2, #0]
 80096a8:	f507 5345 	add.w	r3, r7, #12608	@ 0x3140
 80096ac:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	2b03      	cmp	r3, #3
 80096b4:	d982      	bls.n	80095bc <polyfixveclk_sample_hyperball+0x2b0>
        }
        for (i = L; i < K + L; i++) {
 80096b6:	2304      	movs	r3, #4
 80096b8:	f507 5245 	add.w	r2, r7, #12608	@ 0x3140
 80096bc:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 80096c0:	6013      	str	r3, [r2, #0]
 80096c2:	e079      	b.n	80097b8 <polyfixveclk_sample_hyperball+0x4ac>
            for (j = 0; j < N; j++)
 80096c4:	2300      	movs	r3, #0
 80096c6:	f507 5245 	add.w	r2, r7, #12608	@ 0x3140
 80096ca:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 80096ce:	6013      	str	r3, [r2, #0]
 80096d0:	e060      	b.n	8009794 <polyfixveclk_sample_hyperball+0x488>
                y2->vec[i - L].coeffs[j] = fixpoint_mul_rnd13(
                    samples[(i * N + j)], &sqsum,
 80096d2:	f507 5345 	add.w	r3, r7, #12608	@ 0x3140
 80096d6:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	021a      	lsls	r2, r3, #8
 80096de:	f507 5345 	add.w	r3, r7, #12608	@ 0x3140
 80096e2:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4413      	add	r3, r2
                y2->vec[i - L].coeffs[j] = fixpoint_mul_rnd13(
 80096ea:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 80096ee:	00db      	lsls	r3, r3, #3
 80096f0:	4413      	add	r3, r2
 80096f2:	3b18      	subs	r3, #24
 80096f4:	e9d3 8900 	ldrd	r8, r9, [r3]
                    (signs[(i * N + j) / 8] >> ((i * N + j) % 8)) & 1);
 80096f8:	f507 5345 	add.w	r3, r7, #12608	@ 0x3140
 80096fc:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	021a      	lsls	r2, r3, #8
 8009704:	f507 5345 	add.w	r3, r7, #12608	@ 0x3140
 8009708:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4413      	add	r3, r2
 8009710:	08da      	lsrs	r2, r3, #3
 8009712:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009716:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800971a:	5c9b      	ldrb	r3, [r3, r2]
 800971c:	4619      	mov	r1, r3
 800971e:	f507 5345 	add.w	r3, r7, #12608	@ 0x3140
 8009722:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	021a      	lsls	r2, r3, #8
 800972a:	f507 5345 	add.w	r3, r7, #12608	@ 0x3140
 800972e:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4413      	add	r3, r2
 8009736:	f003 0307 	and.w	r3, r3, #7
 800973a:	fa41 f303 	asr.w	r3, r1, r3
 800973e:	b2db      	uxtb	r3, r3
                y2->vec[i - L].coeffs[j] = fixpoint_mul_rnd13(
 8009740:	f003 0301 	and.w	r3, r3, #1
 8009744:	b2d9      	uxtb	r1, r3
 8009746:	f507 5345 	add.w	r3, r7, #12608	@ 0x3140
 800974a:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	1f1c      	subs	r4, r3, #4
 8009752:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8009756:	3a38      	subs	r2, #56	@ 0x38
 8009758:	460b      	mov	r3, r1
 800975a:	4640      	mov	r0, r8
 800975c:	4649      	mov	r1, r9
 800975e:	f7f9 fc6f 	bl	8003040 <fixpoint_mul_rnd13>
 8009762:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009766:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	0221      	lsls	r1, r4, #8
 800976e:	f507 5345 	add.w	r3, r7, #12608	@ 0x3140
 8009772:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	440b      	add	r3, r1
 800977a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
            for (j = 0; j < N; j++)
 800977e:	f507 5345 	add.w	r3, r7, #12608	@ 0x3140
 8009782:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	3301      	adds	r3, #1
 800978a:	f507 5245 	add.w	r2, r7, #12608	@ 0x3140
 800978e:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8009792:	6013      	str	r3, [r2, #0]
 8009794:	f507 5345 	add.w	r3, r7, #12608	@ 0x3140
 8009798:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2bff      	cmp	r3, #255	@ 0xff
 80097a0:	d997      	bls.n	80096d2 <polyfixveclk_sample_hyperball+0x3c6>
        for (i = L; i < K + L; i++) {
 80097a2:	f507 5345 	add.w	r3, r7, #12608	@ 0x3140
 80097a6:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	3301      	adds	r3, #1
 80097ae:	f507 5245 	add.w	r2, r7, #12608	@ 0x3140
 80097b2:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 80097b6:	6013      	str	r3, [r2, #0]
 80097b8:	f507 5345 	add.w	r3, r7, #12608	@ 0x3140
 80097bc:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2b05      	cmp	r3, #5
 80097c4:	f67f af7e 	bls.w	80096c4 <polyfixveclk_sample_hyperball+0x3b8>
        }
        sqnorm2 = polyfixveclk_sqnorm2(y1, y2);
 80097c8:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80097cc:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 80097d0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80097d4:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80097d8:	6811      	ldr	r1, [r2, #0]
 80097da:	6818      	ldr	r0, [r3, #0]
 80097dc:	f7ff fd52 	bl	8009284 <polyfixveclk_sqnorm2>
 80097e0:	f507 5345 	add.w	r3, r7, #12608	@ 0x3140
 80097e4:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80097e8:	e9c3 0100 	strd	r0, r1, [r3]
    } while (sqnorm2 > B0SQ * LN * LN);
 80097ec:	f507 5345 	add.w	r3, r7, #12608	@ 0x3140
 80097f0:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80097f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f8:	4934      	ldr	r1, [pc, #208]	@ (80098cc <polyfixveclk_sample_hyperball+0x5c0>)
 80097fa:	428a      	cmp	r2, r1
 80097fc:	4934      	ldr	r1, [pc, #208]	@ (80098d0 <polyfixveclk_sample_hyperball+0x5c4>)
 80097fe:	418b      	sbcs	r3, r1
 8009800:	f4bf adb0 	bcs.w	8009364 <polyfixveclk_sample_hyperball+0x58>

    {
        uint8_t tmp[CRHBYTES + 2];
        for (i = 0; i < CRHBYTES; i++)
 8009804:	2300      	movs	r3, #0
 8009806:	f507 5245 	add.w	r2, r7, #12608	@ 0x3140
 800980a:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 800980e:	6013      	str	r3, [r2, #0]
 8009810:	e022      	b.n	8009858 <polyfixveclk_sample_hyperball+0x54c>
        {
            tmp[i] = seed[i];
 8009812:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009816:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	f507 5345 	add.w	r3, r7, #12608	@ 0x3140
 8009820:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4413      	add	r3, r2
 8009828:	7819      	ldrb	r1, [r3, #0]
 800982a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800982e:	f5a3 72a6 	sub.w	r2, r3, #332	@ 0x14c
 8009832:	f507 5345 	add.w	r3, r7, #12608	@ 0x3140
 8009836:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4413      	add	r3, r2
 800983e:	460a      	mov	r2, r1
 8009840:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < CRHBYTES; i++)
 8009842:	f507 5345 	add.w	r3, r7, #12608	@ 0x3140
 8009846:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	3301      	adds	r3, #1
 800984e:	f507 5245 	add.w	r2, r7, #12608	@ 0x3140
 8009852:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8009856:	6013      	str	r3, [r2, #0]
 8009858:	f507 5345 	add.w	r3, r7, #12608	@ 0x3140
 800985c:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	2b3f      	cmp	r3, #63	@ 0x3f
 8009864:	d9d5      	bls.n	8009812 <polyfixveclk_sample_hyperball+0x506>
        }
        tmp[CRHBYTES + 0] = ni >> 0;
 8009866:	f507 5345 	add.w	r3, r7, #12608	@ 0x3140
 800986a:	f103 033e 	add.w	r3, r3, #62	@ 0x3e
 800986e:	881b      	ldrh	r3, [r3, #0]
 8009870:	b2da      	uxtb	r2, r3
 8009872:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009876:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800987a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        tmp[CRHBYTES + 1] = ni >> 8;
 800987e:	f507 5345 	add.w	r3, r7, #12608	@ 0x3140
 8009882:	f103 033e 	add.w	r3, r3, #62	@ 0x3e
 8009886:	881b      	ldrh	r3, [r3, #0]
 8009888:	0a1b      	lsrs	r3, r3, #8
 800988a:	b29b      	uxth	r3, r3
 800988c:	b2da      	uxtb	r2, r3
 800988e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009892:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8009896:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        shake256(b, 1, tmp, CRHBYTES+2);
 800989a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800989e:	3a0c      	subs	r2, #12
 80098a0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80098a4:	f5a3 70ae 	sub.w	r0, r3, #348	@ 0x15c
 80098a8:	2342      	movs	r3, #66	@ 0x42
 80098aa:	2101      	movs	r1, #1
 80098ac:	6800      	ldr	r0, [r0, #0]
 80098ae:	f7f8 fdc5 	bl	800243c <shake256>
    }

    return ni;
 80098b2:	f507 5345 	add.w	r3, r7, #12608	@ 0x3140
 80098b6:	f103 033e 	add.w	r3, r3, #62	@ 0x3e
 80098ba:	881b      	ldrh	r3, [r3, #0]
}
 80098bc:	4618      	mov	r0, r3
 80098be:	f507 5746 	add.w	r7, r7, #12672	@ 0x3180
 80098c2:	46bd      	mov	sp, r7
 80098c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80098c8:	605b8000 	.word	0x605b8000
 80098cc:	b4000001 	.word	0xb4000001
 80098d0:	00171cff 	.word	0x00171cff

080098d4 <expand_a_gen_mod_q_elem>:
 *              - const row: row of the matrix element 0 <= row < K
 *              - const column: column of the matrix element 0 <= column < L
 *              - const uint8_t pk[]: compressed public key
 **************************************************/
static void expand_a_gen_mod_q_elem(poly *elem, const size_t row, const size_t column,
                             const uint8_t pk[CRYPTO_PUBLICKEYBYTES]){
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b086      	sub	sp, #24
 80098d8:	af00      	add	r7, sp, #0
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	607a      	str	r2, [r7, #4]
 80098e0:	603b      	str	r3, [r7, #0]
    uint16_t nonce;

    nonce = (row << 8) + (column);
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	021b      	lsls	r3, r3, #8
 80098e8:	b29a      	uxth	r2, r3
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	4413      	add	r3, r2
 80098f0:	82fb      	strh	r3, [r7, #22]
    poly_uniform(elem, pk, nonce);
 80098f2:	8afb      	ldrh	r3, [r7, #22]
 80098f4:	461a      	mov	r2, r3
 80098f6:	6839      	ldr	r1, [r7, #0]
 80098f8:	68f8      	ldr	r0, [r7, #12]
 80098fa:	f7fd fff4 	bl	80078e6 <poly_uniform>
    poly_shl(elem, 1);
 80098fe:	2101      	movs	r1, #1
 8009900:	68f8      	ldr	r0, [r7, #12]
 8009902:	f7fd fe62 	bl	80075ca <poly_shl>
}
 8009906:	bf00      	nop
 8009908:	3718      	adds	r7, #24
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <expand_b_mod_q_elem>:
 * Arguments:   - poly elem: output poly for the matrix element
 *              - const row: row of the matrix element 0 <= row < K
 *              - const column: column of the matrix element 0 <= column < L
 *              - const uint8_t pk[]: compressed public key
 **************************************************/
static void expand_b_mod_q_elem(poly *elem, const size_t row, const uint8_t pk[CRYPTO_PUBLICKEYBYTES]){
 800990e:	b580      	push	{r7, lr}
 8009910:	f5ad 6d83 	sub.w	sp, sp, #1048	@ 0x418
 8009914:	af00      	add	r7, sp, #0
 8009916:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 800991a:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 800991e:	6018      	str	r0, [r3, #0]
 8009920:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8009924:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8009928:	6019      	str	r1, [r3, #0]
 800992a:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 800992e:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8009932:	601a      	str	r2, [r3, #0]
    polyq_unpack(elem, pk + SEEDBYTES + row * POLYQ_PACKEDBYTES);
#else
    poly a;
    uint16_t nonce;

    polyq_unpack(elem, pk + SEEDBYTES + row * POLYQ_PACKEDBYTES);
 8009934:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8009938:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	4613      	mov	r3, r2
 8009940:	011b      	lsls	r3, r3, #4
 8009942:	1a9b      	subs	r3, r3, r2
 8009944:	015b      	lsls	r3, r3, #5
 8009946:	3320      	adds	r3, #32
 8009948:	f507 6283 	add.w	r2, r7, #1048	@ 0x418
 800994c:	f2a2 4214 	subw	r2, r2, #1044	@ 0x414
 8009950:	6812      	ldr	r2, [r2, #0]
 8009952:	441a      	add	r2, r3
 8009954:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8009958:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 800995c:	4611      	mov	r1, r2
 800995e:	6818      	ldr	r0, [r3, #0]
 8009960:	f7fe fd51 	bl	8008406 <polyq_unpack>

    // first column of A = 2(a-b1*2^d)
    
    nonce = (K << 8) + M + row;
 8009964:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8009968:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	b29b      	uxth	r3, r3
 8009970:	f203 2303 	addw	r3, r3, #515	@ 0x203
 8009974:	f8a7 3416 	strh.w	r3, [r7, #1046]	@ 0x416
    // dbg_send_msg_and_hexdump("b nonce: ", (uint8_t*) &nonce, sizeof(nonce));
    poly_uniform(&a, pk, nonce);
 8009978:	f8b7 2416 	ldrh.w	r2, [r7, #1046]	@ 0x416
 800997c:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8009980:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8009984:	f107 0014 	add.w	r0, r7, #20
 8009988:	6819      	ldr	r1, [r3, #0]
 800998a:	f7fd ffac 	bl	80078e6 <poly_uniform>

    poly_shl(elem, D);
 800998e:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8009992:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8009996:	2101      	movs	r1, #1
 8009998:	6818      	ldr	r0, [r3, #0]
 800999a:	f7fd fe16 	bl	80075ca <poly_shl>

    poly_sub(elem, &a, elem);
 800999e:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 80099a2:	f2a3 420c 	subw	r2, r3, #1036	@ 0x40c
 80099a6:	f107 0114 	add.w	r1, r7, #20
 80099aa:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 80099ae:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 80099b2:	6812      	ldr	r2, [r2, #0]
 80099b4:	6818      	ldr	r0, [r3, #0]
 80099b6:	f7fd fdc1 	bl	800753c <poly_sub>
    poly_shl(elem, 1);
 80099ba:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 80099be:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 80099c2:	2101      	movs	r1, #1
 80099c4:	6818      	ldr	r0, [r3, #0]
 80099c6:	f7fd fe00 	bl	80075ca <poly_shl>
    poly_ntt(elem);
 80099ca:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 80099ce:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 80099d2:	6818      	ldr	r0, [r3, #0]
 80099d4:	f7ff f96f 	bl	8008cb6 <poly_ntt>
#endif
}
 80099d8:	bf00      	nop
 80099da:	f507 6783 	add.w	r7, r7, #1048	@ 0x418
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}

080099e2 <expand_pk_matrix_elem_frozen>:
 *              - const row: row of the matrix element 0 <= row < K
 *              - const column: column of the matrix element 0 <= column < L
 *              - const uint8_t pk[]: compressed public key
 **************************************************/
void expand_pk_matrix_elem_frozen(poly_frozen *elem, const size_t row, const size_t column,
                           const uint8_t pk[CRYPTO_PUBLICKEYBYTES]){
 80099e2:	b590      	push	{r4, r7, lr}
 80099e4:	f2ad 4d1c 	subw	sp, sp, #1052	@ 0x41c
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	f507 6483 	add.w	r4, r7, #1048	@ 0x418
 80099ee:	f2a4 440c 	subw	r4, r4, #1036	@ 0x40c
 80099f2:	6020      	str	r0, [r4, #0]
 80099f4:	f507 6083 	add.w	r0, r7, #1048	@ 0x418
 80099f8:	f5a0 6082 	sub.w	r0, r0, #1040	@ 0x410
 80099fc:	6001      	str	r1, [r0, #0]
 80099fe:	f507 6183 	add.w	r1, r7, #1048	@ 0x418
 8009a02:	f2a1 4114 	subw	r1, r1, #1044	@ 0x414
 8009a06:	600a      	str	r2, [r1, #0]
 8009a08:	f507 6283 	add.w	r2, r7, #1048	@ 0x418
 8009a0c:	f5a2 6283 	sub.w	r2, r2, #1048	@ 0x418
 8009a10:	6013      	str	r3, [r2, #0]
    poly p;
    if (0 < column) {
 8009a12:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8009a16:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d014      	beq.n	8009a4a <expand_pk_matrix_elem_frozen+0x68>
        expand_a_gen_mod_q_elem(&p, row, column - 1, pk);
 8009a20:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8009a24:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	1e5a      	subs	r2, r3, #1
 8009a2c:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8009a30:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 8009a34:	f507 6183 	add.w	r1, r7, #1048	@ 0x418
 8009a38:	f5a1 6182 	sub.w	r1, r1, #1040	@ 0x410
 8009a3c:	f107 0014 	add.w	r0, r7, #20
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	6809      	ldr	r1, [r1, #0]
 8009a44:	f7ff ff46 	bl	80098d4 <expand_a_gen_mod_q_elem>
 8009a48:	e00d      	b.n	8009a66 <expand_pk_matrix_elem_frozen+0x84>
    } else {
        expand_b_mod_q_elem(&p, row, pk);
 8009a4a:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8009a4e:	f5a3 6283 	sub.w	r2, r3, #1048	@ 0x418
 8009a52:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8009a56:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8009a5a:	f107 0014 	add.w	r0, r7, #20
 8009a5e:	6812      	ldr	r2, [r2, #0]
 8009a60:	6819      	ldr	r1, [r3, #0]
 8009a62:	f7ff ff54 	bl	800990e <expand_b_mod_q_elem>
    }
    for (size_t j = 0; j < N; j++) {
 8009a66:	2300      	movs	r3, #0
 8009a68:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
 8009a6c:	e01a      	b.n	8009aa4 <expand_pk_matrix_elem_frozen+0xc2>
        elem->coeffs[j] = (uint16_t) (freeze(p.coeffs[j]) & 0xFFFF);
 8009a6e:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8009a72:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8009a76:	f8d7 2414 	ldr.w	r2, [r7, #1044]	@ 0x414
 8009a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f000 fed0 	bl	800a824 <freeze>
 8009a84:	4603      	mov	r3, r0
 8009a86:	b299      	uxth	r1, r3
 8009a88:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8009a8c:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f8d7 2414 	ldr.w	r2, [r7, #1044]	@ 0x414
 8009a96:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (size_t j = 0; j < N; j++) {
 8009a9a:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
 8009aa4:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 8009aa8:	2bff      	cmp	r3, #255	@ 0xff
 8009aaa:	d9e0      	bls.n	8009a6e <expand_pk_matrix_elem_frozen+0x8c>
    }
}
 8009aac:	bf00      	nop
 8009aae:	bf00      	nop
 8009ab0:	f207 471c 	addw	r7, r7, #1052	@ 0x41c
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd90      	pop	{r4, r7, pc}

08009ab8 <polyveck_add>:
 *
 * Arguments:   - polyveck *w: pointer to output vector
 *              - const polyveck *u: pointer to first summand
 *              - const polyveck *v: pointer to second summand
 **************************************************/
void polyveck_add(polyveck *w, const polyveck *u, const polyveck *v) {
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b086      	sub	sp, #24
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	60f8      	str	r0, [r7, #12]
 8009ac0:	60b9      	str	r1, [r7, #8]
 8009ac2:	607a      	str	r2, [r7, #4]
    unsigned int i;

    for (i = 0; i < K; ++i)
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	617b      	str	r3, [r7, #20]
 8009ac8:	e011      	b.n	8009aee <polyveck_add+0x36>
        poly_add(&w->vec[i], &u->vec[i], &v->vec[i]);
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	029b      	lsls	r3, r3, #10
 8009ace:	68fa      	ldr	r2, [r7, #12]
 8009ad0:	18d0      	adds	r0, r2, r3
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	029b      	lsls	r3, r3, #10
 8009ad6:	68ba      	ldr	r2, [r7, #8]
 8009ad8:	18d1      	adds	r1, r2, r3
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	029b      	lsls	r3, r3, #10
 8009ade:	687a      	ldr	r2, [r7, #4]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	f7fd fd07 	bl	80074f6 <poly_add>
    for (i = 0; i < K; ++i)
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	3301      	adds	r3, #1
 8009aec:	617b      	str	r3, [r7, #20]
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	2b01      	cmp	r3, #1
 8009af2:	d9ea      	bls.n	8009aca <polyveck_add+0x12>
}
 8009af4:	bf00      	nop
 8009af6:	bf00      	nop
 8009af8:	3718      	adds	r7, #24
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}

08009afe <polyveck_double>:
 * Description: Double vector of polynomials of length K.
 *              No modular reduction is performed.
 *
 * Arguments:   - polyveck *w: pointer to output vector
 **************************************************/
void polyveck_double(polyveck *b) {
 8009afe:	b580      	push	{r7, lr}
 8009b00:	b084      	sub	sp, #16
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
    unsigned int i;

    for (i = 0; i < K; ++i)
 8009b06:	2300      	movs	r3, #0
 8009b08:	60fb      	str	r3, [r7, #12]
 8009b0a:	e009      	b.n	8009b20 <polyveck_double+0x22>
        poly_double(&b->vec[i]);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	029b      	lsls	r3, r3, #10
 8009b10:	687a      	ldr	r2, [r7, #4]
 8009b12:	4413      	add	r3, r2
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7fd fd79 	bl	800760c <poly_double>
    for (i = 0; i < K; ++i)
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	60fb      	str	r3, [r7, #12]
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	d9f2      	bls.n	8009b0c <polyveck_double+0xe>
}
 8009b26:	bf00      	nop
 8009b28:	bf00      	nop
 8009b2a:	3710      	adds	r7, #16
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <polyveck_freeze2q>:
 * Description: For all coefficients of polynomials in vector of length K
 *              compute standard representative r = a mod^+ 2Q.
 *
 * Arguments:   - polyveck *v: pointer to input/output vector
 **************************************************/
void polyveck_freeze2q(polyveck *v) {
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b084      	sub	sp, #16
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
    unsigned int i;

    for (i = 0; i < K; ++i)
 8009b38:	2300      	movs	r3, #0
 8009b3a:	60fb      	str	r3, [r7, #12]
 8009b3c:	e009      	b.n	8009b52 <polyveck_freeze2q+0x22>
        poly_freeze2q(&v->vec[i]);
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	029b      	lsls	r3, r3, #10
 8009b42:	687a      	ldr	r2, [r7, #4]
 8009b44:	4413      	add	r3, r2
 8009b46:	4618      	mov	r0, r3
 8009b48:	f7fd fe08 	bl	800775c <poly_freeze2q>
    for (i = 0; i < K; ++i)
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	3301      	adds	r3, #1
 8009b50:	60fb      	str	r3, [r7, #12]
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2b01      	cmp	r3, #1
 8009b56:	d9f2      	bls.n	8009b3e <polyveck_freeze2q+0xe>
}
 8009b58:	bf00      	nop
 8009b5a:	bf00      	nop
 8009b5c:	3710      	adds	r7, #16
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}

08009b62 <polyveck_poly_fromcrt>:
 *                             length K
 *              - const polyveck *u: pointer to the input vector of polynomials
 *                                   of length K
 *              - const poly *v: pointer to the input polynomial ("mod 2")
 **************************************************/
void polyveck_poly_fromcrt(polyveck *w, const polyveck *u, const poly *v) {
 8009b62:	b580      	push	{r7, lr}
 8009b64:	b086      	sub	sp, #24
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	60f8      	str	r0, [r7, #12]
 8009b6a:	60b9      	str	r1, [r7, #8]
 8009b6c:	607a      	str	r2, [r7, #4]
    unsigned int i;

    poly_fromcrt(&w->vec[0], &u->vec[0], v);
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	68b9      	ldr	r1, [r7, #8]
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	4618      	mov	r0, r3
 8009b76:	f7ff f848 	bl	8008c0a <poly_fromcrt>

    for (i = 1; i < K; i++) {
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	617b      	str	r3, [r7, #20]
 8009b7e:	e00d      	b.n	8009b9c <polyveck_poly_fromcrt+0x3a>
        poly_fromcrt0(&w->vec[i], &u->vec[i]);
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	029b      	lsls	r3, r3, #10
 8009b84:	68fa      	ldr	r2, [r7, #12]
 8009b86:	18d0      	adds	r0, r2, r3
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	029b      	lsls	r3, r3, #10
 8009b8c:	68ba      	ldr	r2, [r7, #8]
 8009b8e:	4413      	add	r3, r2
 8009b90:	4619      	mov	r1, r3
 8009b92:	f7ff f869 	bl	8008c68 <poly_fromcrt0>
    for (i = 1; i < K; i++) {
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	3301      	adds	r3, #1
 8009b9a:	617b      	str	r3, [r7, #20]
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	2b01      	cmp	r3, #1
 8009ba0:	d9ee      	bls.n	8009b80 <polyveck_poly_fromcrt+0x1e>
    }
}
 8009ba2:	bf00      	nop
 8009ba4:	bf00      	nop
 8009ba6:	3718      	adds	r7, #24
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <polyveck_highbits_hint>:

void polyveck_highbits_hint(polyveck *w, const polyveck *v) {
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
    unsigned int i, j;
    for (i = 0; i < K; i++) {
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	60fb      	str	r3, [r7, #12]
 8009bba:	e01c      	b.n	8009bf6 <polyveck_highbits_hint+0x4a>
        for (j = 0; j < N; j++) {
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	60bb      	str	r3, [r7, #8]
 8009bc0:	e013      	b.n	8009bea <polyveck_highbits_hint+0x3e>
            decompose_hint(&w->vec[i].coeffs[j], v->vec[i].coeffs[j]);
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	021a      	lsls	r2, r3, #8
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	4413      	add	r3, r2
 8009bca:	009b      	lsls	r3, r3, #2
 8009bcc:	687a      	ldr	r2, [r7, #4]
 8009bce:	18d0      	adds	r0, r2, r3
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	68fa      	ldr	r2, [r7, #12]
 8009bd4:	0211      	lsls	r1, r2, #8
 8009bd6:	68ba      	ldr	r2, [r7, #8]
 8009bd8:	440a      	add	r2, r1
 8009bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bde:	4619      	mov	r1, r3
 8009be0:	f7f7 fd8e 	bl	8001700 <decompose_hint>
        for (j = 0; j < N; j++) {
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	3301      	adds	r3, #1
 8009be8:	60bb      	str	r3, [r7, #8]
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	2bff      	cmp	r3, #255	@ 0xff
 8009bee:	d9e8      	bls.n	8009bc2 <polyveck_highbits_hint+0x16>
    for (i = 0; i < K; i++) {
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	60fb      	str	r3, [r7, #12]
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d9df      	bls.n	8009bbc <polyveck_highbits_hint+0x10>
        }
    }
}
 8009bfc:	bf00      	nop
 8009bfe:	bf00      	nop
 8009c00:	3710      	adds	r7, #16
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}

08009c06 <polyveck_pack_highbits>:

void polyveck_pack_highbits(uint8_t *buf, const polyveck *v) {
 8009c06:	b580      	push	{r7, lr}
 8009c08:	b084      	sub	sp, #16
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
 8009c0e:	6039      	str	r1, [r7, #0]
    unsigned int i;
    for (i = 0; i < K; i++) {
 8009c10:	2300      	movs	r3, #0
 8009c12:	60fb      	str	r3, [r7, #12]
 8009c14:	e011      	b.n	8009c3a <polyveck_pack_highbits+0x34>
        poly_pack_highbits(buf + i * POLY_HIGHBITS_PACKEDBYTES, &v->vec[i]);
 8009c16:	68fa      	ldr	r2, [r7, #12]
 8009c18:	4613      	mov	r3, r2
 8009c1a:	00db      	lsls	r3, r3, #3
 8009c1c:	4413      	add	r3, r2
 8009c1e:	015b      	lsls	r3, r3, #5
 8009c20:	461a      	mov	r2, r3
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	1898      	adds	r0, r3, r2
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	029b      	lsls	r3, r3, #10
 8009c2a:	683a      	ldr	r2, [r7, #0]
 8009c2c:	4413      	add	r3, r2
 8009c2e:	4619      	mov	r1, r3
 8009c30:	f7fe f909 	bl	8007e46 <poly_pack_highbits>
    for (i = 0; i < K; i++) {
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	3301      	adds	r3, #1
 8009c38:	60fb      	str	r3, [r7, #12]
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d9ea      	bls.n	8009c16 <polyveck_pack_highbits+0x10>
    }
}
 8009c40:	bf00      	nop
 8009c42:	bf00      	nop
 8009c44:	3710      	adds	r7, #16
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}

08009c4a <polyveck_ntt>:
                decompose_vk(&v0->vec[i].coeffs[j], v->vec[i].coeffs[j]);
        }
    }
}

void polyveck_ntt(polyveck *x) {
 8009c4a:	b580      	push	{r7, lr}
 8009c4c:	b084      	sub	sp, #16
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	6078      	str	r0, [r7, #4]
    unsigned int i;
    for (i = 0; i < K; i++) {
 8009c52:	2300      	movs	r3, #0
 8009c54:	60fb      	str	r3, [r7, #12]
 8009c56:	e009      	b.n	8009c6c <polyveck_ntt+0x22>
        poly_ntt(&x->vec[i]);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	029b      	lsls	r3, r3, #10
 8009c5c:	687a      	ldr	r2, [r7, #4]
 8009c5e:	4413      	add	r3, r2
 8009c60:	4618      	mov	r0, r3
 8009c62:	f7ff f828 	bl	8008cb6 <poly_ntt>
    for (i = 0; i < K; i++) {
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	3301      	adds	r3, #1
 8009c6a:	60fb      	str	r3, [r7, #12]
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	d9f2      	bls.n	8009c58 <polyveck_ntt+0xe>
    }
}
 8009c72:	bf00      	nop
 8009c74:	bf00      	nop
 8009c76:	3710      	adds	r7, #16
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <polyveck_invntt_tomont>:

void polyveck_invntt_tomont(polyveck *x) {
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b084      	sub	sp, #16
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
    unsigned int i;
    for (i = 0; i < K; i++) {
 8009c84:	2300      	movs	r3, #0
 8009c86:	60fb      	str	r3, [r7, #12]
 8009c88:	e009      	b.n	8009c9e <polyveck_invntt_tomont+0x22>
        poly_invntt_tomont(&x->vec[i]);
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	029b      	lsls	r3, r3, #10
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	4413      	add	r3, r2
 8009c92:	4618      	mov	r0, r3
 8009c94:	f7ff f81b 	bl	8008cce <poly_invntt_tomont>
    for (i = 0; i < K; i++) {
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	60fb      	str	r3, [r7, #12]
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d9f2      	bls.n	8009c8a <polyveck_invntt_tomont+0xe>
    }
}
 8009ca4:	bf00      	nop
 8009ca6:	bf00      	nop
 8009ca8:	3710      	adds	r7, #16
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}

08009cae <polyveck_sqnorm2>:
 * Description: Calculates L2 norm of a polynomial vector with length k
 *
 * Arguments:   - polyveck *b: polynomial vector with length k to calculate
 *norm
 **************************************************/
uint64_t polyveck_sqnorm2(const polyveck *b) {
 8009cae:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009cb2:	b086      	sub	sp, #24
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
    unsigned int i, j;
    uint64_t ret = 0;
 8009cb8:	f04f 0000 	mov.w	r0, #0
 8009cbc:	f04f 0100 	mov.w	r1, #0
 8009cc0:	e9c7 0102 	strd	r0, r1, [r7, #8]

    for (i = 0; i < K; ++i) {
 8009cc4:	2100      	movs	r1, #0
 8009cc6:	6179      	str	r1, [r7, #20]
 8009cc8:	e030      	b.n	8009d2c <polyveck_sqnorm2+0x7e>
        for (j = 0; j < N; ++j) {
 8009cca:	2100      	movs	r1, #0
 8009ccc:	6139      	str	r1, [r7, #16]
 8009cce:	e027      	b.n	8009d20 <polyveck_sqnorm2+0x72>
            ret += (uint64_t)b->vec[i].coeffs[j] * b->vec[i].coeffs[j];
 8009cd0:	6879      	ldr	r1, [r7, #4]
 8009cd2:	6978      	ldr	r0, [r7, #20]
 8009cd4:	0206      	lsls	r6, r0, #8
 8009cd6:	6938      	ldr	r0, [r7, #16]
 8009cd8:	4430      	add	r0, r6
 8009cda:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8009cde:	17c8      	asrs	r0, r1, #31
 8009ce0:	460c      	mov	r4, r1
 8009ce2:	4605      	mov	r5, r0
 8009ce4:	6879      	ldr	r1, [r7, #4]
 8009ce6:	6978      	ldr	r0, [r7, #20]
 8009ce8:	0206      	lsls	r6, r0, #8
 8009cea:	6938      	ldr	r0, [r7, #16]
 8009cec:	4430      	add	r0, r6
 8009cee:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8009cf2:	17c8      	asrs	r0, r1, #31
 8009cf4:	4688      	mov	r8, r1
 8009cf6:	4681      	mov	r9, r0
 8009cf8:	fb08 f005 	mul.w	r0, r8, r5
 8009cfc:	fb04 f109 	mul.w	r1, r4, r9
 8009d00:	4401      	add	r1, r0
 8009d02:	fba4 2308 	umull	r2, r3, r4, r8
 8009d06:	4419      	add	r1, r3
 8009d08:	460b      	mov	r3, r1
 8009d0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009d0e:	eb10 0a02 	adds.w	sl, r0, r2
 8009d12:	eb41 0b03 	adc.w	fp, r1, r3
 8009d16:	e9c7 ab02 	strd	sl, fp, [r7, #8]
        for (j = 0; j < N; ++j) {
 8009d1a:	6939      	ldr	r1, [r7, #16]
 8009d1c:	3101      	adds	r1, #1
 8009d1e:	6139      	str	r1, [r7, #16]
 8009d20:	6939      	ldr	r1, [r7, #16]
 8009d22:	29ff      	cmp	r1, #255	@ 0xff
 8009d24:	d9d4      	bls.n	8009cd0 <polyveck_sqnorm2+0x22>
    for (i = 0; i < K; ++i) {
 8009d26:	6979      	ldr	r1, [r7, #20]
 8009d28:	3101      	adds	r1, #1
 8009d2a:	6179      	str	r1, [r7, #20]
 8009d2c:	6979      	ldr	r1, [r7, #20]
 8009d2e:	2901      	cmp	r1, #1
 8009d30:	d9cb      	bls.n	8009cca <polyveck_sqnorm2+0x1c>
        }
    }
    return ret;
 8009d32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8009d36:	4610      	mov	r0, r2
 8009d38:	4619      	mov	r1, r3
 8009d3a:	3718      	adds	r7, #24
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009d42:	4770      	bx	lr

08009d44 <polyvecl_sqnorm2>:
 * Description: Calculates L2 norm of a polynomial vector with length l
 *
 * Arguments:   - polyvecl *a: polynomial vector with length l to calculate
 *norm
 **************************************************/
uint64_t polyvecl_sqnorm2(const polyvecl *a) {
 8009d44:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009d48:	b086      	sub	sp, #24
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	6078      	str	r0, [r7, #4]
    unsigned int i, j;
    uint64_t ret = 0;
 8009d4e:	f04f 0000 	mov.w	r0, #0
 8009d52:	f04f 0100 	mov.w	r1, #0
 8009d56:	e9c7 0102 	strd	r0, r1, [r7, #8]

    for (i = 0; i < L; ++i) {
 8009d5a:	2100      	movs	r1, #0
 8009d5c:	6179      	str	r1, [r7, #20]
 8009d5e:	e030      	b.n	8009dc2 <polyvecl_sqnorm2+0x7e>
        for (j = 0; j < N; ++j) {
 8009d60:	2100      	movs	r1, #0
 8009d62:	6139      	str	r1, [r7, #16]
 8009d64:	e027      	b.n	8009db6 <polyvecl_sqnorm2+0x72>
            ret += (uint64_t)a->vec[i].coeffs[j] * a->vec[i].coeffs[j];
 8009d66:	6879      	ldr	r1, [r7, #4]
 8009d68:	6978      	ldr	r0, [r7, #20]
 8009d6a:	0206      	lsls	r6, r0, #8
 8009d6c:	6938      	ldr	r0, [r7, #16]
 8009d6e:	4430      	add	r0, r6
 8009d70:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8009d74:	17c8      	asrs	r0, r1, #31
 8009d76:	460c      	mov	r4, r1
 8009d78:	4605      	mov	r5, r0
 8009d7a:	6879      	ldr	r1, [r7, #4]
 8009d7c:	6978      	ldr	r0, [r7, #20]
 8009d7e:	0206      	lsls	r6, r0, #8
 8009d80:	6938      	ldr	r0, [r7, #16]
 8009d82:	4430      	add	r0, r6
 8009d84:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8009d88:	17c8      	asrs	r0, r1, #31
 8009d8a:	4688      	mov	r8, r1
 8009d8c:	4681      	mov	r9, r0
 8009d8e:	fb08 f005 	mul.w	r0, r8, r5
 8009d92:	fb04 f109 	mul.w	r1, r4, r9
 8009d96:	4401      	add	r1, r0
 8009d98:	fba4 2308 	umull	r2, r3, r4, r8
 8009d9c:	4419      	add	r1, r3
 8009d9e:	460b      	mov	r3, r1
 8009da0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009da4:	eb10 0a02 	adds.w	sl, r0, r2
 8009da8:	eb41 0b03 	adc.w	fp, r1, r3
 8009dac:	e9c7 ab02 	strd	sl, fp, [r7, #8]
        for (j = 0; j < N; ++j) {
 8009db0:	6939      	ldr	r1, [r7, #16]
 8009db2:	3101      	adds	r1, #1
 8009db4:	6139      	str	r1, [r7, #16]
 8009db6:	6939      	ldr	r1, [r7, #16]
 8009db8:	29ff      	cmp	r1, #255	@ 0xff
 8009dba:	d9d4      	bls.n	8009d66 <polyvecl_sqnorm2+0x22>
    for (i = 0; i < L; ++i) {
 8009dbc:	6979      	ldr	r1, [r7, #20]
 8009dbe:	3101      	adds	r1, #1
 8009dc0:	6179      	str	r1, [r7, #20]
 8009dc2:	6979      	ldr	r1, [r7, #20]
 8009dc4:	2903      	cmp	r1, #3
 8009dc6:	d9cb      	bls.n	8009d60 <polyvecl_sqnorm2+0x1c>
        }
    }

    return ret;
 8009dc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8009dcc:	4610      	mov	r0, r2
 8009dce:	4619      	mov	r1, r3
 8009dd0:	3718      	adds	r7, #24
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009dd8:	4770      	bx	lr

08009dda <polyvecm_ntt>:
        poly_pointwise_montgomery(&t, &u->vec[i], &v->vec[i]);
        poly_add(w, w, &t);
    }
}

void polyvecm_ntt(polyvecm *x) {
 8009dda:	b580      	push	{r7, lr}
 8009ddc:	b084      	sub	sp, #16
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
    unsigned int i;
    for (i = 0; i < M; i++) {
 8009de2:	2300      	movs	r3, #0
 8009de4:	60fb      	str	r3, [r7, #12]
 8009de6:	e009      	b.n	8009dfc <polyvecm_ntt+0x22>
        poly_ntt(&x->vec[i]);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	029b      	lsls	r3, r3, #10
 8009dec:	687a      	ldr	r2, [r7, #4]
 8009dee:	4413      	add	r3, r2
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7fe ff60 	bl	8008cb6 <poly_ntt>
    for (i = 0; i < M; i++) {
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	3301      	adds	r3, #1
 8009dfa:	60fb      	str	r3, [r7, #12]
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2b02      	cmp	r3, #2
 8009e00:	d9f2      	bls.n	8009de8 <polyvecm_ntt+0xe>
    }
}
 8009e02:	bf00      	nop
 8009e04:	bf00      	nop
 8009e06:	3710      	adds	r7, #16
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}

08009e0c <minmax>:

static inline void minmax(int32_t *x, int32_t *y) // taken from djbsort
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b087      	sub	sp, #28
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	6039      	str	r1, [r7, #0]
    int32_t a = *x;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	617b      	str	r3, [r7, #20]
    int32_t b = *y;
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	613b      	str	r3, [r7, #16]
    int32_t ab = b ^ a;
 8009e22:	693a      	ldr	r2, [r7, #16]
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	4053      	eors	r3, r2
 8009e28:	60fb      	str	r3, [r7, #12]
    int32_t c = b - a;
 8009e2a:	693a      	ldr	r2, [r7, #16]
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	1ad3      	subs	r3, r2, r3
 8009e30:	60bb      	str	r3, [r7, #8]
    c ^= ab & (c ^ b);
 8009e32:	68ba      	ldr	r2, [r7, #8]
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	405a      	eors	r2, r3
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	4013      	ands	r3, r2
 8009e3c:	68ba      	ldr	r2, [r7, #8]
 8009e3e:	4053      	eors	r3, r2
 8009e40:	60bb      	str	r3, [r7, #8]
    c >>= 31;
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	17db      	asrs	r3, r3, #31
 8009e46:	60bb      	str	r3, [r7, #8]
    c &= ab;
 8009e48:	68ba      	ldr	r2, [r7, #8]
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	4013      	ands	r3, r2
 8009e4e:	60bb      	str	r3, [r7, #8]
    *x = a ^ c;
 8009e50:	697a      	ldr	r2, [r7, #20]
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	405a      	eors	r2, r3
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	601a      	str	r2, [r3, #0]
    *y = b ^ c;
 8009e5a:	693a      	ldr	r2, [r7, #16]
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	405a      	eors	r2, r3
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	601a      	str	r2, [r3, #0]
}
 8009e64:	bf00      	nop
 8009e66:	371c      	adds	r7, #28
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6e:	4770      	bx	lr

08009e70 <minmaxmask>:
static inline void minmaxmask(int32_t *x, int32_t *y,
                              int32_t *mask) // adapted from djbsort
{
 8009e70:	b480      	push	{r7}
 8009e72:	b089      	sub	sp, #36	@ 0x24
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	60f8      	str	r0, [r7, #12]
 8009e78:	60b9      	str	r1, [r7, #8]
 8009e7a:	607a      	str	r2, [r7, #4]
    // If mask is -1, we perform the operation, else we do basically nothing.
    // mask truth table:
    // mask = 0 -> mask = 0, no swap is performed
    // mask = -1, swap performed -> mask = 0
    // mask = -1, swap not performed -> mask = -1
    int32_t a = *x;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	61fb      	str	r3, [r7, #28]
    int32_t b = *y;
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	61bb      	str	r3, [r7, #24]
    int32_t ab = (b ^ a) & *mask;
 8009e88:	69ba      	ldr	r2, [r7, #24]
 8009e8a:	69fb      	ldr	r3, [r7, #28]
 8009e8c:	405a      	eors	r2, r3
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	4013      	ands	r3, r2
 8009e94:	617b      	str	r3, [r7, #20]
    int32_t c = b - a;
 8009e96:	69ba      	ldr	r2, [r7, #24]
 8009e98:	69fb      	ldr	r3, [r7, #28]
 8009e9a:	1ad3      	subs	r3, r2, r3
 8009e9c:	613b      	str	r3, [r7, #16]
    c ^= ab & (c ^ b);
 8009e9e:	693a      	ldr	r2, [r7, #16]
 8009ea0:	69bb      	ldr	r3, [r7, #24]
 8009ea2:	405a      	eors	r2, r3
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	4013      	ands	r3, r2
 8009ea8:	693a      	ldr	r2, [r7, #16]
 8009eaa:	4053      	eors	r3, r2
 8009eac:	613b      	str	r3, [r7, #16]
    c >>= 31;
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	17db      	asrs	r3, r3, #31
 8009eb2:	613b      	str	r3, [r7, #16]
    *mask &= ~c;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681a      	ldr	r2, [r3, #0]
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	43db      	mvns	r3, r3
 8009ebc:	401a      	ands	r2, r3
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	601a      	str	r2, [r3, #0]
    c &= ab;
 8009ec2:	693a      	ldr	r2, [r7, #16]
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	4013      	ands	r3, r2
 8009ec8:	613b      	str	r3, [r7, #16]
    *x = a ^ c;
 8009eca:	69fa      	ldr	r2, [r7, #28]
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	405a      	eors	r2, r3
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	601a      	str	r2, [r3, #0]
    *y = b ^ c;
 8009ed4:	69ba      	ldr	r2, [r7, #24]
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	405a      	eors	r2, r3
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	601a      	str	r2, [r3, #0]
}
 8009ede:	bf00      	nop
 8009ee0:	3724      	adds	r7, #36	@ 0x24
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr

08009eea <polyvecmk_sqsing_value>:

int64_t polyvecmk_sqsing_value(const polyvecm *s1, const polyveck *s2) {
 8009eea:	b5b0      	push	{r4, r5, r7, lr}
 8009eec:	f5ad 5da2 	sub.w	sp, sp, #5184	@ 0x1440
 8009ef0:	b086      	sub	sp, #24
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8009ef8:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8009efc:	6018      	str	r0, [r3, #0]
 8009efe:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8009f02:	f5a3 638b 	sub.w	r3, r3, #1112	@ 0x458
 8009f06:	6019      	str	r1, [r3, #0]
    int32_t res = 0;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	f507 52a2 	add.w	r2, r7, #5184	@ 0x1440
 8009f0e:	f102 0214 	add.w	r2, r2, #20
 8009f12:	6013      	str	r3, [r2, #0]
    complex_fp32_16 input[FFT_N] = {0};
 8009f14:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8009f18:	3b2c      	subs	r3, #44	@ 0x2c
 8009f1a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009f1e:	2100      	movs	r1, #0
 8009f20:	4618      	mov	r0, r3
 8009f22:	f00b fb49 	bl	80155b8 <memset>
    int32_t sum[N] = {0}, bestm[N / TAU + 1] = {0}, min = 0;
 8009f26:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8009f2a:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f34:	461a      	mov	r2, r3
 8009f36:	2100      	movs	r1, #0
 8009f38:	f00b fb3e 	bl	80155b8 <memset>
 8009f3c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8009f40:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 8009f44:	461a      	mov	r2, r3
 8009f46:	2300      	movs	r3, #0
 8009f48:	6013      	str	r3, [r2, #0]
 8009f4a:	6053      	str	r3, [r2, #4]
 8009f4c:	6093      	str	r3, [r2, #8]
 8009f4e:	60d3      	str	r3, [r2, #12]
 8009f50:	6113      	str	r3, [r2, #16]
 8009f52:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8009f56:	f2a3 4344 	subw	r3, r3, #1092	@ 0x444
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	601a      	str	r2, [r3, #0]

    for (size_t i = 0; i < M; ++i) {
 8009f5e:	2300      	movs	r3, #0
 8009f60:	f507 52a2 	add.w	r2, r7, #5184	@ 0x1440
 8009f64:	f102 0210 	add.w	r2, r2, #16
 8009f68:	6013      	str	r3, [r2, #0]
 8009f6a:	e064      	b.n	800a036 <polyvecmk_sqsing_value+0x14c>
        fft_bitrev(input, &s1->vec[i]);
 8009f6c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8009f70:	f2a3 4254 	subw	r2, r3, #1108	@ 0x454
 8009f74:	f507 53a2 	add.w	r3, r7, #5184	@ 0x1440
 8009f78:	f103 0310 	add.w	r3, r3, #16
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	029b      	lsls	r3, r3, #10
 8009f80:	6812      	ldr	r2, [r2, #0]
 8009f82:	441a      	add	r2, r3
 8009f84:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8009f88:	3b0c      	subs	r3, #12
 8009f8a:	4611      	mov	r1, r2
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f7f7 ffbf 	bl	8001f10 <fft_bitrev>
        fft(input);
 8009f92:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8009f96:	3b0c      	subs	r3, #12
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f7f8 f81b 	bl	8001fd4 <fft>

        // cumulative sum
        for (size_t j = 0; j < N; j++) {
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	f507 52a2 	add.w	r2, r7, #5184	@ 0x1440
 8009fa4:	f102 020c 	add.w	r2, r2, #12
 8009fa8:	6013      	str	r3, [r2, #0]
 8009faa:	e032      	b.n	800a012 <polyvecmk_sqsing_value+0x128>
            sum[j] += complex_fp_sqabs(input[2 * j + 1]);
 8009fac:	f507 53a2 	add.w	r3, r7, #5184	@ 0x1440
 8009fb0:	f103 030c 	add.w	r3, r3, #12
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	005b      	lsls	r3, r3, #1
 8009fb8:	3301      	adds	r3, #1
 8009fba:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 8009fbe:	00db      	lsls	r3, r3, #3
 8009fc0:	4413      	add	r3, r2
 8009fc2:	3b2c      	subs	r3, #44	@ 0x2c
 8009fc4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009fc8:	f7f7 ffea 	bl	8001fa0 <complex_fp_sqabs>
 8009fcc:	4601      	mov	r1, r0
 8009fce:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8009fd2:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 8009fd6:	f507 52a2 	add.w	r2, r7, #5184	@ 0x1440
 8009fda:	f102 020c 	add.w	r2, r2, #12
 8009fde:	6812      	ldr	r2, [r2, #0]
 8009fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fe4:	4419      	add	r1, r3
 8009fe6:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8009fea:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 8009fee:	f507 52a2 	add.w	r2, r7, #5184	@ 0x1440
 8009ff2:	f102 020c 	add.w	r2, r2, #12
 8009ff6:	6812      	ldr	r2, [r2, #0]
 8009ff8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (size_t j = 0; j < N; j++) {
 8009ffc:	f507 53a2 	add.w	r3, r7, #5184	@ 0x1440
 800a000:	f103 030c 	add.w	r3, r3, #12
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	3301      	adds	r3, #1
 800a008:	f507 52a2 	add.w	r2, r7, #5184	@ 0x1440
 800a00c:	f102 020c 	add.w	r2, r2, #12
 800a010:	6013      	str	r3, [r2, #0]
 800a012:	f507 53a2 	add.w	r3, r7, #5184	@ 0x1440
 800a016:	f103 030c 	add.w	r3, r3, #12
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	2bff      	cmp	r3, #255	@ 0xff
 800a01e:	d9c5      	bls.n	8009fac <polyvecmk_sqsing_value+0xc2>
    for (size_t i = 0; i < M; ++i) {
 800a020:	f507 53a2 	add.w	r3, r7, #5184	@ 0x1440
 800a024:	f103 0310 	add.w	r3, r3, #16
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	3301      	adds	r3, #1
 800a02c:	f507 52a2 	add.w	r2, r7, #5184	@ 0x1440
 800a030:	f102 0210 	add.w	r2, r2, #16
 800a034:	6013      	str	r3, [r2, #0]
 800a036:	f507 53a2 	add.w	r3, r7, #5184	@ 0x1440
 800a03a:	f103 0310 	add.w	r3, r3, #16
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	2b02      	cmp	r3, #2
 800a042:	d993      	bls.n	8009f6c <polyvecmk_sqsing_value+0x82>
        }
    }

    for (size_t i = 0; i < K; ++i) {
 800a044:	2300      	movs	r3, #0
 800a046:	f507 52a2 	add.w	r2, r7, #5184	@ 0x1440
 800a04a:	f102 0208 	add.w	r2, r2, #8
 800a04e:	6013      	str	r3, [r2, #0]
 800a050:	e064      	b.n	800a11c <polyvecmk_sqsing_value+0x232>
        fft_bitrev(input, &s2->vec[i]);
 800a052:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800a056:	f5a3 628b 	sub.w	r2, r3, #1112	@ 0x458
 800a05a:	f507 53a2 	add.w	r3, r7, #5184	@ 0x1440
 800a05e:	f103 0308 	add.w	r3, r3, #8
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	029b      	lsls	r3, r3, #10
 800a066:	6812      	ldr	r2, [r2, #0]
 800a068:	441a      	add	r2, r3
 800a06a:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800a06e:	3b0c      	subs	r3, #12
 800a070:	4611      	mov	r1, r2
 800a072:	4618      	mov	r0, r3
 800a074:	f7f7 ff4c 	bl	8001f10 <fft_bitrev>
        fft(input);
 800a078:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800a07c:	3b0c      	subs	r3, #12
 800a07e:	4618      	mov	r0, r3
 800a080:	f7f7 ffa8 	bl	8001fd4 <fft>

        // cumulative sum
        for (size_t j = 0; j < N; j++) {
 800a084:	2300      	movs	r3, #0
 800a086:	f507 52a2 	add.w	r2, r7, #5184	@ 0x1440
 800a08a:	f102 0204 	add.w	r2, r2, #4
 800a08e:	6013      	str	r3, [r2, #0]
 800a090:	e032      	b.n	800a0f8 <polyvecmk_sqsing_value+0x20e>
            sum[j] += complex_fp_sqabs(input[2 * j + 1]);
 800a092:	f507 53a2 	add.w	r3, r7, #5184	@ 0x1440
 800a096:	f103 0304 	add.w	r3, r3, #4
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	005b      	lsls	r3, r3, #1
 800a09e:	3301      	adds	r3, #1
 800a0a0:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 800a0a4:	00db      	lsls	r3, r3, #3
 800a0a6:	4413      	add	r3, r2
 800a0a8:	3b2c      	subs	r3, #44	@ 0x2c
 800a0aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a0ae:	f7f7 ff77 	bl	8001fa0 <complex_fp_sqabs>
 800a0b2:	4601      	mov	r1, r0
 800a0b4:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800a0b8:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 800a0bc:	f507 52a2 	add.w	r2, r7, #5184	@ 0x1440
 800a0c0:	f102 0204 	add.w	r2, r2, #4
 800a0c4:	6812      	ldr	r2, [r2, #0]
 800a0c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0ca:	4419      	add	r1, r3
 800a0cc:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800a0d0:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 800a0d4:	f507 52a2 	add.w	r2, r7, #5184	@ 0x1440
 800a0d8:	f102 0204 	add.w	r2, r2, #4
 800a0dc:	6812      	ldr	r2, [r2, #0]
 800a0de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (size_t j = 0; j < N; j++) {
 800a0e2:	f507 53a2 	add.w	r3, r7, #5184	@ 0x1440
 800a0e6:	f103 0304 	add.w	r3, r3, #4
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	f507 52a2 	add.w	r2, r7, #5184	@ 0x1440
 800a0f2:	f102 0204 	add.w	r2, r2, #4
 800a0f6:	6013      	str	r3, [r2, #0]
 800a0f8:	f507 53a2 	add.w	r3, r7, #5184	@ 0x1440
 800a0fc:	f103 0304 	add.w	r3, r3, #4
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	2bff      	cmp	r3, #255	@ 0xff
 800a104:	d9c5      	bls.n	800a092 <polyvecmk_sqsing_value+0x1a8>
    for (size_t i = 0; i < K; ++i) {
 800a106:	f507 53a2 	add.w	r3, r7, #5184	@ 0x1440
 800a10a:	f103 0308 	add.w	r3, r3, #8
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	3301      	adds	r3, #1
 800a112:	f507 52a2 	add.w	r2, r7, #5184	@ 0x1440
 800a116:	f102 0208 	add.w	r2, r2, #8
 800a11a:	6013      	str	r3, [r2, #0]
 800a11c:	f507 53a2 	add.w	r3, r7, #5184	@ 0x1440
 800a120:	f103 0308 	add.w	r3, r3, #8
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	2b01      	cmp	r3, #1
 800a128:	d993      	bls.n	800a052 <polyvecmk_sqsing_value+0x168>
        }
    }

    // compute max m
    for (size_t i = 0; i < N / TAU + 1; ++i) {
 800a12a:	2300      	movs	r3, #0
 800a12c:	f507 52a2 	add.w	r2, r7, #5184	@ 0x1440
 800a130:	6013      	str	r3, [r2, #0]
 800a132:	e018      	b.n	800a166 <polyvecmk_sqsing_value+0x27c>
        bestm[i] = sum[i];
 800a134:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800a138:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 800a13c:	f507 52a2 	add.w	r2, r7, #5184	@ 0x1440
 800a140:	6812      	ldr	r2, [r2, #0]
 800a142:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a146:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800a14a:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 800a14e:	f507 52a2 	add.w	r2, r7, #5184	@ 0x1440
 800a152:	6812      	ldr	r2, [r2, #0]
 800a154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (size_t i = 0; i < N / TAU + 1; ++i) {
 800a158:	f507 53a2 	add.w	r3, r7, #5184	@ 0x1440
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	3301      	adds	r3, #1
 800a160:	f507 52a2 	add.w	r2, r7, #5184	@ 0x1440
 800a164:	6013      	str	r3, [r2, #0]
 800a166:	f507 53a2 	add.w	r3, r7, #5184	@ 0x1440
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	2b04      	cmp	r3, #4
 800a16e:	d9e1      	bls.n	800a134 <polyvecmk_sqsing_value+0x24a>
    }
    for (size_t i = N / TAU + 1; i < N; i++) {
 800a170:	2305      	movs	r3, #5
 800a172:	f507 52a1 	add.w	r2, r7, #5152	@ 0x1420
 800a176:	f102 021c 	add.w	r2, r2, #28
 800a17a:	6013      	str	r3, [r2, #0]
 800a17c:	e043      	b.n	800a206 <polyvecmk_sqsing_value+0x31c>
        int32_t mask = -1;
 800a17e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800a182:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 800a186:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a18a:	601a      	str	r2, [r3, #0]
        for (size_t j = 0; j < N / TAU + 1; j++) {
 800a18c:	2300      	movs	r3, #0
 800a18e:	f507 52a1 	add.w	r2, r7, #5152	@ 0x1420
 800a192:	f102 0218 	add.w	r2, r2, #24
 800a196:	6013      	str	r3, [r2, #0]
 800a198:	e023      	b.n	800a1e2 <polyvecmk_sqsing_value+0x2f8>
            minmaxmask(&sum[i], &bestm[j], &mask);
 800a19a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a19e:	3b0c      	subs	r3, #12
 800a1a0:	f507 52a1 	add.w	r2, r7, #5152	@ 0x1420
 800a1a4:	f102 021c 	add.w	r2, r2, #28
 800a1a8:	6812      	ldr	r2, [r2, #0]
 800a1aa:	0092      	lsls	r2, r2, #2
 800a1ac:	1898      	adds	r0, r3, r2
 800a1ae:	f107 0218 	add.w	r2, r7, #24
 800a1b2:	f507 53a1 	add.w	r3, r7, #5152	@ 0x1420
 800a1b6:	f103 0318 	add.w	r3, r3, #24
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	18d1      	adds	r1, r2, r3
 800a1c0:	f107 0318 	add.w	r3, r7, #24
 800a1c4:	3b08      	subs	r3, #8
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	f7ff fe52 	bl	8009e70 <minmaxmask>
        for (size_t j = 0; j < N / TAU + 1; j++) {
 800a1cc:	f507 53a1 	add.w	r3, r7, #5152	@ 0x1420
 800a1d0:	f103 0318 	add.w	r3, r3, #24
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	f507 52a1 	add.w	r2, r7, #5152	@ 0x1420
 800a1dc:	f102 0218 	add.w	r2, r2, #24
 800a1e0:	6013      	str	r3, [r2, #0]
 800a1e2:	f507 53a1 	add.w	r3, r7, #5152	@ 0x1420
 800a1e6:	f103 0318 	add.w	r3, r3, #24
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	2b04      	cmp	r3, #4
 800a1ee:	d9d4      	bls.n	800a19a <polyvecmk_sqsing_value+0x2b0>
    for (size_t i = N / TAU + 1; i < N; i++) {
 800a1f0:	f507 53a1 	add.w	r3, r7, #5152	@ 0x1420
 800a1f4:	f103 031c 	add.w	r3, r3, #28
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	f507 52a1 	add.w	r2, r7, #5152	@ 0x1420
 800a200:	f102 021c 	add.w	r2, r2, #28
 800a204:	6013      	str	r3, [r2, #0]
 800a206:	f507 53a1 	add.w	r3, r7, #5152	@ 0x1420
 800a20a:	f103 031c 	add.w	r3, r3, #28
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	2bff      	cmp	r3, #255	@ 0xff
 800a212:	d9b4      	bls.n	800a17e <polyvecmk_sqsing_value+0x294>
        }
    }
    // find minimum in bestm
    min = bestm[0];
 800a214:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800a218:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800a222:	f2a3 4344 	subw	r3, r3, #1092	@ 0x444
 800a226:	601a      	str	r2, [r3, #0]
    for (size_t i = 1; i < N / TAU + 1; i++) {
 800a228:	2301      	movs	r3, #1
 800a22a:	f507 52a1 	add.w	r2, r7, #5152	@ 0x1420
 800a22e:	f102 0214 	add.w	r2, r2, #20
 800a232:	6013      	str	r3, [r2, #0]
 800a234:	e024      	b.n	800a280 <polyvecmk_sqsing_value+0x396>
        int32_t tmp = bestm[i];
 800a236:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800a23a:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 800a23e:	f507 52a1 	add.w	r2, r7, #5152	@ 0x1420
 800a242:	f102 0214 	add.w	r2, r2, #20
 800a246:	6812      	ldr	r2, [r2, #0]
 800a248:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a24c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800a250:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800a254:	601a      	str	r2, [r3, #0]
        minmax(&min, &tmp);
 800a256:	f107 0218 	add.w	r2, r7, #24
 800a25a:	3a0c      	subs	r2, #12
 800a25c:	f107 0318 	add.w	r3, r7, #24
 800a260:	3b04      	subs	r3, #4
 800a262:	4611      	mov	r1, r2
 800a264:	4618      	mov	r0, r3
 800a266:	f7ff fdd1 	bl	8009e0c <minmax>
    for (size_t i = 1; i < N / TAU + 1; i++) {
 800a26a:	f507 53a1 	add.w	r3, r7, #5152	@ 0x1420
 800a26e:	f103 0314 	add.w	r3, r3, #20
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	3301      	adds	r3, #1
 800a276:	f507 52a1 	add.w	r2, r7, #5152	@ 0x1420
 800a27a:	f102 0214 	add.w	r2, r2, #20
 800a27e:	6013      	str	r3, [r2, #0]
 800a280:	f507 53a1 	add.w	r3, r7, #5152	@ 0x1420
 800a284:	f103 0314 	add.w	r3, r3, #20
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	2b04      	cmp	r3, #4
 800a28c:	d9d3      	bls.n	800a236 <polyvecmk_sqsing_value+0x34c>
    }
    // multiply all but the minimum by N mod TAU
    for (size_t i = 0; i < N / TAU + 1; i++) {
 800a28e:	2300      	movs	r3, #0
 800a290:	f507 52a1 	add.w	r2, r7, #5152	@ 0x1420
 800a294:	f102 0210 	add.w	r2, r2, #16
 800a298:	6013      	str	r3, [r2, #0]
 800a29a:	e098      	b.n	800a3ce <polyvecmk_sqsing_value+0x4e4>
        int32_t fac = ((min - bestm[i]) >> 31); // all-ones if bestm[i] != min (TODO: impl specific behaviour)
 800a29c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800a2a0:	f2a3 4344 	subw	r3, r3, #1092	@ 0x444
 800a2a4:	681a      	ldr	r2, [r3, #0]
 800a2a6:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800a2aa:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 800a2ae:	f507 51a1 	add.w	r1, r7, #5152	@ 0x1420
 800a2b2:	f101 0110 	add.w	r1, r1, #16
 800a2b6:	6809      	ldr	r1, [r1, #0]
 800a2b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a2bc:	1ad3      	subs	r3, r2, r3
 800a2be:	17db      	asrs	r3, r3, #31
 800a2c0:	f507 52a1 	add.w	r2, r7, #5152	@ 0x1420
 800a2c4:	f102 020c 	add.w	r2, r2, #12
 800a2c8:	6013      	str	r3, [r2, #0]
        fac =
            (fac & (TAU)) ^
 800a2ca:	f507 53a1 	add.w	r3, r7, #5152	@ 0x1420
 800a2ce:	f103 030c 	add.w	r3, r3, #12
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f003 023a 	and.w	r2, r3, #58	@ 0x3a
            ((~fac) & (N % TAU)); // fac = TAU for all != min and N%TAU for min
 800a2d8:	f507 53a1 	add.w	r3, r7, #5152	@ 0x1420
 800a2dc:	f103 030c 	add.w	r3, r3, #12
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	43db      	mvns	r3, r3
 800a2e4:	f003 0318 	and.w	r3, r3, #24
        fac =
 800a2e8:	4053      	eors	r3, r2
 800a2ea:	f507 52a1 	add.w	r2, r7, #5152	@ 0x1420
 800a2ee:	f102 020c 	add.w	r2, r2, #12
 800a2f2:	6013      	str	r3, [r2, #0]
        bestm[i] +=
 800a2f4:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800a2f8:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 800a2fc:	f507 52a1 	add.w	r2, r7, #5152	@ 0x1420
 800a300:	f102 0210 	add.w	r2, r2, #16
 800a304:	6812      	ldr	r2, [r2, #0]
 800a306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a30a:	f503 3181 	add.w	r1, r3, #66048	@ 0x10200
 800a30e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800a312:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 800a316:	f507 52a1 	add.w	r2, r7, #5152	@ 0x1420
 800a31a:	f102 0210 	add.w	r2, r2, #16
 800a31e:	6812      	ldr	r2, [r2, #0]
 800a320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            0x10200;     // add 1 for the "1 poly" in S, and prepare rounding
        bestm[i] >>= 10; // round off 10 bits
 800a324:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800a328:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 800a32c:	f507 52a1 	add.w	r2, r7, #5152	@ 0x1420
 800a330:	f102 0210 	add.w	r2, r2, #16
 800a334:	6812      	ldr	r2, [r2, #0]
 800a336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a33a:	1299      	asrs	r1, r3, #10
 800a33c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800a340:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 800a344:	f507 52a1 	add.w	r2, r7, #5152	@ 0x1420
 800a348:	f102 0210 	add.w	r2, r2, #16
 800a34c:	6812      	ldr	r2, [r2, #0]
 800a34e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        bestm[i] *= fac;
 800a352:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800a356:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 800a35a:	f507 52a1 	add.w	r2, r7, #5152	@ 0x1420
 800a35e:	f102 0210 	add.w	r2, r2, #16
 800a362:	6812      	ldr	r2, [r2, #0]
 800a364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a368:	f507 52a1 	add.w	r2, r7, #5152	@ 0x1420
 800a36c:	f102 020c 	add.w	r2, r2, #12
 800a370:	6812      	ldr	r2, [r2, #0]
 800a372:	fb02 f103 	mul.w	r1, r2, r3
 800a376:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800a37a:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 800a37e:	f507 52a1 	add.w	r2, r7, #5152	@ 0x1420
 800a382:	f102 0210 	add.w	r2, r2, #16
 800a386:	6812      	ldr	r2, [r2, #0]
 800a388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        res += bestm[i];
 800a38c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800a390:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 800a394:	f507 52a1 	add.w	r2, r7, #5152	@ 0x1420
 800a398:	f102 0210 	add.w	r2, r2, #16
 800a39c:	6812      	ldr	r2, [r2, #0]
 800a39e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3a2:	f507 52a2 	add.w	r2, r7, #5184	@ 0x1440
 800a3a6:	f102 0214 	add.w	r2, r2, #20
 800a3aa:	6812      	ldr	r2, [r2, #0]
 800a3ac:	4413      	add	r3, r2
 800a3ae:	f507 52a2 	add.w	r2, r7, #5184	@ 0x1440
 800a3b2:	f102 0214 	add.w	r2, r2, #20
 800a3b6:	6013      	str	r3, [r2, #0]
    for (size_t i = 0; i < N / TAU + 1; i++) {
 800a3b8:	f507 53a1 	add.w	r3, r7, #5152	@ 0x1420
 800a3bc:	f103 0310 	add.w	r3, r3, #16
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	3301      	adds	r3, #1
 800a3c4:	f507 52a1 	add.w	r2, r7, #5152	@ 0x1420
 800a3c8:	f102 0210 	add.w	r2, r2, #16
 800a3cc:	6013      	str	r3, [r2, #0]
 800a3ce:	f507 53a1 	add.w	r3, r7, #5152	@ 0x1420
 800a3d2:	f103 0310 	add.w	r3, r3, #16
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	2b04      	cmp	r3, #4
 800a3da:	f67f af5f 	bls.w	800a29c <polyvecmk_sqsing_value+0x3b2>
    }

    return (res + (1 << 5)) >> 6; // return rounded, squared value
 800a3de:	f507 53a2 	add.w	r3, r7, #5184	@ 0x1440
 800a3e2:	f103 0314 	add.w	r3, r3, #20
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	3320      	adds	r3, #32
 800a3ea:	119b      	asrs	r3, r3, #6
 800a3ec:	17da      	asrs	r2, r3, #31
 800a3ee:	461c      	mov	r4, r3
 800a3f0:	4615      	mov	r5, r2
 800a3f2:	4622      	mov	r2, r4
 800a3f4:	462b      	mov	r3, r5
}
 800a3f6:	4610      	mov	r0, r2
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	f507 57a2 	add.w	r7, r7, #5184	@ 0x1440
 800a3fe:	3718      	adds	r7, #24
 800a400:	46bd      	mov	sp, r7
 800a402:	bdb0      	pop	{r4, r5, r7, pc}

0800a404 <surf>:

#define ROTATE(x, b) (((x) << (b)) | ((x) >> (32 - (b))))
#define MUSH(i, b) x = t[i] += (((x ^ seed[i]) + sum) ^ ROTATE(x, b));

static void surf(uint32_t out[8])
{
 800a404:	b480      	push	{r7}
 800a406:	b095      	sub	sp, #84	@ 0x54
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  uint32_t t[12];
  uint32_t x;
  uint32_t sum = 0;
 800a40c:	2300      	movs	r3, #0
 800a40e:	64bb      	str	r3, [r7, #72]	@ 0x48
  int32_t r;
  int32_t i;
  int32_t loop;

  for (i = 0; i < 12; ++i) {
 800a410:	2300      	movs	r3, #0
 800a412:	643b      	str	r3, [r7, #64]	@ 0x40
 800a414:	e012      	b.n	800a43c <surf+0x38>
    t[i] = in[i] ^ seed[12 + i];
 800a416:	4a8d      	ldr	r2, [pc, #564]	@ (800a64c <surf+0x248>)
 800a418:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a41a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a41e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a420:	330c      	adds	r3, #12
 800a422:	498b      	ldr	r1, [pc, #556]	@ (800a650 <surf+0x24c>)
 800a424:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a428:	405a      	eors	r2, r3
 800a42a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a42c:	009b      	lsls	r3, r3, #2
 800a42e:	3350      	adds	r3, #80	@ 0x50
 800a430:	443b      	add	r3, r7
 800a432:	f843 2c44 	str.w	r2, [r3, #-68]
  for (i = 0; i < 12; ++i) {
 800a436:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a438:	3301      	adds	r3, #1
 800a43a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a43c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a43e:	2b0b      	cmp	r3, #11
 800a440:	dde9      	ble.n	800a416 <surf+0x12>
  }
  for (i = 0; i < 8; ++i) {
 800a442:	2300      	movs	r3, #0
 800a444:	643b      	str	r3, [r7, #64]	@ 0x40
 800a446:	e00d      	b.n	800a464 <surf+0x60>
    out[i] = seed[24 + i];
 800a448:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a44a:	f103 0218 	add.w	r2, r3, #24
 800a44e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a450:	009b      	lsls	r3, r3, #2
 800a452:	6879      	ldr	r1, [r7, #4]
 800a454:	440b      	add	r3, r1
 800a456:	497e      	ldr	r1, [pc, #504]	@ (800a650 <surf+0x24c>)
 800a458:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a45c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 8; ++i) {
 800a45e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a460:	3301      	adds	r3, #1
 800a462:	643b      	str	r3, [r7, #64]	@ 0x40
 800a464:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a466:	2b07      	cmp	r3, #7
 800a468:	ddee      	ble.n	800a448 <surf+0x44>
  }
  x = t[11];
 800a46a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a46c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  for (loop = 0; loop < 2; ++loop) {
 800a46e:	2300      	movs	r3, #0
 800a470:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a472:	e0df      	b.n	800a634 <surf+0x230>
    for (r = 0; r < 16; ++r) {
 800a474:	2300      	movs	r3, #0
 800a476:	647b      	str	r3, [r7, #68]	@ 0x44
 800a478:	e0ba      	b.n	800a5f0 <surf+0x1ec>
      sum += 0x9e3779b9;
 800a47a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a47c:	4b75      	ldr	r3, [pc, #468]	@ (800a654 <surf+0x250>)
 800a47e:	4413      	add	r3, r2
 800a480:	64bb      	str	r3, [r7, #72]	@ 0x48
      MUSH(0, 5)
 800a482:	68fa      	ldr	r2, [r7, #12]
 800a484:	4b72      	ldr	r3, [pc, #456]	@ (800a650 <surf+0x24c>)
 800a486:	6819      	ldr	r1, [r3, #0]
 800a488:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a48a:	4059      	eors	r1, r3
 800a48c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a48e:	4419      	add	r1, r3
 800a490:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a492:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800a496:	404b      	eors	r3, r1
 800a498:	4413      	add	r3, r2
 800a49a:	60fb      	str	r3, [r7, #12]
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      MUSH(1, 7)
 800a4a0:	693a      	ldr	r2, [r7, #16]
 800a4a2:	4b6b      	ldr	r3, [pc, #428]	@ (800a650 <surf+0x24c>)
 800a4a4:	6859      	ldr	r1, [r3, #4]
 800a4a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4a8:	4059      	eors	r1, r3
 800a4aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a4ac:	4419      	add	r1, r3
 800a4ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4b0:	ea4f 6373 	mov.w	r3, r3, ror #25
 800a4b4:	404b      	eors	r3, r1
 800a4b6:	4413      	add	r3, r2
 800a4b8:	613b      	str	r3, [r7, #16]
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
      MUSH(2, 9)
 800a4be:	697a      	ldr	r2, [r7, #20]
 800a4c0:	4b63      	ldr	r3, [pc, #396]	@ (800a650 <surf+0x24c>)
 800a4c2:	6899      	ldr	r1, [r3, #8]
 800a4c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4c6:	4059      	eors	r1, r3
 800a4c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a4ca:	4419      	add	r1, r3
 800a4cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4ce:	ea4f 53f3 	mov.w	r3, r3, ror #23
 800a4d2:	404b      	eors	r3, r1
 800a4d4:	4413      	add	r3, r2
 800a4d6:	617b      	str	r3, [r7, #20]
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	64fb      	str	r3, [r7, #76]	@ 0x4c
      MUSH(3, 13)
 800a4dc:	69ba      	ldr	r2, [r7, #24]
 800a4de:	4b5c      	ldr	r3, [pc, #368]	@ (800a650 <surf+0x24c>)
 800a4e0:	68d9      	ldr	r1, [r3, #12]
 800a4e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4e4:	4059      	eors	r1, r3
 800a4e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a4e8:	4419      	add	r1, r3
 800a4ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4ec:	ea4f 43f3 	mov.w	r3, r3, ror #19
 800a4f0:	404b      	eors	r3, r1
 800a4f2:	4413      	add	r3, r2
 800a4f4:	61bb      	str	r3, [r7, #24]
 800a4f6:	69bb      	ldr	r3, [r7, #24]
 800a4f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
      MUSH(4, 5)
 800a4fa:	69fa      	ldr	r2, [r7, #28]
 800a4fc:	4b54      	ldr	r3, [pc, #336]	@ (800a650 <surf+0x24c>)
 800a4fe:	6919      	ldr	r1, [r3, #16]
 800a500:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a502:	4059      	eors	r1, r3
 800a504:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a506:	4419      	add	r1, r3
 800a508:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a50a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800a50e:	404b      	eors	r3, r1
 800a510:	4413      	add	r3, r2
 800a512:	61fb      	str	r3, [r7, #28]
 800a514:	69fb      	ldr	r3, [r7, #28]
 800a516:	64fb      	str	r3, [r7, #76]	@ 0x4c
      MUSH(5, 7)
 800a518:	6a3a      	ldr	r2, [r7, #32]
 800a51a:	4b4d      	ldr	r3, [pc, #308]	@ (800a650 <surf+0x24c>)
 800a51c:	6959      	ldr	r1, [r3, #20]
 800a51e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a520:	4059      	eors	r1, r3
 800a522:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a524:	4419      	add	r1, r3
 800a526:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a528:	ea4f 6373 	mov.w	r3, r3, ror #25
 800a52c:	404b      	eors	r3, r1
 800a52e:	4413      	add	r3, r2
 800a530:	623b      	str	r3, [r7, #32]
 800a532:	6a3b      	ldr	r3, [r7, #32]
 800a534:	64fb      	str	r3, [r7, #76]	@ 0x4c
      MUSH(6, 9)
 800a536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a538:	4b45      	ldr	r3, [pc, #276]	@ (800a650 <surf+0x24c>)
 800a53a:	6999      	ldr	r1, [r3, #24]
 800a53c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a53e:	4059      	eors	r1, r3
 800a540:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a542:	4419      	add	r1, r3
 800a544:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a546:	ea4f 53f3 	mov.w	r3, r3, ror #23
 800a54a:	404b      	eors	r3, r1
 800a54c:	4413      	add	r3, r2
 800a54e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a552:	64fb      	str	r3, [r7, #76]	@ 0x4c
      MUSH(7, 13)
 800a554:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a556:	4b3e      	ldr	r3, [pc, #248]	@ (800a650 <surf+0x24c>)
 800a558:	69d9      	ldr	r1, [r3, #28]
 800a55a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a55c:	4059      	eors	r1, r3
 800a55e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a560:	4419      	add	r1, r3
 800a562:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a564:	ea4f 43f3 	mov.w	r3, r3, ror #19
 800a568:	404b      	eors	r3, r1
 800a56a:	4413      	add	r3, r2
 800a56c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a56e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a570:	64fb      	str	r3, [r7, #76]	@ 0x4c
      MUSH(8, 5)
 800a572:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a574:	4b36      	ldr	r3, [pc, #216]	@ (800a650 <surf+0x24c>)
 800a576:	6a19      	ldr	r1, [r3, #32]
 800a578:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a57a:	4059      	eors	r1, r3
 800a57c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a57e:	4419      	add	r1, r3
 800a580:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a582:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800a586:	404b      	eors	r3, r1
 800a588:	4413      	add	r3, r2
 800a58a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a58c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a58e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      MUSH(9, 7)
 800a590:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a592:	4b2f      	ldr	r3, [pc, #188]	@ (800a650 <surf+0x24c>)
 800a594:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a596:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a598:	4059      	eors	r1, r3
 800a59a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a59c:	4419      	add	r1, r3
 800a59e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5a0:	ea4f 6373 	mov.w	r3, r3, ror #25
 800a5a4:	404b      	eors	r3, r1
 800a5a6:	4413      	add	r3, r2
 800a5a8:	633b      	str	r3, [r7, #48]	@ 0x30
 800a5aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
      MUSH(10, 9)
 800a5ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a5b0:	4b27      	ldr	r3, [pc, #156]	@ (800a650 <surf+0x24c>)
 800a5b2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800a5b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5b6:	4059      	eors	r1, r3
 800a5b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5ba:	4419      	add	r1, r3
 800a5bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5be:	ea4f 53f3 	mov.w	r3, r3, ror #23
 800a5c2:	404b      	eors	r3, r1
 800a5c4:	4413      	add	r3, r2
 800a5c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      MUSH(11, 13)
 800a5cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a5ce:	4b20      	ldr	r3, [pc, #128]	@ (800a650 <surf+0x24c>)
 800a5d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a5d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5d4:	4059      	eors	r1, r3
 800a5d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5d8:	4419      	add	r1, r3
 800a5da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5dc:	ea4f 43f3 	mov.w	r3, r3, ror #19
 800a5e0:	404b      	eors	r3, r1
 800a5e2:	4413      	add	r3, r2
 800a5e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a5e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (r = 0; r < 16; ++r) {
 800a5ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	647b      	str	r3, [r7, #68]	@ 0x44
 800a5f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a5f2:	2b0f      	cmp	r3, #15
 800a5f4:	f77f af41 	ble.w	800a47a <surf+0x76>
    }
    for (i = 0; i < 8; ++i) {
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	643b      	str	r3, [r7, #64]	@ 0x40
 800a5fc:	e014      	b.n	800a628 <surf+0x224>
      out[i] ^= t[i + 4];
 800a5fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a600:	009b      	lsls	r3, r3, #2
 800a602:	687a      	ldr	r2, [r7, #4]
 800a604:	4413      	add	r3, r2
 800a606:	6819      	ldr	r1, [r3, #0]
 800a608:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a60a:	3304      	adds	r3, #4
 800a60c:	009b      	lsls	r3, r3, #2
 800a60e:	3350      	adds	r3, #80	@ 0x50
 800a610:	443b      	add	r3, r7
 800a612:	f853 2c44 	ldr.w	r2, [r3, #-68]
 800a616:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a618:	009b      	lsls	r3, r3, #2
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	4403      	add	r3, r0
 800a61e:	404a      	eors	r2, r1
 800a620:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 8; ++i) {
 800a622:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a624:	3301      	adds	r3, #1
 800a626:	643b      	str	r3, [r7, #64]	@ 0x40
 800a628:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a62a:	2b07      	cmp	r3, #7
 800a62c:	dde7      	ble.n	800a5fe <surf+0x1fa>
  for (loop = 0; loop < 2; ++loop) {
 800a62e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a630:	3301      	adds	r3, #1
 800a632:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a634:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a636:	2b01      	cmp	r3, #1
 800a638:	f77f af1c 	ble.w	800a474 <surf+0x70>
    }
  }
}
 800a63c:	bf00      	nop
 800a63e:	bf00      	nop
 800a640:	3754      	adds	r7, #84	@ 0x54
 800a642:	46bd      	mov	sp, r7
 800a644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a648:	4770      	bx	lr
 800a64a:	bf00      	nop
 800a64c:	20001414 	.word	0x20001414
 800a650:	20001208 	.word	0x20001208
 800a654:	9e3779b9 	.word	0x9e3779b9

0800a658 <randombytes_regen>:

void randombytes_regen(void);
void randombytes_regen(void)
{
 800a658:	b5b0      	push	{r4, r5, r7, lr}
 800a65a:	b088      	sub	sp, #32
 800a65c:	af00      	add	r7, sp, #0
  uint32_t out[8];
  if (!++in[0]) {
 800a65e:	4b2f      	ldr	r3, [pc, #188]	@ (800a71c <randombytes_regen+0xc4>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	3301      	adds	r3, #1
 800a664:	4a2d      	ldr	r2, [pc, #180]	@ (800a71c <randombytes_regen+0xc4>)
 800a666:	6013      	str	r3, [r2, #0]
 800a668:	4b2c      	ldr	r3, [pc, #176]	@ (800a71c <randombytes_regen+0xc4>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d116      	bne.n	800a69e <randombytes_regen+0x46>
    if (!++in[1]) {
 800a670:	4b2a      	ldr	r3, [pc, #168]	@ (800a71c <randombytes_regen+0xc4>)
 800a672:	685b      	ldr	r3, [r3, #4]
 800a674:	3301      	adds	r3, #1
 800a676:	4a29      	ldr	r2, [pc, #164]	@ (800a71c <randombytes_regen+0xc4>)
 800a678:	6053      	str	r3, [r2, #4]
 800a67a:	4b28      	ldr	r3, [pc, #160]	@ (800a71c <randombytes_regen+0xc4>)
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d10d      	bne.n	800a69e <randombytes_regen+0x46>
      if (!++in[2]) {
 800a682:	4b26      	ldr	r3, [pc, #152]	@ (800a71c <randombytes_regen+0xc4>)
 800a684:	689b      	ldr	r3, [r3, #8]
 800a686:	3301      	adds	r3, #1
 800a688:	4a24      	ldr	r2, [pc, #144]	@ (800a71c <randombytes_regen+0xc4>)
 800a68a:	6093      	str	r3, [r2, #8]
 800a68c:	4b23      	ldr	r3, [pc, #140]	@ (800a71c <randombytes_regen+0xc4>)
 800a68e:	689b      	ldr	r3, [r3, #8]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d104      	bne.n	800a69e <randombytes_regen+0x46>
        ++in[3];
 800a694:	4b21      	ldr	r3, [pc, #132]	@ (800a71c <randombytes_regen+0xc4>)
 800a696:	68db      	ldr	r3, [r3, #12]
 800a698:	3301      	adds	r3, #1
 800a69a:	4a20      	ldr	r2, [pc, #128]	@ (800a71c <randombytes_regen+0xc4>)
 800a69c:	60d3      	str	r3, [r2, #12]
      }
    }
  }
  surf(out);
 800a69e:	463b      	mov	r3, r7
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f7ff feaf 	bl	800a404 <surf>
  memcpy(out_buf, out, sizeof(out));
 800a6a6:	4b1e      	ldr	r3, [pc, #120]	@ (800a720 <randombytes_regen+0xc8>)
 800a6a8:	461d      	mov	r5, r3
 800a6aa:	463c      	mov	r4, r7
 800a6ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a6ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a6b0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800a6b4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  if (!++in[0]) {
 800a6b8:	4b18      	ldr	r3, [pc, #96]	@ (800a71c <randombytes_regen+0xc4>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	3301      	adds	r3, #1
 800a6be:	4a17      	ldr	r2, [pc, #92]	@ (800a71c <randombytes_regen+0xc4>)
 800a6c0:	6013      	str	r3, [r2, #0]
 800a6c2:	4b16      	ldr	r3, [pc, #88]	@ (800a71c <randombytes_regen+0xc4>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d116      	bne.n	800a6f8 <randombytes_regen+0xa0>
    if (!++in[1]) {
 800a6ca:	4b14      	ldr	r3, [pc, #80]	@ (800a71c <randombytes_regen+0xc4>)
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	3301      	adds	r3, #1
 800a6d0:	4a12      	ldr	r2, [pc, #72]	@ (800a71c <randombytes_regen+0xc4>)
 800a6d2:	6053      	str	r3, [r2, #4]
 800a6d4:	4b11      	ldr	r3, [pc, #68]	@ (800a71c <randombytes_regen+0xc4>)
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d10d      	bne.n	800a6f8 <randombytes_regen+0xa0>
      if (!++in[2]) {
 800a6dc:	4b0f      	ldr	r3, [pc, #60]	@ (800a71c <randombytes_regen+0xc4>)
 800a6de:	689b      	ldr	r3, [r3, #8]
 800a6e0:	3301      	adds	r3, #1
 800a6e2:	4a0e      	ldr	r2, [pc, #56]	@ (800a71c <randombytes_regen+0xc4>)
 800a6e4:	6093      	str	r3, [r2, #8]
 800a6e6:	4b0d      	ldr	r3, [pc, #52]	@ (800a71c <randombytes_regen+0xc4>)
 800a6e8:	689b      	ldr	r3, [r3, #8]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d104      	bne.n	800a6f8 <randombytes_regen+0xa0>
        ++in[3];
 800a6ee:	4b0b      	ldr	r3, [pc, #44]	@ (800a71c <randombytes_regen+0xc4>)
 800a6f0:	68db      	ldr	r3, [r3, #12]
 800a6f2:	3301      	adds	r3, #1
 800a6f4:	4a09      	ldr	r2, [pc, #36]	@ (800a71c <randombytes_regen+0xc4>)
 800a6f6:	60d3      	str	r3, [r2, #12]
      }
    }
  }
  surf(out);
 800a6f8:	463b      	mov	r3, r7
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f7ff fe82 	bl	800a404 <surf>
  memcpy(out_buf + sizeof(out), out, sizeof(out));
 800a700:	4808      	ldr	r0, [pc, #32]	@ (800a724 <randombytes_regen+0xcc>)
 800a702:	463b      	mov	r3, r7
 800a704:	2220      	movs	r2, #32
 800a706:	4619      	mov	r1, r3
 800a708:	f00a ff9a 	bl	8015640 <memcpy>
  outleft = sizeof(out_buf);
 800a70c:	4b06      	ldr	r3, [pc, #24]	@ (800a728 <randombytes_regen+0xd0>)
 800a70e:	2240      	movs	r2, #64	@ 0x40
 800a710:	601a      	str	r2, [r3, #0]
}
 800a712:	bf00      	nop
 800a714:	3720      	adds	r7, #32
 800a716:	46bd      	mov	sp, r7
 800a718:	bdb0      	pop	{r4, r5, r7, pc}
 800a71a:	bf00      	nop
 800a71c:	20001414 	.word	0x20001414
 800a720:	20001444 	.word	0x20001444
 800a724:	20001464 	.word	0x20001464
 800a728:	20001484 	.word	0x20001484

0800a72c <randombytes>:

int randombytes(uint8_t* buf, size_t xlen)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b082      	sub	sp, #8
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	6039      	str	r1, [r7, #0]
  while (xlen > 0) {
 800a736:	e016      	b.n	800a766 <randombytes+0x3a>
    if (!outleft) {
 800a738:	4b0f      	ldr	r3, [pc, #60]	@ (800a778 <randombytes+0x4c>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d101      	bne.n	800a744 <randombytes+0x18>
      randombytes_regen();
 800a740:	f7ff ff8a 	bl	800a658 <randombytes_regen>
    }
    *buf = out_buf[--outleft];
 800a744:	4b0c      	ldr	r3, [pc, #48]	@ (800a778 <randombytes+0x4c>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	3b01      	subs	r3, #1
 800a74a:	4a0b      	ldr	r2, [pc, #44]	@ (800a778 <randombytes+0x4c>)
 800a74c:	6013      	str	r3, [r2, #0]
 800a74e:	4b0a      	ldr	r3, [pc, #40]	@ (800a778 <randombytes+0x4c>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	4a0a      	ldr	r2, [pc, #40]	@ (800a77c <randombytes+0x50>)
 800a754:	5cd2      	ldrb	r2, [r2, r3]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	701a      	strb	r2, [r3, #0]
    ++buf;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	3301      	adds	r3, #1
 800a75e:	607b      	str	r3, [r7, #4]
    --xlen;
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	3b01      	subs	r3, #1
 800a764:	603b      	str	r3, [r7, #0]
  while (xlen > 0) {
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d1e5      	bne.n	800a738 <randombytes+0xc>
  }
  return 0;
 800a76c:	2300      	movs	r3, #0
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3708      	adds	r7, #8
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
 800a776:	bf00      	nop
 800a778:	20001484 	.word	0x20001484
 800a77c:	20001444 	.word	0x20001444

0800a780 <montgomery_reduce>:
 *
 * Arguments:   - int64_t: finite field element a
 *
 * Returns r.
 **************************************************/
int32_t montgomery_reduce(int64_t a) {
 800a780:	b580      	push	{r7, lr}
 800a782:	b082      	sub	sp, #8
 800a784:	af00      	add	r7, sp, #0
 800a786:	e9c7 0100 	strd	r0, r1, [r7]
    return _montgomery_reduce(a);
 800a78a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a78e:	f000 f805 	bl	800a79c <_montgomery_reduce>
 800a792:	4603      	mov	r3, r0
}
 800a794:	4618      	mov	r0, r3
 800a796:	3708      	adds	r7, #8
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <_montgomery_reduce>:
 *
 * Arguments:   - int64_t: finite field element a
 *
 * Returns r.
 **************************************************/
int32_t _montgomery_reduce(int64_t a) {
 800a79c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a7a0:	b086      	sub	sp, #24
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	e9c7 0102 	strd	r0, r1, [r7, #8]
    int32_t t;

    t = (int64_t)(int32_t)a * QINV;
 800a7a8:	68b9      	ldr	r1, [r7, #8]
 800a7aa:	481d      	ldr	r0, [pc, #116]	@ (800a820 <_montgomery_reduce+0x84>)
 800a7ac:	fb00 f101 	mul.w	r1, r0, r1
 800a7b0:	6179      	str	r1, [r7, #20]
    t = (a - (int64_t)t * Q) >> 32;
 800a7b2:	6979      	ldr	r1, [r7, #20]
 800a7b4:	17c8      	asrs	r0, r1, #31
 800a7b6:	460c      	mov	r4, r1
 800a7b8:	4605      	mov	r5, r0
 800a7ba:	e9c7 4500 	strd	r4, r5, [r7]
 800a7be:	f04f 0000 	mov.w	r0, #0
 800a7c2:	f04f 0100 	mov.w	r1, #0
 800a7c6:	01a9      	lsls	r1, r5, #6
 800a7c8:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 800a7cc:	01a0      	lsls	r0, r4, #6
 800a7ce:	683e      	ldr	r6, [r7, #0]
 800a7d0:	1a32      	subs	r2, r6, r0
 800a7d2:	687e      	ldr	r6, [r7, #4]
 800a7d4:	eb66 0301 	sbc.w	r3, r6, r1
 800a7d8:	f04f 0000 	mov.w	r0, #0
 800a7dc:	f04f 0100 	mov.w	r1, #0
 800a7e0:	0299      	lsls	r1, r3, #10
 800a7e2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800a7e6:	0290      	lsls	r0, r2, #10
 800a7e8:	4602      	mov	r2, r0
 800a7ea:	460b      	mov	r3, r1
 800a7ec:	ebb2 0a04 	subs.w	sl, r2, r4
 800a7f0:	eb63 0b05 	sbc.w	fp, r3, r5
 800a7f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a7f8:	eb1a 0802 	adds.w	r8, sl, r2
 800a7fc:	eb4b 0903 	adc.w	r9, fp, r3
 800a800:	f04f 0200 	mov.w	r2, #0
 800a804:	f04f 0300 	mov.w	r3, #0
 800a808:	464a      	mov	r2, r9
 800a80a:	ea4f 73e9 	mov.w	r3, r9, asr #31
 800a80e:	4613      	mov	r3, r2
 800a810:	617b      	str	r3, [r7, #20]
    return t;
 800a812:	697b      	ldr	r3, [r7, #20]
}
 800a814:	4618      	mov	r0, r3
 800a816:	3718      	adds	r7, #24
 800a818:	46bd      	mov	sp, r7
 800a81a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a81e:	4770      	bx	lr
 800a820:	380f0401 	.word	0x380f0401

0800a824 <freeze>:
 *
 * Arguments:   - int32_t: finite field element a
 *
 * Returns r.
 **************************************************/
int32_t freeze(int32_t a) {
 800a824:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a828:	b09a      	sub	sp, #104	@ 0x68
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	65f8      	str	r0, [r7, #92]	@ 0x5c
    int64_t t = (int64_t)a * QREC;
 800a82e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a830:	17da      	asrs	r2, r3, #31
 800a832:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a834:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800a836:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a83a:	f04f 0000 	mov.w	r0, #0
 800a83e:	f04f 0100 	mov.w	r1, #0
 800a842:	0199      	lsls	r1, r3, #6
 800a844:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 800a848:	0190      	lsls	r0, r2, #6
 800a84a:	4602      	mov	r2, r0
 800a84c:	460b      	mov	r3, r1
 800a84e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800a850:	1854      	adds	r4, r2, r1
 800a852:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800a854:	eb43 0501 	adc.w	r5, r3, r1
 800a858:	f04f 0200 	mov.w	r2, #0
 800a85c:	f04f 0300 	mov.w	r3, #0
 800a860:	01ab      	lsls	r3, r5, #6
 800a862:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 800a866:	01a2      	lsls	r2, r4, #6
 800a868:	4614      	mov	r4, r2
 800a86a:	461d      	mov	r5, r3
 800a86c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800a870:	4603      	mov	r3, r0
 800a872:	eb14 0803 	adds.w	r8, r4, r3
 800a876:	460b      	mov	r3, r1
 800a878:	eb45 0903 	adc.w	r9, r5, r3
 800a87c:	f04f 0200 	mov.w	r2, #0
 800a880:	f04f 0300 	mov.w	r3, #0
 800a884:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800a888:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800a88c:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800a890:	4690      	mov	r8, r2
 800a892:	4699      	mov	r9, r3
 800a894:	4603      	mov	r3, r0
 800a896:	ebb8 0303 	subs.w	r3, r8, r3
 800a89a:	623b      	str	r3, [r7, #32]
 800a89c:	460b      	mov	r3, r1
 800a89e:	eb69 0303 	sbc.w	r3, r9, r3
 800a8a2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a8a4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800a8a8:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60
    t = t >> 32;
 800a8ac:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800a8b0:	f04f 0000 	mov.w	r0, #0
 800a8b4:	f04f 0100 	mov.w	r1, #0
 800a8b8:	0018      	movs	r0, r3
 800a8ba:	17d9      	asrs	r1, r3, #31
 800a8bc:	e9c7 0118 	strd	r0, r1, [r7, #96]	@ 0x60
    t = a - t * Q;             // -2Q <  t < 2Q
 800a8c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a8c2:	17da      	asrs	r2, r3, #31
 800a8c4:	643b      	str	r3, [r7, #64]	@ 0x40
 800a8c6:	647a      	str	r2, [r7, #68]	@ 0x44
 800a8c8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800a8cc:	4604      	mov	r4, r0
 800a8ce:	460d      	mov	r5, r1
 800a8d0:	f04f 0200 	mov.w	r2, #0
 800a8d4:	f04f 0300 	mov.w	r3, #0
 800a8d8:	018b      	lsls	r3, r1, #6
 800a8da:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a8de:	0182      	lsls	r2, r0, #6
 800a8e0:	1aa6      	subs	r6, r4, r2
 800a8e2:	61be      	str	r6, [r7, #24]
 800a8e4:	eb65 0303 	sbc.w	r3, r5, r3
 800a8e8:	61fb      	str	r3, [r7, #28]
 800a8ea:	f04f 0200 	mov.w	r2, #0
 800a8ee:	f04f 0300 	mov.w	r3, #0
 800a8f2:	e9d7 5606 	ldrd	r5, r6, [r7, #24]
 800a8f6:	4634      	mov	r4, r6
 800a8f8:	02a3      	lsls	r3, r4, #10
 800a8fa:	462c      	mov	r4, r5
 800a8fc:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800a900:	462c      	mov	r4, r5
 800a902:	02a2      	lsls	r2, r4, #10
 800a904:	4614      	mov	r4, r2
 800a906:	461d      	mov	r5, r3
 800a908:	4623      	mov	r3, r4
 800a90a:	1a1b      	subs	r3, r3, r0
 800a90c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a90e:	462b      	mov	r3, r5
 800a910:	eb63 0301 	sbc.w	r3, r3, r1
 800a914:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a916:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800a91a:	4623      	mov	r3, r4
 800a91c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800a920:	4602      	mov	r2, r0
 800a922:	189b      	adds	r3, r3, r2
 800a924:	613b      	str	r3, [r7, #16]
 800a926:	460b      	mov	r3, r1
 800a928:	462a      	mov	r2, r5
 800a92a:	eb42 0303 	adc.w	r3, r2, r3
 800a92e:	617b      	str	r3, [r7, #20]
 800a930:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800a934:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60
    t += (t >> 31) & DQ;       //   0 <= t < 2Q
 800a938:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800a93c:	f04f 0000 	mov.w	r0, #0
 800a940:	f04f 0100 	mov.w	r1, #0
 800a944:	0fd0      	lsrs	r0, r2, #31
 800a946:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800a94a:	17d9      	asrs	r1, r3, #31
 800a94c:	f020 437f 	bic.w	r3, r0, #4278190080	@ 0xff000000
 800a950:	653b      	str	r3, [r7, #80]	@ 0x50
 800a952:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a954:	f423 037e 	bic.w	r3, r3, #16646144	@ 0xfe0000
 800a958:	653b      	str	r3, [r7, #80]	@ 0x50
 800a95a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a95c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a960:	653b      	str	r3, [r7, #80]	@ 0x50
 800a962:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a964:	f023 0305 	bic.w	r3, r3, #5
 800a968:	653b      	str	r3, [r7, #80]	@ 0x50
 800a96a:	2300      	movs	r3, #0
 800a96c:	657b      	str	r3, [r7, #84]	@ 0x54
 800a96e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800a972:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800a976:	4621      	mov	r1, r4
 800a978:	1851      	adds	r1, r2, r1
 800a97a:	60b9      	str	r1, [r7, #8]
 800a97c:	4629      	mov	r1, r5
 800a97e:	eb43 0101 	adc.w	r1, r3, r1
 800a982:	60f9      	str	r1, [r7, #12]
 800a984:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800a988:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60
    t -= ~((t - Q) >> 31) & Q; //   0 <= t < Q
 800a98c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800a990:	f46f 417c 	mvn.w	r1, #64512	@ 0xfc00
 800a994:	1851      	adds	r1, r2, r1
 800a996:	6339      	str	r1, [r7, #48]	@ 0x30
 800a998:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
 800a99c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a99e:	f04f 0200 	mov.w	r2, #0
 800a9a2:	f04f 0300 	mov.w	r3, #0
 800a9a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800a9aa:	4621      	mov	r1, r4
 800a9ac:	0fca      	lsrs	r2, r1, #31
 800a9ae:	4629      	mov	r1, r5
 800a9b0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800a9b4:	4629      	mov	r1, r5
 800a9b6:	17cb      	asrs	r3, r1, #31
 800a9b8:	43d1      	mvns	r1, r2
 800a9ba:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a9bc:	43db      	mvns	r3, r3
 800a9be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a9c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9c2:	f423 7a7f 	bic.w	sl, r3, #1020	@ 0x3fc
 800a9c6:	f02a 0a02 	bic.w	sl, sl, #2
 800a9ca:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
 800a9ce:	ea4f 4a1a 	mov.w	sl, sl, lsr #16
 800a9d2:	f04f 0b00 	mov.w	fp, #0
 800a9d6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800a9da:	ebb2 010a 	subs.w	r1, r2, sl
 800a9de:	6039      	str	r1, [r7, #0]
 800a9e0:	eb63 030b 	sbc.w	r3, r3, fp
 800a9e4:	607b      	str	r3, [r7, #4]
 800a9e6:	e9d7 3400 	ldrd	r3, r4, [r7]
 800a9ea:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60
    return t;
 800a9ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3768      	adds	r7, #104	@ 0x68
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a9fa:	4770      	bx	lr

0800a9fc <reduce32_2q>:
 *
 * Arguments:   - int32_t: finite field element a
 *
 * Returns r.
 **************************************************/
int32_t reduce32_2q(int32_t a) {
 800a9fc:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800aa00:	b0a5      	sub	sp, #148	@ 0x94
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    int64_t t = (int64_t)a * DQREC;
 800aa08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800aa0c:	17da      	asrs	r2, r3, #31
 800aa0e:	663b      	str	r3, [r7, #96]	@ 0x60
 800aa10:	667a      	str	r2, [r7, #100]	@ 0x64
 800aa12:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800aa16:	f04f 0000 	mov.w	r0, #0
 800aa1a:	f04f 0100 	mov.w	r1, #0
 800aa1e:	0199      	lsls	r1, r3, #6
 800aa20:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 800aa24:	0190      	lsls	r0, r2, #6
 800aa26:	4602      	mov	r2, r0
 800aa28:	460b      	mov	r3, r1
 800aa2a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800aa2c:	1854      	adds	r4, r2, r1
 800aa2e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800aa30:	eb43 0501 	adc.w	r5, r3, r1
 800aa34:	f04f 0200 	mov.w	r2, #0
 800aa38:	f04f 0300 	mov.w	r3, #0
 800aa3c:	01ab      	lsls	r3, r5, #6
 800aa3e:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 800aa42:	01a2      	lsls	r2, r4, #6
 800aa44:	4614      	mov	r4, r2
 800aa46:	461d      	mov	r5, r3
 800aa48:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	eb14 0803 	adds.w	r8, r4, r3
 800aa52:	460b      	mov	r3, r1
 800aa54:	eb45 0903 	adc.w	r9, r5, r3
 800aa58:	f04f 0200 	mov.w	r2, #0
 800aa5c:	f04f 0300 	mov.w	r3, #0
 800aa60:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800aa64:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800aa68:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800aa6c:	4690      	mov	r8, r2
 800aa6e:	4699      	mov	r9, r3
 800aa70:	4603      	mov	r3, r0
 800aa72:	ebb8 0303 	subs.w	r3, r8, r3
 800aa76:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa78:	460b      	mov	r3, r1
 800aa7a:	eb69 0303 	sbc.w	r3, r9, r3
 800aa7e:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa80:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800aa84:	e9c7 3422 	strd	r3, r4, [r7, #136]	@ 0x88
    t >>= 32;
 800aa88:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800aa8c:	f04f 0000 	mov.w	r0, #0
 800aa90:	f04f 0100 	mov.w	r1, #0
 800aa94:	0018      	movs	r0, r3
 800aa96:	17d9      	asrs	r1, r3, #31
 800aa98:	e9c7 0122 	strd	r0, r1, [r7, #136]	@ 0x88
    t = a - t * DQ;              // -4Q <  t < 4Q
 800aa9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800aaa0:	17da      	asrs	r2, r3, #31
 800aaa2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aaa4:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800aaa6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800aaaa:	4604      	mov	r4, r0
 800aaac:	460d      	mov	r5, r1
 800aaae:	f04f 0200 	mov.w	r2, #0
 800aab2:	f04f 0300 	mov.w	r3, #0
 800aab6:	018b      	lsls	r3, r1, #6
 800aab8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800aabc:	0182      	lsls	r2, r0, #6
 800aabe:	ebb4 0a02 	subs.w	sl, r4, r2
 800aac2:	eb65 0b03 	sbc.w	fp, r5, r3
 800aac6:	f04f 0200 	mov.w	r2, #0
 800aaca:	f04f 0300 	mov.w	r3, #0
 800aace:	ea4f 238b 	mov.w	r3, fp, lsl #10
 800aad2:	ea43 539a 	orr.w	r3, r3, sl, lsr #22
 800aad6:	ea4f 228a 	mov.w	r2, sl, lsl #10
 800aada:	4692      	mov	sl, r2
 800aadc:	469b      	mov	fp, r3
 800aade:	ebba 0300 	subs.w	r3, sl, r0
 800aae2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aae4:	eb6b 0301 	sbc.w	r3, fp, r1
 800aae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aaea:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800aaee:	460b      	mov	r3, r1
 800aaf0:	18db      	adds	r3, r3, r3
 800aaf2:	623b      	str	r3, [r7, #32]
 800aaf4:	4613      	mov	r3, r2
 800aaf6:	eb42 0303 	adc.w	r3, r2, r3
 800aafa:	627b      	str	r3, [r7, #36]	@ 0x24
 800aafc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800ab00:	461a      	mov	r2, r3
 800ab02:	4623      	mov	r3, r4
 800ab04:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800ab08:	4621      	mov	r1, r4
 800ab0a:	1889      	adds	r1, r1, r2
 800ab0c:	61b9      	str	r1, [r7, #24]
 800ab0e:	4629      	mov	r1, r5
 800ab10:	eb43 0101 	adc.w	r1, r3, r1
 800ab14:	61f9      	str	r1, [r7, #28]
 800ab16:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800ab1a:	e9c7 3422 	strd	r3, r4, [r7, #136]	@ 0x88
    t += (t >> 31) & (DQ * 2);   //   0 <= t < 4Q
 800ab1e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800ab22:	f04f 0000 	mov.w	r0, #0
 800ab26:	f04f 0100 	mov.w	r1, #0
 800ab2a:	0fd0      	lsrs	r0, r2, #31
 800ab2c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800ab30:	17d9      	asrs	r1, r3, #31
 800ab32:	f020 437f 	bic.w	r3, r0, #4278190080	@ 0xff000000
 800ab36:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ab38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ab3a:	f423 037c 	bic.w	r3, r3, #16515072	@ 0xfc0000
 800ab3e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ab40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ab42:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800ab46:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ab48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ab4a:	f023 030b 	bic.w	r3, r3, #11
 800ab4e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ab50:	2300      	movs	r3, #0
 800ab52:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ab54:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800ab58:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800ab5c:	4621      	mov	r1, r4
 800ab5e:	1851      	adds	r1, r2, r1
 800ab60:	6139      	str	r1, [r7, #16]
 800ab62:	4629      	mov	r1, r5
 800ab64:	eb43 0101 	adc.w	r1, r3, r1
 800ab68:	6179      	str	r1, [r7, #20]
 800ab6a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800ab6e:	e9c7 3422 	strd	r3, r4, [r7, #136]	@ 0x88
    t -= ~((t - DQ) >> 31) & DQ; //   0 <= t < Q
 800ab72:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800ab76:	493d      	ldr	r1, [pc, #244]	@ (800ac6c <reduce32_2q+0x270>)
 800ab78:	1851      	adds	r1, r2, r1
 800ab7a:	6539      	str	r1, [r7, #80]	@ 0x50
 800ab7c:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
 800ab80:	657b      	str	r3, [r7, #84]	@ 0x54
 800ab82:	f04f 0200 	mov.w	r2, #0
 800ab86:	f04f 0300 	mov.w	r3, #0
 800ab8a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800ab8e:	4621      	mov	r1, r4
 800ab90:	0fca      	lsrs	r2, r1, #31
 800ab92:	4629      	mov	r1, r5
 800ab94:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800ab98:	4629      	mov	r1, r5
 800ab9a:	17cb      	asrs	r3, r1, #31
 800ab9c:	43d1      	mvns	r1, r2
 800ab9e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800aba0:	43db      	mvns	r3, r3
 800aba2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aba4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aba6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800abaa:	673b      	str	r3, [r7, #112]	@ 0x70
 800abac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800abae:	f423 037e 	bic.w	r3, r3, #16646144	@ 0xfe0000
 800abb2:	673b      	str	r3, [r7, #112]	@ 0x70
 800abb4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800abb6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800abba:	673b      	str	r3, [r7, #112]	@ 0x70
 800abbc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800abbe:	f023 0305 	bic.w	r3, r3, #5
 800abc2:	673b      	str	r3, [r7, #112]	@ 0x70
 800abc4:	2300      	movs	r3, #0
 800abc6:	677b      	str	r3, [r7, #116]	@ 0x74
 800abc8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800abcc:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 800abd0:	4621      	mov	r1, r4
 800abd2:	1a51      	subs	r1, r2, r1
 800abd4:	60b9      	str	r1, [r7, #8]
 800abd6:	4629      	mov	r1, r5
 800abd8:	eb63 0301 	sbc.w	r3, r3, r1
 800abdc:	60fb      	str	r3, [r7, #12]
 800abde:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800abe2:	e9c7 3422 	strd	r3, r4, [r7, #136]	@ 0x88
    t -= ~((t - Q) >> 31) & DQ;  // centered representation
 800abe6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800abea:	f46f 417c 	mvn.w	r1, #64512	@ 0xfc00
 800abee:	1851      	adds	r1, r2, r1
 800abf0:	6439      	str	r1, [r7, #64]	@ 0x40
 800abf2:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
 800abf6:	647b      	str	r3, [r7, #68]	@ 0x44
 800abf8:	f04f 0200 	mov.w	r2, #0
 800abfc:	f04f 0300 	mov.w	r3, #0
 800ac00:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800ac04:	4621      	mov	r1, r4
 800ac06:	0fca      	lsrs	r2, r1, #31
 800ac08:	4629      	mov	r1, r5
 800ac0a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800ac0e:	4629      	mov	r1, r5
 800ac10:	17cb      	asrs	r3, r1, #31
 800ac12:	43d1      	mvns	r1, r2
 800ac14:	63b9      	str	r1, [r7, #56]	@ 0x38
 800ac16:	43db      	mvns	r3, r3
 800ac18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac1c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ac20:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ac22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ac24:	f423 037e 	bic.w	r3, r3, #16646144	@ 0xfe0000
 800ac28:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ac2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ac2c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800ac30:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ac32:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ac34:	f023 0305 	bic.w	r3, r3, #5
 800ac38:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ac3e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800ac42:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800ac46:	4621      	mov	r1, r4
 800ac48:	1a51      	subs	r1, r2, r1
 800ac4a:	6039      	str	r1, [r7, #0]
 800ac4c:	4629      	mov	r1, r5
 800ac4e:	eb63 0301 	sbc.w	r3, r3, r1
 800ac52:	607b      	str	r3, [r7, #4]
 800ac54:	e9d7 3400 	ldrd	r3, r4, [r7]
 800ac58:	e9c7 3422 	strd	r3, r4, [r7, #136]	@ 0x88
    return (int32_t)t;
 800ac5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3794      	adds	r7, #148	@ 0x94
 800ac64:	46bd      	mov	sp, r7
 800ac66:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800ac6a:	4770      	bx	lr
 800ac6c:	fffe07fe 	.word	0xfffe07fe

0800ac70 <freeze2q>:
 *
 * Arguments:   - int32_t: finite field element a
 *
 * Returns r.
 **************************************************/
int32_t freeze2q(int32_t a) {
 800ac70:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ac74:	b09c      	sub	sp, #112	@ 0x70
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	6678      	str	r0, [r7, #100]	@ 0x64
    int64_t t = (int64_t)a * DQREC;
 800ac7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ac7c:	17da      	asrs	r2, r3, #31
 800ac7e:	653b      	str	r3, [r7, #80]	@ 0x50
 800ac80:	657a      	str	r2, [r7, #84]	@ 0x54
 800ac82:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800ac86:	f04f 0000 	mov.w	r0, #0
 800ac8a:	f04f 0100 	mov.w	r1, #0
 800ac8e:	0199      	lsls	r1, r3, #6
 800ac90:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 800ac94:	0190      	lsls	r0, r2, #6
 800ac96:	4602      	mov	r2, r0
 800ac98:	460b      	mov	r3, r1
 800ac9a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ac9c:	1854      	adds	r4, r2, r1
 800ac9e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aca0:	eb43 0501 	adc.w	r5, r3, r1
 800aca4:	f04f 0200 	mov.w	r2, #0
 800aca8:	f04f 0300 	mov.w	r3, #0
 800acac:	01ab      	lsls	r3, r5, #6
 800acae:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 800acb2:	01a2      	lsls	r2, r4, #6
 800acb4:	4614      	mov	r4, r2
 800acb6:	461d      	mov	r5, r3
 800acb8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800acbc:	4603      	mov	r3, r0
 800acbe:	eb14 0803 	adds.w	r8, r4, r3
 800acc2:	460b      	mov	r3, r1
 800acc4:	eb45 0903 	adc.w	r9, r5, r3
 800acc8:	f04f 0200 	mov.w	r2, #0
 800accc:	f04f 0300 	mov.w	r3, #0
 800acd0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800acd4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800acd8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800acdc:	4690      	mov	r8, r2
 800acde:	4699      	mov	r9, r3
 800ace0:	4603      	mov	r3, r0
 800ace2:	ebb8 0303 	subs.w	r3, r8, r3
 800ace6:	633b      	str	r3, [r7, #48]	@ 0x30
 800ace8:	460b      	mov	r3, r1
 800acea:	eb69 0303 	sbc.w	r3, r9, r3
 800acee:	637b      	str	r3, [r7, #52]	@ 0x34
 800acf0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800acf4:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
    t >>= 32;
 800acf8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800acfc:	f04f 0000 	mov.w	r0, #0
 800ad00:	f04f 0100 	mov.w	r1, #0
 800ad04:	0018      	movs	r0, r3
 800ad06:	17d9      	asrs	r1, r3, #31
 800ad08:	e9c7 011a 	strd	r0, r1, [r7, #104]	@ 0x68
    t = a - t * DQ;              // -4Q <  t < 4Q
 800ad0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ad0e:	17da      	asrs	r2, r3, #31
 800ad10:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad12:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800ad14:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800ad18:	4604      	mov	r4, r0
 800ad1a:	460d      	mov	r5, r1
 800ad1c:	f04f 0200 	mov.w	r2, #0
 800ad20:	f04f 0300 	mov.w	r3, #0
 800ad24:	018b      	lsls	r3, r1, #6
 800ad26:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800ad2a:	0182      	lsls	r2, r0, #6
 800ad2c:	1aa6      	subs	r6, r4, r2
 800ad2e:	62be      	str	r6, [r7, #40]	@ 0x28
 800ad30:	eb65 0303 	sbc.w	r3, r5, r3
 800ad34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ad36:	f04f 0200 	mov.w	r2, #0
 800ad3a:	f04f 0300 	mov.w	r3, #0
 800ad3e:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	@ 0x28
 800ad42:	4634      	mov	r4, r6
 800ad44:	02a3      	lsls	r3, r4, #10
 800ad46:	462c      	mov	r4, r5
 800ad48:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800ad4c:	462c      	mov	r4, r5
 800ad4e:	02a2      	lsls	r2, r4, #10
 800ad50:	4614      	mov	r4, r2
 800ad52:	461d      	mov	r5, r3
 800ad54:	4623      	mov	r3, r4
 800ad56:	1a1b      	subs	r3, r3, r0
 800ad58:	623b      	str	r3, [r7, #32]
 800ad5a:	462b      	mov	r3, r5
 800ad5c:	eb63 0301 	sbc.w	r3, r3, r1
 800ad60:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad62:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ad66:	460b      	mov	r3, r1
 800ad68:	18db      	adds	r3, r3, r3
 800ad6a:	61bb      	str	r3, [r7, #24]
 800ad6c:	4613      	mov	r3, r2
 800ad6e:	eb42 0303 	adc.w	r3, r2, r3
 800ad72:	61fb      	str	r3, [r7, #28]
 800ad74:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800ad78:	461a      	mov	r2, r3
 800ad7a:	4623      	mov	r3, r4
 800ad7c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800ad80:	4621      	mov	r1, r4
 800ad82:	1889      	adds	r1, r1, r2
 800ad84:	6139      	str	r1, [r7, #16]
 800ad86:	4629      	mov	r1, r5
 800ad88:	eb43 0101 	adc.w	r1, r3, r1
 800ad8c:	6179      	str	r1, [r7, #20]
 800ad8e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800ad92:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
    t += (t >> 31) & (DQ * 2);   //   0 <= t < 4Q
 800ad96:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800ad9a:	f04f 0000 	mov.w	r0, #0
 800ad9e:	f04f 0100 	mov.w	r1, #0
 800ada2:	0fd0      	lsrs	r0, r2, #31
 800ada4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800ada8:	17d9      	asrs	r1, r3, #31
 800adaa:	f020 437f 	bic.w	r3, r0, #4278190080	@ 0xff000000
 800adae:	65bb      	str	r3, [r7, #88]	@ 0x58
 800adb0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800adb2:	f423 037c 	bic.w	r3, r3, #16515072	@ 0xfc0000
 800adb6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800adb8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800adba:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800adbe:	65bb      	str	r3, [r7, #88]	@ 0x58
 800adc0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800adc2:	f023 030b 	bic.w	r3, r3, #11
 800adc6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800adc8:	2300      	movs	r3, #0
 800adca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800adcc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800add0:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800add4:	4621      	mov	r1, r4
 800add6:	1851      	adds	r1, r2, r1
 800add8:	60b9      	str	r1, [r7, #8]
 800adda:	4629      	mov	r1, r5
 800addc:	eb43 0101 	adc.w	r1, r3, r1
 800ade0:	60f9      	str	r1, [r7, #12]
 800ade2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800ade6:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
    t -= ~((t - DQ) >> 31) & DQ; //   0 <= t < Q
 800adea:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800adee:	491a      	ldr	r1, [pc, #104]	@ (800ae58 <freeze2q+0x1e8>)
 800adf0:	1851      	adds	r1, r2, r1
 800adf2:	6439      	str	r1, [r7, #64]	@ 0x40
 800adf4:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
 800adf8:	647b      	str	r3, [r7, #68]	@ 0x44
 800adfa:	f04f 0200 	mov.w	r2, #0
 800adfe:	f04f 0300 	mov.w	r3, #0
 800ae02:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800ae06:	4621      	mov	r1, r4
 800ae08:	0fca      	lsrs	r2, r1, #31
 800ae0a:	4629      	mov	r1, r5
 800ae0c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800ae10:	4629      	mov	r1, r5
 800ae12:	17cb      	asrs	r3, r1, #31
 800ae14:	43d1      	mvns	r1, r2
 800ae16:	63b9      	str	r1, [r7, #56]	@ 0x38
 800ae18:	43db      	mvns	r3, r3
 800ae1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae1e:	f023 4a7f 	bic.w	sl, r3, #4278190080	@ 0xff000000
 800ae22:	f42a 0a7e 	bic.w	sl, sl, #16646144	@ 0xfe0000
 800ae26:	f42a 6aff 	bic.w	sl, sl, #2040	@ 0x7f8
 800ae2a:	f02a 0a05 	bic.w	sl, sl, #5
 800ae2e:	f04f 0b00 	mov.w	fp, #0
 800ae32:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800ae36:	ebb2 010a 	subs.w	r1, r2, sl
 800ae3a:	6039      	str	r1, [r7, #0]
 800ae3c:	eb63 030b 	sbc.w	r3, r3, fp
 800ae40:	607b      	str	r3, [r7, #4]
 800ae42:	e9d7 3400 	ldrd	r3, r4, [r7]
 800ae46:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
    return (int32_t)t;
 800ae4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3770      	adds	r7, #112	@ 0x70
 800ae50:	46bd      	mov	sp, r7
 800ae52:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ae56:	4770      	bx	lr
 800ae58:	fffe07fe 	.word	0xfffe07fe

0800ae5c <rej_uniform>:
 *
 * Returns number of sampled coefficients. Can be smaller than len if not enough
 * random bytes were given.
 **************************************************/
unsigned int rej_uniform(int32_t *a, unsigned int len, const uint8_t *buf,
                         unsigned int buflen) {
 800ae5c:	b480      	push	{r7}
 800ae5e:	b089      	sub	sp, #36	@ 0x24
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	60f8      	str	r0, [r7, #12]
 800ae64:	60b9      	str	r1, [r7, #8]
 800ae66:	607a      	str	r2, [r7, #4]
 800ae68:	603b      	str	r3, [r7, #0]
    unsigned int ctr, pos;
    uint32_t t;

    ctr = pos = 0;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	61bb      	str	r3, [r7, #24]
 800ae6e:	69bb      	ldr	r3, [r7, #24]
 800ae70:	61fb      	str	r3, [r7, #28]
    while (ctr < len && pos + 2 <= buflen) {
 800ae72:	e01c      	b.n	800aeae <rej_uniform+0x52>
        t = buf[pos++];
 800ae74:	69bb      	ldr	r3, [r7, #24]
 800ae76:	1c5a      	adds	r2, r3, #1
 800ae78:	61ba      	str	r2, [r7, #24]
 800ae7a:	687a      	ldr	r2, [r7, #4]
 800ae7c:	4413      	add	r3, r2
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	617b      	str	r3, [r7, #20]
        t |= (uint32_t)buf[pos++] << 8;
 800ae82:	69bb      	ldr	r3, [r7, #24]
 800ae84:	1c5a      	adds	r2, r3, #1
 800ae86:	61ba      	str	r2, [r7, #24]
 800ae88:	687a      	ldr	r2, [r7, #4]
 800ae8a:	4413      	add	r3, r2
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	021b      	lsls	r3, r3, #8
 800ae90:	697a      	ldr	r2, [r7, #20]
 800ae92:	4313      	orrs	r3, r2
 800ae94:	617b      	str	r3, [r7, #20]

        if (t < Q)
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	f5b3 4f7c 	cmp.w	r3, #64512	@ 0xfc00
 800ae9c:	d807      	bhi.n	800aeae <rej_uniform+0x52>
            a[ctr++] = t;
 800ae9e:	69fb      	ldr	r3, [r7, #28]
 800aea0:	1c5a      	adds	r2, r3, #1
 800aea2:	61fa      	str	r2, [r7, #28]
 800aea4:	009b      	lsls	r3, r3, #2
 800aea6:	68fa      	ldr	r2, [r7, #12]
 800aea8:	4413      	add	r3, r2
 800aeaa:	697a      	ldr	r2, [r7, #20]
 800aeac:	601a      	str	r2, [r3, #0]
    while (ctr < len && pos + 2 <= buflen) {
 800aeae:	69fa      	ldr	r2, [r7, #28]
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	429a      	cmp	r2, r3
 800aeb4:	d204      	bcs.n	800aec0 <rej_uniform+0x64>
 800aeb6:	69bb      	ldr	r3, [r7, #24]
 800aeb8:	3302      	adds	r3, #2
 800aeba:	683a      	ldr	r2, [r7, #0]
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d2d9      	bcs.n	800ae74 <rej_uniform+0x18>
    }
    return ctr;
 800aec0:	69fb      	ldr	r3, [r7, #28]
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3724      	adds	r7, #36	@ 0x24
 800aec6:	46bd      	mov	sp, r7
 800aec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aecc:	4770      	bx	lr

0800aece <rej_uniform_frozen>:
 *
 * Returns number of sampled coefficients. Can be smaller than len if not enough
 * random bytes were given.
 **************************************************/
unsigned int rej_uniform_frozen(uint16_t *a, unsigned int len, const uint8_t *buf,
                         unsigned int buflen) {
 800aece:	b480      	push	{r7}
 800aed0:	b089      	sub	sp, #36	@ 0x24
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	60f8      	str	r0, [r7, #12]
 800aed6:	60b9      	str	r1, [r7, #8]
 800aed8:	607a      	str	r2, [r7, #4]
 800aeda:	603b      	str	r3, [r7, #0]
    unsigned int ctr, pos;
    uint16_t t;

    ctr = pos = 0;
 800aedc:	2300      	movs	r3, #0
 800aede:	61bb      	str	r3, [r7, #24]
 800aee0:	69bb      	ldr	r3, [r7, #24]
 800aee2:	61fb      	str	r3, [r7, #28]
    while (ctr < len && pos + 2 <= buflen) {
 800aee4:	e01f      	b.n	800af26 <rej_uniform_frozen+0x58>
        t = buf[pos++];
 800aee6:	69bb      	ldr	r3, [r7, #24]
 800aee8:	1c5a      	adds	r2, r3, #1
 800aeea:	61ba      	str	r2, [r7, #24]
 800aeec:	687a      	ldr	r2, [r7, #4]
 800aeee:	4413      	add	r3, r2
 800aef0:	781b      	ldrb	r3, [r3, #0]
 800aef2:	82fb      	strh	r3, [r7, #22]
        t |= (uint16_t)buf[pos++] << 8;
 800aef4:	69bb      	ldr	r3, [r7, #24]
 800aef6:	1c5a      	adds	r2, r3, #1
 800aef8:	61ba      	str	r2, [r7, #24]
 800aefa:	687a      	ldr	r2, [r7, #4]
 800aefc:	4413      	add	r3, r2
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	021b      	lsls	r3, r3, #8
 800af02:	b21a      	sxth	r2, r3
 800af04:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800af08:	4313      	orrs	r3, r2
 800af0a:	b21b      	sxth	r3, r3
 800af0c:	82fb      	strh	r3, [r7, #22]

        if (t < Q)
 800af0e:	8afb      	ldrh	r3, [r7, #22]
 800af10:	f5b3 4f7c 	cmp.w	r3, #64512	@ 0xfc00
 800af14:	d807      	bhi.n	800af26 <rej_uniform_frozen+0x58>
            a[ctr++] = t;
 800af16:	69fb      	ldr	r3, [r7, #28]
 800af18:	1c5a      	adds	r2, r3, #1
 800af1a:	61fa      	str	r2, [r7, #28]
 800af1c:	005b      	lsls	r3, r3, #1
 800af1e:	68fa      	ldr	r2, [r7, #12]
 800af20:	4413      	add	r3, r2
 800af22:	8afa      	ldrh	r2, [r7, #22]
 800af24:	801a      	strh	r2, [r3, #0]
    while (ctr < len && pos + 2 <= buflen) {
 800af26:	69fa      	ldr	r2, [r7, #28]
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d204      	bcs.n	800af38 <rej_uniform_frozen+0x6a>
 800af2e:	69bb      	ldr	r3, [r7, #24]
 800af30:	3302      	adds	r3, #2
 800af32:	683a      	ldr	r2, [r7, #0]
 800af34:	429a      	cmp	r2, r3
 800af36:	d2d6      	bcs.n	800aee6 <rej_uniform_frozen+0x18>
    }
    return ctr;
 800af38:	69fb      	ldr	r3, [r7, #28]
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3724      	adds	r7, #36	@ 0x24
 800af3e:	46bd      	mov	sp, r7
 800af40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af44:	4770      	bx	lr

0800af46 <mod3>:
 *              - unsigned int buflen: length of array of random bytes
 *
 * Returns number of sampled coefficients. Can be smaller than len if not enough
 * random bytes were given.
 **************************************************/
static int32_t mod3(uint8_t t) {
 800af46:	b480      	push	{r7}
 800af48:	b085      	sub	sp, #20
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	4603      	mov	r3, r0
 800af4e:	71fb      	strb	r3, [r7, #7]
    int32_t r;
    r = (t >> 4) + (t & 0xf);
 800af50:	79fb      	ldrb	r3, [r7, #7]
 800af52:	091b      	lsrs	r3, r3, #4
 800af54:	b2db      	uxtb	r3, r3
 800af56:	461a      	mov	r2, r3
 800af58:	79fb      	ldrb	r3, [r7, #7]
 800af5a:	f003 030f 	and.w	r3, r3, #15
 800af5e:	4413      	add	r3, r2
 800af60:	60fb      	str	r3, [r7, #12]
    r = (r >> 2) + (r & 3);
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	109a      	asrs	r2, r3, #2
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	f003 0303 	and.w	r3, r3, #3
 800af6c:	4413      	add	r3, r2
 800af6e:	60fb      	str	r3, [r7, #12]
    r = (r >> 2) + (r & 3);
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	109a      	asrs	r2, r3, #2
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	f003 0303 	and.w	r3, r3, #3
 800af7a:	4413      	add	r3, r2
 800af7c:	60fb      	str	r3, [r7, #12]
    r = (r >> 2) + (r & 3);
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	109a      	asrs	r2, r3, #2
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	f003 0303 	and.w	r3, r3, #3
 800af88:	4413      	add	r3, r2
 800af8a:	60fb      	str	r3, [r7, #12]
    return r - (3 * (r >> 1));
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	105b      	asrs	r3, r3, #1
 800af90:	461a      	mov	r2, r3
 800af92:	009b      	lsls	r3, r3, #2
 800af94:	1ad2      	subs	r2, r2, r3
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	4413      	add	r3, r2
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3714      	adds	r7, #20
 800af9e:	46bd      	mov	sp, r7
 800afa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa4:	4770      	bx	lr

0800afa6 <mod3_leq26>:
static int32_t mod3_leq26(uint8_t t) {
 800afa6:	b480      	push	{r7}
 800afa8:	b085      	sub	sp, #20
 800afaa:	af00      	add	r7, sp, #0
 800afac:	4603      	mov	r3, r0
 800afae:	71fb      	strb	r3, [r7, #7]
    int32_t r;
    r = (t >> 4) + (t & 0xf);
 800afb0:	79fb      	ldrb	r3, [r7, #7]
 800afb2:	091b      	lsrs	r3, r3, #4
 800afb4:	b2db      	uxtb	r3, r3
 800afb6:	461a      	mov	r2, r3
 800afb8:	79fb      	ldrb	r3, [r7, #7]
 800afba:	f003 030f 	and.w	r3, r3, #15
 800afbe:	4413      	add	r3, r2
 800afc0:	60fb      	str	r3, [r7, #12]
    r = (r >> 2) + (r & 3);
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	109a      	asrs	r2, r3, #2
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	f003 0303 	and.w	r3, r3, #3
 800afcc:	4413      	add	r3, r2
 800afce:	60fb      	str	r3, [r7, #12]
    r = (r >> 2) + (r & 3);
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	109a      	asrs	r2, r3, #2
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	f003 0303 	and.w	r3, r3, #3
 800afda:	4413      	add	r3, r2
 800afdc:	60fb      	str	r3, [r7, #12]
    return r - (3 * (r >> 1));
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	105b      	asrs	r3, r3, #1
 800afe2:	461a      	mov	r2, r3
 800afe4:	009b      	lsls	r3, r3, #2
 800afe6:	1ad2      	subs	r2, r2, r3
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	4413      	add	r3, r2
}
 800afec:	4618      	mov	r0, r3
 800afee:	3714      	adds	r7, #20
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr

0800aff8 <mod3_leq8>:
static int32_t mod3_leq8(uint8_t t) {
 800aff8:	b480      	push	{r7}
 800affa:	b085      	sub	sp, #20
 800affc:	af00      	add	r7, sp, #0
 800affe:	4603      	mov	r3, r0
 800b000:	71fb      	strb	r3, [r7, #7]
    int32_t r;
    r = (t >> 2) + (t & 3);
 800b002:	79fb      	ldrb	r3, [r7, #7]
 800b004:	089b      	lsrs	r3, r3, #2
 800b006:	b2db      	uxtb	r3, r3
 800b008:	461a      	mov	r2, r3
 800b00a:	79fb      	ldrb	r3, [r7, #7]
 800b00c:	f003 0303 	and.w	r3, r3, #3
 800b010:	4413      	add	r3, r2
 800b012:	60fb      	str	r3, [r7, #12]
    r = (r >> 2) + (r & 3);
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	109a      	asrs	r2, r3, #2
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	f003 0303 	and.w	r3, r3, #3
 800b01e:	4413      	add	r3, r2
 800b020:	60fb      	str	r3, [r7, #12]
    return r - (3 * (r >> 1));
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	105b      	asrs	r3, r3, #1
 800b026:	461a      	mov	r2, r3
 800b028:	009b      	lsls	r3, r3, #2
 800b02a:	1ad2      	subs	r2, r2, r3
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	4413      	add	r3, r2
}
 800b030:	4618      	mov	r0, r3
 800b032:	3714      	adds	r7, #20
 800b034:	46bd      	mov	sp, r7
 800b036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03a:	4770      	bx	lr

0800b03c <rej_eta>:
unsigned int rej_eta(int32_t *a, unsigned int len, const uint8_t *buf,
                     unsigned int buflen) {
 800b03c:	b590      	push	{r4, r7, lr}
 800b03e:	b089      	sub	sp, #36	@ 0x24
 800b040:	af00      	add	r7, sp, #0
 800b042:	60f8      	str	r0, [r7, #12]
 800b044:	60b9      	str	r1, [r7, #8]
 800b046:	607a      	str	r2, [r7, #4]
 800b048:	603b      	str	r3, [r7, #0]
    unsigned int ctr, pos;

    ctr = pos = 0;
 800b04a:	2300      	movs	r3, #0
 800b04c:	61bb      	str	r3, [r7, #24]
 800b04e:	69bb      	ldr	r3, [r7, #24]
 800b050:	61fb      	str	r3, [r7, #28]
    while (ctr < len && pos < buflen) {
 800b052:	e07c      	b.n	800b14e <rej_eta+0x112>
#if ETA == 1
        uint32_t t = buf[pos++];
 800b054:	69bb      	ldr	r3, [r7, #24]
 800b056:	1c5a      	adds	r2, r3, #1
 800b058:	61ba      	str	r2, [r7, #24]
 800b05a:	687a      	ldr	r2, [r7, #4]
 800b05c:	4413      	add	r3, r2
 800b05e:	781b      	ldrb	r3, [r3, #0]
 800b060:	617b      	str	r3, [r7, #20]
        if (t < 243) {
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	2bf2      	cmp	r3, #242	@ 0xf2
 800b066:	d872      	bhi.n	800b14e <rej_eta+0x112>
            // reduce mod 3
            a[ctr++] = mod3(t);
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	b2d9      	uxtb	r1, r3
 800b06c:	69fb      	ldr	r3, [r7, #28]
 800b06e:	1c5a      	adds	r2, r3, #1
 800b070:	61fa      	str	r2, [r7, #28]
 800b072:	009b      	lsls	r3, r3, #2
 800b074:	68fa      	ldr	r2, [r7, #12]
 800b076:	18d4      	adds	r4, r2, r3
 800b078:	4608      	mov	r0, r1
 800b07a:	f7ff ff64 	bl	800af46 <mod3>
 800b07e:	4603      	mov	r3, r0
 800b080:	6023      	str	r3, [r4, #0]

            if (ctr >= len)
 800b082:	69fa      	ldr	r2, [r7, #28]
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	429a      	cmp	r2, r3
 800b088:	d26b      	bcs.n	800b162 <rej_eta+0x126>
                break;

            t *= 171; // 171*3 = 1 mod 256
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	22ab      	movs	r2, #171	@ 0xab
 800b08e:	fb02 f303 	mul.w	r3, r2, r3
 800b092:	617b      	str	r3, [r7, #20]
            t >>= 9;
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	0a5b      	lsrs	r3, r3, #9
 800b098:	617b      	str	r3, [r7, #20]
            a[ctr++] = mod3(t);
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	b2d9      	uxtb	r1, r3
 800b09e:	69fb      	ldr	r3, [r7, #28]
 800b0a0:	1c5a      	adds	r2, r3, #1
 800b0a2:	61fa      	str	r2, [r7, #28]
 800b0a4:	009b      	lsls	r3, r3, #2
 800b0a6:	68fa      	ldr	r2, [r7, #12]
 800b0a8:	18d4      	adds	r4, r2, r3
 800b0aa:	4608      	mov	r0, r1
 800b0ac:	f7ff ff4b 	bl	800af46 <mod3>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	6023      	str	r3, [r4, #0]

            if (ctr >= len)
 800b0b4:	69fa      	ldr	r2, [r7, #28]
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d254      	bcs.n	800b166 <rej_eta+0x12a>
                break;

            t *= 171;
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	22ab      	movs	r2, #171	@ 0xab
 800b0c0:	fb02 f303 	mul.w	r3, r2, r3
 800b0c4:	617b      	str	r3, [r7, #20]
            t >>= 9;
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	0a5b      	lsrs	r3, r3, #9
 800b0ca:	617b      	str	r3, [r7, #20]
            a[ctr++] = mod3_leq26(t);
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	b2d9      	uxtb	r1, r3
 800b0d0:	69fb      	ldr	r3, [r7, #28]
 800b0d2:	1c5a      	adds	r2, r3, #1
 800b0d4:	61fa      	str	r2, [r7, #28]
 800b0d6:	009b      	lsls	r3, r3, #2
 800b0d8:	68fa      	ldr	r2, [r7, #12]
 800b0da:	18d4      	adds	r4, r2, r3
 800b0dc:	4608      	mov	r0, r1
 800b0de:	f7ff ff62 	bl	800afa6 <mod3_leq26>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	6023      	str	r3, [r4, #0]

            if (ctr >= len)
 800b0e6:	69fa      	ldr	r2, [r7, #28]
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d23d      	bcs.n	800b16a <rej_eta+0x12e>
                break;

            t *= 171;
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	22ab      	movs	r2, #171	@ 0xab
 800b0f2:	fb02 f303 	mul.w	r3, r2, r3
 800b0f6:	617b      	str	r3, [r7, #20]
            t >>= 9;
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	0a5b      	lsrs	r3, r3, #9
 800b0fc:	617b      	str	r3, [r7, #20]
            a[ctr++] = mod3_leq8(t);
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	b2d9      	uxtb	r1, r3
 800b102:	69fb      	ldr	r3, [r7, #28]
 800b104:	1c5a      	adds	r2, r3, #1
 800b106:	61fa      	str	r2, [r7, #28]
 800b108:	009b      	lsls	r3, r3, #2
 800b10a:	68fa      	ldr	r2, [r7, #12]
 800b10c:	18d4      	adds	r4, r2, r3
 800b10e:	4608      	mov	r0, r1
 800b110:	f7ff ff72 	bl	800aff8 <mod3_leq8>
 800b114:	4603      	mov	r3, r0
 800b116:	6023      	str	r3, [r4, #0]

            if (ctr >= len)
 800b118:	69fa      	ldr	r2, [r7, #28]
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d226      	bcs.n	800b16e <rej_eta+0x132>
                break;

            t *= 171;
 800b120:	697b      	ldr	r3, [r7, #20]
 800b122:	22ab      	movs	r2, #171	@ 0xab
 800b124:	fb02 f303 	mul.w	r3, r2, r3
 800b128:	617b      	str	r3, [r7, #20]
            t >>= 9;
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	0a5b      	lsrs	r3, r3, #9
 800b12e:	617b      	str	r3, [r7, #20]
            a[ctr++] = (int32_t)t - (int32_t)3 * (t >> 1);
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	085a      	lsrs	r2, r3, #1
 800b134:	4613      	mov	r3, r2
 800b136:	005b      	lsls	r3, r3, #1
 800b138:	4413      	add	r3, r2
 800b13a:	697a      	ldr	r2, [r7, #20]
 800b13c:	1ad1      	subs	r1, r2, r3
 800b13e:	69fb      	ldr	r3, [r7, #28]
 800b140:	1c5a      	adds	r2, r3, #1
 800b142:	61fa      	str	r2, [r7, #28]
 800b144:	009b      	lsls	r3, r3, #2
 800b146:	68fa      	ldr	r2, [r7, #12]
 800b148:	4413      	add	r3, r2
 800b14a:	460a      	mov	r2, r1
 800b14c:	601a      	str	r2, [r3, #0]
    while (ctr < len && pos < buflen) {
 800b14e:	69fa      	ldr	r2, [r7, #28]
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	429a      	cmp	r2, r3
 800b154:	d20c      	bcs.n	800b170 <rej_eta+0x134>
 800b156:	69ba      	ldr	r2, [r7, #24]
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	429a      	cmp	r2, r3
 800b15c:	f4ff af7a 	bcc.w	800b054 <rej_eta+0x18>
 800b160:	e006      	b.n	800b170 <rej_eta+0x134>
                break;
 800b162:	bf00      	nop
 800b164:	e004      	b.n	800b170 <rej_eta+0x134>
                break;
 800b166:	bf00      	nop
 800b168:	e002      	b.n	800b170 <rej_eta+0x134>
                break;
 800b16a:	bf00      	nop
 800b16c:	e000      	b.n	800b170 <rej_eta+0x134>
                break;
 800b16e:	bf00      	nop
            t1 = t1 - (205 * t1 >> 10) * 5;
            a[ctr++] = 2 - t1;
        }
#endif
    }
    return ctr;
 800b170:	69fb      	ldr	r3, [r7, #28]
}
 800b172:	4618      	mov	r0, r3
 800b174:	3724      	adds	r7, #36	@ 0x24
 800b176:	46bd      	mov	sp, r7
 800b178:	bd90      	pop	{r4, r7, pc}

0800b17a <read_gauss16_asm>:

static inline uint16_t read_gauss16_asm(const uint8_t src[GAUSS_RAND_BYTES]){
 800b17a:	b480      	push	{r7}
 800b17c:	b085      	sub	sp, #20
 800b17e:	af00      	add	r7, sp, #0
 800b180:	6078      	str	r0, [r7, #4]
    uint16_t result;
    asm(
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	881b      	ldrh	r3, [r3, #0]
 800b186:	81fb      	strh	r3, [r7, #14]
        "ldrh   %[dest], [%[ptr]]":
        [dest] "=r" (result):
        [ptr] "r" (src)
    );
    return result;
 800b188:	89fb      	ldrh	r3, [r7, #14]
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3714      	adds	r7, #20
 800b18e:	46bd      	mov	sp, r7
 800b190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b194:	4770      	bx	lr

0800b196 <read_rej_asm>:

static fp63_48 read_rej_asm(const uint8_t src[GAUSS_RAND_BYTES]){
 800b196:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b19a:	b085      	sub	sp, #20
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
    uint32_t result_lo;
    uint32_t result_hi;
    asm(
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	88db      	ldrh	r3, [r3, #6]
 800b1a4:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800b1a8:	60fa      	str	r2, [r7, #12]
 800b1aa:	60bb      	str	r3, [r7, #8]
        "ldrh   %[hi], [%[ptr], #6]\n\t"
        "ldr    %[lo], [%[ptr], #2]":
        [lo] "=r" (result_lo), [hi] "=r" (result_hi):
        [ptr] "r" (src)
    );
    return (fp63_48) result_hi << 32 | result_lo;
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	469a      	mov	sl, r3
 800b1b2:	4693      	mov	fp, r2
 800b1b4:	f04f 0200 	mov.w	r2, #0
 800b1b8:	f04f 0300 	mov.w	r3, #0
 800b1bc:	4653      	mov	r3, sl
 800b1be:	2200      	movs	r2, #0
 800b1c0:	68f9      	ldr	r1, [r7, #12]
 800b1c2:	2000      	movs	r0, #0
 800b1c4:	460c      	mov	r4, r1
 800b1c6:	4605      	mov	r5, r0
 800b1c8:	ea42 0804 	orr.w	r8, r2, r4
 800b1cc:	ea43 0905 	orr.w	r9, r3, r5
 800b1d0:	4642      	mov	r2, r8
 800b1d2:	464b      	mov	r3, r9
}
 800b1d4:	4610      	mov	r0, r2
 800b1d6:	4619      	mov	r1, r3
 800b1d8:	3714      	adds	r7, #20
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b1e0:	4770      	bx	lr

0800b1e2 <read_y>:
 * Description: Read the 72 lsb bits of y from bytes 8-16
 *              of src into 28-bit digits. The nibbles of
 *              the high byte of byte 11 are shared between
 *              lo and md. No data out of bounds is being read.
 *************************************************************/
static inline void read_y(fp84_76* y, const uint8_t src[GAUSS_RAND_BYTES]){
 800b1e2:	b480      	push	{r7}
 800b1e4:	b087      	sub	sp, #28
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	6078      	str	r0, [r7, #4]
 800b1ea:	6039      	str	r1, [r7, #0]
    uint32_t result_lo;
    uint32_t result_md;
    uint32_t result_hi;

    asm(
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	6899      	ldr	r1, [r3, #8]
 800b1f0:	f8d3 200b 	ldr.w	r2, [r3, #11]
 800b1f4:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800b1f8:	f021 4170 	bic.w	r1, r1, #4026531840	@ 0xf0000000
 800b1fc:	ea4f 1212 	mov.w	r2, r2, lsr #4
 800b200:	6179      	str	r1, [r7, #20]
 800b202:	613a      	str	r2, [r7, #16]
 800b204:	60fb      	str	r3, [r7, #12]
        "bic    %[lo], %[lo], #0xF0000000\n\t"  // clear upper nibble of byte 11
        "lsr    %[md], %[md], #4\n\t":      // lose lower nibble of byte 11
        [lo] "=r" (result_lo), [md] "=r" (result_md), [hi] "=r" (result_hi):
        [ptr] "r" (src)
    );
    y->digit[0] = (digit28) result_lo;
 800b206:	697a      	ldr	r2, [r7, #20]
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	601a      	str	r2, [r3, #0]
    y->digit[1] = (digit28) result_md;
 800b20c:	693a      	ldr	r2, [r7, #16]
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	605a      	str	r2, [r3, #4]
    y->digit[2] = (digit28) result_hi;
 800b212:	68fa      	ldr	r2, [r7, #12]
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	609a      	str	r2, [r3, #8]
}
 800b218:	bf00      	nop
 800b21a:	371c      	adds	r7, #28
 800b21c:	46bd      	mov	sp, r7
 800b21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b222:	4770      	bx	lr

0800b224 <signed_clear_lsb>:

static inline fp63_48 signed_clear_lsb(fp63_48 x) {
 800b224:	b4b0      	push	{r4, r5, r7}
 800b226:	b083      	sub	sp, #12
 800b228:	af00      	add	r7, sp, #0
 800b22a:	e9c7 0100 	strd	r0, r1, [r7]
    return (fp63_48) (x ^ (x & 1));
 800b22e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b232:	f022 0401 	bic.w	r4, r2, #1
 800b236:	461d      	mov	r5, r3
 800b238:	4622      	mov	r2, r4
 800b23a:	462b      	mov	r3, r5
}
 800b23c:	4610      	mov	r0, r2
 800b23e:	4619      	mov	r1, r3
 800b240:	370c      	adds	r7, #12
 800b242:	46bd      	mov	sp, r7
 800b244:	bcb0      	pop	{r4, r5, r7}
 800b246:	4770      	bx	lr

0800b248 <compute_y84_rnd>:
    result += 1; // rounding
    result >>= 1;
    return result;
};

static inline uint64_t compute_y84_rnd(fp84_76* y){
 800b248:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b24c:	b08d      	sub	sp, #52	@ 0x34
 800b24e:	af00      	add	r7, sp, #0
 800b250:	6178      	str	r0, [r7, #20]
    uint32_t lo = y->digit[0];
 800b252:	6979      	ldr	r1, [r7, #20]
 800b254:	6809      	ldr	r1, [r1, #0]
 800b256:	62f9      	str	r1, [r7, #44]	@ 0x2c
    uint32_t md = y->digit[1];
 800b258:	6979      	ldr	r1, [r7, #20]
 800b25a:	6849      	ldr	r1, [r1, #4]
 800b25c:	62b9      	str	r1, [r7, #40]	@ 0x28
    uint32_t hi = y->digit[2];
 800b25e:	6979      	ldr	r1, [r7, #20]
 800b260:	6889      	ldr	r1, [r1, #8]
 800b262:	6279      	str	r1, [r7, #36]	@ 0x24
    uint64_t result;

    lo += 1 << 15;
 800b264:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b266:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 800b26a:	62f9      	str	r1, [r7, #44]	@ 0x2c
    result = lo >> 16;
 800b26c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b26e:	0c09      	lsrs	r1, r1, #16
 800b270:	2000      	movs	r0, #0
 800b272:	6039      	str	r1, [r7, #0]
 800b274:	6078      	str	r0, [r7, #4]
 800b276:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b27a:	e9c7 0106 	strd	r0, r1, [r7, #24]
    result += (uint64_t) md << (28 - 16);
 800b27e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b280:	2000      	movs	r0, #0
 800b282:	460a      	mov	r2, r1
 800b284:	4603      	mov	r3, r0
 800b286:	0d15      	lsrs	r5, r2, #20
 800b288:	0314      	lsls	r4, r2, #12
 800b28a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b28e:	eb12 0a04 	adds.w	sl, r2, r4
 800b292:	eb43 0b05 	adc.w	fp, r3, r5
 800b296:	e9c7 ab06 	strd	sl, fp, [r7, #24]
    result += (uint64_t) hi << (56 - 16);
 800b29a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b29c:	2200      	movs	r2, #0
 800b29e:	60bb      	str	r3, [r7, #8]
 800b2a0:	60fa      	str	r2, [r7, #12]
 800b2a2:	f04f 0200 	mov.w	r2, #0
 800b2a6:	f04f 0300 	mov.w	r3, #0
 800b2aa:	68b9      	ldr	r1, [r7, #8]
 800b2ac:	020b      	lsls	r3, r1, #8
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b2b4:	eb10 0802 	adds.w	r8, r0, r2
 800b2b8:	eb41 0903 	adc.w	r9, r1, r3
 800b2bc:	e9c7 8906 	strd	r8, r9, [r7, #24]
    return result;
 800b2c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 800b2c4:	4610      	mov	r0, r2
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	3734      	adds	r7, #52	@ 0x34
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b2d0:	4770      	bx	lr

0800b2d2 <compute_exp_in>:
 *               We have (y+kx)**2 == [hi,md,lo]  from sqr84 
 *               in sample_gauss_sigma76(), already. lo is rounded 
 *               out of the result. Furthermore, kx == msb <<?
 *               scalings: lo 76, md 48, hi 20, msb 4, msb**2 8
 ********************************************************************/
static inline uint64_t compute_exp_in(const digit28 hi, const digit28 md, const fp8_4 msb){
 800b2d2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b2d6:	b087      	sub	sp, #28
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	60f8      	str	r0, [r7, #12]
 800b2dc:	60b9      	str	r1, [r7, #8]
 800b2de:	607a      	str	r2, [r7, #4]
    uint64_t result;
	result  = ((uint64_t) (hi - ((msb * msb) << 12)) << 27);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	fb03 f303 	mul.w	r3, r3, r3
 800b2e6:	031b      	lsls	r3, r3, #12
 800b2e8:	68fa      	ldr	r2, [r7, #12]
 800b2ea:	1ad3      	subs	r3, r2, r3
 800b2ec:	17da      	asrs	r2, r3, #31
 800b2ee:	4698      	mov	r8, r3
 800b2f0:	4691      	mov	r9, r2
 800b2f2:	f04f 0200 	mov.w	r2, #0
 800b2f6:	f04f 0300 	mov.w	r3, #0
 800b2fa:	ea4f 63c9 	mov.w	r3, r9, lsl #27
 800b2fe:	ea43 1358 	orr.w	r3, r3, r8, lsr #5
 800b302:	ea4f 62c8 	mov.w	r2, r8, lsl #27
 800b306:	e9c7 2304 	strd	r2, r3, [r7, #16]
    result |= ((uint64_t) (md + 1) >>  1);    // incorporate rounding
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	3301      	adds	r3, #1
 800b30e:	17da      	asrs	r2, r3, #31
 800b310:	461c      	mov	r4, r3
 800b312:	4615      	mov	r5, r2
 800b314:	f04f 0200 	mov.w	r2, #0
 800b318:	f04f 0300 	mov.w	r3, #0
 800b31c:	0862      	lsrs	r2, r4, #1
 800b31e:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 800b322:	086b      	lsrs	r3, r5, #1
 800b324:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b328:	ea40 0a02 	orr.w	sl, r0, r2
 800b32c:	ea41 0b03 	orr.w	fp, r1, r3
 800b330:	e9c7 ab04 	strd	sl, fp, [r7, #16]
    return result;
 800b334:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
};
 800b338:	4610      	mov	r0, r2
 800b33a:	4619      	mov	r1, r3
 800b33c:	371c      	adds	r7, #28
 800b33e:	46bd      	mov	sp, r7
 800b340:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b344:	4770      	bx	lr

0800b346 <is_zero>:

/********************************************************************
 * Check, whether or not the argument is zero.
 ********************************************************************/
static inline uint64_t is_zero(const uint64_t r){
 800b346:	b4f0      	push	{r4, r5, r6, r7}
 800b348:	b082      	sub	sp, #8
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	e9c7 0100 	strd	r0, r1, [r7]
    return ((r | -r) >> 63);
 800b350:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b354:	2600      	movs	r6, #0
 800b356:	4242      	negs	r2, r0
 800b358:	eb66 0301 	sbc.w	r3, r6, r1
 800b35c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b360:	ea42 0400 	orr.w	r4, r2, r0
 800b364:	ea43 0501 	orr.w	r5, r3, r1
 800b368:	f04f 0200 	mov.w	r2, #0
 800b36c:	f04f 0300 	mov.w	r3, #0
 800b370:	0fea      	lsrs	r2, r5, #31
 800b372:	2300      	movs	r3, #0
}
 800b374:	4610      	mov	r0, r2
 800b376:	4619      	mov	r1, r3
 800b378:	3708      	adds	r7, #8
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bcf0      	pop	{r4, r5, r6, r7}
 800b37e:	4770      	bx	lr

0800b380 <sample_gauss_sigma76>:
 *      0 -  1:     rand_gauss16 (16 bits)
 *      2 -  7:     rand_rej     (48 bits)
 *      8 - 13:     y.limb48[0]  (48 bits)     
 *     14 - 16:     y.limb48[1]  (24 bits)  
 *********************************************************************/
int sample_gauss_sigma76(uint64_t *r, fp84_76 *sqr84, const uint8_t rand[GAUSS_RAND_BYTES]){
 800b380:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b384:	b08e      	sub	sp, #56	@ 0x38
 800b386:	af00      	add	r7, sp, #0
 800b388:	60f8      	str	r0, [r7, #12]
 800b38a:	60b9      	str	r1, [r7, #8]
 800b38c:	607a      	str	r2, [r7, #4]
    uint16_t rand_gauss16;

#ifdef ENABLE_COUNT_CALLS_TO_SAMPLE_GAUSS_SIGMA_76
    counter_calls_to_sample_gauss_sigma76 += 1;
#endif
    rand_gauss16 = read_gauss16_asm(rand);
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f7ff fef3 	bl	800b17a <read_gauss16_asm>
 800b394:	4603      	mov	r3, r0
 800b396:	86fb      	strh	r3, [r7, #54]	@ 0x36
    y_msb = haetae_fast_sample_gauss16(rand_gauss16);
 800b398:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b39a:	4618      	mov	r0, r3
 800b39c:	f7f5 f84a 	bl	8000434 <haetae_fast_sample_gauss16>
 800b3a0:	6338      	str	r0, [r7, #48]	@ 0x30
    read_y(&y84, rand);
 800b3a2:	f107 0314 	add.w	r3, r7, #20
 800b3a6:	6879      	ldr	r1, [r7, #4]
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f7ff ff1a 	bl	800b1e2 <read_y>
	y84.digit[2] |= (y_msb << 16);
 800b3ae:	69fa      	ldr	r2, [r7, #28]
 800b3b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3b2:	041b      	lsls	r3, r3, #16
 800b3b4:	4313      	orrs	r3, r2
 800b3b6:	61fb      	str	r3, [r7, #28]
    *r = compute_y84_rnd(&y84);
 800b3b8:	f107 0314 	add.w	r3, r7, #20
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f7ff ff43 	bl	800b248 <compute_y84_rnd>
 800b3c2:	4602      	mov	r2, r0
 800b3c4:	460b      	mov	r3, r1
 800b3c6:	68f9      	ldr	r1, [r7, #12]
 800b3c8:	e9c1 2300 	strd	r2, r3, [r1]
	fp84_76_square(sqr84, &y84);
 800b3cc:	f107 0314 	add.w	r3, r7, #20
 800b3d0:	4619      	mov	r1, r3
 800b3d2:	68b8      	ldr	r0, [r7, #8]
 800b3d4:	f7f7 fed0 	bl	8003178 <fp84_76_square>
    exp_in = compute_exp_in(sqr84->digit[2], sqr84->digit[1], y_msb);
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	6898      	ldr	r0, [r3, #8]
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	685b      	ldr	r3, [r3, #4]
 800b3e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b3e2:	4619      	mov	r1, r3
 800b3e4:	f7ff ff75 	bl	800b2d2 <compute_exp_in>
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	460b      	mov	r3, r1
 800b3ec:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
#ifdef PQC_GEN_KAT_ACTIVE
    //log_error_with_int64_t("r:    ", *r);
    //log_error_with_fp84_76("y84:    ", &y84.digit[0]);
    //log_error_with_int64_t("exp_in: ", (int64_t) exp_in);
#endif
    rand_rej     = read_rej_asm(rand);
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f7ff fed0 	bl	800b196 <read_rej_asm>
 800b3f6:	e9c7 0108 	strd	r0, r1, [r7, #32]
    return (
        (
            (
                signed_clear_lsb(rand_rej) // set lowest bit to zero in order to
 800b3fa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b3fe:	f7ff ff11 	bl	800b224 <signed_clear_lsb>
 800b402:	4680      	mov	r8, r0
 800b404:	4689      	mov	r9, r1
                                            // use it for rejection if sample==0
                - (int64_t)haetae_approx_exp_asm(exp_in)
 800b406:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800b40a:	f7f4 fee1 	bl	80001d0 <haetae_approx_exp_asm>
 800b40e:	4602      	mov	r2, r0
 800b410:	460b      	mov	r3, r1
 800b412:	ebb8 0402 	subs.w	r4, r8, r2
 800b416:	eb69 0503 	sbc.w	r5, r9, r3
            ) >> 63 // reject with prob 1-approx_exp(exp_in)
 800b41a:	f04f 0200 	mov.w	r2, #0
 800b41e:	f04f 0300 	mov.w	r3, #0
 800b422:	17ea      	asrs	r2, r5, #31
 800b424:	17eb      	asrs	r3, r5, #31
        )
        & (is_zero(*r) | rand_rej)) 
 800b426:	4614      	mov	r4, r2
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42e:	4610      	mov	r0, r2
 800b430:	4619      	mov	r1, r3
 800b432:	f7ff ff88 	bl	800b346 <is_zero>
 800b436:	4602      	mov	r2, r0
 800b438:	460b      	mov	r3, r1
 800b43a:	6a3b      	ldr	r3, [r7, #32]
 800b43c:	4313      	orrs	r3, r2
 800b43e:	4023      	ands	r3, r4
        &  1; // if the sample is zero, clear the return value with prob 1/2
 800b440:	f003 0301 	and.w	r3, r3, #1
}
 800b444:	4618      	mov	r0, r3
 800b446:	3738      	adds	r7, #56	@ 0x38
 800b448:	46bd      	mov	sp, r7
 800b44a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800b44e <sample_gauss>:

int sample_gauss(uint64_t *r, fp112_76 *sqsum, const uint8_t *buf, const size_t buflen, const size_t len, const int dont_write_last)
{
 800b44e:	b580      	push	{r7, lr}
 800b450:	b08e      	sub	sp, #56	@ 0x38
 800b452:	af00      	add	r7, sp, #0
 800b454:	60f8      	str	r0, [r7, #12]
 800b456:	60b9      	str	r1, [r7, #8]
 800b458:	607a      	str	r2, [r7, #4]
 800b45a:	603b      	str	r3, [r7, #0]
    const uint8_t *pos = buf;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	637b      	str	r3, [r7, #52]	@ 0x34
    fp84_76 sqr84;
    size_t bytecnt = buflen, coefcnt = 0, cnt = 0;
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	633b      	str	r3, [r7, #48]	@ 0x30
 800b464:	2300      	movs	r3, #0
 800b466:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b468:	2300      	movs	r3, #0
 800b46a:	62bb      	str	r3, [r7, #40]	@ 0x28
    int accepted;
    uint64_t extra_coefficient; // used to sample the two extra coefficients
    
    while (coefcnt < len) {
 800b46c:	e038      	b.n	800b4e0 <sample_gauss+0x92>
        if (bytecnt < GAUSS_RAND_BYTES) {
 800b46e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b470:	2b10      	cmp	r3, #16
 800b472:	d801      	bhi.n	800b478 <sample_gauss+0x2a>
          return coefcnt;
 800b474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b476:	e038      	b.n	800b4ea <sample_gauss+0x9c>
        }

        if (dont_write_last && coefcnt == len-1)
 800b478:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d00e      	beq.n	800b49c <sample_gauss+0x4e>
 800b47e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b480:	3b01      	subs	r3, #1
 800b482:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b484:	429a      	cmp	r2, r3
 800b486:	d109      	bne.n	800b49c <sample_gauss+0x4e>
        {
          accepted = sample_gauss_sigma76(&extra_coefficient, &sqr84, pos);
 800b488:	f107 0118 	add.w	r1, r7, #24
 800b48c:	f107 0310 	add.w	r3, r7, #16
 800b490:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b492:	4618      	mov	r0, r3
 800b494:	f7ff ff74 	bl	800b380 <sample_gauss_sigma76>
 800b498:	6278      	str	r0, [r7, #36]	@ 0x24
 800b49a:	e00a      	b.n	800b4b2 <sample_gauss+0x64>
        } else {
          accepted = sample_gauss_sigma76(&r[coefcnt], &sqr84, pos);
 800b49c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b49e:	00db      	lsls	r3, r3, #3
 800b4a0:	68fa      	ldr	r2, [r7, #12]
 800b4a2:	4413      	add	r3, r2
 800b4a4:	f107 0118 	add.w	r1, r7, #24
 800b4a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f7ff ff68 	bl	800b380 <sample_gauss_sigma76>
 800b4b0:	6278      	str	r0, [r7, #36]	@ 0x24
        }
        cnt += 1;
 800b4b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4b4:	3301      	adds	r3, #1
 800b4b6:	62bb      	str	r3, [r7, #40]	@ 0x28
        coefcnt += accepted;
 800b4b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4bc:	4413      	add	r3, r2
 800b4be:	62fb      	str	r3, [r7, #44]	@ 0x2c
        pos += GAUSS_RAND_BYTES;
 800b4c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4c2:	3311      	adds	r3, #17
 800b4c4:	637b      	str	r3, [r7, #52]	@ 0x34
        bytecnt -= GAUSS_RAND_BYTES;
 800b4c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4c8:	3b11      	subs	r3, #17
 800b4ca:	633b      	str	r3, [r7, #48]	@ 0x30

        conditional_accumulate_fp112_96(sqsum, &sqr84, accepted);
 800b4cc:	f107 0318 	add.w	r3, r7, #24
 800b4d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	68b8      	ldr	r0, [r7, #8]
 800b4d6:	f7f8 f8bd 	bl	8003654 <conditional_accumulate_fp112_96>
        normalize_fp112_96(sqsum);
 800b4da:	68b8      	ldr	r0, [r7, #8]
 800b4dc:	f7f8 f8e4 	bl	80036a8 <normalize_fp112_96>
    while (coefcnt < len) {
 800b4e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b4e4:	429a      	cmp	r2, r3
 800b4e6:	d3c2      	bcc.n	800b46e <sample_gauss+0x20>
    }

    return len;
 800b4e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3738      	adds	r7, #56	@ 0x38
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}
	...

0800b4f4 <sample_gauss_N>:

#define POLY_HYPERBALL_BUFLEN (GAUSS_RAND_BYTES * N)
#define POLY_HYPERBALL_NBLOCKS ((POLY_HYPERBALL_BUFLEN + STREAM256_BLOCKBYTES - 1) / STREAM256_BLOCKBYTES)
void sample_gauss_N(uint64_t *r, uint8_t *signs, fp112_76 *sqsum,
                    const uint8_t seed[CRHBYTES], const uint16_t nonce,
                    const size_t len) {
 800b4f4:	b590      	push	{r4, r7, lr}
 800b4f6:	f5ad 5d90 	sub.w	sp, sp, #4608	@ 0x1200
 800b4fa:	b081      	sub	sp, #4
 800b4fc:	af02      	add	r7, sp, #8
 800b4fe:	f507 74fc 	add.w	r4, r7, #504	@ 0x1f8
 800b502:	f5a4 74f6 	sub.w	r4, r4, #492	@ 0x1ec
 800b506:	6020      	str	r0, [r4, #0]
 800b508:	f507 70fc 	add.w	r0, r7, #504	@ 0x1f8
 800b50c:	f5a0 70f8 	sub.w	r0, r0, #496	@ 0x1f0
 800b510:	6001      	str	r1, [r0, #0]
 800b512:	f507 71fc 	add.w	r1, r7, #504	@ 0x1f8
 800b516:	f5a1 71fa 	sub.w	r1, r1, #500	@ 0x1f4
 800b51a:	600a      	str	r2, [r1, #0]
 800b51c:	f507 72fc 	add.w	r2, r7, #504	@ 0x1f8
 800b520:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800b524:	6013      	str	r3, [r2, #0]
    uint8_t buf[POLY_HYPERBALL_NBLOCKS * STREAM256_BLOCKBYTES];
    size_t bytecnt, coefcnt, firstflag = 1;
 800b526:	2301      	movs	r3, #1
 800b528:	f507 528f 	add.w	r2, r7, #4576	@ 0x11e0
 800b52c:	f102 020c 	add.w	r2, r2, #12
 800b530:	6013      	str	r3, [r2, #0]
    stream256_state state;

    stream256_init(&state, seed, nonce);
 800b532:	f507 5390 	add.w	r3, r7, #4608	@ 0x1200
 800b536:	f103 0308 	add.w	r3, r3, #8
 800b53a:	881a      	ldrh	r2, [r3, #0]
 800b53c:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800b540:	f5a3 71fc 	sub.w	r1, r3, #504	@ 0x1f8
 800b544:	f107 0318 	add.w	r3, r7, #24
 800b548:	3b08      	subs	r3, #8
 800b54a:	6809      	ldr	r1, [r1, #0]
 800b54c:	4618      	mov	r0, r3
 800b54e:	f002 f8d0 	bl	800d6f2 <haetae_shake256_stream_init>
    stream256_squeezeblocks(buf, POLY_HYPERBALL_NBLOCKS, &state);
 800b552:	f107 0218 	add.w	r2, r7, #24
 800b556:	3a08      	subs	r2, #8
 800b558:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 800b55c:	3b18      	subs	r3, #24
 800b55e:	2120      	movs	r1, #32
 800b560:	4618      	mov	r0, r3
 800b562:	f002 f942 	bl	800d7ea <haetae_shake256_stream_squeezeblocks>
    for (size_t i = 0; i < len / 8; i++) {
 800b566:	2300      	movs	r3, #0
 800b568:	f507 528f 	add.w	r2, r7, #4576	@ 0x11e0
 800b56c:	f102 0208 	add.w	r2, r2, #8
 800b570:	6013      	str	r3, [r2, #0]
 800b572:	e021      	b.n	800b5b8 <sample_gauss_N+0xc4>
        signs[i] = buf[i];
 800b574:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800b578:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 800b57c:	681a      	ldr	r2, [r3, #0]
 800b57e:	f507 538f 	add.w	r3, r7, #4576	@ 0x11e0
 800b582:	f103 0308 	add.w	r3, r3, #8
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	4413      	add	r3, r2
 800b58a:	f507 72fc 	add.w	r2, r7, #504	@ 0x1f8
 800b58e:	f5a2 718c 	sub.w	r1, r2, #280	@ 0x118
 800b592:	f507 528f 	add.w	r2, r7, #4576	@ 0x11e0
 800b596:	f102 0208 	add.w	r2, r2, #8
 800b59a:	6812      	ldr	r2, [r2, #0]
 800b59c:	440a      	add	r2, r1
 800b59e:	7812      	ldrb	r2, [r2, #0]
 800b5a0:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < len / 8; i++) {
 800b5a2:	f507 538f 	add.w	r3, r7, #4576	@ 0x11e0
 800b5a6:	f103 0308 	add.w	r3, r3, #8
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	f507 528f 	add.w	r2, r7, #4576	@ 0x11e0
 800b5b2:	f102 0208 	add.w	r2, r2, #8
 800b5b6:	6013      	str	r3, [r2, #0]
 800b5b8:	f507 5390 	add.w	r3, r7, #4608	@ 0x1200
 800b5bc:	f103 030c 	add.w	r3, r3, #12
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	08db      	lsrs	r3, r3, #3
 800b5c4:	f507 528f 	add.w	r2, r7, #4576	@ 0x11e0
 800b5c8:	f102 0208 	add.w	r2, r2, #8
 800b5cc:	6812      	ldr	r2, [r2, #0]
 800b5ce:	429a      	cmp	r2, r3
 800b5d0:	d3d0      	bcc.n	800b574 <sample_gauss_N+0x80>
    }
    bytecnt = POLY_HYPERBALL_NBLOCKS * STREAM256_BLOCKBYTES - len / 8;
 800b5d2:	f507 5390 	add.w	r3, r7, #4608	@ 0x1200
 800b5d6:	f103 030c 	add.w	r3, r3, #12
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	08db      	lsrs	r3, r3, #3
 800b5de:	f5c3 5388 	rsb	r3, r3, #4352	@ 0x1100
 800b5e2:	f507 528f 	add.w	r2, r7, #4576	@ 0x11e0
 800b5e6:	f102 0214 	add.w	r2, r2, #20
 800b5ea:	6013      	str	r3, [r2, #0]
    coefcnt = sample_gauss(r, sqsum, buf + len / 8, bytecnt, len, len%N);
 800b5ec:	f507 5390 	add.w	r3, r7, #4608	@ 0x1200
 800b5f0:	f103 030c 	add.w	r3, r3, #12
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	08da      	lsrs	r2, r3, #3
 800b5f8:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 800b5fc:	3b18      	subs	r3, #24
 800b5fe:	441a      	add	r2, r3
 800b600:	f507 5390 	add.w	r3, r7, #4608	@ 0x1200
 800b604:	f103 030c 	add.w	r3, r3, #12
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	b2db      	uxtb	r3, r3
 800b60c:	f507 71fc 	add.w	r1, r7, #504	@ 0x1f8
 800b610:	f5a1 71fa 	sub.w	r1, r1, #500	@ 0x1f4
 800b614:	f507 70fc 	add.w	r0, r7, #504	@ 0x1f8
 800b618:	f5a0 70f6 	sub.w	r0, r0, #492	@ 0x1ec
 800b61c:	9301      	str	r3, [sp, #4]
 800b61e:	f507 5390 	add.w	r3, r7, #4608	@ 0x1200
 800b622:	f103 030c 	add.w	r3, r3, #12
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	9300      	str	r3, [sp, #0]
 800b62a:	f507 538f 	add.w	r3, r7, #4576	@ 0x11e0
 800b62e:	f103 0314 	add.w	r3, r3, #20
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	6809      	ldr	r1, [r1, #0]
 800b636:	6800      	ldr	r0, [r0, #0]
 800b638:	f7ff ff09 	bl	800b44e <sample_gauss>
 800b63c:	4603      	mov	r3, r0
 800b63e:	f507 528f 	add.w	r2, r7, #4576	@ 0x11e0
 800b642:	f102 0210 	add.w	r2, r2, #16
 800b646:	6013      	str	r3, [r2, #0]
    while (coefcnt < len) {
 800b648:	e0b2      	b.n	800b7b0 <sample_gauss_N+0x2bc>
        size_t off = bytecnt % GAUSS_RAND_BYTES;
 800b64a:	f507 538f 	add.w	r3, r7, #4576	@ 0x11e0
 800b64e:	f103 0314 	add.w	r3, r3, #20
 800b652:	681a      	ldr	r2, [r3, #0]
 800b654:	4b60      	ldr	r3, [pc, #384]	@ (800b7d8 <sample_gauss_N+0x2e4>)
 800b656:	fba3 1302 	umull	r1, r3, r3, r2
 800b65a:	0919      	lsrs	r1, r3, #4
 800b65c:	460b      	mov	r3, r1
 800b65e:	011b      	lsls	r3, r3, #4
 800b660:	440b      	add	r3, r1
 800b662:	1ad3      	subs	r3, r2, r3
 800b664:	f507 528f 	add.w	r2, r7, #4576	@ 0x11e0
 800b668:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < off; i++) {
 800b66a:	2300      	movs	r3, #0
 800b66c:	f507 528f 	add.w	r2, r7, #4576	@ 0x11e0
 800b670:	f102 0204 	add.w	r2, r2, #4
 800b674:	6013      	str	r3, [r2, #0]
 800b676:	e038      	b.n	800b6ea <sample_gauss_N+0x1f6>
            buf[i] = buf[bytecnt + len/8*firstflag - off + i];
 800b678:	f507 5390 	add.w	r3, r7, #4608	@ 0x1200
 800b67c:	f103 030c 	add.w	r3, r3, #12
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	08db      	lsrs	r3, r3, #3
 800b684:	f507 528f 	add.w	r2, r7, #4576	@ 0x11e0
 800b688:	f102 020c 	add.w	r2, r2, #12
 800b68c:	6812      	ldr	r2, [r2, #0]
 800b68e:	fb03 f202 	mul.w	r2, r3, r2
 800b692:	f507 538f 	add.w	r3, r7, #4576	@ 0x11e0
 800b696:	f103 0314 	add.w	r3, r3, #20
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	441a      	add	r2, r3
 800b69e:	f507 538f 	add.w	r3, r7, #4576	@ 0x11e0
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	1ad2      	subs	r2, r2, r3
 800b6a6:	f507 538f 	add.w	r3, r7, #4576	@ 0x11e0
 800b6aa:	f103 0304 	add.w	r3, r3, #4
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	4413      	add	r3, r2
 800b6b2:	f507 72fc 	add.w	r2, r7, #504	@ 0x1f8
 800b6b6:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 800b6ba:	5cd1      	ldrb	r1, [r2, r3]
 800b6bc:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800b6c0:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 800b6c4:	f507 538f 	add.w	r3, r7, #4576	@ 0x11e0
 800b6c8:	f103 0304 	add.w	r3, r3, #4
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	4413      	add	r3, r2
 800b6d0:	460a      	mov	r2, r1
 800b6d2:	701a      	strb	r2, [r3, #0]
        for (size_t i = 0; i < off; i++) {
 800b6d4:	f507 538f 	add.w	r3, r7, #4576	@ 0x11e0
 800b6d8:	f103 0304 	add.w	r3, r3, #4
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	3301      	adds	r3, #1
 800b6e0:	f507 528f 	add.w	r2, r7, #4576	@ 0x11e0
 800b6e4:	f102 0204 	add.w	r2, r2, #4
 800b6e8:	6013      	str	r3, [r2, #0]
 800b6ea:	f507 538f 	add.w	r3, r7, #4576	@ 0x11e0
 800b6ee:	f103 0304 	add.w	r3, r3, #4
 800b6f2:	681a      	ldr	r2, [r3, #0]
 800b6f4:	f507 538f 	add.w	r3, r7, #4576	@ 0x11e0
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	d3bc      	bcc.n	800b678 <sample_gauss_N+0x184>
        }
        stream256_squeezeblocks(buf + off, 1, &state);
 800b6fe:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 800b702:	3b18      	subs	r3, #24
 800b704:	f507 528f 	add.w	r2, r7, #4576	@ 0x11e0
 800b708:	6812      	ldr	r2, [r2, #0]
 800b70a:	1898      	adds	r0, r3, r2
 800b70c:	f107 0318 	add.w	r3, r7, #24
 800b710:	3b08      	subs	r3, #8
 800b712:	461a      	mov	r2, r3
 800b714:	2101      	movs	r1, #1
 800b716:	f002 f868 	bl	800d7ea <haetae_shake256_stream_squeezeblocks>
        bytecnt = STREAM256_BLOCKBYTES + off;
 800b71a:	f507 538f 	add.w	r3, r7, #4576	@ 0x11e0
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	3388      	adds	r3, #136	@ 0x88
 800b722:	f507 528f 	add.w	r2, r7, #4576	@ 0x11e0
 800b726:	f102 0214 	add.w	r2, r2, #20
 800b72a:	6013      	str	r3, [r2, #0]

        coefcnt += sample_gauss(r + coefcnt, sqsum, buf, bytecnt, len - coefcnt, len%N);
 800b72c:	f507 538f 	add.w	r3, r7, #4576	@ 0x11e0
 800b730:	f103 0310 	add.w	r3, r3, #16
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	00db      	lsls	r3, r3, #3
 800b738:	f507 72fc 	add.w	r2, r7, #504	@ 0x1f8
 800b73c:	f5a2 72f6 	sub.w	r2, r2, #492	@ 0x1ec
 800b740:	6812      	ldr	r2, [r2, #0]
 800b742:	18d4      	adds	r4, r2, r3
 800b744:	f507 5390 	add.w	r3, r7, #4608	@ 0x1200
 800b748:	f103 030c 	add.w	r3, r3, #12
 800b74c:	681a      	ldr	r2, [r3, #0]
 800b74e:	f507 538f 	add.w	r3, r7, #4576	@ 0x11e0
 800b752:	f103 0310 	add.w	r3, r3, #16
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	1ad3      	subs	r3, r2, r3
 800b75a:	f507 5290 	add.w	r2, r7, #4608	@ 0x1200
 800b75e:	f102 020c 	add.w	r2, r2, #12
 800b762:	6812      	ldr	r2, [r2, #0]
 800b764:	b2d0      	uxtb	r0, r2
 800b766:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 800b76a:	3a18      	subs	r2, #24
 800b76c:	f507 71fc 	add.w	r1, r7, #504	@ 0x1f8
 800b770:	f5a1 71fa 	sub.w	r1, r1, #500	@ 0x1f4
 800b774:	9001      	str	r0, [sp, #4]
 800b776:	9300      	str	r3, [sp, #0]
 800b778:	f507 538f 	add.w	r3, r7, #4576	@ 0x11e0
 800b77c:	f103 0314 	add.w	r3, r3, #20
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	6809      	ldr	r1, [r1, #0]
 800b784:	4620      	mov	r0, r4
 800b786:	f7ff fe62 	bl	800b44e <sample_gauss>
 800b78a:	4603      	mov	r3, r0
 800b78c:	461a      	mov	r2, r3
 800b78e:	f507 538f 	add.w	r3, r7, #4576	@ 0x11e0
 800b792:	f103 0310 	add.w	r3, r3, #16
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	4413      	add	r3, r2
 800b79a:	f507 528f 	add.w	r2, r7, #4576	@ 0x11e0
 800b79e:	f102 0210 	add.w	r2, r2, #16
 800b7a2:	6013      	str	r3, [r2, #0]
        firstflag = 0;
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	f507 528f 	add.w	r2, r7, #4576	@ 0x11e0
 800b7aa:	f102 020c 	add.w	r2, r2, #12
 800b7ae:	6013      	str	r3, [r2, #0]
    while (coefcnt < len) {
 800b7b0:	f507 538f 	add.w	r3, r7, #4576	@ 0x11e0
 800b7b4:	f103 0310 	add.w	r3, r3, #16
 800b7b8:	681a      	ldr	r2, [r3, #0]
 800b7ba:	f507 5390 	add.w	r3, r7, #4608	@ 0x1200
 800b7be:	f103 030c 	add.w	r3, r3, #12
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	429a      	cmp	r2, r3
 800b7c6:	f4ff af40 	bcc.w	800b64a <sample_gauss_N+0x156>
    }
}
 800b7ca:	bf00      	nop
 800b7cc:	bf00      	nop
 800b7ce:	f507 578f 	add.w	r7, r7, #4576	@ 0x11e0
 800b7d2:	371c      	adds	r7, #28
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd90      	pop	{r4, r7, pc}
 800b7d8:	f0f0f0f1 	.word	0xf0f0f0f1

0800b7dc <generate_seed_from_one_source>:
 *              - size_t src_len:  length of source
 * 
 * Returns void
 **************************************************/
static void generate_seed_from_one_source(uint8_t *seed, size_t seed_len, 
                                          const uint8_t *src, size_t src_len){
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b0b8      	sub	sp, #224	@ 0xe0
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	60f8      	str	r0, [r7, #12]
 800b7e4:	60b9      	str	r1, [r7, #8]
 800b7e6:	607a      	str	r2, [r7, #4]
 800b7e8:	603b      	str	r3, [r7, #0]
    xof256_state state;
    xof256_absorb_once(&state, src, src_len);
 800b7ea:	f107 0310 	add.w	r3, r7, #16
 800b7ee:	683a      	ldr	r2, [r7, #0]
 800b7f0:	6879      	ldr	r1, [r7, #4]
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f001 ffbd 	bl	800d772 <haetae_shake256_absorb_once>
    xof256_squeeze(seed, seed_len, &state);
 800b7f8:	f107 0310 	add.w	r3, r7, #16
 800b7fc:	461a      	mov	r2, r3
 800b7fe:	68b9      	ldr	r1, [r7, #8]
 800b800:	68f8      	ldr	r0, [r7, #12]
 800b802:	f7f6 fe0b 	bl	800241c <shake256_inc_squeeze>
    return;
 800b806:	bf00      	nop
}
 800b808:	37e0      	adds	r7, #224	@ 0xe0
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}

0800b80e <generate_seed_from_two_sources>:
 * 
 * Returns void
 **************************************************/
static void generate_seed_from_two_sources(uint8_t *seed, size_t seed_len, 
                                           const uint8_t *src1, size_t src1_len, 
                                           const uint8_t *src2, size_t src2_len){
 800b80e:	b580      	push	{r7, lr}
 800b810:	b0ba      	sub	sp, #232	@ 0xe8
 800b812:	af02      	add	r7, sp, #8
 800b814:	60f8      	str	r0, [r7, #12]
 800b816:	60b9      	str	r1, [r7, #8]
 800b818:	607a      	str	r2, [r7, #4]
 800b81a:	603b      	str	r3, [r7, #0]
    xof256_state state;
    xof256_absorb_twice(&state, src1, src1_len, src2, src2_len);
 800b81c:	f107 0010 	add.w	r0, r7, #16
 800b820:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b824:	9300      	str	r3, [sp, #0]
 800b826:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b82a:	683a      	ldr	r2, [r7, #0]
 800b82c:	6879      	ldr	r1, [r7, #4]
 800b82e:	f001 ff85 	bl	800d73c <haetae_shake256_absorb_twice>
    xof256_squeeze(seed, seed_len, &state);
 800b832:	f107 0310 	add.w	r3, r7, #16
 800b836:	461a      	mov	r2, r3
 800b838:	68b9      	ldr	r1, [r7, #8]
 800b83a:	68f8      	ldr	r0, [r7, #12]
 800b83c:	f7f6 fdee 	bl	800241c <shake256_inc_squeeze>
    return;
 800b840:	bf00      	nop
}
 800b842:	37e0      	adds	r7, #224	@ 0xe0
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}

0800b848 <nonce_a>:

static inline uint16_t nonce_a(const size_t row){
 800b848:	b480      	push	{r7}
 800b84a:	b083      	sub	sp, #12
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
    return (K << 8) + M + row;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	b29b      	uxth	r3, r3
 800b854:	f203 2303 	addw	r3, r3, #515	@ 0x203
 800b858:	b29b      	uxth	r3, r3
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	370c      	adds	r7, #12
 800b85e:	46bd      	mov	sp, r7
 800b860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b864:	4770      	bx	lr

0800b866 <nonce_A_gen>:
static inline uint16_t nonce_A_gen(const size_t row, const size_t column){
 800b866:	b480      	push	{r7}
 800b868:	b083      	sub	sp, #12
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	6078      	str	r0, [r7, #4]
 800b86e:	6039      	str	r1, [r7, #0]
    return (row << 8) + column;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	b29b      	uxth	r3, r3
 800b874:	021b      	lsls	r3, r3, #8
 800b876:	b29a      	uxth	r2, r3
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	b29b      	uxth	r3, r3
 800b87c:	4413      	add	r3, r2
 800b87e:	b29b      	uxth	r3, r3
}
 800b880:	4618      	mov	r0, r3
 800b882:	370c      	adds	r7, #12
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr

0800b88c <nonce_s_gen>:
static inline uint16_t nonce_s_gen(const size_t nonce_offset, const size_t column){
 800b88c:	b480      	push	{r7}
 800b88e:	b083      	sub	sp, #12
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
 800b894:	6039      	str	r1, [r7, #0]
    return nonce_offset + column;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	b29a      	uxth	r2, r3
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	b29b      	uxth	r3, r3
 800b89e:	4413      	add	r3, r2
 800b8a0:	b29b      	uxth	r3, r3
}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	370c      	adds	r7, #12
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ac:	4770      	bx	lr

0800b8ae <nonce_e_gen>:
static inline uint16_t nonce_e_gen(const size_t nonce_offset, const size_t row){
 800b8ae:	b480      	push	{r7}
 800b8b0:	b083      	sub	sp, #12
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	6078      	str	r0, [r7, #4]
 800b8b6:	6039      	str	r1, [r7, #0]
    return nonce_offset + M + row;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	b29a      	uxth	r2, r3
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	b29b      	uxth	r3, r3
 800b8c0:	4413      	add	r3, r2
 800b8c2:	b29b      	uxth	r3, r3
 800b8c4:	3303      	adds	r3, #3
 800b8c6:	b29b      	uxth	r3, r3
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	370c      	adds	r7, #12
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d2:	4770      	bx	lr

0800b8d4 <pointwise_montgomery_by_A_gen_elem_frozen>:

static void pointwise_montgomery_by_A_gen_elem_frozen(poly *dest, 
                                const uMatrixPointerM_frozen agenptr, 
                                const size_t row, const size_t column, const poly *src){
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	60f8      	str	r0, [r7, #12]
 800b8dc:	60b9      	str	r1, [r7, #8]
 800b8de:	607a      	str	r2, [r7, #4]
 800b8e0:	603b      	str	r3, [r7, #0]
#ifdef ENABLE_KEYPAIR_MATRIX_BUFFER
    poly_pointwise_montgomery_mixed(dest, &agenptr.vec[row].vec[column], src);
 800b8e2:	68b9      	ldr	r1, [r7, #8]
 800b8e4:	687a      	ldr	r2, [r7, #4]
 800b8e6:	4613      	mov	r3, r2
 800b8e8:	005b      	lsls	r3, r3, #1
 800b8ea:	4413      	add	r3, r2
 800b8ec:	025b      	lsls	r3, r3, #9
 800b8ee:	18ca      	adds	r2, r1, r3
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	025b      	lsls	r3, r3, #9
 800b8f4:	4413      	add	r3, r2
 800b8f6:	69ba      	ldr	r2, [r7, #24]
 800b8f8:	4619      	mov	r1, r3
 800b8fa:	68f8      	ldr	r0, [r7, #12]
 800b8fc:	f7fb fed9 	bl	80076b2 <poly_pointwise_montgomery_mixed>
#else
    poly_frozen a_gen_elem;
    poly_uniform_frozen(&a_gen_elem, agenptr.seed, nonce_A_gen(row, column));
    poly_pointwise_montgomery_mixed(dest, &a_gen_elem, src);
#endif /* ENABLE_KEYPAIR_MATRIX_BUFFER */
}
 800b900:	bf00      	nop
 800b902:	3710      	adds	r7, #16
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}

0800b908 <keypair>:
 *                             array of CRYPTO_SECRETKEYBYTES bytes)
 *
 * Returns 0 (success)
 **************************************************/

int crypto_sign_keypair(uint8_t *pk, uint8_t *sk) {
 800b908:	b590      	push	{r4, r7, lr}
 800b90a:	f5ad 5d63 	sub.w	sp, sp, #14528	@ 0x38c0
 800b90e:	b089      	sub	sp, #36	@ 0x24
 800b910:	af02      	add	r7, sp, #8
 800b912:	f607 03d8 	addw	r3, r7, #2264	@ 0x8d8
 800b916:	f6a3 03d4 	subw	r3, r3, #2260	@ 0x8d4
 800b91a:	6018      	str	r0, [r3, #0]
 800b91c:	f607 03d8 	addw	r3, r7, #2264	@ 0x8d8
 800b920:	f6a3 03d8 	subw	r3, r3, #2264	@ 0x8d8
 800b924:	6019      	str	r1, [r3, #0]
    uint8_t seedbuf[2 * SEEDBYTES + CRHBYTES] = {0};
 800b926:	2300      	movs	r3, #0
 800b928:	f507 5260 	add.w	r2, r7, #14336	@ 0x3800
 800b92c:	f102 0210 	add.w	r2, r2, #16
 800b930:	6013      	str	r3, [r2, #0]
 800b932:	f507 5360 	add.w	r3, r7, #14336	@ 0x3800
 800b936:	f103 0314 	add.w	r3, r3, #20
 800b93a:	227c      	movs	r2, #124	@ 0x7c
 800b93c:	2100      	movs	r1, #0
 800b93e:	4618      	mov	r0, r3
 800b940:	f009 fe3a 	bl	80155b8 <memset>
    uint16_t nonce = 0;
 800b944:	2300      	movs	r3, #0
 800b946:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 800b94a:	f102 0216 	add.w	r2, r2, #22
 800b94e:	8013      	strh	r3, [r2, #0]
#if D > 0
    polyveck a;
#endif
#ifdef ENABLE_KEYPAIR_MATRIX_BUFFER
    polyvecm_frozen A_gen[K];
    uMatrixPointerM_frozen A_gen_ptr = { .vec = A_gen };
 800b950:	f607 03d8 	addw	r3, r7, #2264	@ 0x8d8
 800b954:	f2a3 42cc 	subw	r2, r3, #1228	@ 0x4cc
 800b958:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 800b95c:	3b08      	subs	r3, #8
 800b95e:	6013      	str	r3, [r2, #0]
#else
    uMatrixPointerM_frozen A_gen_ptr = { .seed = seedbuf };
#endif

    // Get entropy \rho
    randombytes(seedbuf, SEEDBYTES);
 800b960:	f507 5360 	add.w	r3, r7, #14336	@ 0x3800
 800b964:	f103 0310 	add.w	r3, r3, #16
 800b968:	2120      	movs	r1, #32
 800b96a:	4618      	mov	r0, r3
 800b96c:	f7fe fede 	bl	800a72c <randombytes>
    // Sample seeds with entropy \rho
    generate_seed_from_one_source(seedbuf, 2 * SEEDBYTES + CRHBYTES, seedbuf, SEEDBYTES);
 800b970:	f507 5260 	add.w	r2, r7, #14336	@ 0x3800
 800b974:	f102 0210 	add.w	r2, r2, #16
 800b978:	f507 5060 	add.w	r0, r7, #14336	@ 0x3800
 800b97c:	f100 0010 	add.w	r0, r0, #16
 800b980:	2320      	movs	r3, #32
 800b982:	2180      	movs	r1, #128	@ 0x80
 800b984:	f7ff ff2a 	bl	800b7dc <generate_seed_from_one_source>

    rhoprime = seedbuf;
 800b988:	f507 5360 	add.w	r3, r7, #14336	@ 0x3800
 800b98c:	f103 0310 	add.w	r3, r3, #16
 800b990:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 800b994:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 800b998:	6013      	str	r3, [r2, #0]
    sigma = rhoprime + SEEDBYTES;
 800b99a:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800b99e:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	3320      	adds	r3, #32
 800b9a6:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 800b9aa:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 800b9ae:	6013      	str	r3, [r2, #0]
    key = sigma + CRHBYTES;
 800b9b0:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800b9b4:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	3340      	adds	r3, #64	@ 0x40
 800b9bc:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 800b9c0:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 800b9c4:	6013      	str	r3, [r2, #0]

#ifdef ENABLE_KEYPAIR_MATRIX_BUFFER
    // Expand Matrix A0 and vector a
    for (size_t row = 0; row < K; ++row){
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 800b9cc:	f102 0210 	add.w	r2, r2, #16
 800b9d0:	6013      	str	r3, [r2, #0]
 800b9d2:	e04c      	b.n	800ba6e <keypair+0x166>
        for (size_t column = 0; column < M; ++column){
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 800b9da:	f102 020c 	add.w	r2, r2, #12
 800b9de:	6013      	str	r3, [r2, #0]
 800b9e0:	e033      	b.n	800ba4a <keypair+0x142>
            poly_uniform_frozen(&A_gen[row].vec[column], rhoprime, nonce_A_gen(row, column));
 800b9e2:	f507 6283 	add.w	r2, r7, #1048	@ 0x418
 800b9e6:	3a08      	subs	r2, #8
 800b9e8:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 800b9ec:	f103 0310 	add.w	r3, r3, #16
 800b9f0:	6819      	ldr	r1, [r3, #0]
 800b9f2:	460b      	mov	r3, r1
 800b9f4:	005b      	lsls	r3, r3, #1
 800b9f6:	440b      	add	r3, r1
 800b9f8:	f507 5163 	add.w	r1, r7, #14528	@ 0x38c0
 800b9fc:	f101 010c 	add.w	r1, r1, #12
 800ba00:	6809      	ldr	r1, [r1, #0]
 800ba02:	440b      	add	r3, r1
 800ba04:	025b      	lsls	r3, r3, #9
 800ba06:	18d4      	adds	r4, r2, r3
 800ba08:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 800ba0c:	f103 030c 	add.w	r3, r3, #12
 800ba10:	6819      	ldr	r1, [r3, #0]
 800ba12:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 800ba16:	f103 0310 	add.w	r3, r3, #16
 800ba1a:	6818      	ldr	r0, [r3, #0]
 800ba1c:	f7ff ff23 	bl	800b866 <nonce_A_gen>
 800ba20:	4603      	mov	r3, r0
 800ba22:	461a      	mov	r2, r3
 800ba24:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800ba28:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 800ba2c:	6819      	ldr	r1, [r3, #0]
 800ba2e:	4620      	mov	r0, r4
 800ba30:	f7fb fff4 	bl	8007a1c <poly_uniform_frozen>
        for (size_t column = 0; column < M; ++column){
 800ba34:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 800ba38:	f103 030c 	add.w	r3, r3, #12
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	3301      	adds	r3, #1
 800ba40:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 800ba44:	f102 020c 	add.w	r2, r2, #12
 800ba48:	6013      	str	r3, [r2, #0]
 800ba4a:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 800ba4e:	f103 030c 	add.w	r3, r3, #12
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	2b02      	cmp	r3, #2
 800ba56:	d9c4      	bls.n	800b9e2 <keypair+0xda>
    for (size_t row = 0; row < K; ++row){
 800ba58:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 800ba5c:	f103 0310 	add.w	r3, r3, #16
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	3301      	adds	r3, #1
 800ba64:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 800ba68:	f102 0210 	add.w	r2, r2, #16
 800ba6c:	6013      	str	r3, [r2, #0]
 800ba6e:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 800ba72:	f103 0310 	add.w	r3, r3, #16
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	d9ab      	bls.n	800b9d4 <keypair+0xcc>
     * If there is rounding (D > 0), we need another polyveck a.
     * Then, b = a + A0 * s_gen + e_gen and the lower D bits are
     * rounded from b. The lower D bits are subsequently
     * subtracted from e_gen.
     **********************************************/
    for (size_t row = 0; row < K; ++row){
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 800ba82:	f102 0208 	add.w	r2, r2, #8
 800ba86:	6013      	str	r3, [r2, #0]
 800ba88:	e027      	b.n	800bada <keypair+0x1d2>
        poly_uniform(&a.vec[row], rhoprime, nonce_a(row));
 800ba8a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800ba8e:	f103 0318 	add.w	r3, r3, #24
 800ba92:	3b08      	subs	r3, #8
 800ba94:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 800ba98:	f102 0208 	add.w	r2, r2, #8
 800ba9c:	6812      	ldr	r2, [r2, #0]
 800ba9e:	0292      	lsls	r2, r2, #10
 800baa0:	189c      	adds	r4, r3, r2
 800baa2:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 800baa6:	f103 0308 	add.w	r3, r3, #8
 800baaa:	6818      	ldr	r0, [r3, #0]
 800baac:	f7ff fecc 	bl	800b848 <nonce_a>
 800bab0:	4603      	mov	r3, r0
 800bab2:	461a      	mov	r2, r3
 800bab4:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800bab8:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 800babc:	6819      	ldr	r1, [r3, #0]
 800babe:	4620      	mov	r0, r4
 800bac0:	f7fb ff11 	bl	80078e6 <poly_uniform>
    for (size_t row = 0; row < K; ++row){
 800bac4:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 800bac8:	f103 0308 	add.w	r3, r3, #8
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	3301      	adds	r3, #1
 800bad0:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 800bad4:	f102 0208 	add.w	r2, r2, #8
 800bad8:	6013      	str	r3, [r2, #0]
 800bada:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 800bade:	f103 0308 	add.w	r3, r3, #8
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	2b01      	cmp	r3, #1
 800bae6:	d9d0      	bls.n	800ba8a <keypair+0x182>
    }

reject:
 800bae8:	bf00      	nop
    // Sample secret vectors s_gen and e_gen
    for (size_t column = 0; column < M; column++){
 800baea:	2300      	movs	r3, #0
 800baec:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 800baf0:	f102 0204 	add.w	r2, r2, #4
 800baf4:	6013      	str	r3, [r2, #0]
 800baf6:	e02c      	b.n	800bb52 <keypair+0x24a>
        poly_uniform_eta(&s_gen.vec[column], sigma, nonce_s_gen(nonce, column));
 800baf8:	f507 5230 	add.w	r2, r7, #11264	@ 0x2c00
 800bafc:	f102 0210 	add.w	r2, r2, #16
 800bb00:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 800bb04:	f103 0304 	add.w	r3, r3, #4
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	029b      	lsls	r3, r3, #10
 800bb0c:	18d4      	adds	r4, r2, r3
 800bb0e:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 800bb12:	f103 0316 	add.w	r3, r3, #22
 800bb16:	881b      	ldrh	r3, [r3, #0]
 800bb18:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 800bb1c:	f102 0204 	add.w	r2, r2, #4
 800bb20:	6811      	ldr	r1, [r2, #0]
 800bb22:	4618      	mov	r0, r3
 800bb24:	f7ff feb2 	bl	800b88c <nonce_s_gen>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800bb30:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800bb34:	6819      	ldr	r1, [r3, #0]
 800bb36:	4620      	mov	r0, r4
 800bb38:	f7fc f80b 	bl	8007b52 <poly_uniform_eta>
    for (size_t column = 0; column < M; column++){
 800bb3c:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 800bb40:	f103 0304 	add.w	r3, r3, #4
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	3301      	adds	r3, #1
 800bb48:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 800bb4c:	f102 0204 	add.w	r2, r2, #4
 800bb50:	6013      	str	r3, [r2, #0]
 800bb52:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 800bb56:	f103 0304 	add.w	r3, r3, #4
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	2b02      	cmp	r3, #2
 800bb5e:	d9cb      	bls.n	800baf8 <keypair+0x1f0>
    }
    for (size_t row = 0; row < K; row++){
 800bb60:	2300      	movs	r3, #0
 800bb62:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 800bb66:	6013      	str	r3, [r2, #0]
 800bb68:	e025      	b.n	800bbb6 <keypair+0x2ae>
        poly_uniform_eta(&e_gen.vec[row], sigma, nonce_e_gen(nonce, row));
 800bb6a:	f507 5310 	add.w	r3, r7, #9216	@ 0x2400
 800bb6e:	f103 0318 	add.w	r3, r3, #24
 800bb72:	3b08      	subs	r3, #8
 800bb74:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 800bb78:	6812      	ldr	r2, [r2, #0]
 800bb7a:	0292      	lsls	r2, r2, #10
 800bb7c:	189c      	adds	r4, r3, r2
 800bb7e:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 800bb82:	f103 0316 	add.w	r3, r3, #22
 800bb86:	881b      	ldrh	r3, [r3, #0]
 800bb88:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 800bb8c:	6811      	ldr	r1, [r2, #0]
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f7ff fe8d 	bl	800b8ae <nonce_e_gen>
 800bb94:	4603      	mov	r3, r0
 800bb96:	461a      	mov	r2, r3
 800bb98:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800bb9c:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800bba0:	6819      	ldr	r1, [r3, #0]
 800bba2:	4620      	mov	r0, r4
 800bba4:	f7fb ffd5 	bl	8007b52 <poly_uniform_eta>
    for (size_t row = 0; row < K; row++){
 800bba8:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	3301      	adds	r3, #1
 800bbb0:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 800bbb4:	6013      	str	r3, [r2, #0]
 800bbb6:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	2b01      	cmp	r3, #1
 800bbbe:	d9d4      	bls.n	800bb6a <keypair+0x262>
    }
    nonce += M + K;
 800bbc0:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 800bbc4:	f103 0316 	add.w	r3, r3, #22
 800bbc8:	881b      	ldrh	r3, [r3, #0]
 800bbca:	3305      	adds	r3, #5
 800bbcc:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 800bbd0:	f102 0216 	add.w	r2, r2, #22
 800bbd4:	8013      	strh	r3, [r2, #0]
    // b = a + A0 * s_gen + e_gen mod q
   {
        poly s_gen_hat_elem;
      
        // column 0
        s_gen_hat_elem = s_gen.vec[0];
 800bbd6:	f607 03d8 	addw	r3, r7, #2264	@ 0x8d8
 800bbda:	f6a3 02cc 	subw	r2, r3, #2252	@ 0x8cc
 800bbde:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 800bbe2:	f103 0318 	add.w	r3, r3, #24
 800bbe6:	f6a3 43c8 	subw	r3, r3, #3272	@ 0xcc8
 800bbea:	4610      	mov	r0, r2
 800bbec:	4619      	mov	r1, r3
 800bbee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bbf2:	461a      	mov	r2, r3
 800bbf4:	f009 fd24 	bl	8015640 <memcpy>
        poly_ntt(&s_gen_hat_elem);
 800bbf8:	f107 0318 	add.w	r3, r7, #24
 800bbfc:	3b0c      	subs	r3, #12
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f7fd f859 	bl	8008cb6 <poly_ntt>
        for (size_t row = 0; row < K; row++){
 800bc04:	2300      	movs	r3, #0
 800bc06:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 800bc0a:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 800bc0e:	6013      	str	r3, [r2, #0]
 800bc10:	e027      	b.n	800bc62 <keypair+0x35a>
            pointwise_montgomery_by_A_gen_elem_frozen(&b.vec[row], A_gen_ptr, row, 0, &s_gen_hat_elem); 
 800bc12:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800bc16:	f103 0318 	add.w	r3, r3, #24
 800bc1a:	3b08      	subs	r3, #8
 800bc1c:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 800bc20:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 800bc24:	6812      	ldr	r2, [r2, #0]
 800bc26:	0292      	lsls	r2, r2, #10
 800bc28:	1898      	adds	r0, r3, r2
 800bc2a:	f607 03d8 	addw	r3, r7, #2264	@ 0x8d8
 800bc2e:	f2a3 41cc 	subw	r1, r3, #1228	@ 0x4cc
 800bc32:	f107 0318 	add.w	r3, r7, #24
 800bc36:	3b0c      	subs	r3, #12
 800bc38:	9300      	str	r3, [sp, #0]
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 800bc40:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 800bc44:	6812      	ldr	r2, [r2, #0]
 800bc46:	6809      	ldr	r1, [r1, #0]
 800bc48:	f7ff fe44 	bl	800b8d4 <pointwise_montgomery_by_A_gen_elem_frozen>
        for (size_t row = 0; row < K; row++){
 800bc4c:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800bc50:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	3301      	adds	r3, #1
 800bc58:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 800bc5c:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 800bc60:	6013      	str	r3, [r2, #0]
 800bc62:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800bc66:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	2b01      	cmp	r3, #1
 800bc6e:	d9d0      	bls.n	800bc12 <keypair+0x30a>
        }
        // columns 1 to M-1
        for (size_t column = 1; column < M; column++){
 800bc70:	2301      	movs	r3, #1
 800bc72:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 800bc76:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 800bc7a:	6013      	str	r3, [r2, #0]
 800bc7c:	e07b      	b.n	800bd76 <keypair+0x46e>
            s_gen_hat_elem = s_gen.vec[column];
 800bc7e:	f607 03d8 	addw	r3, r7, #2264	@ 0x8d8
 800bc82:	f6a3 01cc 	subw	r1, r3, #2252	@ 0x8cc
 800bc86:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 800bc8a:	f103 0318 	add.w	r3, r3, #24
 800bc8e:	f6a3 42c8 	subw	r2, r3, #3272	@ 0xcc8
 800bc92:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800bc96:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	029b      	lsls	r3, r3, #10
 800bc9e:	4413      	add	r3, r2
 800bca0:	4608      	mov	r0, r1
 800bca2:	4619      	mov	r1, r3
 800bca4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bca8:	461a      	mov	r2, r3
 800bcaa:	f009 fcc9 	bl	8015640 <memcpy>
            poly_ntt(&s_gen_hat_elem);
 800bcae:	f107 0318 	add.w	r3, r7, #24
 800bcb2:	3b0c      	subs	r3, #12
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f7fc fffe 	bl	8008cb6 <poly_ntt>
            for (size_t row = 0; row < K; row++){
 800bcba:	2300      	movs	r3, #0
 800bcbc:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 800bcc0:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 800bcc4:	6013      	str	r3, [r2, #0]
 800bcc6:	e044      	b.n	800bd52 <keypair+0x44a>
                pointwise_montgomery_by_A_gen_elem_frozen(&temp_poly, A_gen_ptr, row, column, &s_gen_hat_elem); 
 800bcc8:	f607 03d8 	addw	r3, r7, #2264	@ 0x8d8
 800bccc:	f2a3 41cc 	subw	r1, r3, #1228	@ 0x4cc
 800bcd0:	f507 50c0 	add.w	r0, r7, #6144	@ 0x1800
 800bcd4:	f100 0018 	add.w	r0, r0, #24
 800bcd8:	3808      	subs	r0, #8
 800bcda:	f107 0318 	add.w	r3, r7, #24
 800bcde:	3b0c      	subs	r3, #12
 800bce0:	9300      	str	r3, [sp, #0]
 800bce2:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800bce6:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 800bcf0:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 800bcf4:	6812      	ldr	r2, [r2, #0]
 800bcf6:	6809      	ldr	r1, [r1, #0]
 800bcf8:	f7ff fdec 	bl	800b8d4 <pointwise_montgomery_by_A_gen_elem_frozen>
                poly_add(&b.vec[row], &b.vec[row], &temp_poly);
 800bcfc:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800bd00:	f103 0318 	add.w	r3, r3, #24
 800bd04:	3b08      	subs	r3, #8
 800bd06:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 800bd0a:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 800bd0e:	6812      	ldr	r2, [r2, #0]
 800bd10:	0292      	lsls	r2, r2, #10
 800bd12:	1898      	adds	r0, r3, r2
 800bd14:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800bd18:	f103 0318 	add.w	r3, r3, #24
 800bd1c:	3b08      	subs	r3, #8
 800bd1e:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 800bd22:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 800bd26:	6812      	ldr	r2, [r2, #0]
 800bd28:	0292      	lsls	r2, r2, #10
 800bd2a:	1899      	adds	r1, r3, r2
 800bd2c:	f507 53c0 	add.w	r3, r7, #6144	@ 0x1800
 800bd30:	f103 0318 	add.w	r3, r3, #24
 800bd34:	3b08      	subs	r3, #8
 800bd36:	461a      	mov	r2, r3
 800bd38:	f7fb fbdd 	bl	80074f6 <poly_add>
            for (size_t row = 0; row < K; row++){
 800bd3c:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800bd40:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	3301      	adds	r3, #1
 800bd48:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 800bd4c:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 800bd50:	6013      	str	r3, [r2, #0]
 800bd52:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800bd56:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	2b01      	cmp	r3, #1
 800bd5e:	d9b3      	bls.n	800bcc8 <keypair+0x3c0>
        for (size_t column = 1; column < M; column++){
 800bd60:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800bd64:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	3301      	adds	r3, #1
 800bd6c:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 800bd70:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 800bd74:	6013      	str	r3, [r2, #0]
 800bd76:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800bd7a:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	2b02      	cmp	r3, #2
 800bd82:	f67f af7c 	bls.w	800bc7e <keypair+0x376>
            }
        }
    }

    for (size_t row = 0; row < K; row++){
 800bd86:	2300      	movs	r3, #0
 800bd88:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 800bd8c:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 800bd90:	6013      	str	r3, [r2, #0]
 800bd92:	e083      	b.n	800be9c <keypair+0x594>
        poly *b_elem = &b.vec[row];
 800bd94:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800bd98:	f103 0318 	add.w	r3, r3, #24
 800bd9c:	3b08      	subs	r3, #8
 800bd9e:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 800bda2:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 800bda6:	6812      	ldr	r2, [r2, #0]
 800bda8:	0292      	lsls	r2, r2, #10
 800bdaa:	4413      	add	r3, r2
 800bdac:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 800bdb0:	f102 0214 	add.w	r2, r2, #20
 800bdb4:	6013      	str	r3, [r2, #0]
        poly *e_gen_elem = &e_gen.vec[row];
 800bdb6:	f507 5310 	add.w	r3, r7, #9216	@ 0x2400
 800bdba:	f103 0318 	add.w	r3, r3, #24
 800bdbe:	3b08      	subs	r3, #8
 800bdc0:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 800bdc4:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 800bdc8:	6812      	ldr	r2, [r2, #0]
 800bdca:	0292      	lsls	r2, r2, #10
 800bdcc:	4413      	add	r3, r2
 800bdce:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 800bdd2:	f102 0210 	add.w	r2, r2, #16
 800bdd6:	6013      	str	r3, [r2, #0]

        poly_invntt_tomont(b_elem);
 800bdd8:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800bddc:	f103 0314 	add.w	r3, r3, #20
 800bde0:	6818      	ldr	r0, [r3, #0]
 800bde2:	f7fc ff74 	bl	8008cce <poly_invntt_tomont>
        poly_add(b_elem, b_elem, e_gen_elem);
 800bde6:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800bdea:	f103 0310 	add.w	r3, r3, #16
 800bdee:	681a      	ldr	r2, [r3, #0]
 800bdf0:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800bdf4:	f103 0314 	add.w	r3, r3, #20
 800bdf8:	6819      	ldr	r1, [r3, #0]
 800bdfa:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800bdfe:	f103 0314 	add.w	r3, r3, #20
 800be02:	6818      	ldr	r0, [r3, #0]
 800be04:	f7fb fb77 	bl	80074f6 <poly_add>
        poly_add(b_elem, b_elem, &a.vec[row]);
 800be08:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800be0c:	f103 0318 	add.w	r3, r3, #24
 800be10:	3b08      	subs	r3, #8
 800be12:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 800be16:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 800be1a:	6812      	ldr	r2, [r2, #0]
 800be1c:	0292      	lsls	r2, r2, #10
 800be1e:	4413      	add	r3, r2
 800be20:	461a      	mov	r2, r3
 800be22:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800be26:	f103 0314 	add.w	r3, r3, #20
 800be2a:	6819      	ldr	r1, [r3, #0]
 800be2c:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800be30:	f103 0314 	add.w	r3, r3, #20
 800be34:	6818      	ldr	r0, [r3, #0]
 800be36:	f7fb fb5e 	bl	80074f6 <poly_add>
        poly_freeze(b_elem);
 800be3a:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800be3e:	f103 0314 	add.w	r3, r3, #20
 800be42:	6818      	ldr	r0, [r3, #0]
 800be44:	f7fb fca8 	bl	8007798 <poly_freeze>
        // round off D bits
        poly_decompose_vk(&temp_poly, b_elem);
 800be48:	f507 53c0 	add.w	r3, r7, #6144	@ 0x1800
 800be4c:	f103 0318 	add.w	r3, r3, #24
 800be50:	3b08      	subs	r3, #8
 800be52:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 800be56:	f102 0214 	add.w	r2, r2, #20
 800be5a:	6811      	ldr	r1, [r2, #0]
 800be5c:	4618      	mov	r0, r3
 800be5e:	f7fb fb0a 	bl	8007476 <poly_decompose_vk>
        poly_sub(e_gen_elem, e_gen_elem, &temp_poly);
 800be62:	f507 53c0 	add.w	r3, r7, #6144	@ 0x1800
 800be66:	f103 0318 	add.w	r3, r3, #24
 800be6a:	3b08      	subs	r3, #8
 800be6c:	461a      	mov	r2, r3
 800be6e:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800be72:	f103 0310 	add.w	r3, r3, #16
 800be76:	6819      	ldr	r1, [r3, #0]
 800be78:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800be7c:	f103 0310 	add.w	r3, r3, #16
 800be80:	6818      	ldr	r0, [r3, #0]
 800be82:	f7fb fb5b 	bl	800753c <poly_sub>
    for (size_t row = 0; row < K; row++){
 800be86:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800be8a:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	3301      	adds	r3, #1
 800be92:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 800be96:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 800be9a:	6013      	str	r3, [r2, #0]
 800be9c:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800bea0:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	2b01      	cmp	r3, #1
 800bea8:	f67f af74 	bls.w	800bd94 <keypair+0x48c>
    }

    int64_t squared_singular_value = polyvecmk_sqsing_value(&s_gen, &e_gen);
 800beac:	f507 5310 	add.w	r3, r7, #9216	@ 0x2400
 800beb0:	f103 0318 	add.w	r3, r3, #24
 800beb4:	3b08      	subs	r3, #8
 800beb6:	f507 5230 	add.w	r2, r7, #11264	@ 0x2c00
 800beba:	f102 0210 	add.w	r2, r2, #16
 800bebe:	4619      	mov	r1, r3
 800bec0:	4610      	mov	r0, r2
 800bec2:	f7fe f812 	bl	8009eea <polyvecmk_sqsing_value>
 800bec6:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800beca:	f103 0318 	add.w	r3, r3, #24
 800bece:	e9c3 0100 	strd	r0, r1, [r3]
    if (squared_singular_value > GAMMA * GAMMA * N) {
 800bed2:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800bed6:	f103 0318 	add.w	r3, r3, #24
 800beda:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bede:	f7f5 f9b1 	bl	8001244 <__aeabi_l2d>
 800bee2:	a31f      	add	r3, pc, #124	@ (adr r3, 800bf60 <keypair+0x658>)
 800bee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee8:	f7f5 fa58 	bl	800139c <__aeabi_dcmpgt>
 800beec:	4603      	mov	r3, r0
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d000      	beq.n	800bef4 <keypair+0x5ec>
        goto reject;
 800bef2:	e5fa      	b.n	800baea <keypair+0x1e2>
        poly_caddq(&b.vec[row]);        
    }

#endif

    pack_pk(pk, &b, rhoprime);
 800bef4:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800bef8:	f103 0318 	add.w	r3, r3, #24
 800befc:	3b08      	subs	r3, #8
 800befe:	f607 02d8 	addw	r2, r7, #2264	@ 0x8d8
 800bf02:	f6a2 00d4 	subw	r0, r2, #2260	@ 0x8d4
 800bf06:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 800bf0a:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 800bf0e:	6812      	ldr	r2, [r2, #0]
 800bf10:	4619      	mov	r1, r3
 800bf12:	6800      	ldr	r0, [r0, #0]
 800bf14:	f7fa ffea 	bl	8006eec <pack_pk>
    pack_sk(sk, pk, &s_gen, &e_gen, key);
 800bf18:	f507 5310 	add.w	r3, r7, #9216	@ 0x2400
 800bf1c:	f103 0318 	add.w	r3, r3, #24
 800bf20:	3b08      	subs	r3, #8
 800bf22:	f507 5430 	add.w	r4, r7, #11264	@ 0x2c00
 800bf26:	f104 0410 	add.w	r4, r4, #16
 800bf2a:	f607 02d8 	addw	r2, r7, #2264	@ 0x8d8
 800bf2e:	f6a2 01d4 	subw	r1, r2, #2260	@ 0x8d4
 800bf32:	f607 02d8 	addw	r2, r7, #2264	@ 0x8d8
 800bf36:	f6a2 00d8 	subw	r0, r2, #2264	@ 0x8d8
 800bf3a:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 800bf3e:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 800bf42:	6812      	ldr	r2, [r2, #0]
 800bf44:	9200      	str	r2, [sp, #0]
 800bf46:	4622      	mov	r2, r4
 800bf48:	6809      	ldr	r1, [r1, #0]
 800bf4a:	6800      	ldr	r0, [r0, #0]
 800bf4c:	f7fb f824 	bl	8006f98 <pack_sk>

    return 0;
 800bf50:	2300      	movs	r3, #0
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	f507 5763 	add.w	r7, r7, #14528	@ 0x38c0
 800bf58:	371c      	adds	r7, #28
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd90      	pop	{r4, r7, pc}
 800bf5e:	bf00      	nop
 800bf60:	54fbdad7 	.word	0x54fbdad7
 800bf64:	4122a635 	.word	0x4122a635

0800bf68 <make_hint_veck>:
 *              - polyveck *Ay:         pointer to Ay
 *              - polyveck *highbits:   highbits(z2)
 *  
 * Returns void
 **************************************************/
static void make_hint_veck(polyveck *h, const polyfixveck *z2, const polyveck *Ay, const polyveck *highbits){
 800bf68:	b590      	push	{r4, r7, lr}
 800bf6a:	f6ad 0d1c 	subw	sp, sp, #2076	@ 0x81c
 800bf6e:	af00      	add	r7, sp, #0
 800bf70:	f607 0418 	addw	r4, r7, #2072	@ 0x818
 800bf74:	f6a4 040c 	subw	r4, r4, #2060	@ 0x80c
 800bf78:	6020      	str	r0, [r4, #0]
 800bf7a:	f607 0018 	addw	r0, r7, #2072	@ 0x818
 800bf7e:	f5a0 6001 	sub.w	r0, r0, #2064	@ 0x810
 800bf82:	6001      	str	r1, [r0, #0]
 800bf84:	f607 0118 	addw	r1, r7, #2072	@ 0x818
 800bf88:	f6a1 0114 	subw	r1, r1, #2068	@ 0x814
 800bf8c:	600a      	str	r2, [r1, #0]
 800bf8e:	f607 0218 	addw	r2, r7, #2072	@ 0x818
 800bf92:	f6a2 0218 	subw	r2, r2, #2072	@ 0x818
 800bf96:	6013      	str	r3, [r2, #0]
    poly z2rnd;// round of z2
    poly htmp; 

    for (size_t row = 0; row < K; row ++){
 800bf98:	2300      	movs	r3, #0
 800bf9a:	f8c7 3814 	str.w	r3, [r7, #2068]	@ 0x814
 800bf9e:	e058      	b.n	800c052 <make_hint_veck+0xea>
        // Round z2
        polyfix_round(&z2rnd, &z2->vec[row]);
 800bfa0:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 800bfa4:	f5a3 6201 	sub.w	r2, r3, #2064	@ 0x810
 800bfa8:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 800bfac:	029b      	lsls	r3, r3, #10
 800bfae:	6812      	ldr	r2, [r2, #0]
 800bfb0:	441a      	add	r2, r3
 800bfb2:	f207 4314 	addw	r3, r7, #1044	@ 0x414
 800bfb6:	4611      	mov	r1, r2
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f7fd f8c6 	bl	800914a <polyfix_round>
        // recover htmp == A1 * round(z1) - qcj mod 2q
        poly_double(&z2rnd);
 800bfbe:	f207 4314 	addw	r3, r7, #1044	@ 0x414
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f7fb fb22 	bl	800760c <poly_double>
        poly_sub(&htmp, &Ay->vec[row], &z2rnd);
 800bfc8:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 800bfcc:	f6a3 0214 	subw	r2, r3, #2068	@ 0x814
 800bfd0:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 800bfd4:	029b      	lsls	r3, r3, #10
 800bfd6:	6812      	ldr	r2, [r2, #0]
 800bfd8:	18d1      	adds	r1, r2, r3
 800bfda:	f207 4214 	addw	r2, r7, #1044	@ 0x414
 800bfde:	f107 0314 	add.w	r3, r7, #20
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f7fb faaa 	bl	800753c <poly_sub>
        poly_freeze2q(&htmp);
 800bfe8:	f107 0314 	add.w	r3, r7, #20
 800bfec:	4618      	mov	r0, r3
 800bfee:	f7fb fbb5 	bl	800775c <poly_freeze2q>

        // HighBits of (A * round(z) - qcj mod 2q) and (A1 * round(z1) - qcj mod 2q)
        poly_highbits_hint(&htmp, &htmp);
 800bff2:	f107 0214 	add.w	r2, r7, #20
 800bff6:	f107 0314 	add.w	r3, r7, #20
 800bffa:	4611      	mov	r1, r2
 800bffc:	4618      	mov	r0, r3
 800bffe:	f7fb ff04 	bl	8007e0a <poly_highbits_hint>
        poly_sub(&h->vec[row], &highbits->vec[row], &htmp);
 800c002:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 800c006:	f6a3 020c 	subw	r2, r3, #2060	@ 0x80c
 800c00a:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 800c00e:	029b      	lsls	r3, r3, #10
 800c010:	6812      	ldr	r2, [r2, #0]
 800c012:	18d0      	adds	r0, r2, r3
 800c014:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 800c018:	f6a3 0218 	subw	r2, r3, #2072	@ 0x818
 800c01c:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 800c020:	029b      	lsls	r3, r3, #10
 800c022:	6812      	ldr	r2, [r2, #0]
 800c024:	4413      	add	r3, r2
 800c026:	f107 0214 	add.w	r2, r7, #20
 800c02a:	4619      	mov	r1, r3
 800c02c:	f7fb fa86 	bl	800753c <poly_sub>
        poly_caddDQ2ALPHA(&h->vec[row]);
 800c030:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 800c034:	f6a3 020c 	subw	r2, r3, #2060	@ 0x80c
 800c038:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 800c03c:	029b      	lsls	r3, r3, #10
 800c03e:	6812      	ldr	r2, [r2, #0]
 800c040:	4413      	add	r3, r2
 800c042:	4618      	mov	r0, r3
 800c044:	f7fb febd 	bl	8007dc2 <poly_caddDQ2ALPHA>
    for (size_t row = 0; row < K; row ++){
 800c048:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 800c04c:	3301      	adds	r3, #1
 800c04e:	f8c7 3814 	str.w	r3, [r7, #2068]	@ 0x814
 800c052:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 800c056:	2b01      	cmp	r3, #1
 800c058:	d9a2      	bls.n	800bfa0 <make_hint_veck+0x38>
    }
}
 800c05a:	bf00      	nop
 800c05c:	bf00      	nop
 800c05e:	f607 071c 	addw	r7, r7, #2076	@ 0x81c
 800c062:	46bd      	mov	sp, r7
 800c064:	bd90      	pop	{r4, r7, pc}

0800c066 <decompose_z1_vecl>:
 *              - polyvecl *hb_z1:  pointer to HighBits(z1)
 *              - polyfixvecl *z1:  pointer to z1
 *  
 * Returns void
 **************************************************/
static void decompose_z1_vecl(polyvecl *lb_z1, polyvecl *hb_z1, const polyfixvecl *z1){
 800c066:	b580      	push	{r7, lr}
 800c068:	f5ad 6d83 	sub.w	sp, sp, #1048	@ 0x418
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 800c072:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 800c076:	6018      	str	r0, [r3, #0]
 800c078:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 800c07c:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 800c080:	6019      	str	r1, [r3, #0]
 800c082:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 800c086:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 800c08a:	601a      	str	r2, [r3, #0]
    poly z1rnd; // rounded polynomial of z1

    for (size_t column = 0; column < L; column++){
 800c08c:	2300      	movs	r3, #0
 800c08e:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
 800c092:	e031      	b.n	800c0f8 <decompose_z1_vecl+0x92>
        polyfix_round(&z1rnd, &z1->vec[column]);
 800c094:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 800c098:	f2a3 4214 	subw	r2, r3, #1044	@ 0x414
 800c09c:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 800c0a0:	029b      	lsls	r3, r3, #10
 800c0a2:	6812      	ldr	r2, [r2, #0]
 800c0a4:	441a      	add	r2, r3
 800c0a6:	f107 0314 	add.w	r3, r7, #20
 800c0aa:	4611      	mov	r1, r2
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	f7fd f84c 	bl	800914a <polyfix_round>
        poly_lowbits(&lb_z1->vec[column], &z1rnd);
 800c0b2:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 800c0b6:	f2a3 420c 	subw	r2, r3, #1036	@ 0x40c
 800c0ba:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 800c0be:	029b      	lsls	r3, r3, #10
 800c0c0:	6812      	ldr	r2, [r2, #0]
 800c0c2:	4413      	add	r3, r2
 800c0c4:	f107 0214 	add.w	r2, r7, #20
 800c0c8:	4611      	mov	r1, r2
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f7fb fba2 	bl	8007814 <poly_lowbits>
        poly_highbits(&hb_z1->vec[column], &z1rnd);
 800c0d0:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 800c0d4:	f5a3 6282 	sub.w	r2, r3, #1040	@ 0x410
 800c0d8:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 800c0dc:	029b      	lsls	r3, r3, #10
 800c0de:	6812      	ldr	r2, [r2, #0]
 800c0e0:	4413      	add	r3, r2
 800c0e2:	f107 0214 	add.w	r2, r7, #20
 800c0e6:	4611      	mov	r1, r2
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f7fb fb73 	bl	80077d4 <poly_highbits>
    for (size_t column = 0; column < L; column++){
 800c0ee:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 800c0f2:	3301      	adds	r3, #1
 800c0f4:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
 800c0f8:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 800c0fc:	2b03      	cmp	r3, #3
 800c0fe:	d9c9      	bls.n	800c094 <decompose_z1_vecl+0x2e>
    }
}
 800c100:	bf00      	nop
 800c102:	bf00      	nop
 800c104:	f507 6783 	add.w	r7, r7, #1048	@ 0x418
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}

0800c10c <compute_z_veckl>:
 * 
 * Returns void
 **************************************************/
static void compute_z_veckl(polyfixvecl *z1, polyfixveck *z2, const poly *c, 
                            const polyvecm *s1, const polyveck *s2, 
                            const polyfixvecl *y1, const polyfixveck *y2, const uint8_t b){
 800c10c:	b590      	push	{r4, r7, lr}
 800c10e:	f6ad 0d1c 	subw	sp, sp, #2076	@ 0x81c
 800c112:	af00      	add	r7, sp, #0
 800c114:	f607 0418 	addw	r4, r7, #2072	@ 0x818
 800c118:	f6a4 040c 	subw	r4, r4, #2060	@ 0x80c
 800c11c:	6020      	str	r0, [r4, #0]
 800c11e:	f607 0018 	addw	r0, r7, #2072	@ 0x818
 800c122:	f5a0 6001 	sub.w	r0, r0, #2064	@ 0x810
 800c126:	6001      	str	r1, [r0, #0]
 800c128:	f607 0118 	addw	r1, r7, #2072	@ 0x818
 800c12c:	f6a1 0114 	subw	r1, r1, #2068	@ 0x814
 800c130:	600a      	str	r2, [r1, #0]
 800c132:	f607 0218 	addw	r2, r7, #2072	@ 0x818
 800c136:	f6a2 0218 	subw	r2, r2, #2072	@ 0x818
 800c13a:	6013      	str	r3, [r2, #0]
    poly chat;

    // t = (c * s).vec[i] = (c * (1 || s1 || s2)).vec[i]
    // z = y + (-1)^b (c * s) = z1 || z2

    chat = *c;
 800c13c:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 800c140:	f6a3 0208 	subw	r2, r3, #2056	@ 0x808
 800c144:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 800c148:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	4610      	mov	r0, r2
 800c150:	4619      	mov	r1, r3
 800c152:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c156:	461a      	mov	r2, r3
 800c158:	f009 fa72 	bl	8015640 <memcpy>
    poly_ntt(&chat);
 800c15c:	f107 0310 	add.w	r3, r7, #16
 800c160:	4618      	mov	r0, r3
 800c162:	f7fc fda8 	bl	8008cb6 <poly_ntt>

    // z1[0]
    t = *c;
 800c166:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 800c16a:	f5a3 6281 	sub.w	r2, r3, #1032	@ 0x408
 800c16e:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 800c172:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	4610      	mov	r0, r2
 800c17a:	4619      	mov	r1, r3
 800c17c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c180:	461a      	mov	r2, r3
 800c182:	f009 fa5d 	bl	8015640 <memcpy>
    poly_cneg(&t, b & 1);
 800c186:	f897 3834 	ldrb.w	r3, [r7, #2100]	@ 0x834
 800c18a:	f003 0301 	and.w	r3, r3, #1
 800c18e:	b2da      	uxtb	r2, r3
 800c190:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800c194:	4611      	mov	r1, r2
 800c196:	4618      	mov	r0, r3
 800c198:	f7fb f9f3 	bl	8007582 <poly_cneg>
    polyfix_add(&z1->vec[0], &y1->vec[0], &t);
 800c19c:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 800c1a0:	f6a3 030c 	subw	r3, r3, #2060	@ 0x80c
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	f8d7 182c 	ldr.w	r1, [r7, #2092]	@ 0x82c
 800c1aa:	f507 6282 	add.w	r2, r7, #1040	@ 0x410
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f7fc ff66 	bl	8009080 <polyfix_add>

    // z1.vec[1..L-1]
    for (size_t column = 1; column < L; ++column) {
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	f8c7 3814 	str.w	r3, [r7, #2068]	@ 0x814
 800c1ba:	e039      	b.n	800c230 <compute_z_veckl+0x124>
        poly_pointwise_montgomery(&t, &chat, &s1->vec[column - 1]);
 800c1bc:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 800c1c0:	3b01      	subs	r3, #1
 800c1c2:	f607 0218 	addw	r2, r7, #2072	@ 0x818
 800c1c6:	f6a2 0218 	subw	r2, r2, #2072	@ 0x818
 800c1ca:	029b      	lsls	r3, r3, #10
 800c1cc:	6812      	ldr	r2, [r2, #0]
 800c1ce:	441a      	add	r2, r3
 800c1d0:	f107 0110 	add.w	r1, r7, #16
 800c1d4:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f7fb fa34 	bl	8007646 <poly_pointwise_montgomery>
        poly_invntt_tomont(&t);
 800c1de:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f7fc fd73 	bl	8008cce <poly_invntt_tomont>
        poly_cneg(&t, b & 1);
 800c1e8:	f897 3834 	ldrb.w	r3, [r7, #2100]	@ 0x834
 800c1ec:	f003 0301 	and.w	r3, r3, #1
 800c1f0:	b2da      	uxtb	r2, r3
 800c1f2:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800c1f6:	4611      	mov	r1, r2
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	f7fb f9c2 	bl	8007582 <poly_cneg>
        polyfix_add(&z1->vec[column], &y1->vec[column], &t);
 800c1fe:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 800c202:	f6a3 020c 	subw	r2, r3, #2060	@ 0x80c
 800c206:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 800c20a:	029b      	lsls	r3, r3, #10
 800c20c:	6812      	ldr	r2, [r2, #0]
 800c20e:	18d0      	adds	r0, r2, r3
 800c210:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 800c214:	029b      	lsls	r3, r3, #10
 800c216:	f8d7 282c 	ldr.w	r2, [r7, #2092]	@ 0x82c
 800c21a:	4413      	add	r3, r2
 800c21c:	f507 6282 	add.w	r2, r7, #1040	@ 0x410
 800c220:	4619      	mov	r1, r3
 800c222:	f7fc ff2d 	bl	8009080 <polyfix_add>
    for (size_t column = 1; column < L; ++column) {
 800c226:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 800c22a:	3301      	adds	r3, #1
 800c22c:	f8c7 3814 	str.w	r3, [r7, #2068]	@ 0x814
 800c230:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 800c234:	2b03      	cmp	r3, #3
 800c236:	d9c1      	bls.n	800c1bc <compute_z_veckl+0xb0>
    }

    // z2.vec[0..K-1]
    for (size_t row = 0; row < K; row++) {
 800c238:	2300      	movs	r3, #0
 800c23a:	f8c7 3810 	str.w	r3, [r7, #2064]	@ 0x810
 800c23e:	e035      	b.n	800c2ac <compute_z_veckl+0x1a0>
        poly_pointwise_montgomery(&t, &s2->vec[row], &chat);
 800c240:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 800c244:	029b      	lsls	r3, r3, #10
 800c246:	f8d7 2828 	ldr.w	r2, [r7, #2088]	@ 0x828
 800c24a:	18d1      	adds	r1, r2, r3
 800c24c:	f107 0210 	add.w	r2, r7, #16
 800c250:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800c254:	4618      	mov	r0, r3
 800c256:	f7fb f9f6 	bl	8007646 <poly_pointwise_montgomery>
        poly_invntt_tomont(&t);
 800c25a:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800c25e:	4618      	mov	r0, r3
 800c260:	f7fc fd35 	bl	8008cce <poly_invntt_tomont>
        poly_cneg(&t, b & 1);
 800c264:	f897 3834 	ldrb.w	r3, [r7, #2100]	@ 0x834
 800c268:	f003 0301 	and.w	r3, r3, #1
 800c26c:	b2da      	uxtb	r2, r3
 800c26e:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800c272:	4611      	mov	r1, r2
 800c274:	4618      	mov	r0, r3
 800c276:	f7fb f984 	bl	8007582 <poly_cneg>
        polyfix_add(&z2->vec[row], &y2->vec[row], &t);
 800c27a:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 800c27e:	f5a3 6201 	sub.w	r2, r3, #2064	@ 0x810
 800c282:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 800c286:	029b      	lsls	r3, r3, #10
 800c288:	6812      	ldr	r2, [r2, #0]
 800c28a:	18d0      	adds	r0, r2, r3
 800c28c:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 800c290:	029b      	lsls	r3, r3, #10
 800c292:	f8d7 2830 	ldr.w	r2, [r7, #2096]	@ 0x830
 800c296:	4413      	add	r3, r2
 800c298:	f507 6282 	add.w	r2, r7, #1040	@ 0x410
 800c29c:	4619      	mov	r1, r3
 800c29e:	f7fc feef 	bl	8009080 <polyfix_add>
    for (size_t row = 0; row < K; row++) {
 800c2a2:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	f8c7 3810 	str.w	r3, [r7, #2064]	@ 0x810
 800c2ac:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 800c2b0:	2b01      	cmp	r3, #1
 800c2b2:	d9c5      	bls.n	800c240 <compute_z_veckl+0x134>
    }
};
 800c2b4:	bf00      	nop
 800c2b6:	bf00      	nop
 800c2b8:	f607 071c 	addw	r7, r7, #2076	@ 0x81c
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd90      	pop	{r4, r7, pc}

0800c2c0 <is_norm_of_z_geq_big_b_prime>:
 * Arguments:   - polyfixvecl *z1:  part of the signature candidate
 *              - polyfixveck *z2:  part of the signature candidate
 *
 * Returns 0 if the test passed, 1 if the signature needs to be rejected.
 **************************************************/
static uint64_t is_norm_of_z_geq_big_b_prime(const polyfixvecl *z1, const polyfixveck *z2){
 800c2c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c2c4:	b084      	sub	sp, #16
 800c2c6:	af00      	add	r7, sp, #0
 800c2c8:	6078      	str	r0, [r7, #4]
 800c2ca:	6039      	str	r1, [r7, #0]
    uint64_t reject1;

    // reject if norm(z) >= B'
    reject1 = ((uint64_t)B1SQ * LN * LN - polyfixveclk_sqnorm2(z1, z2)) >> 63;
 800c2cc:	6839      	ldr	r1, [r7, #0]
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f7fc ffd8 	bl	8009284 <polyfixveclk_sqnorm2>
 800c2d4:	4602      	mov	r2, r0
 800c2d6:	460b      	mov	r3, r1
 800c2d8:	490e      	ldr	r1, [pc, #56]	@ (800c314 <is_norm_of_z_geq_big_b_prime+0x54>)
 800c2da:	f1d2 44e0 	rsbs	r4, r2, #1879048192	@ 0x70000000
 800c2de:	eb61 0503 	sbc.w	r5, r1, r3
 800c2e2:	f04f 0200 	mov.w	r2, #0
 800c2e6:	f04f 0300 	mov.w	r3, #0
 800c2ea:	0fea      	lsrs	r2, r5, #31
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	e9c7 2302 	strd	r2, r3, [r7, #8]
    reject1 &= 1;  // get the sign
 800c2f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c2f6:	f002 0801 	and.w	r8, r2, #1
 800c2fa:	f04f 0900 	mov.w	r9, #0
 800c2fe:	e9c7 8902 	strd	r8, r9, [r7, #8]
    return reject1;
 800c302:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
};
 800c306:	4610      	mov	r0, r2
 800c308:	4619      	mov	r1, r3
 800c30a:	3710      	adds	r7, #16
 800c30c:	46bd      	mov	sp, r7
 800c30e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c312:	bf00      	nop
 800c314:	0017148d 	.word	0x0017148d

0800c318 <is_rejected_in_intersection>:
 *              - uint8_t b:        a random byte for rejection in the overlap
 *                                  region using byte mask 0x02
 *
 * Returns 0 if the test passed, 1 if the signature needs to be rejected.
 **************************************************/
static uint64_t is_rejected_in_intersection(const polyfixvecl *z1, const polyfixveck *z2, const polyfixvecl *y1, const polyfixveck *y2, uint8_t b){
 800c318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c31c:	f2ad 4d44 	subw	sp, sp, #1092	@ 0x444
 800c320:	af00      	add	r7, sp, #0
 800c322:	f507 6488 	add.w	r4, r7, #1088	@ 0x440
 800c326:	f2a4 441c 	subw	r4, r4, #1052	@ 0x41c
 800c32a:	6020      	str	r0, [r4, #0]
 800c32c:	f507 6088 	add.w	r0, r7, #1088	@ 0x440
 800c330:	f5a0 6084 	sub.w	r0, r0, #1056	@ 0x420
 800c334:	6001      	str	r1, [r0, #0]
 800c336:	f507 6188 	add.w	r1, r7, #1088	@ 0x440
 800c33a:	f2a1 4124 	subw	r1, r1, #1060	@ 0x424
 800c33e:	600a      	str	r2, [r1, #0]
 800c340:	f507 6288 	add.w	r2, r7, #1088	@ 0x440
 800c344:	f5a2 6285 	sub.w	r2, r2, #1064	@ 0x428
 800c348:	6013      	str	r3, [r2, #0]
    polyfix tmp;
    uint64_t reject2;
    uint64_t sqnorm2 = - (uint64_t)B0SQ * LN * LN;
 800c34a:	a363      	add	r3, pc, #396	@ (adr r3, 800c4d8 <is_rejected_in_intersection+0x1c0>)
 800c34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c350:	f507 6187 	add.w	r1, r7, #1080	@ 0x438
 800c354:	e9c1 2300 	strd	r2, r3, [r1]

    for (size_t column = 0; column < L; column++){
 800c358:	2300      	movs	r3, #0
 800c35a:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
 800c35e:	e034      	b.n	800c3ca <is_rejected_in_intersection+0xb2>
        polyfix_double(&tmp, &z1->vec[column]);
 800c360:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 800c364:	f2a3 411c 	subw	r1, r3, #1052	@ 0x41c
 800c368:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 800c36c:	029a      	lsls	r2, r3, #10
 800c36e:	680b      	ldr	r3, [r1, #0]
 800c370:	4413      	add	r3, r2
 800c372:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800c376:	4619      	mov	r1, r3
 800c378:	4610      	mov	r0, r2
 800c37a:	f7fc ff23 	bl	80091c4 <polyfix_double>
        polyfix_sub(&tmp, &tmp, &y1->vec[column]);
 800c37e:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 800c382:	f2a3 4124 	subw	r1, r3, #1060	@ 0x424
 800c386:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 800c38a:	029a      	lsls	r2, r3, #10
 800c38c:	680b      	ldr	r3, [r1, #0]
 800c38e:	4413      	add	r3, r2
 800c390:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800c394:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800c398:	461a      	mov	r2, r3
 800c39a:	f7fc fe95 	bl	80090c8 <polyfix_sub>
        sqnorm2 += polyfix_sqnorm2(&tmp);
 800c39e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f7fc ff2c 	bl	8009200 <polyfix_sqnorm2>
 800c3a8:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800c3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b0:	eb12 0a00 	adds.w	sl, r2, r0
 800c3b4:	eb43 0b01 	adc.w	fp, r3, r1
 800c3b8:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800c3bc:	e9c3 ab00 	strd	sl, fp, [r3]
    for (size_t column = 0; column < L; column++){
 800c3c0:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 800c3c4:	3301      	adds	r3, #1
 800c3c6:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
 800c3ca:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 800c3ce:	2b03      	cmp	r3, #3
 800c3d0:	d9c6      	bls.n	800c360 <is_rejected_in_intersection+0x48>
    }

    for (size_t row = 0; row < K; row++){
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430
 800c3d8:	e036      	b.n	800c448 <is_rejected_in_intersection+0x130>
        polyfix_double(&tmp, &z2->vec[row]);
 800c3da:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 800c3de:	f5a3 6284 	sub.w	r2, r3, #1056	@ 0x420
 800c3e2:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 800c3e6:	029b      	lsls	r3, r3, #10
 800c3e8:	6812      	ldr	r2, [r2, #0]
 800c3ea:	441a      	add	r2, r3
 800c3ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c3f0:	4611      	mov	r1, r2
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f7fc fee6 	bl	80091c4 <polyfix_double>
        polyfix_sub(&tmp, &tmp, &y2->vec[row]);
 800c3f8:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 800c3fc:	f5a3 6285 	sub.w	r2, r3, #1064	@ 0x428
 800c400:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 800c404:	029b      	lsls	r3, r3, #10
 800c406:	6812      	ldr	r2, [r2, #0]
 800c408:	441a      	add	r2, r3
 800c40a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800c40e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c412:	4618      	mov	r0, r3
 800c414:	f7fc fe58 	bl	80090c8 <polyfix_sub>
        sqnorm2 += polyfix_sqnorm2(&tmp);
 800c418:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c41c:	4618      	mov	r0, r3
 800c41e:	f7fc feef 	bl	8009200 <polyfix_sqnorm2>
 800c422:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800c426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c42a:	1814      	adds	r4, r2, r0
 800c42c:	613c      	str	r4, [r7, #16]
 800c42e:	414b      	adcs	r3, r1
 800c430:	617b      	str	r3, [r7, #20]
 800c432:	f507 6287 	add.w	r2, r7, #1080	@ 0x438
 800c436:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c43a:	e9c2 3400 	strd	r3, r4, [r2]
    for (size_t row = 0; row < K; row++){
 800c43e:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 800c442:	3301      	adds	r3, #1
 800c444:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430
 800c448:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 800c44c:	2b01      	cmp	r3, #1
 800c44e:	d9c4      	bls.n	800c3da <is_rejected_in_intersection+0xc2>
    }

    // reject if norm(2z-y) < B and b' = 0
    reject2 = sqnorm2 >> 63;
 800c450:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800c454:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c458:	f04f 0200 	mov.w	r2, #0
 800c45c:	f04f 0300 	mov.w	r3, #0
 800c460:	0fca      	lsrs	r2, r1, #31
 800c462:	2300      	movs	r3, #0
 800c464:	f507 6185 	add.w	r1, r7, #1064	@ 0x428
 800c468:	e9c1 2300 	strd	r2, r3, [r1]
    reject2 &= 1; // get the sign, 1 indicates that the sample lies in the overlap region
 800c46c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800c470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c474:	f002 0301 	and.w	r3, r2, #1
 800c478:	60bb      	str	r3, [r7, #8]
 800c47a:	2300      	movs	r3, #0
 800c47c:	60fb      	str	r3, [r7, #12]
 800c47e:	f507 6285 	add.w	r2, r7, #1064	@ 0x428
 800c482:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c486:	e9c2 3400 	strd	r3, r4, [r2]
    reject2 &= (b & 0x2) >> 1;  // if sample is in the overlap region, reject with 50% probability
 800c48a:	f897 3468 	ldrb.w	r3, [r7, #1128]	@ 0x468
 800c48e:	105b      	asrs	r3, r3, #1
 800c490:	17da      	asrs	r2, r3, #31
 800c492:	4698      	mov	r8, r3
 800c494:	4691      	mov	r9, r2
 800c496:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800c49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c49e:	ea08 0502 	and.w	r5, r8, r2
 800c4a2:	ea09 0603 	and.w	r6, r9, r3
 800c4a6:	f005 0301 	and.w	r3, r5, #1
 800c4aa:	603b      	str	r3, [r7, #0]
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	607b      	str	r3, [r7, #4]
 800c4b0:	f507 6285 	add.w	r2, r7, #1064	@ 0x428
 800c4b4:	e9d7 3400 	ldrd	r3, r4, [r7]
 800c4b8:	e9c2 3400 	strd	r3, r4, [r2]
    return reject2;
 800c4bc:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800c4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 800c4c4:	4610      	mov	r0, r2
 800c4c6:	4619      	mov	r1, r3
 800c4c8:	f207 4744 	addw	r7, r7, #1092	@ 0x444
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4d2:	bf00      	nop
 800c4d4:	f3af 8000 	nop.w
 800c4d8:	4c000000 	.word	0x4c000000
 800c4dc:	ffe8e300 	.word	0xffe8e300

0800c4e0 <multiply_a1_by_rounded_y1_mod_q>:
 * Returns void
 **************************************************/
static void multiply_a1_by_rounded_y1_mod_q(poly *z1rnd0, 
                                            polyveck *Ay, 
                                            const polyfixvecl *y1, 
                                            uMatrixPointerL_frozen a1ptr){
 800c4e0:	b590      	push	{r4, r7, lr}
 800c4e2:	f6ad 0d24 	subw	sp, sp, #2084	@ 0x824
 800c4e6:	af00      	add	r7, sp, #0
 800c4e8:	f507 6402 	add.w	r4, r7, #2080	@ 0x820
 800c4ec:	f6a4 0414 	subw	r4, r4, #2068	@ 0x814
 800c4f0:	6020      	str	r0, [r4, #0]
 800c4f2:	f507 6002 	add.w	r0, r7, #2080	@ 0x820
 800c4f6:	f6a0 0018 	subw	r0, r0, #2072	@ 0x818
 800c4fa:	6001      	str	r1, [r0, #0]
 800c4fc:	f507 6102 	add.w	r1, r7, #2080	@ 0x820
 800c500:	f6a1 011c 	subw	r1, r1, #2076	@ 0x81c
 800c504:	600a      	str	r2, [r1, #0]
 800c506:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 800c50a:	f5a2 6202 	sub.w	r2, r2, #2080	@ 0x820
 800c50e:	6013      	str	r3, [r2, #0]
    poly_frozen a1_poly;
    poly_frozen *a1_poly_ptr = &a1_poly;
#endif /* ENABLE_SIGNATURE_MATRIX_BUFFER */


    polyfix_round(&z1rnd, &y1->vec[0]);
 800c510:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800c514:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 800c518:	681a      	ldr	r2, [r3, #0]
 800c51a:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800c51e:	4611      	mov	r1, r2
 800c520:	4618      	mov	r0, r3
 800c522:	f7fc fe12 	bl	800914a <polyfix_round>
    poly_clone(z1rnd0, &z1rnd);
 800c526:	f507 6282 	add.w	r2, r7, #1040	@ 0x410
 800c52a:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800c52e:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 800c532:	4611      	mov	r1, r2
 800c534:	6818      	ldr	r0, [r3, #0]
 800c536:	f7fa ffc1 	bl	80074bc <poly_clone>
    poly_ntt(&z1rnd);
 800c53a:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800c53e:	4618      	mov	r0, r3
 800c540:	f7fc fbb9 	bl	8008cb6 <poly_ntt>

    for (size_t row = 0; row < K; ++row) {
 800c544:	2300      	movs	r3, #0
 800c546:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
 800c54a:	e01f      	b.n	800c58c <multiply_a1_by_rounded_y1_mod_q+0xac>
#ifdef ENABLE_SIGNATURE_MATRIX_BUFFER
        a1_poly_ptr = &a1ptr.vec[row].vec[0];
 800c54c:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800c550:	f5a3 6302 	sub.w	r3, r3, #2080	@ 0x820
 800c554:	681a      	ldr	r2, [r3, #0]
 800c556:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800c55a:	02db      	lsls	r3, r3, #11
 800c55c:	4413      	add	r3, r2
 800c55e:	f8c7 3810 	str.w	r3, [r7, #2064]	@ 0x810
#else
        expand_pk_matrix_elem_frozen(a1_poly_ptr, row, 0, a1ptr.seed);
#endif /* ENABLE_SIGNATURE_MATRIX_BUFFER */
        poly_pointwise_montgomery_mixed(&Ay->vec[row], a1_poly_ptr, &z1rnd);
 800c562:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800c566:	f6a3 0218 	subw	r2, r3, #2072	@ 0x818
 800c56a:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800c56e:	029b      	lsls	r3, r3, #10
 800c570:	6812      	ldr	r2, [r2, #0]
 800c572:	4413      	add	r3, r2
 800c574:	f507 6282 	add.w	r2, r7, #1040	@ 0x410
 800c578:	f8d7 1810 	ldr.w	r1, [r7, #2064]	@ 0x810
 800c57c:	4618      	mov	r0, r3
 800c57e:	f7fb f898 	bl	80076b2 <poly_pointwise_montgomery_mixed>
    for (size_t row = 0; row < K; ++row) {
 800c582:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800c586:	3301      	adds	r3, #1
 800c588:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
 800c58c:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800c590:	2b01      	cmp	r3, #1
 800c592:	d9db      	bls.n	800c54c <multiply_a1_by_rounded_y1_mod_q+0x6c>
    }

    for (size_t column = 1; column < L; ++column) {
 800c594:	2301      	movs	r3, #1
 800c596:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818
 800c59a:	e054      	b.n	800c646 <multiply_a1_by_rounded_y1_mod_q+0x166>
        polyfix_round(&z1rnd, &y1->vec[column]);
 800c59c:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800c5a0:	f6a3 021c 	subw	r2, r3, #2076	@ 0x81c
 800c5a4:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 800c5a8:	029b      	lsls	r3, r3, #10
 800c5aa:	6812      	ldr	r2, [r2, #0]
 800c5ac:	441a      	add	r2, r3
 800c5ae:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800c5b2:	4611      	mov	r1, r2
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	f7fc fdc8 	bl	800914a <polyfix_round>
        poly_ntt(&z1rnd);
 800c5ba:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f7fc fb79 	bl	8008cb6 <poly_ntt>
        for (size_t row = 0; row < K; ++row) {
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	f8c7 3814 	str.w	r3, [r7, #2068]	@ 0x814
 800c5ca:	e033      	b.n	800c634 <multiply_a1_by_rounded_y1_mod_q+0x154>
#ifdef ENABLE_SIGNATURE_MATRIX_BUFFER
            a1_poly_ptr = &a1ptr.vec[row].vec[column];
 800c5cc:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800c5d0:	f5a3 6302 	sub.w	r3, r3, #2080	@ 0x820
 800c5d4:	681a      	ldr	r2, [r3, #0]
 800c5d6:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 800c5da:	02db      	lsls	r3, r3, #11
 800c5dc:	441a      	add	r2, r3
 800c5de:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 800c5e2:	025b      	lsls	r3, r3, #9
 800c5e4:	4413      	add	r3, r2
 800c5e6:	f8c7 3810 	str.w	r3, [r7, #2064]	@ 0x810
#else
            expand_pk_matrix_elem_frozen(a1_poly_ptr, row, column, a1ptr.seed);
#endif /* ENABLE_SIGNATURE_MATRIX_BUFFER */
            poly_pointwise_montgomery_mixed(&t, a1_poly_ptr, &z1rnd);
 800c5ea:	f507 6282 	add.w	r2, r7, #1040	@ 0x410
 800c5ee:	f107 0310 	add.w	r3, r7, #16
 800c5f2:	f8d7 1810 	ldr.w	r1, [r7, #2064]	@ 0x810
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f7fb f85b 	bl	80076b2 <poly_pointwise_montgomery_mixed>
            poly_add(&Ay->vec[row], &Ay->vec[row], &t);
 800c5fc:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800c600:	f6a3 0218 	subw	r2, r3, #2072	@ 0x818
 800c604:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 800c608:	029b      	lsls	r3, r3, #10
 800c60a:	6812      	ldr	r2, [r2, #0]
 800c60c:	18d0      	adds	r0, r2, r3
 800c60e:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800c612:	f6a3 0218 	subw	r2, r3, #2072	@ 0x818
 800c616:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 800c61a:	029b      	lsls	r3, r3, #10
 800c61c:	6812      	ldr	r2, [r2, #0]
 800c61e:	4413      	add	r3, r2
 800c620:	f107 0210 	add.w	r2, r7, #16
 800c624:	4619      	mov	r1, r3
 800c626:	f7fa ff66 	bl	80074f6 <poly_add>
        for (size_t row = 0; row < K; ++row) {
 800c62a:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 800c62e:	3301      	adds	r3, #1
 800c630:	f8c7 3814 	str.w	r3, [r7, #2068]	@ 0x814
 800c634:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 800c638:	2b01      	cmp	r3, #1
 800c63a:	d9c7      	bls.n	800c5cc <multiply_a1_by_rounded_y1_mod_q+0xec>
    for (size_t column = 1; column < L; ++column) {
 800c63c:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 800c640:	3301      	adds	r3, #1
 800c642:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818
 800c646:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 800c64a:	2b03      	cmp	r3, #3
 800c64c:	d9a6      	bls.n	800c59c <multiply_a1_by_rounded_y1_mod_q+0xbc>
        }
    }
    polyveck_invntt_tomont(Ay);
 800c64e:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800c652:	f6a3 0318 	subw	r3, r3, #2072	@ 0x818
 800c656:	6818      	ldr	r0, [r3, #0]
 800c658:	f7fd fb10 	bl	8009c7c <polyveck_invntt_tomont>
};
 800c65c:	bf00      	nop
 800c65e:	f607 0724 	addw	r7, r7, #2084	@ 0x824
 800c662:	46bd      	mov	sp, r7
 800c664:	bd90      	pop	{r4, r7, pc}

0800c666 <accumulate_two_times_rounded_y2_mod_q>:
 * Arguments:   - polyveck *Ay:     vector mod q
 *              - polyfixveck *y2:  part of the hyperball samples
 *
 * Returns void
 **************************************************/
static void accumulate_two_times_rounded_y2_mod_q(polyveck *Ay, const polyfixveck *y2){
 800c666:	b580      	push	{r7, lr}
 800c668:	f6ad 0d08 	subw	sp, sp, #2056	@ 0x808
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 800c672:	f6a3 0304 	subw	r3, r3, #2052	@ 0x804
 800c676:	6018      	str	r0, [r3, #0]
 800c678:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 800c67c:	f6a3 0308 	subw	r3, r3, #2056	@ 0x808
 800c680:	6019      	str	r1, [r3, #0]
	polyveck z2rnd;
    
    // Round y2
    polyfixveck_round(&z2rnd, y2);
 800c682:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 800c686:	f6a3 0308 	subw	r3, r3, #2056	@ 0x808
 800c68a:	f107 0208 	add.w	r2, r7, #8
 800c68e:	6819      	ldr	r1, [r3, #0]
 800c690:	4610      	mov	r0, r2
 800c692:	f7fc fd79 	bl	8009188 <polyfixveck_round>
    
    // Ay += 2 * round(y2) mod q
    polyveck_double(&z2rnd);
 800c696:	f107 0308 	add.w	r3, r7, #8
 800c69a:	4618      	mov	r0, r3
 800c69c:	f7fd fa2f 	bl	8009afe <polyveck_double>
    polyveck_add(Ay, Ay, &z2rnd);
 800c6a0:	f107 0208 	add.w	r2, r7, #8
 800c6a4:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 800c6a8:	f6a3 0104 	subw	r1, r3, #2052	@ 0x804
 800c6ac:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 800c6b0:	f6a3 0304 	subw	r3, r3, #2052	@ 0x804
 800c6b4:	6809      	ldr	r1, [r1, #0]
 800c6b6:	6818      	ldr	r0, [r3, #0]
 800c6b8:	f7fd f9fe 	bl	8009ab8 <polyveck_add>
}
 800c6bc:	bf00      	nop
 800c6be:	f607 0708 	addw	r7, r7, #2056	@ 0x808
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}

0800c6c6 <compute_challenge_polynomial>:
 *
 * Returns 0 (success)
 **************************************************/
static void compute_challenge_polynomial(poly *c, polyveck *Ay, polyveck *highbits, 
                                   const uMatrixPointerL_frozen a1ptr, const polyfixvecl *y1, 
                                   const polyfixveck *y2, const uint8_t mu[SEEDBYTES]){
 800c6c6:	b590      	push	{r4, r7, lr}
 800c6c8:	f6ad 2d74 	subw	sp, sp, #2676	@ 0xa74
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	f507 6427 	add.w	r4, r7, #2672	@ 0xa70
 800c6d2:	f6a4 2464 	subw	r4, r4, #2660	@ 0xa64
 800c6d6:	6020      	str	r0, [r4, #0]
 800c6d8:	f507 6027 	add.w	r0, r7, #2672	@ 0xa70
 800c6dc:	f6a0 2068 	subw	r0, r0, #2664	@ 0xa68
 800c6e0:	6001      	str	r1, [r0, #0]
 800c6e2:	f507 6127 	add.w	r1, r7, #2672	@ 0xa70
 800c6e6:	f6a1 216c 	subw	r1, r1, #2668	@ 0xa6c
 800c6ea:	600a      	str	r2, [r1, #0]
 800c6ec:	f507 6227 	add.w	r2, r7, #2672	@ 0xa70
 800c6f0:	f5a2 6227 	sub.w	r2, r2, #2672	@ 0xa70
 800c6f4:	6013      	str	r3, [r2, #0]
	uint8_t buf[POLYVECK_HIGHBITS_PACKEDBYTES + POLYC_PACKEDBYTES] = {0};
 800c6f6:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 800c6fa:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800c6fe:	2200      	movs	r2, #0
 800c700:	601a      	str	r2, [r3, #0]
 800c702:	3304      	adds	r3, #4
 800c704:	f44f 7217 	mov.w	r2, #604	@ 0x25c
 800c708:	2100      	movs	r1, #0
 800c70a:	4618      	mov	r0, r3
 800c70c:	f008 ff54 	bl	80155b8 <memset>
	poly z1rnd0;
	poly lsb;

    // A * round(y) mod q = A1 * round(y1) + 2 * round(y2) mod q
    multiply_a1_by_rounded_y1_mod_q(&z1rnd0, Ay, y1, a1ptr);
 800c710:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 800c714:	f5a3 6327 	sub.w	r3, r3, #2672	@ 0xa70
 800c718:	f507 6227 	add.w	r2, r7, #2672	@ 0xa70
 800c71c:	f6a2 2168 	subw	r1, r2, #2664	@ 0xa68
 800c720:	f507 6082 	add.w	r0, r7, #1040	@ 0x410
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	f8d7 2a80 	ldr.w	r2, [r7, #2688]	@ 0xa80
 800c72a:	6809      	ldr	r1, [r1, #0]
 800c72c:	f7ff fed8 	bl	800c4e0 <multiply_a1_by_rounded_y1_mod_q>
    accumulate_two_times_rounded_y2_mod_q(Ay, y2);
 800c730:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 800c734:	f6a3 2368 	subw	r3, r3, #2664	@ 0xa68
 800c738:	f8d7 1a84 	ldr.w	r1, [r7, #2692]	@ 0xa84
 800c73c:	6818      	ldr	r0, [r3, #0]
 800c73e:	f7ff ff92 	bl	800c666 <accumulate_two_times_rounded_y2_mod_q>

    // recover A * round(y) mod 2q
    polyveck_poly_fromcrt(Ay, Ay, &z1rnd0);
 800c742:	f507 6282 	add.w	r2, r7, #1040	@ 0x410
 800c746:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 800c74a:	f6a3 2168 	subw	r1, r3, #2664	@ 0xa68
 800c74e:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 800c752:	f6a3 2368 	subw	r3, r3, #2664	@ 0xa68
 800c756:	6809      	ldr	r1, [r1, #0]
 800c758:	6818      	ldr	r0, [r3, #0]
 800c75a:	f7fd fa02 	bl	8009b62 <polyveck_poly_fromcrt>
    polyveck_freeze2q(Ay);
 800c75e:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 800c762:	f6a3 2368 	subw	r3, r3, #2664	@ 0xa68
 800c766:	6818      	ldr	r0, [r3, #0]
 800c768:	f7fd f9e2 	bl	8009b30 <polyveck_freeze2q>

    // HighBits of (A * round(y) mod 2q)
    polyveck_highbits_hint(highbits, Ay);
 800c76c:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 800c770:	f6a3 2268 	subw	r2, r3, #2664	@ 0xa68
 800c774:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 800c778:	f6a3 236c 	subw	r3, r3, #2668	@ 0xa6c
 800c77c:	6811      	ldr	r1, [r2, #0]
 800c77e:	6818      	ldr	r0, [r3, #0]
 800c780:	f7fd fa14 	bl	8009bac <polyveck_highbits_hint>

    // LSB(round(y_0) * j)
    poly_lsb(&lsb, &z1rnd0);
 800c784:	f507 6282 	add.w	r2, r7, #1040	@ 0x410
 800c788:	f107 0310 	add.w	r3, r7, #16
 800c78c:	4611      	mov	r1, r2
 800c78e:	4618      	mov	r0, r3
 800c790:	f7fb f88a 	bl	80078a8 <poly_lsb>

    // Pack HighBits of A * round(y) mod 2q and LSB of round(y0)
    polyveck_pack_highbits(buf, highbits);
 800c794:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 800c798:	f6a3 236c 	subw	r3, r3, #2668	@ 0xa6c
 800c79c:	f507 6201 	add.w	r2, r7, #2064	@ 0x810
 800c7a0:	6819      	ldr	r1, [r3, #0]
 800c7a2:	4610      	mov	r0, r2
 800c7a4:	f7fd fa2f 	bl	8009c06 <polyveck_pack_highbits>
    poly_pack_lsb(buf + POLYVECK_HIGHBITS_PACKEDBYTES, &lsb);
 800c7a8:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 800c7ac:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800c7b0:	f107 0210 	add.w	r2, r7, #16
 800c7b4:	4611      	mov	r1, r2
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f7fb fcc0 	bl	800813c <poly_pack_lsb>

    // c = challenge(HighBits(A * y mod 2q), LSB(round(y0) * j), mu)
    poly_challenge(c, buf, mu);
 800c7bc:	f507 6101 	add.w	r1, r7, #2064	@ 0x810
 800c7c0:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 800c7c4:	f6a3 2364 	subw	r3, r3, #2660	@ 0xa64
 800c7c8:	f8d7 2a88 	ldr.w	r2, [r7, #2696]	@ 0xa88
 800c7cc:	6818      	ldr	r0, [r3, #0]
 800c7ce:	f7fb fa25 	bl	8007c1c <poly_challenge>

    return;
 800c7d2:	bf00      	nop
};
 800c7d4:	f607 2774 	addw	r7, r7, #2676	@ 0xa74
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd90      	pop	{r4, r7, pc}

0800c7dc <compress_and_pack_signature>:
    poly *c,
    const polyfixvecl *z1,
    const polyfixveck *z2,
    const polyveck *Ay,
    const polyveck *highbits
){
 800c7dc:	b590      	push	{r4, r7, lr}
 800c7de:	f5ad 5d20 	sub.w	sp, sp, #10240	@ 0x2800
 800c7e2:	b087      	sub	sp, #28
 800c7e4:	af02      	add	r7, sp, #8
 800c7e6:	f507 6401 	add.w	r4, r7, #2064	@ 0x810
 800c7ea:	f6a4 0404 	subw	r4, r4, #2052	@ 0x804
 800c7ee:	6020      	str	r0, [r4, #0]
 800c7f0:	f507 6001 	add.w	r0, r7, #2064	@ 0x810
 800c7f4:	f6a0 0008 	subw	r0, r0, #2056	@ 0x808
 800c7f8:	6001      	str	r1, [r0, #0]
 800c7fa:	f507 6101 	add.w	r1, r7, #2064	@ 0x810
 800c7fe:	f6a1 010c 	subw	r1, r1, #2060	@ 0x80c
 800c802:	600a      	str	r2, [r1, #0]
 800c804:	f507 6201 	add.w	r2, r7, #2064	@ 0x810
 800c808:	f5a2 6201 	sub.w	r2, r2, #2064	@ 0x810
 800c80c:	6013      	str	r3, [r2, #0]
    polyvecl hb_z1, lb_z1;
    polyveck h; 
    /*------------------- 4. Make a hint and decompose z1 -----------*/
    make_hint_veck(&h, z2, Ay, highbits);
 800c80e:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 800c812:	f5a3 6101 	sub.w	r1, r3, #2064	@ 0x810
 800c816:	f107 0010 	add.w	r0, r7, #16
 800c81a:	f507 5320 	add.w	r3, r7, #10240	@ 0x2800
 800c81e:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	f507 5220 	add.w	r2, r7, #10240	@ 0x2800
 800c828:	f102 0220 	add.w	r2, r2, #32
 800c82c:	6812      	ldr	r2, [r2, #0]
 800c82e:	6809      	ldr	r1, [r1, #0]
 800c830:	f7ff fb9a 	bl	800bf68 <make_hint_veck>
    decompose_z1_vecl(&lb_z1, &hb_z1, z1);
 800c834:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 800c838:	f6a3 030c 	subw	r3, r3, #2060	@ 0x80c
 800c83c:	f507 51c0 	add.w	r1, r7, #6144	@ 0x1800
 800c840:	f101 0110 	add.w	r1, r1, #16
 800c844:	f507 6001 	add.w	r0, r7, #2064	@ 0x810
 800c848:	681a      	ldr	r2, [r3, #0]
 800c84a:	f7ff fc0c 	bl	800c066 <decompose_z1_vecl>

    /*------------------ Pack signature -----------------------------*/
    if (pack_sig(sig, c, &lb_z1, &hb_z1, &h)) { // reject if signature is too big
 800c84e:	f507 54c0 	add.w	r4, r7, #6144	@ 0x1800
 800c852:	f104 0410 	add.w	r4, r4, #16
 800c856:	f507 6201 	add.w	r2, r7, #2064	@ 0x810
 800c85a:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 800c85e:	f6a3 0108 	subw	r1, r3, #2056	@ 0x808
 800c862:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 800c866:	f6a3 0004 	subw	r0, r3, #2052	@ 0x804
 800c86a:	f107 0310 	add.w	r3, r7, #16
 800c86e:	9300      	str	r3, [sp, #0]
 800c870:	4623      	mov	r3, r4
 800c872:	6809      	ldr	r1, [r1, #0]
 800c874:	6800      	ldr	r0, [r0, #0]
 800c876:	f7fa fc3f 	bl	80070f8 <pack_sig>
 800c87a:	4603      	mov	r3, r0
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d001      	beq.n	800c884 <compress_and_pack_signature+0xa8>
        return 1;
 800c880:	2301      	movs	r3, #1
 800c882:	e000      	b.n	800c886 <compress_and_pack_signature+0xaa>
    }
    return 0;
 800c884:	2300      	movs	r3, #0
}
 800c886:	4618      	mov	r0, r3
 800c888:	f507 5720 	add.w	r7, r7, #10240	@ 0x2800
 800c88c:	3714      	adds	r7, #20
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd90      	pop	{r4, r7, pc}

0800c892 <signature>:
 *
 * Returns 0 (success)
 **************************************************/

int crypto_sign_signature(uint8_t *sig, size_t *siglen, const uint8_t *m,
                          size_t mlen, const uint8_t *sk) {
 800c892:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c894:	f5ad 4dd1 	sub.w	sp, sp, #26752	@ 0x6880
 800c898:	b091      	sub	sp, #68	@ 0x44
 800c89a:	af04      	add	r7, sp, #16
 800c89c:	f507 660b 	add.w	r6, r7, #2224	@ 0x8b0
 800c8a0:	f6a6 06a4 	subw	r6, r6, #2212	@ 0x8a4
 800c8a4:	6030      	str	r0, [r6, #0]
 800c8a6:	f507 600b 	add.w	r0, r7, #2224	@ 0x8b0
 800c8aa:	f6a0 00a8 	subw	r0, r0, #2216	@ 0x8a8
 800c8ae:	6001      	str	r1, [r0, #0]
 800c8b0:	f507 610b 	add.w	r1, r7, #2224	@ 0x8b0
 800c8b4:	f6a1 01ac 	subw	r1, r1, #2220	@ 0x8ac
 800c8b8:	600a      	str	r2, [r1, #0]
 800c8ba:	f507 620b 	add.w	r2, r7, #2224	@ 0x8b0
 800c8be:	f5a2 620b 	sub.w	r2, r2, #2224	@ 0x8b0
 800c8c2:	6013      	str	r3, [r2, #0]

    uint8_t seedbuf[CRHBYTES] = {0}, key[SEEDBYTES] = {0};
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	f507 42d0 	add.w	r2, r7, #26624	@ 0x6800
 800c8ca:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 800c8ce:	6013      	str	r3, [r2, #0]
 800c8d0:	f507 43d0 	add.w	r3, r7, #26624	@ 0x6800
 800c8d4:	f103 035c 	add.w	r3, r3, #92	@ 0x5c
 800c8d8:	223c      	movs	r2, #60	@ 0x3c
 800c8da:	2100      	movs	r1, #0
 800c8dc:	4618      	mov	r0, r3
 800c8de:	f008 fe6b 	bl	80155b8 <memset>
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	f507 42d0 	add.w	r2, r7, #26624	@ 0x6800
 800c8e8:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 800c8ec:	6013      	str	r3, [r2, #0]
 800c8ee:	f507 43d0 	add.w	r3, r7, #26624	@ 0x6800
 800c8f2:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	601a      	str	r2, [r3, #0]
 800c8fa:	605a      	str	r2, [r3, #4]
 800c8fc:	609a      	str	r2, [r3, #8]
 800c8fe:	60da      	str	r2, [r3, #12]
 800c900:	611a      	str	r2, [r3, #16]
 800c902:	615a      	str	r2, [r3, #20]
 800c904:	619a      	str	r2, [r3, #24]
    uint8_t mu[SEEDBYTES] = {0};
 800c906:	2300      	movs	r3, #0
 800c908:	f507 42d0 	add.w	r2, r7, #26624	@ 0x6800
 800c90c:	f102 0218 	add.w	r2, r2, #24
 800c910:	6013      	str	r3, [r2, #0]
 800c912:	f507 43d0 	add.w	r3, r7, #26624	@ 0x6800
 800c916:	f103 031c 	add.w	r3, r3, #28
 800c91a:	2200      	movs	r2, #0
 800c91c:	601a      	str	r2, [r3, #0]
 800c91e:	605a      	str	r2, [r3, #4]
 800c920:	609a      	str	r2, [r3, #8]
 800c922:	60da      	str	r2, [r3, #12]
 800c924:	611a      	str	r2, [r3, #16]
 800c926:	615a      	str	r2, [r3, #20]
 800c928:	619a      	str	r2, [r3, #24]
    poly c = { .coeffs = {0} }; // challenge polynomial
 800c92a:	f507 43d1 	add.w	r3, r7, #26752	@ 0x6880
 800c92e:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800c932:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 800c936:	4618      	mov	r0, r3
 800c938:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c93c:	461a      	mov	r2, r3
 800c93e:	2100      	movs	r1, #0
 800c940:	f008 fe3a 	bl	80155b8 <memset>
    uint8_t b = 0;              // some random bits
 800c944:	f507 43d1 	add.w	r3, r7, #26752	@ 0x6880
 800c948:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800c94c:	f2a3 4399 	subw	r3, r3, #1177	@ 0x499
 800c950:	2200      	movs	r2, #0
 800c952:	701a      	strb	r2, [r3, #0]
    uint16_t counter = 0;
 800c954:	2300      	movs	r3, #0
 800c956:	f507 42d1 	add.w	r2, r7, #26752	@ 0x6880
 800c95a:	f102 022e 	add.w	r2, r2, #46	@ 0x2e
 800c95e:	8013      	strh	r3, [r2, #0]
    polyfixvecl y1, z1;
    polyfixveck y2, z2;

#ifdef ENABLE_SIGNATURE_MATRIX_BUFFER
    polyvecl_frozen A1[K];
    uMatrixPointerL_frozen a1ptr = { .vec = A1};
 800c960:	f507 630b 	add.w	r3, r7, #2224	@ 0x8b0
 800c964:	f5a3 620a 	sub.w	r2, r3, #2208	@ 0x8a0
 800c968:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800c96c:	3b1c      	subs	r3, #28
 800c96e:	6013      	str	r3, [r2, #0]
#else
    uMatrixPointerL_frozen a1ptr = { .seed = sk };
#endif /* ENABLE_SIGNATURE_MATRIX_BUFFER */

    // Unpack secret key
    unpack_sk(a1ptr.vec, &s1, &s2, key, sk);
 800c970:	f507 630b 	add.w	r3, r7, #2224	@ 0x8b0
 800c974:	f5a3 630a 	sub.w	r3, r3, #2208	@ 0x8a0
 800c978:	6818      	ldr	r0, [r3, #0]
 800c97a:	f507 46d0 	add.w	r6, r7, #26624	@ 0x6800
 800c97e:	f106 0638 	add.w	r6, r6, #56	@ 0x38
 800c982:	f507 42a0 	add.w	r2, r7, #20480	@ 0x5000
 800c986:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 800c98a:	3a1c      	subs	r2, #28
 800c98c:	f507 41b0 	add.w	r1, r7, #22528	@ 0x5800
 800c990:	f101 0130 	add.w	r1, r1, #48	@ 0x30
 800c994:	391c      	subs	r1, #28
 800c996:	f507 43d1 	add.w	r3, r7, #26752	@ 0x6880
 800c99a:	f103 0348 	add.w	r3, r3, #72	@ 0x48
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	9300      	str	r3, [sp, #0]
 800c9a2:	4633      	mov	r3, r6
 800c9a4:	f7fa fb44 	bl	8007030 <unpack_sk>

#ifndef ENABLE_SIGNATURE_MATRIX_BUFFER
#endif /* ENABLE_SIGNATURE_MATRIX_BUFFER */
    
    generate_seed_from_two_sources(mu, SEEDBYTES, sk, CRYPTO_PUBLICKEYBYTES, m, mlen);
 800c9a8:	f507 40d0 	add.w	r0, r7, #26624	@ 0x6800
 800c9ac:	f100 0018 	add.w	r0, r0, #24
 800c9b0:	f507 630b 	add.w	r3, r7, #2224	@ 0x8b0
 800c9b4:	f5a3 630b 	sub.w	r3, r3, #2224	@ 0x8b0
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	9301      	str	r3, [sp, #4]
 800c9bc:	f507 630b 	add.w	r3, r7, #2224	@ 0x8b0
 800c9c0:	f6a3 03ac 	subw	r3, r3, #2220	@ 0x8ac
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	9300      	str	r3, [sp, #0]
 800c9c8:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 800c9cc:	f507 42d1 	add.w	r2, r7, #26752	@ 0x6880
 800c9d0:	f102 0248 	add.w	r2, r2, #72	@ 0x48
 800c9d4:	6812      	ldr	r2, [r2, #0]
 800c9d6:	2120      	movs	r1, #32
 800c9d8:	f7fe ff19 	bl	800b80e <generate_seed_from_two_sources>
    generate_seed_from_two_sources(seedbuf, CRHBYTES, key, SEEDBYTES, mu, SEEDBYTES);
 800c9dc:	f507 42d0 	add.w	r2, r7, #26624	@ 0x6800
 800c9e0:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 800c9e4:	f507 40d0 	add.w	r0, r7, #26624	@ 0x6800
 800c9e8:	f100 0058 	add.w	r0, r0, #88	@ 0x58
 800c9ec:	2320      	movs	r3, #32
 800c9ee:	9301      	str	r3, [sp, #4]
 800c9f0:	f507 43d0 	add.w	r3, r7, #26624	@ 0x6800
 800c9f4:	f103 0318 	add.w	r3, r3, #24
 800c9f8:	9300      	str	r3, [sp, #0]
 800c9fa:	2320      	movs	r3, #32
 800c9fc:	2140      	movs	r1, #64	@ 0x40
 800c9fe:	f7fe ff06 	bl	800b80e <generate_seed_from_two_sources>

    polyvecm_ntt(&s1);
 800ca02:	f507 43b0 	add.w	r3, r7, #22528	@ 0x5800
 800ca06:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800ca0a:	3b1c      	subs	r3, #28
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	f7fd f9e4 	bl	8009dda <polyvecm_ntt>
    polyveck_ntt(&s2);
 800ca12:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 800ca16:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800ca1a:	3b1c      	subs	r3, #28
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	f7fd f914 	bl	8009c4a <polyveck_ntt>
 800ca22:	e002      	b.n	800ca2a <signature+0x198>
    compute_z_veckl(&z1, &z2, &c, &s1, &s2, &y1, &y2, b);

    reject1 = is_norm_of_z_geq_big_b_prime(&z1, &z2);
    reject2 = is_rejected_in_intersection(&z1, &z2, &y1, &y2, b);
    if (reject1 | reject2) {
        goto reject;
 800ca24:	bf00      	nop
 800ca26:	e000      	b.n	800ca2a <signature+0x198>
    }

    /*------------------- 4. Make a hint and decompose z1 -----------*/
    /*------------------ Pack signature -----------------------------*/
    if (0 != compress_and_pack_signature(sig, &c, &z1, &z2, &Ay, &highbits)) 
        goto reject;
 800ca28:	bf00      	nop
    counter = polyfixveclk_sample_hyperball(&y1, &y2, &b, seedbuf, counter);
 800ca2a:	f507 46d0 	add.w	r6, r7, #26624	@ 0x6800
 800ca2e:	f106 0658 	add.w	r6, r6, #88	@ 0x58
 800ca32:	f507 42c8 	add.w	r2, r7, #25600	@ 0x6400
 800ca36:	f102 0217 	add.w	r2, r2, #23
 800ca3a:	f507 51c1 	add.w	r1, r7, #6176	@ 0x1820
 800ca3e:	f101 0110 	add.w	r1, r1, #16
 800ca42:	391c      	subs	r1, #28
 800ca44:	f507 5040 	add.w	r0, r7, #12288	@ 0x3000
 800ca48:	f100 0030 	add.w	r0, r0, #48	@ 0x30
 800ca4c:	381c      	subs	r0, #28
 800ca4e:	f507 43d1 	add.w	r3, r7, #26752	@ 0x6880
 800ca52:	f103 032e 	add.w	r3, r3, #46	@ 0x2e
 800ca56:	881b      	ldrh	r3, [r3, #0]
 800ca58:	9300      	str	r3, [sp, #0]
 800ca5a:	4633      	mov	r3, r6
 800ca5c:	f7fc fc56 	bl	800930c <polyfixveclk_sample_hyperball>
 800ca60:	4603      	mov	r3, r0
 800ca62:	f507 42d1 	add.w	r2, r7, #26752	@ 0x6880
 800ca66:	f102 022e 	add.w	r2, r2, #46	@ 0x2e
 800ca6a:	8013      	strh	r3, [r2, #0]
    compute_challenge_polynomial(&c, &Ay, &highbits, a1ptr, &y1, &y2, mu);
 800ca6c:	f507 630b 	add.w	r3, r7, #2224	@ 0x8b0
 800ca70:	f5a3 600a 	sub.w	r0, r3, #2208	@ 0x8a0
 800ca74:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 800ca78:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 800ca7c:	3a1c      	subs	r2, #28
 800ca7e:	f507 4180 	add.w	r1, r7, #16384	@ 0x4000
 800ca82:	f101 0130 	add.w	r1, r1, #48	@ 0x30
 800ca86:	391c      	subs	r1, #28
 800ca88:	f507 46c8 	add.w	r6, r7, #25600	@ 0x6400
 800ca8c:	f106 0618 	add.w	r6, r6, #24
 800ca90:	f507 43d0 	add.w	r3, r7, #26624	@ 0x6800
 800ca94:	f103 0318 	add.w	r3, r3, #24
 800ca98:	9302      	str	r3, [sp, #8]
 800ca9a:	f507 53c1 	add.w	r3, r7, #6176	@ 0x1820
 800ca9e:	f103 0310 	add.w	r3, r3, #16
 800caa2:	3b1c      	subs	r3, #28
 800caa4:	9301      	str	r3, [sp, #4]
 800caa6:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 800caaa:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800caae:	3b1c      	subs	r3, #28
 800cab0:	9300      	str	r3, [sp, #0]
 800cab2:	6803      	ldr	r3, [r0, #0]
 800cab4:	4630      	mov	r0, r6
 800cab6:	f7ff fe06 	bl	800c6c6 <compute_challenge_polynomial>
    compute_z_veckl(&z1, &z2, &c, &s1, &s2, &y1, &y2, b);
 800caba:	f507 43d1 	add.w	r3, r7, #26752	@ 0x6880
 800cabe:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800cac2:	f2a3 4399 	subw	r3, r3, #1177	@ 0x499
 800cac6:	781b      	ldrb	r3, [r3, #0]
 800cac8:	f507 42b0 	add.w	r2, r7, #22528	@ 0x5800
 800cacc:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 800cad0:	3a1c      	subs	r2, #28
 800cad2:	f507 46c8 	add.w	r6, r7, #25600	@ 0x6400
 800cad6:	f106 0618 	add.w	r6, r6, #24
 800cada:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 800cade:	f101 0110 	add.w	r1, r1, #16
 800cae2:	391c      	subs	r1, #28
 800cae4:	f507 5000 	add.w	r0, r7, #8192	@ 0x2000
 800cae8:	f100 0030 	add.w	r0, r0, #48	@ 0x30
 800caec:	381c      	subs	r0, #28
 800caee:	9303      	str	r3, [sp, #12]
 800caf0:	f507 53c1 	add.w	r3, r7, #6176	@ 0x1820
 800caf4:	f103 0310 	add.w	r3, r3, #16
 800caf8:	3b1c      	subs	r3, #28
 800cafa:	9302      	str	r3, [sp, #8]
 800cafc:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 800cb00:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800cb04:	3b1c      	subs	r3, #28
 800cb06:	9301      	str	r3, [sp, #4]
 800cb08:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 800cb0c:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800cb10:	3b1c      	subs	r3, #28
 800cb12:	9300      	str	r3, [sp, #0]
 800cb14:	4613      	mov	r3, r2
 800cb16:	4632      	mov	r2, r6
 800cb18:	f7ff faf8 	bl	800c10c <compute_z_veckl>
    reject1 = is_norm_of_z_geq_big_b_prime(&z1, &z2);
 800cb1c:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800cb20:	f102 0210 	add.w	r2, r2, #16
 800cb24:	3a1c      	subs	r2, #28
 800cb26:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 800cb2a:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800cb2e:	3b1c      	subs	r3, #28
 800cb30:	4611      	mov	r1, r2
 800cb32:	4618      	mov	r0, r3
 800cb34:	f7ff fbc4 	bl	800c2c0 <is_norm_of_z_geq_big_b_prime>
 800cb38:	f507 43d1 	add.w	r3, r7, #26752	@ 0x6880
 800cb3c:	f103 0320 	add.w	r3, r3, #32
 800cb40:	e9c3 0100 	strd	r0, r1, [r3]
    reject2 = is_rejected_in_intersection(&z1, &z2, &y1, &y2, b);
 800cb44:	f507 43d1 	add.w	r3, r7, #26752	@ 0x6880
 800cb48:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800cb4c:	f2a3 4399 	subw	r3, r3, #1177	@ 0x499
 800cb50:	781e      	ldrb	r6, [r3, #0]
 800cb52:	f507 53c1 	add.w	r3, r7, #6176	@ 0x1820
 800cb56:	f103 0310 	add.w	r3, r3, #16
 800cb5a:	3b1c      	subs	r3, #28
 800cb5c:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 800cb60:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 800cb64:	3a1c      	subs	r2, #28
 800cb66:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 800cb6a:	f101 0110 	add.w	r1, r1, #16
 800cb6e:	391c      	subs	r1, #28
 800cb70:	f507 5000 	add.w	r0, r7, #8192	@ 0x2000
 800cb74:	f100 0030 	add.w	r0, r0, #48	@ 0x30
 800cb78:	381c      	subs	r0, #28
 800cb7a:	9600      	str	r6, [sp, #0]
 800cb7c:	f7ff fbcc 	bl	800c318 <is_rejected_in_intersection>
 800cb80:	f507 43d1 	add.w	r3, r7, #26752	@ 0x6880
 800cb84:	f103 0318 	add.w	r3, r3, #24
 800cb88:	e9c3 0100 	strd	r0, r1, [r3]
    if (reject1 | reject2) {
 800cb8c:	f507 43d1 	add.w	r3, r7, #26752	@ 0x6880
 800cb90:	f103 0320 	add.w	r3, r3, #32
 800cb94:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cb98:	f507 43d1 	add.w	r3, r7, #26752	@ 0x6880
 800cb9c:	f103 0318 	add.w	r3, r3, #24
 800cba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba4:	ea40 0402 	orr.w	r4, r0, r2
 800cba8:	ea41 0503 	orr.w	r5, r1, r3
 800cbac:	ea54 0305 	orrs.w	r3, r4, r5
 800cbb0:	f47f af38 	bne.w	800ca24 <signature+0x192>
    if (0 != compress_and_pack_signature(sig, &c, &z1, &z2, &Ay, &highbits)) 
 800cbb4:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 800cbb8:	f101 0110 	add.w	r1, r1, #16
 800cbbc:	391c      	subs	r1, #28
 800cbbe:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 800cbc2:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 800cbc6:	3a1c      	subs	r2, #28
 800cbc8:	f507 46c8 	add.w	r6, r7, #25600	@ 0x6400
 800cbcc:	f106 0618 	add.w	r6, r6, #24
 800cbd0:	f507 630b 	add.w	r3, r7, #2224	@ 0x8b0
 800cbd4:	f6a3 00a4 	subw	r0, r3, #2212	@ 0x8a4
 800cbd8:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 800cbdc:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800cbe0:	3b1c      	subs	r3, #28
 800cbe2:	9301      	str	r3, [sp, #4]
 800cbe4:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 800cbe8:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800cbec:	3b1c      	subs	r3, #28
 800cbee:	9300      	str	r3, [sp, #0]
 800cbf0:	460b      	mov	r3, r1
 800cbf2:	4631      	mov	r1, r6
 800cbf4:	6800      	ldr	r0, [r0, #0]
 800cbf6:	f7ff fdf1 	bl	800c7dc <compress_and_pack_signature>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	f47f af13 	bne.w	800ca28 <signature+0x196>
    *siglen = CRYPTO_BYTES;
 800cc02:	f507 630b 	add.w	r3, r7, #2224	@ 0x8b0
 800cc06:	f6a3 03a8 	subw	r3, r3, #2216	@ 0x8a8
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	f240 52c2 	movw	r2, #1474	@ 0x5c2
 800cc10:	601a      	str	r2, [r3, #0]

    return 0;
 800cc12:	2300      	movs	r3, #0
}
 800cc14:	4618      	mov	r0, r3
 800cc16:	f507 47d1 	add.w	r7, r7, #26752	@ 0x6880
 800cc1a:	3734      	adds	r7, #52	@ 0x34
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cc20 <unpack_cseed_z1_and_hint_from_sig>:
// ###################################################################
// ###################################################################
// ###################################################################

static int unpack_cseed_z1_and_hint_from_sig(poly *c, polyvecl *z1, 
               polyveck *h, const uint8_t sig[CRYPTO_BYTES]){
 800cc20:	b590      	push	{r4, r7, lr}
 800cc22:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 800cc26:	b081      	sub	sp, #4
 800cc28:	af02      	add	r7, sp, #8
 800cc2a:	f107 0418 	add.w	r4, r7, #24
 800cc2e:	f844 0c0c 	str.w	r0, [r4, #-12]
 800cc32:	f107 0018 	add.w	r0, r7, #24
 800cc36:	f840 1c10 	str.w	r1, [r0, #-16]
 800cc3a:	f107 0118 	add.w	r1, r7, #24
 800cc3e:	f841 2c14 	str.w	r2, [r1, #-20]
 800cc42:	f107 0218 	add.w	r2, r7, #24
 800cc46:	f842 3c18 	str.w	r3, [r2, #-24]
    polyvecl highbits_z1;

    // Unpack signature and Check conditions -- low bits are stored in z1
    if (unpack_sig(c, &highbits_z1, z1, h, sig)) {
 800cc4a:	f107 0318 	add.w	r3, r7, #24
 800cc4e:	461c      	mov	r4, r3
 800cc50:	f107 0318 	add.w	r3, r7, #24
 800cc54:	461a      	mov	r2, r3
 800cc56:	f107 0118 	add.w	r1, r7, #24
 800cc5a:	3904      	subs	r1, #4
 800cc5c:	f107 0318 	add.w	r3, r7, #24
 800cc60:	4618      	mov	r0, r3
 800cc62:	f107 0318 	add.w	r3, r7, #24
 800cc66:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800cc6a:	9300      	str	r3, [sp, #0]
 800cc6c:	f854 3c14 	ldr.w	r3, [r4, #-20]
 800cc70:	f852 2c10 	ldr.w	r2, [r2, #-16]
 800cc74:	f850 0c0c 	ldr.w	r0, [r0, #-12]
 800cc78:	f7fa fb6e 	bl	8007358 <unpack_sig>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d002      	beq.n	800cc88 <unpack_cseed_z1_and_hint_from_sig+0x68>
        return -1;
 800cc82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cc86:	e03e      	b.n	800cd06 <unpack_cseed_z1_and_hint_from_sig+0xe6>
    }

    // Compose z1 out of HighBits(z1) and LowBits(z1)
    for (size_t row = 0; row < L; ++row) {
 800cc88:	2300      	movs	r3, #0
 800cc8a:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800cc8e:	f102 0214 	add.w	r2, r2, #20
 800cc92:	6013      	str	r3, [r2, #0]
 800cc94:	e02f      	b.n	800ccf6 <unpack_cseed_z1_and_hint_from_sig+0xd6>
        poly_compose(&z1->vec[row], &z1->vec[row], &highbits_z1.vec[row]);
 800cc96:	f107 0318 	add.w	r3, r7, #24
 800cc9a:	461a      	mov	r2, r3
 800cc9c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800cca0:	f103 0314 	add.w	r3, r3, #20
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	029b      	lsls	r3, r3, #10
 800cca8:	f852 2c10 	ldr.w	r2, [r2, #-16]
 800ccac:	18d0      	adds	r0, r2, r3
 800ccae:	f107 0318 	add.w	r3, r7, #24
 800ccb2:	461a      	mov	r2, r3
 800ccb4:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800ccb8:	f103 0314 	add.w	r3, r3, #20
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	029b      	lsls	r3, r3, #10
 800ccc0:	f852 2c10 	ldr.w	r2, [r2, #-16]
 800ccc4:	18d1      	adds	r1, r2, r3
 800ccc6:	f107 0318 	add.w	r3, r7, #24
 800ccca:	3b04      	subs	r3, #4
 800cccc:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800ccd0:	f102 0214 	add.w	r2, r2, #20
 800ccd4:	6812      	ldr	r2, [r2, #0]
 800ccd6:	0292      	lsls	r2, r2, #10
 800ccd8:	4413      	add	r3, r2
 800ccda:	461a      	mov	r2, r3
 800ccdc:	f7fa fdbe 	bl	800785c <poly_compose>
    for (size_t row = 0; row < L; ++row) {
 800cce0:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800cce4:	f103 0314 	add.w	r3, r3, #20
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	3301      	adds	r3, #1
 800ccec:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800ccf0:	f102 0214 	add.w	r2, r2, #20
 800ccf4:	6013      	str	r3, [r2, #0]
 800ccf6:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800ccfa:	f103 0314 	add.w	r3, r3, #20
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	2b03      	cmp	r3, #3
 800cd02:	d9c8      	bls.n	800cc96 <unpack_cseed_z1_and_hint_from_sig+0x76>
    }
    return 0;
 800cd04:	2300      	movs	r3, #0
}
 800cd06:	4618      	mov	r0, r3
 800cd08:	f507 5780 	add.w	r7, r7, #4096	@ 0x1000
 800cd0c:	371c      	adds	r7, #28
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd90      	pop	{r4, r7, pc}

0800cd12 <poly_csubDQ2ALPHA>:

static void poly_csubDQ2ALPHA(poly *v) {
 800cd12:	b480      	push	{r7}
 800cd14:	b085      	sub	sp, #20
 800cd16:	af00      	add	r7, sp, #0
 800cd18:	6078      	str	r0, [r7, #4]
    unsigned int j;
    for (j = 0; j < N; j++) {
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	60fb      	str	r3, [r7, #12]
 800cd1e:	e014      	b.n	800cd4a <poly_csubDQ2ALPHA+0x38>
        v->coeffs[j] -=
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	68fa      	ldr	r2, [r7, #12]
 800cd24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
            ~((v->coeffs[j] - (DQ - 2) / ALPHA_HINT) >> 31) &
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	68f9      	ldr	r1, [r7, #12]
 800cd2c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cd30:	3bfc      	subs	r3, #252	@ 0xfc
 800cd32:	17db      	asrs	r3, r3, #31
 800cd34:	43db      	mvns	r3, r3
 800cd36:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
        v->coeffs[j] -=
 800cd3a:	1ad1      	subs	r1, r2, r3
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	68fa      	ldr	r2, [r7, #12]
 800cd40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (j = 0; j < N; j++) {
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	3301      	adds	r3, #1
 800cd48:	60fb      	str	r3, [r7, #12]
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	2bff      	cmp	r3, #255	@ 0xff
 800cd4e:	d9e7      	bls.n	800cd20 <poly_csubDQ2ALPHA+0xe>
            ((DQ - 2) / ALPHA_HINT);
    }
}
 800cd50:	bf00      	nop
 800cd52:	bf00      	nop
 800cd54:	3714      	adds	r7, #20
 800cd56:	46bd      	mov	sp, r7
 800cd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5c:	4770      	bx	lr

0800cd5e <poly_mul_alpha>:

static void poly_mul_alpha(poly *v, const poly *u) {
 800cd5e:	b480      	push	{r7}
 800cd60:	b085      	sub	sp, #20
 800cd62:	af00      	add	r7, sp, #0
 800cd64:	6078      	str	r0, [r7, #4]
 800cd66:	6039      	str	r1, [r7, #0]
    unsigned int j;
    for (j = 0; j < N; j++) {
 800cd68:	2300      	movs	r3, #0
 800cd6a:	60fb      	str	r3, [r7, #12]
 800cd6c:	e00b      	b.n	800cd86 <poly_mul_alpha+0x28>
        v->coeffs[j] = u->coeffs[j] * ALPHA_HINT;
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	68fa      	ldr	r2, [r7, #12]
 800cd72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd76:	0259      	lsls	r1, r3, #9
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	68fa      	ldr	r2, [r7, #12]
 800cd7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (j = 0; j < N; j++) {
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	3301      	adds	r3, #1
 800cd84:	60fb      	str	r3, [r7, #12]
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	2bff      	cmp	r3, #255	@ 0xff
 800cd8a:	d9f0      	bls.n	800cd6e <poly_mul_alpha+0x10>
    }
}
 800cd8c:	bf00      	nop
 800cd8e:	bf00      	nop
 800cd90:	3714      	adds	r7, #20
 800cd92:	46bd      	mov	sp, r7
 800cd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd98:	4770      	bx	lr

0800cd9a <poly_div2>:

static void poly_div2(poly *v) {
 800cd9a:	b480      	push	{r7}
 800cd9c:	b085      	sub	sp, #20
 800cd9e:	af00      	add	r7, sp, #0
 800cda0:	6078      	str	r0, [r7, #4]
    unsigned j;
        for (j = 0; j < N; ++j)
 800cda2:	2300      	movs	r3, #0
 800cda4:	60fb      	str	r3, [r7, #12]
 800cda6:	e00b      	b.n	800cdc0 <poly_div2+0x26>
            v->coeffs[j] >>= 1;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	68fa      	ldr	r2, [r7, #12]
 800cdac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdb0:	1059      	asrs	r1, r3, #1
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	68fa      	ldr	r2, [r7, #12]
 800cdb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (j = 0; j < N; ++j)
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	3301      	adds	r3, #1
 800cdbe:	60fb      	str	r3, [r7, #12]
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	2bff      	cmp	r3, #255	@ 0xff
 800cdc4:	d9f0      	bls.n	800cda8 <poly_div2+0xe>
}
 800cdc6:	bf00      	nop
 800cdc8:	bf00      	nop
 800cdca:	3714      	adds	r7, #20
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd2:	4770      	bx	lr

0800cdd4 <verify>:
 *              - const uint8_t *pk: pointer to bit-packed public key
 *
 * Returns 0 if signature could be verified correctly and -1 otherwise
 **************************************************/
int crypto_sign_verify(const uint8_t *sig, size_t siglen, const uint8_t *m,
                       size_t mlen, const uint8_t *pk) {
 800cdd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdd6:	f5ad 4d99 	sub.w	sp, sp, #19584	@ 0x4c80
 800cdda:	b09b      	sub	sp, #108	@ 0x6c
 800cddc:	af02      	add	r7, sp, #8
 800cdde:	f507 664e 	add.w	r6, r7, #3296	@ 0xce0
 800cde2:	f6a6 46d4 	subw	r6, r6, #3284	@ 0xcd4
 800cde6:	6030      	str	r0, [r6, #0]
 800cde8:	f507 604e 	add.w	r0, r7, #3296	@ 0xce0
 800cdec:	f6a0 40d8 	subw	r0, r0, #3288	@ 0xcd8
 800cdf0:	6001      	str	r1, [r0, #0]
 800cdf2:	f507 614e 	add.w	r1, r7, #3296	@ 0xce0
 800cdf6:	f6a1 41dc 	subw	r1, r1, #3292	@ 0xcdc
 800cdfa:	600a      	str	r2, [r1, #0]
 800cdfc:	f507 624e 	add.w	r2, r7, #3296	@ 0xce0
 800ce00:	f5a2 624e 	sub.w	r2, r2, #3296	@ 0xce0
 800ce04:	6013      	str	r3, [r2, #0]
    unsigned int i;
    uint8_t buf[POLYVECK_HIGHBITS_PACKEDBYTES + POLYC_PACKEDBYTES] = {0};
 800ce06:	f507 4399 	add.w	r3, r7, #19584	@ 0x4c80
 800ce0a:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 800ce0e:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 800ce12:	2200      	movs	r2, #0
 800ce14:	601a      	str	r2, [r3, #0]
 800ce16:	3304      	adds	r3, #4
 800ce18:	f44f 7217 	mov.w	r2, #604	@ 0x25c
 800ce1c:	2100      	movs	r1, #0
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f008 fbca 	bl	80155b8 <memset>
    uint8_t rhoprime[SEEDBYTES] = {0};
 800ce24:	f507 4399 	add.w	r3, r7, #19584	@ 0x4c80
 800ce28:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 800ce2c:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 800ce30:	2200      	movs	r2, #0
 800ce32:	601a      	str	r2, [r3, #0]
 800ce34:	3304      	adds	r3, #4
 800ce36:	2200      	movs	r2, #0
 800ce38:	601a      	str	r2, [r3, #0]
 800ce3a:	605a      	str	r2, [r3, #4]
 800ce3c:	609a      	str	r2, [r3, #8]
 800ce3e:	60da      	str	r2, [r3, #12]
 800ce40:	611a      	str	r2, [r3, #16]
 800ce42:	615a      	str	r2, [r3, #20]
 800ce44:	619a      	str	r2, [r3, #24]
    uint8_t mu[SEEDBYTES] = {0};
 800ce46:	f507 4399 	add.w	r3, r7, #19584	@ 0x4c80
 800ce4a:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 800ce4e:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 800ce52:	2200      	movs	r2, #0
 800ce54:	601a      	str	r2, [r3, #0]
 800ce56:	3304      	adds	r3, #4
 800ce58:	2200      	movs	r2, #0
 800ce5a:	601a      	str	r2, [r3, #0]
 800ce5c:	605a      	str	r2, [r3, #4]
 800ce5e:	609a      	str	r2, [r3, #8]
 800ce60:	60da      	str	r2, [r3, #12]
 800ce62:	611a      	str	r2, [r3, #16]
 800ce64:	615a      	str	r2, [r3, #20]
 800ce66:	619a      	str	r2, [r3, #24]
    poly c;
    poly cprime;
    poly wprime;

    // Check signature length
    if (siglen != CRYPTO_BYTES) {
 800ce68:	f507 634e 	add.w	r3, r7, #3296	@ 0xce0
 800ce6c:	f6a3 43d8 	subw	r3, r3, #3288	@ 0xcd8
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	f240 52c2 	movw	r2, #1474	@ 0x5c2
 800ce76:	4293      	cmp	r3, r2
 800ce78:	d002      	beq.n	800ce80 <verify+0xac>
        return -1;
 800ce7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ce7e:	e299      	b.n	800d3b4 <verify+0x5e0>
    }

    // Unpack public key
    unpack_pk(&b, rhoprime, pk);
 800ce80:	f507 4194 	add.w	r1, r7, #18944	@ 0x4a00
 800ce84:	f101 0130 	add.w	r1, r1, #48	@ 0x30
 800ce88:	f507 5348 	add.w	r3, r7, #12800	@ 0x3200
 800ce8c:	f103 0320 	add.w	r3, r3, #32
 800ce90:	3b10      	subs	r3, #16
 800ce92:	f507 4299 	add.w	r2, r7, #19584	@ 0x4c80
 800ce96:	f102 0278 	add.w	r2, r2, #120	@ 0x78
 800ce9a:	6812      	ldr	r2, [r2, #0]
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f7fa f850 	bl	8006f42 <unpack_pk>
    unpack_cseed_z1_and_hint_from_sig(&c, &z1, &h, sig);
 800cea2:	f507 634e 	add.w	r3, r7, #3296	@ 0xce0
 800cea6:	f6a3 43d4 	subw	r3, r3, #3284	@ 0xcd4
 800ceaa:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 800ceae:	f102 0220 	add.w	r2, r2, #32
 800ceb2:	3a10      	subs	r2, #16
 800ceb4:	f507 5168 	add.w	r1, r7, #14848	@ 0x3a00
 800ceb8:	f101 0120 	add.w	r1, r1, #32
 800cebc:	3910      	subs	r1, #16
 800cebe:	f507 6062 	add.w	r0, r7, #3616	@ 0xe20
 800cec2:	3810      	subs	r0, #16
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f7ff feab 	bl	800cc20 <unpack_cseed_z1_and_hint_from_sig>

    /*------------------- 2. Compute \tilde{z}_2 -----------------------------*/
    // compute  w' = lsb(z1[0] - c) and the squared norm of z1 before NTT
    sqnorm2 = polyvecl_sqnorm2(&z1);
 800ceca:	f507 5368 	add.w	r3, r7, #14848	@ 0x3a00
 800cece:	f103 0320 	add.w	r3, r3, #32
 800ced2:	3b10      	subs	r3, #16
 800ced4:	4618      	mov	r0, r3
 800ced6:	f7fc ff35 	bl	8009d44 <polyvecl_sqnorm2>
 800ceda:	f507 4399 	add.w	r3, r7, #19584	@ 0x4c80
 800cede:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800cee2:	e9c3 0100 	strd	r0, r1, [r3]
    poly_sub(&wprime, &z1.vec[0], &c);
 800cee6:	f507 6262 	add.w	r2, r7, #3616	@ 0xe20
 800ceea:	3a10      	subs	r2, #16
 800ceec:	f507 5168 	add.w	r1, r7, #14848	@ 0x3a00
 800cef0:	f101 0120 	add.w	r1, r1, #32
 800cef4:	3910      	subs	r1, #16
 800cef6:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 800cefa:	3b50      	subs	r3, #80	@ 0x50
 800cefc:	4618      	mov	r0, r3
 800cefe:	f7fa fb1d 	bl	800753c <poly_sub>
    poly_lsb(&wprime, &wprime);
 800cf02:	f507 62cc 	add.w	r2, r7, #1632	@ 0x660
 800cf06:	3a50      	subs	r2, #80	@ 0x50
 800cf08:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 800cf0c:	3b50      	subs	r3, #80	@ 0x50
 800cf0e:	4611      	mov	r1, r2
 800cf10:	4618      	mov	r0, r3
 800cf12:	f7fa fcc9 	bl	80078a8 <poly_lsb>

    // A1 * round(z1) - qcj mod q
    for (size_t column = 0; column < L; column++) {
 800cf16:	2300      	movs	r3, #0
 800cf18:	f507 4299 	add.w	r2, r7, #19584	@ 0x4c80
 800cf1c:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 800cf20:	6013      	str	r3, [r2, #0]
 800cf22:	e019      	b.n	800cf58 <verify+0x184>
        poly_ntt(&z1.vec[column]);
 800cf24:	f507 5368 	add.w	r3, r7, #14848	@ 0x3a00
 800cf28:	f103 0320 	add.w	r3, r3, #32
 800cf2c:	3b10      	subs	r3, #16
 800cf2e:	f507 4299 	add.w	r2, r7, #19584	@ 0x4c80
 800cf32:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 800cf36:	6812      	ldr	r2, [r2, #0]
 800cf38:	0292      	lsls	r2, r2, #10
 800cf3a:	4413      	add	r3, r2
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f7fb feba 	bl	8008cb6 <poly_ntt>
    for (size_t column = 0; column < L; column++) {
 800cf42:	f507 4399 	add.w	r3, r7, #19584	@ 0x4c80
 800cf46:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	3301      	adds	r3, #1
 800cf4e:	f507 4299 	add.w	r2, r7, #19584	@ 0x4c80
 800cf52:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 800cf56:	6013      	str	r3, [r2, #0]
 800cf58:	f507 4399 	add.w	r3, r7, #19584	@ 0x4c80
 800cf5c:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	2b03      	cmp	r3, #3
 800cf64:	d9de      	bls.n	800cf24 <verify+0x150>
    }
    // highbits = A1 * z1
    for (size_t row = 0; row < K; ++row) {
 800cf66:	2300      	movs	r3, #0
 800cf68:	f507 4299 	add.w	r2, r7, #19584	@ 0x4c80
 800cf6c:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 800cf70:	6013      	str	r3, [r2, #0]
 800cf72:	e0a0      	b.n	800d0b6 <verify+0x2e2>
		poly t;
        poly_frozen a1_elem;  // we need A1 only once, so compute its elements on demand

        expand_pk_matrix_elem_frozen(&a1_elem, row, 0, pk);
 800cf74:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 800cf78:	3850      	subs	r0, #80	@ 0x50
 800cf7a:	f507 4399 	add.w	r3, r7, #19584	@ 0x4c80
 800cf7e:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	2200      	movs	r2, #0
 800cf86:	f507 4199 	add.w	r1, r7, #19584	@ 0x4c80
 800cf8a:	f101 0154 	add.w	r1, r1, #84	@ 0x54
 800cf8e:	6809      	ldr	r1, [r1, #0]
 800cf90:	f7fc fd27 	bl	80099e2 <expand_pk_matrix_elem_frozen>
		poly_pointwise_montgomery_mixed(&highbits.vec[row], &a1_elem, &z1.vec[0]);
 800cf94:	f507 5328 	add.w	r3, r7, #10752	@ 0x2a00
 800cf98:	f103 0320 	add.w	r3, r3, #32
 800cf9c:	3b10      	subs	r3, #16
 800cf9e:	f507 4299 	add.w	r2, r7, #19584	@ 0x4c80
 800cfa2:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 800cfa6:	6812      	ldr	r2, [r2, #0]
 800cfa8:	0292      	lsls	r2, r2, #10
 800cfaa:	1898      	adds	r0, r3, r2
 800cfac:	f507 5268 	add.w	r2, r7, #14848	@ 0x3a00
 800cfb0:	f102 0220 	add.w	r2, r2, #32
 800cfb4:	3a10      	subs	r2, #16
 800cfb6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800cfba:	3b50      	subs	r3, #80	@ 0x50
 800cfbc:	4619      	mov	r1, r3
 800cfbe:	f7fa fb78 	bl	80076b2 <poly_pointwise_montgomery_mixed>
		for (size_t column = 1; column < L; ++column) {
 800cfc2:	2301      	movs	r3, #1
 800cfc4:	f507 4299 	add.w	r2, r7, #19584	@ 0x4c80
 800cfc8:	f102 0250 	add.w	r2, r2, #80	@ 0x50
 800cfcc:	6013      	str	r3, [r2, #0]
 800cfce:	e051      	b.n	800d074 <verify+0x2a0>
            expand_pk_matrix_elem_frozen(&a1_elem, row, column, pk);
 800cfd0:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 800cfd4:	3850      	subs	r0, #80	@ 0x50
 800cfd6:	f507 4399 	add.w	r3, r7, #19584	@ 0x4c80
 800cfda:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	f507 4299 	add.w	r2, r7, #19584	@ 0x4c80
 800cfe4:	f102 0250 	add.w	r2, r2, #80	@ 0x50
 800cfe8:	6812      	ldr	r2, [r2, #0]
 800cfea:	f507 4199 	add.w	r1, r7, #19584	@ 0x4c80
 800cfee:	f101 0154 	add.w	r1, r1, #84	@ 0x54
 800cff2:	6809      	ldr	r1, [r1, #0]
 800cff4:	f7fc fcf5 	bl	80099e2 <expand_pk_matrix_elem_frozen>
			poly_pointwise_montgomery_mixed(&t, &a1_elem, &z1.vec[column]);
 800cff8:	f507 5368 	add.w	r3, r7, #14848	@ 0x3a00
 800cffc:	f103 0320 	add.w	r3, r3, #32
 800d000:	3b10      	subs	r3, #16
 800d002:	f507 4299 	add.w	r2, r7, #19584	@ 0x4c80
 800d006:	f102 0250 	add.w	r2, r2, #80	@ 0x50
 800d00a:	6812      	ldr	r2, [r2, #0]
 800d00c:	0292      	lsls	r2, r2, #10
 800d00e:	441a      	add	r2, r3
 800d010:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 800d014:	3950      	subs	r1, #80	@ 0x50
 800d016:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800d01a:	3b50      	subs	r3, #80	@ 0x50
 800d01c:	4618      	mov	r0, r3
 800d01e:	f7fa fb48 	bl	80076b2 <poly_pointwise_montgomery_mixed>
			poly_add(&highbits.vec[row], &highbits.vec[row], &t);
 800d022:	f507 5328 	add.w	r3, r7, #10752	@ 0x2a00
 800d026:	f103 0320 	add.w	r3, r3, #32
 800d02a:	3b10      	subs	r3, #16
 800d02c:	f507 4299 	add.w	r2, r7, #19584	@ 0x4c80
 800d030:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 800d034:	6812      	ldr	r2, [r2, #0]
 800d036:	0292      	lsls	r2, r2, #10
 800d038:	1898      	adds	r0, r3, r2
 800d03a:	f507 5328 	add.w	r3, r7, #10752	@ 0x2a00
 800d03e:	f103 0320 	add.w	r3, r3, #32
 800d042:	3b10      	subs	r3, #16
 800d044:	f507 4299 	add.w	r2, r7, #19584	@ 0x4c80
 800d048:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 800d04c:	6812      	ldr	r2, [r2, #0]
 800d04e:	0292      	lsls	r2, r2, #10
 800d050:	1899      	adds	r1, r3, r2
 800d052:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800d056:	3b50      	subs	r3, #80	@ 0x50
 800d058:	461a      	mov	r2, r3
 800d05a:	f7fa fa4c 	bl	80074f6 <poly_add>
		for (size_t column = 1; column < L; ++column) {
 800d05e:	f507 4399 	add.w	r3, r7, #19584	@ 0x4c80
 800d062:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	3301      	adds	r3, #1
 800d06a:	f507 4299 	add.w	r2, r7, #19584	@ 0x4c80
 800d06e:	f102 0250 	add.w	r2, r2, #80	@ 0x50
 800d072:	6013      	str	r3, [r2, #0]
 800d074:	f507 4399 	add.w	r3, r7, #19584	@ 0x4c80
 800d078:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	2b03      	cmp	r3, #3
 800d080:	d9a6      	bls.n	800cfd0 <verify+0x1fc>
		}
        poly_invntt_tomont(&highbits.vec[row]);
 800d082:	f507 5328 	add.w	r3, r7, #10752	@ 0x2a00
 800d086:	f103 0320 	add.w	r3, r3, #32
 800d08a:	3b10      	subs	r3, #16
 800d08c:	f507 4299 	add.w	r2, r7, #19584	@ 0x4c80
 800d090:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 800d094:	6812      	ldr	r2, [r2, #0]
 800d096:	0292      	lsls	r2, r2, #10
 800d098:	4413      	add	r3, r2
 800d09a:	4618      	mov	r0, r3
 800d09c:	f7fb fe17 	bl	8008cce <poly_invntt_tomont>
    for (size_t row = 0; row < K; ++row) {
 800d0a0:	f507 4399 	add.w	r3, r7, #19584	@ 0x4c80
 800d0a4:	f103 0354 	add.w	r3, r3, #84	@ 0x54
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	3301      	adds	r3, #1
 800d0ac:	f507 4299 	add.w	r2, r7, #19584	@ 0x4c80
 800d0b0:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 800d0b4:	6013      	str	r3, [r2, #0]
 800d0b6:	f507 4399 	add.w	r3, r7, #19584	@ 0x4c80
 800d0ba:	f103 0354 	add.w	r3, r3, #84	@ 0x54
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	2b01      	cmp	r3, #1
 800d0c2:	f67f af57 	bls.w	800cf74 <verify+0x1a0>
	}

    // recover A1 * round(z1) - qcj mod 2q

    for (size_t row = 0; row < K; ++row){
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	f507 4299 	add.w	r2, r7, #19584	@ 0x4c80
 800d0cc:	f102 024c 	add.w	r2, r2, #76	@ 0x4c
 800d0d0:	6013      	str	r3, [r2, #0]
 800d0d2:	e0db      	b.n	800d28c <verify+0x4b8>
        poly *highbits_elem_ptr = &highbits.vec[row];
 800d0d4:	f507 5328 	add.w	r3, r7, #10752	@ 0x2a00
 800d0d8:	f103 0320 	add.w	r3, r3, #32
 800d0dc:	3b10      	subs	r3, #16
 800d0de:	f507 4299 	add.w	r2, r7, #19584	@ 0x4c80
 800d0e2:	f102 024c 	add.w	r2, r2, #76	@ 0x4c
 800d0e6:	6812      	ldr	r2, [r2, #0]
 800d0e8:	0292      	lsls	r2, r2, #10
 800d0ea:	4413      	add	r3, r2
 800d0ec:	f507 4299 	add.w	r2, r7, #19584	@ 0x4c80
 800d0f0:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 800d0f4:	6013      	str	r3, [r2, #0]
        poly *h_elem_ptr;
        poly *w_elem_ptr;
        poly *z2_elem_ptr;

        h_elem_ptr = &h.vec[row];
 800d0f6:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 800d0fa:	f103 0320 	add.w	r3, r3, #32
 800d0fe:	3b10      	subs	r3, #16
 800d100:	f507 4299 	add.w	r2, r7, #19584	@ 0x4c80
 800d104:	f102 024c 	add.w	r2, r2, #76	@ 0x4c
 800d108:	6812      	ldr	r2, [r2, #0]
 800d10a:	0292      	lsls	r2, r2, #10
 800d10c:	4413      	add	r3, r2
 800d10e:	f507 4299 	add.w	r2, r7, #19584	@ 0x4c80
 800d112:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 800d116:	6013      	str	r3, [r2, #0]
        w_elem_ptr = &w.vec[row];
 800d118:	f507 5391 	add.w	r3, r7, #4640	@ 0x1220
 800d11c:	3b10      	subs	r3, #16
 800d11e:	f507 4299 	add.w	r2, r7, #19584	@ 0x4c80
 800d122:	f102 024c 	add.w	r2, r2, #76	@ 0x4c
 800d126:	6812      	ldr	r2, [r2, #0]
 800d128:	0292      	lsls	r2, r2, #10
 800d12a:	4413      	add	r3, r2
 800d12c:	f507 4299 	add.w	r2, r7, #19584	@ 0x4c80
 800d130:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 800d134:	6013      	str	r3, [r2, #0]
        z2_elem_ptr = &z2.vec[row];
 800d136:	f507 53d1 	add.w	r3, r7, #6688	@ 0x1a20
 800d13a:	3b10      	subs	r3, #16
 800d13c:	f507 4299 	add.w	r2, r7, #19584	@ 0x4c80
 800d140:	f102 024c 	add.w	r2, r2, #76	@ 0x4c
 800d144:	6812      	ldr	r2, [r2, #0]
 800d146:	0292      	lsls	r2, r2, #10
 800d148:	4413      	add	r3, r2
 800d14a:	f507 4299 	add.w	r2, r7, #19584	@ 0x4c80
 800d14e:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 800d152:	6013      	str	r3, [r2, #0]


        if (0 == row) {
 800d154:	f507 4399 	add.w	r3, r7, #19584	@ 0x4c80
 800d158:	f103 034c 	add.w	r3, r3, #76	@ 0x4c
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d110      	bne.n	800d184 <verify+0x3b0>
            poly_fromcrt(highbits_elem_ptr, highbits_elem_ptr, &wprime);
 800d162:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 800d166:	3b50      	subs	r3, #80	@ 0x50
 800d168:	461a      	mov	r2, r3
 800d16a:	f507 4399 	add.w	r3, r7, #19584	@ 0x4c80
 800d16e:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 800d172:	6819      	ldr	r1, [r3, #0]
 800d174:	f507 4399 	add.w	r3, r7, #19584	@ 0x4c80
 800d178:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 800d17c:	6818      	ldr	r0, [r3, #0]
 800d17e:	f7fb fd44 	bl	8008c0a <poly_fromcrt>
 800d182:	e00b      	b.n	800d19c <verify+0x3c8>
        } else {
            poly_fromcrt0(highbits_elem_ptr, highbits_elem_ptr);
 800d184:	f507 4399 	add.w	r3, r7, #19584	@ 0x4c80
 800d188:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 800d18c:	6819      	ldr	r1, [r3, #0]
 800d18e:	f507 4399 	add.w	r3, r7, #19584	@ 0x4c80
 800d192:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 800d196:	6818      	ldr	r0, [r3, #0]
 800d198:	f7fb fd66 	bl	8008c68 <poly_fromcrt0>
        }
        poly_freeze2q(highbits_elem_ptr);
 800d19c:	f507 4399 	add.w	r3, r7, #19584	@ 0x4c80
 800d1a0:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 800d1a4:	6818      	ldr	r0, [r3, #0]
 800d1a6:	f7fa fad9 	bl	800775c <poly_freeze2q>
        // recover w1
        poly_highbits_hint(w_elem_ptr, highbits_elem_ptr);
 800d1aa:	f507 4399 	add.w	r3, r7, #19584	@ 0x4c80
 800d1ae:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 800d1b2:	6819      	ldr	r1, [r3, #0]
 800d1b4:	f507 4399 	add.w	r3, r7, #19584	@ 0x4c80
 800d1b8:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800d1bc:	6818      	ldr	r0, [r3, #0]
 800d1be:	f7fa fe24 	bl	8007e0a <poly_highbits_hint>
        poly_add(w_elem_ptr, w_elem_ptr, h_elem_ptr);
 800d1c2:	f507 4399 	add.w	r3, r7, #19584	@ 0x4c80
 800d1c6:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800d1ca:	681a      	ldr	r2, [r3, #0]
 800d1cc:	f507 4399 	add.w	r3, r7, #19584	@ 0x4c80
 800d1d0:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800d1d4:	6819      	ldr	r1, [r3, #0]
 800d1d6:	f507 4399 	add.w	r3, r7, #19584	@ 0x4c80
 800d1da:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800d1de:	6818      	ldr	r0, [r3, #0]
 800d1e0:	f7fa f989 	bl	80074f6 <poly_add>
        poly_csubDQ2ALPHA(w_elem_ptr);
 800d1e4:	f507 4399 	add.w	r3, r7, #19584	@ 0x4c80
 800d1e8:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800d1ec:	6818      	ldr	r0, [r3, #0]
 800d1ee:	f7ff fd90 	bl	800cd12 <poly_csubDQ2ALPHA>
        // recover \tilde{z}_2 mod q
        poly_mul_alpha(z2_elem_ptr, w_elem_ptr);
 800d1f2:	f507 4399 	add.w	r3, r7, #19584	@ 0x4c80
 800d1f6:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800d1fa:	6819      	ldr	r1, [r3, #0]
 800d1fc:	f507 4399 	add.w	r3, r7, #19584	@ 0x4c80
 800d200:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800d204:	6818      	ldr	r0, [r3, #0]
 800d206:	f7ff fdaa 	bl	800cd5e <poly_mul_alpha>
        poly_sub(z2_elem_ptr, z2_elem_ptr, highbits_elem_ptr);
 800d20a:	f507 4399 	add.w	r3, r7, #19584	@ 0x4c80
 800d20e:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 800d212:	681a      	ldr	r2, [r3, #0]
 800d214:	f507 4399 	add.w	r3, r7, #19584	@ 0x4c80
 800d218:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800d21c:	6819      	ldr	r1, [r3, #0]
 800d21e:	f507 4399 	add.w	r3, r7, #19584	@ 0x4c80
 800d222:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800d226:	6818      	ldr	r0, [r3, #0]
 800d228:	f7fa f988 	bl	800753c <poly_sub>
        if (0 == row) {
 800d22c:	f507 4399 	add.w	r3, r7, #19584	@ 0x4c80
 800d230:	f103 034c 	add.w	r3, r3, #76	@ 0x4c
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d10f      	bne.n	800d25a <verify+0x486>
            poly_add(z2_elem_ptr, z2_elem_ptr, &wprime);
 800d23a:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 800d23e:	3b50      	subs	r3, #80	@ 0x50
 800d240:	461a      	mov	r2, r3
 800d242:	f507 4399 	add.w	r3, r7, #19584	@ 0x4c80
 800d246:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800d24a:	6819      	ldr	r1, [r3, #0]
 800d24c:	f507 4399 	add.w	r3, r7, #19584	@ 0x4c80
 800d250:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800d254:	6818      	ldr	r0, [r3, #0]
 800d256:	f7fa f94e 	bl	80074f6 <poly_add>
        }
        poly_reduce2q(z2_elem_ptr);
 800d25a:	f507 4399 	add.w	r3, r7, #19584	@ 0x4c80
 800d25e:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800d262:	6818      	ldr	r0, [r3, #0]
 800d264:	f7fa fa5c 	bl	8007720 <poly_reduce2q>
        poly_div2(z2_elem_ptr);
 800d268:	f507 4399 	add.w	r3, r7, #19584	@ 0x4c80
 800d26c:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800d270:	6818      	ldr	r0, [r3, #0]
 800d272:	f7ff fd92 	bl	800cd9a <poly_div2>
    for (size_t row = 0; row < K; ++row){
 800d276:	f507 4399 	add.w	r3, r7, #19584	@ 0x4c80
 800d27a:	f103 034c 	add.w	r3, r3, #76	@ 0x4c
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	3301      	adds	r3, #1
 800d282:	f507 4299 	add.w	r2, r7, #19584	@ 0x4c80
 800d286:	f102 024c 	add.w	r2, r2, #76	@ 0x4c
 800d28a:	6013      	str	r3, [r2, #0]
 800d28c:	f507 4399 	add.w	r3, r7, #19584	@ 0x4c80
 800d290:	f103 034c 	add.w	r3, r3, #76	@ 0x4c
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	2b01      	cmp	r3, #1
 800d298:	f67f af1c 	bls.w	800d0d4 <verify+0x300>
    }

    // check final norm of \tilde{z}
    if (sqnorm2 + polyveck_sqnorm2(&z2) > B2SQ) {
 800d29c:	f507 53d1 	add.w	r3, r7, #6688	@ 0x1a20
 800d2a0:	3b10      	subs	r3, #16
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f7fc fd03 	bl	8009cae <polyveck_sqnorm2>
 800d2a8:	f507 4399 	add.w	r3, r7, #19584	@ 0x4c80
 800d2ac:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800d2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2b4:	1884      	adds	r4, r0, r2
 800d2b6:	eb41 0503 	adc.w	r5, r1, r3
 800d2ba:	4b41      	ldr	r3, [pc, #260]	@ (800d3c0 <verify+0x5ec>)
 800d2bc:	429c      	cmp	r4, r3
 800d2be:	f175 0300 	sbcs.w	r3, r5, #0
 800d2c2:	d302      	bcc.n	800d2ca <verify+0x4f6>
        return -1;
 800d2c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d2c8:	e074      	b.n	800d3b4 <verify+0x5e0>
    }

    /*------------------- 3. Compute cprime and Compare ---------------------*/

    // Pack highBits(A * round(z) - qcj mod 2q) and h'
    polyveck_pack_highbits(buf, &w);
 800d2ca:	f507 5391 	add.w	r3, r7, #4640	@ 0x1220
 800d2ce:	3b10      	subs	r3, #16
 800d2d0:	f507 4294 	add.w	r2, r7, #18944	@ 0x4a00
 800d2d4:	f102 0250 	add.w	r2, r2, #80	@ 0x50
 800d2d8:	4619      	mov	r1, r3
 800d2da:	4610      	mov	r0, r2
 800d2dc:	f7fc fc93 	bl	8009c06 <polyveck_pack_highbits>
    poly_pack_lsb(buf + POLYVECK_HIGHBITS_PACKEDBYTES, &wprime);
 800d2e0:	f507 4394 	add.w	r3, r7, #18944	@ 0x4a00
 800d2e4:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 800d2e8:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800d2ec:	f507 62cc 	add.w	r2, r7, #1632	@ 0x660
 800d2f0:	3a50      	subs	r2, #80	@ 0x50
 800d2f2:	4611      	mov	r1, r2
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	f7fa ff21 	bl	800813c <poly_pack_lsb>

    generate_seed_from_two_sources(mu, SEEDBYTES, pk, CRYPTO_PUBLICKEYBYTES, m, mlen);
 800d2fa:	f507 4094 	add.w	r0, r7, #18944	@ 0x4a00
 800d2fe:	f100 0010 	add.w	r0, r0, #16
 800d302:	f507 634e 	add.w	r3, r7, #3296	@ 0xce0
 800d306:	f5a3 634e 	sub.w	r3, r3, #3296	@ 0xce0
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	9301      	str	r3, [sp, #4]
 800d30e:	f507 634e 	add.w	r3, r7, #3296	@ 0xce0
 800d312:	f6a3 43dc 	subw	r3, r3, #3292	@ 0xcdc
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	9300      	str	r3, [sp, #0]
 800d31a:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 800d31e:	f507 4299 	add.w	r2, r7, #19584	@ 0x4c80
 800d322:	f102 0278 	add.w	r2, r2, #120	@ 0x78
 800d326:	6812      	ldr	r2, [r2, #0]
 800d328:	2120      	movs	r1, #32
 800d32a:	f7fe fa70 	bl	800b80e <generate_seed_from_two_sources>

    poly_challenge(&cprime, buf, mu);
 800d32e:	f507 4294 	add.w	r2, r7, #18944	@ 0x4a00
 800d332:	f102 0210 	add.w	r2, r2, #16
 800d336:	f507 4194 	add.w	r1, r7, #18944	@ 0x4a00
 800d33a:	f101 0150 	add.w	r1, r1, #80	@ 0x50
 800d33e:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800d342:	3b50      	subs	r3, #80	@ 0x50
 800d344:	4618      	mov	r0, r3
 800d346:	f7fa fc69 	bl	8007c1c <poly_challenge>

    for (i = 0; i < N; ++i) {
 800d34a:	2300      	movs	r3, #0
 800d34c:	f507 4299 	add.w	r2, r7, #19584	@ 0x4c80
 800d350:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 800d354:	6013      	str	r3, [r2, #0]
 800d356:	e025      	b.n	800d3a4 <verify+0x5d0>
        if (c.coeffs[i] != cprime.coeffs[i]) {
 800d358:	f507 53e7 	add.w	r3, r7, #7392	@ 0x1ce0
 800d35c:	f5a3 636d 	sub.w	r3, r3, #3792	@ 0xed0
 800d360:	f507 4299 	add.w	r2, r7, #19584	@ 0x4c80
 800d364:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 800d368:	6812      	ldr	r2, [r2, #0]
 800d36a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d36e:	f507 634e 	add.w	r3, r7, #3296	@ 0xce0
 800d372:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 800d376:	f507 4199 	add.w	r1, r7, #19584	@ 0x4c80
 800d37a:	f101 015c 	add.w	r1, r1, #92	@ 0x5c
 800d37e:	6809      	ldr	r1, [r1, #0]
 800d380:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d384:	429a      	cmp	r2, r3
 800d386:	d002      	beq.n	800d38e <verify+0x5ba>
            return -1;
 800d388:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d38c:	e012      	b.n	800d3b4 <verify+0x5e0>
    for (i = 0; i < N; ++i) {
 800d38e:	f507 4399 	add.w	r3, r7, #19584	@ 0x4c80
 800d392:	f103 035c 	add.w	r3, r3, #92	@ 0x5c
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	3301      	adds	r3, #1
 800d39a:	f507 4299 	add.w	r2, r7, #19584	@ 0x4c80
 800d39e:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 800d3a2:	6013      	str	r3, [r2, #0]
 800d3a4:	f507 4399 	add.w	r3, r7, #19584	@ 0x4c80
 800d3a8:	f103 035c 	add.w	r3, r3, #92	@ 0x5c
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	2bff      	cmp	r3, #255	@ 0xff
 800d3b0:	d9d2      	bls.n	800d358 <verify+0x584>
        }
    }
    return 0;
 800d3b2:	2300      	movs	r3, #0
}
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	f507 4799 	add.w	r7, r7, #19584	@ 0x4c80
 800d3ba:	3764      	adds	r7, #100	@ 0x64
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3c0:	09bb39fa 	.word	0x09bb39fa

0800d3c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b082      	sub	sp, #8
 800d3c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	607b      	str	r3, [r7, #4]
 800d3ce:	4b10      	ldr	r3, [pc, #64]	@ (800d410 <HAL_MspInit+0x4c>)
 800d3d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d3d2:	4a0f      	ldr	r2, [pc, #60]	@ (800d410 <HAL_MspInit+0x4c>)
 800d3d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d3d8:	6453      	str	r3, [r2, #68]	@ 0x44
 800d3da:	4b0d      	ldr	r3, [pc, #52]	@ (800d410 <HAL_MspInit+0x4c>)
 800d3dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d3de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d3e2:	607b      	str	r3, [r7, #4]
 800d3e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	603b      	str	r3, [r7, #0]
 800d3ea:	4b09      	ldr	r3, [pc, #36]	@ (800d410 <HAL_MspInit+0x4c>)
 800d3ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3ee:	4a08      	ldr	r2, [pc, #32]	@ (800d410 <HAL_MspInit+0x4c>)
 800d3f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d3f4:	6413      	str	r3, [r2, #64]	@ 0x40
 800d3f6:	4b06      	ldr	r3, [pc, #24]	@ (800d410 <HAL_MspInit+0x4c>)
 800d3f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d3fe:	603b      	str	r3, [r7, #0]
 800d400:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800d402:	2007      	movs	r0, #7
 800d404:	f000 fbde 	bl	800dbc4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d408:	bf00      	nop
 800d40a:	3708      	adds	r7, #8
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}
 800d410:	40023800 	.word	0x40023800

0800d414 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b08a      	sub	sp, #40	@ 0x28
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d41c:	f107 0314 	add.w	r3, r7, #20
 800d420:	2200      	movs	r2, #0
 800d422:	601a      	str	r2, [r3, #0]
 800d424:	605a      	str	r2, [r3, #4]
 800d426:	609a      	str	r2, [r3, #8]
 800d428:	60da      	str	r2, [r3, #12]
 800d42a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	4a19      	ldr	r2, [pc, #100]	@ (800d498 <HAL_I2C_MspInit+0x84>)
 800d432:	4293      	cmp	r3, r2
 800d434:	d12c      	bne.n	800d490 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d436:	2300      	movs	r3, #0
 800d438:	613b      	str	r3, [r7, #16]
 800d43a:	4b18      	ldr	r3, [pc, #96]	@ (800d49c <HAL_I2C_MspInit+0x88>)
 800d43c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d43e:	4a17      	ldr	r2, [pc, #92]	@ (800d49c <HAL_I2C_MspInit+0x88>)
 800d440:	f043 0302 	orr.w	r3, r3, #2
 800d444:	6313      	str	r3, [r2, #48]	@ 0x30
 800d446:	4b15      	ldr	r3, [pc, #84]	@ (800d49c <HAL_I2C_MspInit+0x88>)
 800d448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d44a:	f003 0302 	and.w	r3, r3, #2
 800d44e:	613b      	str	r3, [r7, #16]
 800d450:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800d452:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800d456:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800d458:	2312      	movs	r3, #18
 800d45a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d45c:	2301      	movs	r3, #1
 800d45e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d460:	2300      	movs	r3, #0
 800d462:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800d464:	2304      	movs	r3, #4
 800d466:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d468:	f107 0314 	add.w	r3, r7, #20
 800d46c:	4619      	mov	r1, r3
 800d46e:	480c      	ldr	r0, [pc, #48]	@ (800d4a0 <HAL_I2C_MspInit+0x8c>)
 800d470:	f000 fbea 	bl	800dc48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800d474:	2300      	movs	r3, #0
 800d476:	60fb      	str	r3, [r7, #12]
 800d478:	4b08      	ldr	r3, [pc, #32]	@ (800d49c <HAL_I2C_MspInit+0x88>)
 800d47a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d47c:	4a07      	ldr	r2, [pc, #28]	@ (800d49c <HAL_I2C_MspInit+0x88>)
 800d47e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d482:	6413      	str	r3, [r2, #64]	@ 0x40
 800d484:	4b05      	ldr	r3, [pc, #20]	@ (800d49c <HAL_I2C_MspInit+0x88>)
 800d486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d488:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d48c:	60fb      	str	r3, [r7, #12]
 800d48e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800d490:	bf00      	nop
 800d492:	3728      	adds	r7, #40	@ 0x28
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}
 800d498:	40005400 	.word	0x40005400
 800d49c:	40023800 	.word	0x40023800
 800d4a0:	40020400 	.word	0x40020400

0800d4a4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b08e      	sub	sp, #56	@ 0x38
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d4ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	601a      	str	r2, [r3, #0]
 800d4b4:	605a      	str	r2, [r3, #4]
 800d4b6:	609a      	str	r2, [r3, #8]
 800d4b8:	60da      	str	r2, [r3, #12]
 800d4ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d4bc:	f107 0314 	add.w	r3, r7, #20
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	601a      	str	r2, [r3, #0]
 800d4c4:	605a      	str	r2, [r3, #4]
 800d4c6:	609a      	str	r2, [r3, #8]
 800d4c8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	4a31      	ldr	r2, [pc, #196]	@ (800d594 <HAL_I2S_MspInit+0xf0>)
 800d4d0:	4293      	cmp	r3, r2
 800d4d2:	d15a      	bne.n	800d58a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800d4d8:	23c0      	movs	r3, #192	@ 0xc0
 800d4da:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800d4dc:	2302      	movs	r3, #2
 800d4de:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d4e0:	f107 0314 	add.w	r3, r7, #20
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f004 f8e7 	bl	80116b8 <HAL_RCCEx_PeriphCLKConfig>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d001      	beq.n	800d4f4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 800d4f0:	f7f9 fcf6 	bl	8006ee0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	613b      	str	r3, [r7, #16]
 800d4f8:	4b27      	ldr	r3, [pc, #156]	@ (800d598 <HAL_I2S_MspInit+0xf4>)
 800d4fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4fc:	4a26      	ldr	r2, [pc, #152]	@ (800d598 <HAL_I2S_MspInit+0xf4>)
 800d4fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d502:	6413      	str	r3, [r2, #64]	@ 0x40
 800d504:	4b24      	ldr	r3, [pc, #144]	@ (800d598 <HAL_I2S_MspInit+0xf4>)
 800d506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d508:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d50c:	613b      	str	r3, [r7, #16]
 800d50e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d510:	2300      	movs	r3, #0
 800d512:	60fb      	str	r3, [r7, #12]
 800d514:	4b20      	ldr	r3, [pc, #128]	@ (800d598 <HAL_I2S_MspInit+0xf4>)
 800d516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d518:	4a1f      	ldr	r2, [pc, #124]	@ (800d598 <HAL_I2S_MspInit+0xf4>)
 800d51a:	f043 0301 	orr.w	r3, r3, #1
 800d51e:	6313      	str	r3, [r2, #48]	@ 0x30
 800d520:	4b1d      	ldr	r3, [pc, #116]	@ (800d598 <HAL_I2S_MspInit+0xf4>)
 800d522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d524:	f003 0301 	and.w	r3, r3, #1
 800d528:	60fb      	str	r3, [r7, #12]
 800d52a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d52c:	2300      	movs	r3, #0
 800d52e:	60bb      	str	r3, [r7, #8]
 800d530:	4b19      	ldr	r3, [pc, #100]	@ (800d598 <HAL_I2S_MspInit+0xf4>)
 800d532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d534:	4a18      	ldr	r2, [pc, #96]	@ (800d598 <HAL_I2S_MspInit+0xf4>)
 800d536:	f043 0304 	orr.w	r3, r3, #4
 800d53a:	6313      	str	r3, [r2, #48]	@ 0x30
 800d53c:	4b16      	ldr	r3, [pc, #88]	@ (800d598 <HAL_I2S_MspInit+0xf4>)
 800d53e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d540:	f003 0304 	and.w	r3, r3, #4
 800d544:	60bb      	str	r3, [r7, #8]
 800d546:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800d548:	2310      	movs	r3, #16
 800d54a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d54c:	2302      	movs	r3, #2
 800d54e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d550:	2300      	movs	r3, #0
 800d552:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d554:	2300      	movs	r3, #0
 800d556:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800d558:	2306      	movs	r3, #6
 800d55a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800d55c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d560:	4619      	mov	r1, r3
 800d562:	480e      	ldr	r0, [pc, #56]	@ (800d59c <HAL_I2S_MspInit+0xf8>)
 800d564:	f000 fb70 	bl	800dc48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800d568:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800d56c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d56e:	2302      	movs	r3, #2
 800d570:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d572:	2300      	movs	r3, #0
 800d574:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d576:	2300      	movs	r3, #0
 800d578:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800d57a:	2306      	movs	r3, #6
 800d57c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d57e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d582:	4619      	mov	r1, r3
 800d584:	4806      	ldr	r0, [pc, #24]	@ (800d5a0 <HAL_I2S_MspInit+0xfc>)
 800d586:	f000 fb5f 	bl	800dc48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800d58a:	bf00      	nop
 800d58c:	3738      	adds	r7, #56	@ 0x38
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}
 800d592:	bf00      	nop
 800d594:	40003c00 	.word	0x40003c00
 800d598:	40023800 	.word	0x40023800
 800d59c:	40020000 	.word	0x40020000
 800d5a0:	40020800 	.word	0x40020800

0800d5a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b08a      	sub	sp, #40	@ 0x28
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d5ac:	f107 0314 	add.w	r3, r7, #20
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	601a      	str	r2, [r3, #0]
 800d5b4:	605a      	str	r2, [r3, #4]
 800d5b6:	609a      	str	r2, [r3, #8]
 800d5b8:	60da      	str	r2, [r3, #12]
 800d5ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	4a19      	ldr	r2, [pc, #100]	@ (800d628 <HAL_SPI_MspInit+0x84>)
 800d5c2:	4293      	cmp	r3, r2
 800d5c4:	d12b      	bne.n	800d61e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	613b      	str	r3, [r7, #16]
 800d5ca:	4b18      	ldr	r3, [pc, #96]	@ (800d62c <HAL_SPI_MspInit+0x88>)
 800d5cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d5ce:	4a17      	ldr	r2, [pc, #92]	@ (800d62c <HAL_SPI_MspInit+0x88>)
 800d5d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d5d4:	6453      	str	r3, [r2, #68]	@ 0x44
 800d5d6:	4b15      	ldr	r3, [pc, #84]	@ (800d62c <HAL_SPI_MspInit+0x88>)
 800d5d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d5da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d5de:	613b      	str	r3, [r7, #16]
 800d5e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	60fb      	str	r3, [r7, #12]
 800d5e6:	4b11      	ldr	r3, [pc, #68]	@ (800d62c <HAL_SPI_MspInit+0x88>)
 800d5e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5ea:	4a10      	ldr	r2, [pc, #64]	@ (800d62c <HAL_SPI_MspInit+0x88>)
 800d5ec:	f043 0301 	orr.w	r3, r3, #1
 800d5f0:	6313      	str	r3, [r2, #48]	@ 0x30
 800d5f2:	4b0e      	ldr	r3, [pc, #56]	@ (800d62c <HAL_SPI_MspInit+0x88>)
 800d5f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5f6:	f003 0301 	and.w	r3, r3, #1
 800d5fa:	60fb      	str	r3, [r7, #12]
 800d5fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800d5fe:	23e0      	movs	r3, #224	@ 0xe0
 800d600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d602:	2302      	movs	r3, #2
 800d604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d606:	2300      	movs	r3, #0
 800d608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d60a:	2300      	movs	r3, #0
 800d60c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800d60e:	2305      	movs	r3, #5
 800d610:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d612:	f107 0314 	add.w	r3, r7, #20
 800d616:	4619      	mov	r1, r3
 800d618:	4805      	ldr	r0, [pc, #20]	@ (800d630 <HAL_SPI_MspInit+0x8c>)
 800d61a:	f000 fb15 	bl	800dc48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800d61e:	bf00      	nop
 800d620:	3728      	adds	r7, #40	@ 0x28
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}
 800d626:	bf00      	nop
 800d628:	40013000 	.word	0x40013000
 800d62c:	40023800 	.word	0x40023800
 800d630:	40020000 	.word	0x40020000

0800d634 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d634:	b480      	push	{r7}
 800d636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800d638:	bf00      	nop
 800d63a:	e7fd      	b.n	800d638 <NMI_Handler+0x4>

0800d63c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d63c:	b480      	push	{r7}
 800d63e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d640:	bf00      	nop
 800d642:	e7fd      	b.n	800d640 <HardFault_Handler+0x4>

0800d644 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d644:	b480      	push	{r7}
 800d646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800d648:	bf00      	nop
 800d64a:	e7fd      	b.n	800d648 <MemManage_Handler+0x4>

0800d64c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d64c:	b480      	push	{r7}
 800d64e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800d650:	bf00      	nop
 800d652:	e7fd      	b.n	800d650 <BusFault_Handler+0x4>

0800d654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d654:	b480      	push	{r7}
 800d656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800d658:	bf00      	nop
 800d65a:	e7fd      	b.n	800d658 <UsageFault_Handler+0x4>

0800d65c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800d65c:	b480      	push	{r7}
 800d65e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800d660:	bf00      	nop
 800d662:	46bd      	mov	sp, r7
 800d664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d668:	4770      	bx	lr

0800d66a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800d66a:	b480      	push	{r7}
 800d66c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800d66e:	bf00      	nop
 800d670:	46bd      	mov	sp, r7
 800d672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d676:	4770      	bx	lr

0800d678 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800d678:	b480      	push	{r7}
 800d67a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800d67c:	bf00      	nop
 800d67e:	46bd      	mov	sp, r7
 800d680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d684:	4770      	bx	lr

0800d686 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800d686:	b580      	push	{r7, lr}
 800d688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d68a:	f000 f987 	bl	800d99c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800d68e:	bf00      	nop
 800d690:	bd80      	pop	{r7, pc}
	...

0800d694 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800d698:	4802      	ldr	r0, [pc, #8]	@ (800d6a4 <OTG_FS_IRQHandler+0x10>)
 800d69a:	f000 ff6b 	bl	800e574 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800d69e:	bf00      	nop
 800d6a0:	bd80      	pop	{r7, pc}
 800d6a2:	bf00      	nop
 800d6a4:	2000186c 	.word	0x2000186c

0800d6a8 <haetae_shake128_stream_init>:
#include "symmetric.h"
#include <stdint.h>

void haetae_shake128_stream_init(stream128_state *state,
                                 const uint8_t seed[SEEDBYTES],
                                 uint16_t nonce) {
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b086      	sub	sp, #24
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	60f8      	str	r0, [r7, #12]
 800d6b0:	60b9      	str	r1, [r7, #8]
 800d6b2:	4613      	mov	r3, r2
 800d6b4:	80fb      	strh	r3, [r7, #6]
    uint8_t t[2];
    t[0] = nonce;
 800d6b6:	88fb      	ldrh	r3, [r7, #6]
 800d6b8:	b2db      	uxtb	r3, r3
 800d6ba:	753b      	strb	r3, [r7, #20]
    t[1] = nonce >> 8;
 800d6bc:	88fb      	ldrh	r3, [r7, #6]
 800d6be:	0a1b      	lsrs	r3, r3, #8
 800d6c0:	b29b      	uxth	r3, r3
 800d6c2:	b2db      	uxtb	r3, r3
 800d6c4:	757b      	strb	r3, [r7, #21]

    shake128_inc_init(state);
 800d6c6:	68f8      	ldr	r0, [r7, #12]
 800d6c8:	f7f4 fe44 	bl	8002354 <shake128_inc_init>
    shake128_inc_absorb(state, seed, SEEDBYTES);
 800d6cc:	2220      	movs	r2, #32
 800d6ce:	68b9      	ldr	r1, [r7, #8]
 800d6d0:	68f8      	ldr	r0, [r7, #12]
 800d6d2:	f7f4 fe4b 	bl	800236c <shake128_inc_absorb>
    shake128_inc_absorb(state, t, 2);
 800d6d6:	f107 0314 	add.w	r3, r7, #20
 800d6da:	2202      	movs	r2, #2
 800d6dc:	4619      	mov	r1, r3
 800d6de:	68f8      	ldr	r0, [r7, #12]
 800d6e0:	f7f4 fe44 	bl	800236c <shake128_inc_absorb>
    shake128_inc_finalize(state);
 800d6e4:	68f8      	ldr	r0, [r7, #12]
 800d6e6:	f7f4 fe51 	bl	800238c <shake128_inc_finalize>
}
 800d6ea:	bf00      	nop
 800d6ec:	3718      	adds	r7, #24
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}

0800d6f2 <haetae_shake256_stream_init>:

void haetae_shake256_stream_init(stream256_state *state,
                                 const uint8_t seed[CRHBYTES], uint16_t nonce) {
 800d6f2:	b580      	push	{r7, lr}
 800d6f4:	b086      	sub	sp, #24
 800d6f6:	af00      	add	r7, sp, #0
 800d6f8:	60f8      	str	r0, [r7, #12]
 800d6fa:	60b9      	str	r1, [r7, #8]
 800d6fc:	4613      	mov	r3, r2
 800d6fe:	80fb      	strh	r3, [r7, #6]
    uint8_t t[2];
    t[0] = nonce;
 800d700:	88fb      	ldrh	r3, [r7, #6]
 800d702:	b2db      	uxtb	r3, r3
 800d704:	753b      	strb	r3, [r7, #20]
    t[1] = nonce >> 8;
 800d706:	88fb      	ldrh	r3, [r7, #6]
 800d708:	0a1b      	lsrs	r3, r3, #8
 800d70a:	b29b      	uxth	r3, r3
 800d70c:	b2db      	uxtb	r3, r3
 800d70e:	757b      	strb	r3, [r7, #21]

    shake256_inc_init(state);
 800d710:	68f8      	ldr	r0, [r7, #12]
 800d712:	f7f4 fe59 	bl	80023c8 <shake256_inc_init>
    shake256_inc_absorb(state, seed, CRHBYTES);
 800d716:	2240      	movs	r2, #64	@ 0x40
 800d718:	68b9      	ldr	r1, [r7, #8]
 800d71a:	68f8      	ldr	r0, [r7, #12]
 800d71c:	f7f4 fe60 	bl	80023e0 <shake256_inc_absorb>
    shake256_inc_absorb(state, t, 2);
 800d720:	f107 0314 	add.w	r3, r7, #20
 800d724:	2202      	movs	r2, #2
 800d726:	4619      	mov	r1, r3
 800d728:	68f8      	ldr	r0, [r7, #12]
 800d72a:	f7f4 fe59 	bl	80023e0 <shake256_inc_absorb>
    shake256_inc_finalize(state);
 800d72e:	68f8      	ldr	r0, [r7, #12]
 800d730:	f7f4 fe66 	bl	8002400 <shake256_inc_finalize>
}
 800d734:	bf00      	nop
 800d736:	3718      	adds	r7, #24
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd80      	pop	{r7, pc}

0800d73c <haetae_shake256_absorb_twice>:

void haetae_shake256_absorb_twice(xof256_state *state, const uint8_t *in1,
                                  size_t in1len, const uint8_t *in2,
                                  size_t in2len) {
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b084      	sub	sp, #16
 800d740:	af00      	add	r7, sp, #0
 800d742:	60f8      	str	r0, [r7, #12]
 800d744:	60b9      	str	r1, [r7, #8]
 800d746:	607a      	str	r2, [r7, #4]
 800d748:	603b      	str	r3, [r7, #0]
    shake256_inc_init(state);
 800d74a:	68f8      	ldr	r0, [r7, #12]
 800d74c:	f7f4 fe3c 	bl	80023c8 <shake256_inc_init>
    shake256_inc_absorb(state, in1, in1len);
 800d750:	687a      	ldr	r2, [r7, #4]
 800d752:	68b9      	ldr	r1, [r7, #8]
 800d754:	68f8      	ldr	r0, [r7, #12]
 800d756:	f7f4 fe43 	bl	80023e0 <shake256_inc_absorb>
    shake256_inc_absorb(state, in2, in2len);
 800d75a:	69ba      	ldr	r2, [r7, #24]
 800d75c:	6839      	ldr	r1, [r7, #0]
 800d75e:	68f8      	ldr	r0, [r7, #12]
 800d760:	f7f4 fe3e 	bl	80023e0 <shake256_inc_absorb>
    shake256_inc_finalize(state);
 800d764:	68f8      	ldr	r0, [r7, #12]
 800d766:	f7f4 fe4b 	bl	8002400 <shake256_inc_finalize>
}
 800d76a:	bf00      	nop
 800d76c:	3710      	adds	r7, #16
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}

0800d772 <haetae_shake256_absorb_once>:

void haetae_shake256_absorb_once(xof256_state *state, const uint8_t *in1,
                                  size_t in1len) {
 800d772:	b580      	push	{r7, lr}
 800d774:	b084      	sub	sp, #16
 800d776:	af00      	add	r7, sp, #0
 800d778:	60f8      	str	r0, [r7, #12]
 800d77a:	60b9      	str	r1, [r7, #8]
 800d77c:	607a      	str	r2, [r7, #4]
    shake256_inc_init(state);
 800d77e:	68f8      	ldr	r0, [r7, #12]
 800d780:	f7f4 fe22 	bl	80023c8 <shake256_inc_init>
    shake256_inc_absorb(state, in1, in1len);
 800d784:	687a      	ldr	r2, [r7, #4]
 800d786:	68b9      	ldr	r1, [r7, #8]
 800d788:	68f8      	ldr	r0, [r7, #12]
 800d78a:	f7f4 fe29 	bl	80023e0 <shake256_inc_absorb>
    shake256_inc_finalize(state);
 800d78e:	68f8      	ldr	r0, [r7, #12]
 800d790:	f7f4 fe36 	bl	8002400 <shake256_inc_finalize>
}
 800d794:	bf00      	nop
 800d796:	3710      	adds	r7, #16
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}

0800d79c <haetae_shake256_squeezeblocks>:

void haetae_shake256_squeezeblocks(uint8_t *output, size_t nblocks, xof256_state *state){
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b084      	sub	sp, #16
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	60f8      	str	r0, [r7, #12]
 800d7a4:	60b9      	str	r1, [r7, #8]
 800d7a6:	607a      	str	r2, [r7, #4]
    shake256_inc_squeeze(output, nblocks * XOF256_BLOCKBYTES, state);
 800d7a8:	68ba      	ldr	r2, [r7, #8]
 800d7aa:	4613      	mov	r3, r2
 800d7ac:	011b      	lsls	r3, r3, #4
 800d7ae:	4413      	add	r3, r2
 800d7b0:	00db      	lsls	r3, r3, #3
 800d7b2:	687a      	ldr	r2, [r7, #4]
 800d7b4:	4619      	mov	r1, r3
 800d7b6:	68f8      	ldr	r0, [r7, #12]
 800d7b8:	f7f4 fe30 	bl	800241c <shake256_inc_squeeze>
}
 800d7bc:	bf00      	nop
 800d7be:	3710      	adds	r7, #16
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	bd80      	pop	{r7, pc}

0800d7c4 <haetae_shake128_stream_squeezeblocks>:


void haetae_shake128_stream_squeezeblocks(uint8_t *output, size_t nblocks, stream128_state *state){
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b084      	sub	sp, #16
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	60f8      	str	r0, [r7, #12]
 800d7cc:	60b9      	str	r1, [r7, #8]
 800d7ce:	607a      	str	r2, [r7, #4]
    shake128_inc_squeeze(output, nblocks * STREAM128_BLOCKBYTES, state);
 800d7d0:	68bb      	ldr	r3, [r7, #8]
 800d7d2:	22a8      	movs	r2, #168	@ 0xa8
 800d7d4:	fb02 f303 	mul.w	r3, r2, r3
 800d7d8:	687a      	ldr	r2, [r7, #4]
 800d7da:	4619      	mov	r1, r3
 800d7dc:	68f8      	ldr	r0, [r7, #12]
 800d7de:	f7f4 fde3 	bl	80023a8 <shake128_inc_squeeze>
}
 800d7e2:	bf00      	nop
 800d7e4:	3710      	adds	r7, #16
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}

0800d7ea <haetae_shake256_stream_squeezeblocks>:

void haetae_shake256_stream_squeezeblocks(uint8_t *output, size_t nblocks, stream256_state *state){
 800d7ea:	b580      	push	{r7, lr}
 800d7ec:	b084      	sub	sp, #16
 800d7ee:	af00      	add	r7, sp, #0
 800d7f0:	60f8      	str	r0, [r7, #12]
 800d7f2:	60b9      	str	r1, [r7, #8]
 800d7f4:	607a      	str	r2, [r7, #4]
    shake256_inc_squeeze(output, nblocks * STREAM256_BLOCKBYTES, state);
 800d7f6:	68ba      	ldr	r2, [r7, #8]
 800d7f8:	4613      	mov	r3, r2
 800d7fa:	011b      	lsls	r3, r3, #4
 800d7fc:	4413      	add	r3, r2
 800d7fe:	00db      	lsls	r3, r3, #3
 800d800:	687a      	ldr	r2, [r7, #4]
 800d802:	4619      	mov	r1, r3
 800d804:	68f8      	ldr	r0, [r7, #12]
 800d806:	f7f4 fe09 	bl	800241c <shake256_inc_squeeze>
}
 800d80a:	bf00      	nop
 800d80c:	3710      	adds	r7, #16
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd80      	pop	{r7, pc}
	...

0800d814 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b086      	sub	sp, #24
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800d81c:	4a14      	ldr	r2, [pc, #80]	@ (800d870 <_sbrk+0x5c>)
 800d81e:	4b15      	ldr	r3, [pc, #84]	@ (800d874 <_sbrk+0x60>)
 800d820:	1ad3      	subs	r3, r2, r3
 800d822:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800d824:	697b      	ldr	r3, [r7, #20]
 800d826:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800d828:	4b13      	ldr	r3, [pc, #76]	@ (800d878 <_sbrk+0x64>)
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d102      	bne.n	800d836 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800d830:	4b11      	ldr	r3, [pc, #68]	@ (800d878 <_sbrk+0x64>)
 800d832:	4a12      	ldr	r2, [pc, #72]	@ (800d87c <_sbrk+0x68>)
 800d834:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800d836:	4b10      	ldr	r3, [pc, #64]	@ (800d878 <_sbrk+0x64>)
 800d838:	681a      	ldr	r2, [r3, #0]
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	4413      	add	r3, r2
 800d83e:	693a      	ldr	r2, [r7, #16]
 800d840:	429a      	cmp	r2, r3
 800d842:	d207      	bcs.n	800d854 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800d844:	f007 fed0 	bl	80155e8 <__errno>
 800d848:	4603      	mov	r3, r0
 800d84a:	220c      	movs	r2, #12
 800d84c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800d84e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d852:	e009      	b.n	800d868 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800d854:	4b08      	ldr	r3, [pc, #32]	@ (800d878 <_sbrk+0x64>)
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800d85a:	4b07      	ldr	r3, [pc, #28]	@ (800d878 <_sbrk+0x64>)
 800d85c:	681a      	ldr	r2, [r3, #0]
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	4413      	add	r3, r2
 800d862:	4a05      	ldr	r2, [pc, #20]	@ (800d878 <_sbrk+0x64>)
 800d864:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800d866:	68fb      	ldr	r3, [r7, #12]
}
 800d868:	4618      	mov	r0, r3
 800d86a:	3718      	adds	r7, #24
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bd80      	pop	{r7, pc}
 800d870:	20020000 	.word	0x20020000
 800d874:	00000400 	.word	0x00000400
 800d878:	20001488 	.word	0x20001488
 800d87c:	20001d98 	.word	0x20001d98

0800d880 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800d880:	b480      	push	{r7}
 800d882:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d884:	4b06      	ldr	r3, [pc, #24]	@ (800d8a0 <SystemInit+0x20>)
 800d886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d88a:	4a05      	ldr	r2, [pc, #20]	@ (800d8a0 <SystemInit+0x20>)
 800d88c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d890:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800d894:	bf00      	nop
 800d896:	46bd      	mov	sp, r7
 800d898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89c:	4770      	bx	lr
 800d89e:	bf00      	nop
 800d8a0:	e000ed00 	.word	0xe000ed00

0800d8a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800d8a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800d8dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800d8a8:	f7ff ffea 	bl	800d880 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800d8ac:	480c      	ldr	r0, [pc, #48]	@ (800d8e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800d8ae:	490d      	ldr	r1, [pc, #52]	@ (800d8e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800d8b0:	4a0d      	ldr	r2, [pc, #52]	@ (800d8e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800d8b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800d8b4:	e002      	b.n	800d8bc <LoopCopyDataInit>

0800d8b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800d8b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800d8b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800d8ba:	3304      	adds	r3, #4

0800d8bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800d8bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800d8be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800d8c0:	d3f9      	bcc.n	800d8b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800d8c2:	4a0a      	ldr	r2, [pc, #40]	@ (800d8ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800d8c4:	4c0a      	ldr	r4, [pc, #40]	@ (800d8f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 800d8c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800d8c8:	e001      	b.n	800d8ce <LoopFillZerobss>

0800d8ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800d8ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d8cc:	3204      	adds	r2, #4

0800d8ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800d8ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800d8d0:	d3fb      	bcc.n	800d8ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800d8d2:	f007 fe8f 	bl	80155f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d8d6:	f7f9 f82f 	bl	8006938 <main>
  bx  lr    
 800d8da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800d8dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800d8e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800d8e4:	20001304 	.word	0x20001304
  ldr r2, =_sidata
 800d8e8:	08017c08 	.word	0x08017c08
  ldr r2, =_sbss
 800d8ec:	20001304 	.word	0x20001304
  ldr r4, =_ebss
 800d8f0:	20001d94 	.word	0x20001d94

0800d8f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d8f4:	e7fe      	b.n	800d8f4 <ADC_IRQHandler>
	...

0800d8f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800d8fc:	4b0e      	ldr	r3, [pc, #56]	@ (800d938 <HAL_Init+0x40>)
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	4a0d      	ldr	r2, [pc, #52]	@ (800d938 <HAL_Init+0x40>)
 800d902:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d906:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800d908:	4b0b      	ldr	r3, [pc, #44]	@ (800d938 <HAL_Init+0x40>)
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	4a0a      	ldr	r2, [pc, #40]	@ (800d938 <HAL_Init+0x40>)
 800d90e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d912:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800d914:	4b08      	ldr	r3, [pc, #32]	@ (800d938 <HAL_Init+0x40>)
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	4a07      	ldr	r2, [pc, #28]	@ (800d938 <HAL_Init+0x40>)
 800d91a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d91e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800d920:	2003      	movs	r0, #3
 800d922:	f000 f94f 	bl	800dbc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800d926:	2000      	movs	r0, #0
 800d928:	f000 f808 	bl	800d93c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800d92c:	f7ff fd4a 	bl	800d3c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800d930:	2300      	movs	r3, #0
}
 800d932:	4618      	mov	r0, r3
 800d934:	bd80      	pop	{r7, pc}
 800d936:	bf00      	nop
 800d938:	40023c00 	.word	0x40023c00

0800d93c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b082      	sub	sp, #8
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800d944:	4b12      	ldr	r3, [pc, #72]	@ (800d990 <HAL_InitTick+0x54>)
 800d946:	681a      	ldr	r2, [r3, #0]
 800d948:	4b12      	ldr	r3, [pc, #72]	@ (800d994 <HAL_InitTick+0x58>)
 800d94a:	781b      	ldrb	r3, [r3, #0]
 800d94c:	4619      	mov	r1, r3
 800d94e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d952:	fbb3 f3f1 	udiv	r3, r3, r1
 800d956:	fbb2 f3f3 	udiv	r3, r2, r3
 800d95a:	4618      	mov	r0, r3
 800d95c:	f000 f967 	bl	800dc2e <HAL_SYSTICK_Config>
 800d960:	4603      	mov	r3, r0
 800d962:	2b00      	cmp	r3, #0
 800d964:	d001      	beq.n	800d96a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800d966:	2301      	movs	r3, #1
 800d968:	e00e      	b.n	800d988 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	2b0f      	cmp	r3, #15
 800d96e:	d80a      	bhi.n	800d986 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800d970:	2200      	movs	r2, #0
 800d972:	6879      	ldr	r1, [r7, #4]
 800d974:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d978:	f000 f92f 	bl	800dbda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800d97c:	4a06      	ldr	r2, [pc, #24]	@ (800d998 <HAL_InitTick+0x5c>)
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800d982:	2300      	movs	r3, #0
 800d984:	e000      	b.n	800d988 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800d986:	2301      	movs	r3, #1
}
 800d988:	4618      	mov	r0, r3
 800d98a:	3708      	adds	r7, #8
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}
 800d990:	20001288 	.word	0x20001288
 800d994:	20001290 	.word	0x20001290
 800d998:	2000128c 	.word	0x2000128c

0800d99c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800d99c:	b480      	push	{r7}
 800d99e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800d9a0:	4b06      	ldr	r3, [pc, #24]	@ (800d9bc <HAL_IncTick+0x20>)
 800d9a2:	781b      	ldrb	r3, [r3, #0]
 800d9a4:	461a      	mov	r2, r3
 800d9a6:	4b06      	ldr	r3, [pc, #24]	@ (800d9c0 <HAL_IncTick+0x24>)
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	4413      	add	r3, r2
 800d9ac:	4a04      	ldr	r2, [pc, #16]	@ (800d9c0 <HAL_IncTick+0x24>)
 800d9ae:	6013      	str	r3, [r2, #0]
}
 800d9b0:	bf00      	nop
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b8:	4770      	bx	lr
 800d9ba:	bf00      	nop
 800d9bc:	20001290 	.word	0x20001290
 800d9c0:	2000148c 	.word	0x2000148c

0800d9c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800d9c4:	b480      	push	{r7}
 800d9c6:	af00      	add	r7, sp, #0
  return uwTick;
 800d9c8:	4b03      	ldr	r3, [pc, #12]	@ (800d9d8 <HAL_GetTick+0x14>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d4:	4770      	bx	lr
 800d9d6:	bf00      	nop
 800d9d8:	2000148c 	.word	0x2000148c

0800d9dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b084      	sub	sp, #16
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800d9e4:	f7ff ffee 	bl	800d9c4 <HAL_GetTick>
 800d9e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d9f4:	d005      	beq.n	800da02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800d9f6:	4b0a      	ldr	r3, [pc, #40]	@ (800da20 <HAL_Delay+0x44>)
 800d9f8:	781b      	ldrb	r3, [r3, #0]
 800d9fa:	461a      	mov	r2, r3
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	4413      	add	r3, r2
 800da00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800da02:	bf00      	nop
 800da04:	f7ff ffde 	bl	800d9c4 <HAL_GetTick>
 800da08:	4602      	mov	r2, r0
 800da0a:	68bb      	ldr	r3, [r7, #8]
 800da0c:	1ad3      	subs	r3, r2, r3
 800da0e:	68fa      	ldr	r2, [r7, #12]
 800da10:	429a      	cmp	r2, r3
 800da12:	d8f7      	bhi.n	800da04 <HAL_Delay+0x28>
  {
  }
}
 800da14:	bf00      	nop
 800da16:	bf00      	nop
 800da18:	3710      	adds	r7, #16
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}
 800da1e:	bf00      	nop
 800da20:	20001290 	.word	0x20001290

0800da24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800da24:	b480      	push	{r7}
 800da26:	b085      	sub	sp, #20
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f003 0307 	and.w	r3, r3, #7
 800da32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800da34:	4b0c      	ldr	r3, [pc, #48]	@ (800da68 <__NVIC_SetPriorityGrouping+0x44>)
 800da36:	68db      	ldr	r3, [r3, #12]
 800da38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800da3a:	68ba      	ldr	r2, [r7, #8]
 800da3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800da40:	4013      	ands	r3, r2
 800da42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800da48:	68bb      	ldr	r3, [r7, #8]
 800da4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800da4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800da50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800da54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800da56:	4a04      	ldr	r2, [pc, #16]	@ (800da68 <__NVIC_SetPriorityGrouping+0x44>)
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	60d3      	str	r3, [r2, #12]
}
 800da5c:	bf00      	nop
 800da5e:	3714      	adds	r7, #20
 800da60:	46bd      	mov	sp, r7
 800da62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da66:	4770      	bx	lr
 800da68:	e000ed00 	.word	0xe000ed00

0800da6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800da6c:	b480      	push	{r7}
 800da6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800da70:	4b04      	ldr	r3, [pc, #16]	@ (800da84 <__NVIC_GetPriorityGrouping+0x18>)
 800da72:	68db      	ldr	r3, [r3, #12]
 800da74:	0a1b      	lsrs	r3, r3, #8
 800da76:	f003 0307 	and.w	r3, r3, #7
}
 800da7a:	4618      	mov	r0, r3
 800da7c:	46bd      	mov	sp, r7
 800da7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da82:	4770      	bx	lr
 800da84:	e000ed00 	.word	0xe000ed00

0800da88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800da88:	b480      	push	{r7}
 800da8a:	b083      	sub	sp, #12
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	4603      	mov	r3, r0
 800da90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800da92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800da96:	2b00      	cmp	r3, #0
 800da98:	db0b      	blt.n	800dab2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800da9a:	79fb      	ldrb	r3, [r7, #7]
 800da9c:	f003 021f 	and.w	r2, r3, #31
 800daa0:	4907      	ldr	r1, [pc, #28]	@ (800dac0 <__NVIC_EnableIRQ+0x38>)
 800daa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800daa6:	095b      	lsrs	r3, r3, #5
 800daa8:	2001      	movs	r0, #1
 800daaa:	fa00 f202 	lsl.w	r2, r0, r2
 800daae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800dab2:	bf00      	nop
 800dab4:	370c      	adds	r7, #12
 800dab6:	46bd      	mov	sp, r7
 800dab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dabc:	4770      	bx	lr
 800dabe:	bf00      	nop
 800dac0:	e000e100 	.word	0xe000e100

0800dac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800dac4:	b480      	push	{r7}
 800dac6:	b083      	sub	sp, #12
 800dac8:	af00      	add	r7, sp, #0
 800daca:	4603      	mov	r3, r0
 800dacc:	6039      	str	r1, [r7, #0]
 800dace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800dad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	db0a      	blt.n	800daee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	b2da      	uxtb	r2, r3
 800dadc:	490c      	ldr	r1, [pc, #48]	@ (800db10 <__NVIC_SetPriority+0x4c>)
 800dade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dae2:	0112      	lsls	r2, r2, #4
 800dae4:	b2d2      	uxtb	r2, r2
 800dae6:	440b      	add	r3, r1
 800dae8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800daec:	e00a      	b.n	800db04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800daee:	683b      	ldr	r3, [r7, #0]
 800daf0:	b2da      	uxtb	r2, r3
 800daf2:	4908      	ldr	r1, [pc, #32]	@ (800db14 <__NVIC_SetPriority+0x50>)
 800daf4:	79fb      	ldrb	r3, [r7, #7]
 800daf6:	f003 030f 	and.w	r3, r3, #15
 800dafa:	3b04      	subs	r3, #4
 800dafc:	0112      	lsls	r2, r2, #4
 800dafe:	b2d2      	uxtb	r2, r2
 800db00:	440b      	add	r3, r1
 800db02:	761a      	strb	r2, [r3, #24]
}
 800db04:	bf00      	nop
 800db06:	370c      	adds	r7, #12
 800db08:	46bd      	mov	sp, r7
 800db0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0e:	4770      	bx	lr
 800db10:	e000e100 	.word	0xe000e100
 800db14:	e000ed00 	.word	0xe000ed00

0800db18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800db18:	b480      	push	{r7}
 800db1a:	b089      	sub	sp, #36	@ 0x24
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	60f8      	str	r0, [r7, #12]
 800db20:	60b9      	str	r1, [r7, #8]
 800db22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	f003 0307 	and.w	r3, r3, #7
 800db2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800db2c:	69fb      	ldr	r3, [r7, #28]
 800db2e:	f1c3 0307 	rsb	r3, r3, #7
 800db32:	2b04      	cmp	r3, #4
 800db34:	bf28      	it	cs
 800db36:	2304      	movcs	r3, #4
 800db38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800db3a:	69fb      	ldr	r3, [r7, #28]
 800db3c:	3304      	adds	r3, #4
 800db3e:	2b06      	cmp	r3, #6
 800db40:	d902      	bls.n	800db48 <NVIC_EncodePriority+0x30>
 800db42:	69fb      	ldr	r3, [r7, #28]
 800db44:	3b03      	subs	r3, #3
 800db46:	e000      	b.n	800db4a <NVIC_EncodePriority+0x32>
 800db48:	2300      	movs	r3, #0
 800db4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800db4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800db50:	69bb      	ldr	r3, [r7, #24]
 800db52:	fa02 f303 	lsl.w	r3, r2, r3
 800db56:	43da      	mvns	r2, r3
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	401a      	ands	r2, r3
 800db5c:	697b      	ldr	r3, [r7, #20]
 800db5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800db60:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800db64:	697b      	ldr	r3, [r7, #20]
 800db66:	fa01 f303 	lsl.w	r3, r1, r3
 800db6a:	43d9      	mvns	r1, r3
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800db70:	4313      	orrs	r3, r2
         );
}
 800db72:	4618      	mov	r0, r3
 800db74:	3724      	adds	r7, #36	@ 0x24
 800db76:	46bd      	mov	sp, r7
 800db78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7c:	4770      	bx	lr
	...

0800db80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b082      	sub	sp, #8
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	3b01      	subs	r3, #1
 800db8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800db90:	d301      	bcc.n	800db96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800db92:	2301      	movs	r3, #1
 800db94:	e00f      	b.n	800dbb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800db96:	4a0a      	ldr	r2, [pc, #40]	@ (800dbc0 <SysTick_Config+0x40>)
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	3b01      	subs	r3, #1
 800db9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800db9e:	210f      	movs	r1, #15
 800dba0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dba4:	f7ff ff8e 	bl	800dac4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800dba8:	4b05      	ldr	r3, [pc, #20]	@ (800dbc0 <SysTick_Config+0x40>)
 800dbaa:	2200      	movs	r2, #0
 800dbac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800dbae:	4b04      	ldr	r3, [pc, #16]	@ (800dbc0 <SysTick_Config+0x40>)
 800dbb0:	2207      	movs	r2, #7
 800dbb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800dbb4:	2300      	movs	r3, #0
}
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	3708      	adds	r7, #8
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd80      	pop	{r7, pc}
 800dbbe:	bf00      	nop
 800dbc0:	e000e010 	.word	0xe000e010

0800dbc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b082      	sub	sp, #8
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800dbcc:	6878      	ldr	r0, [r7, #4]
 800dbce:	f7ff ff29 	bl	800da24 <__NVIC_SetPriorityGrouping>
}
 800dbd2:	bf00      	nop
 800dbd4:	3708      	adds	r7, #8
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}

0800dbda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800dbda:	b580      	push	{r7, lr}
 800dbdc:	b086      	sub	sp, #24
 800dbde:	af00      	add	r7, sp, #0
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	60b9      	str	r1, [r7, #8]
 800dbe4:	607a      	str	r2, [r7, #4]
 800dbe6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800dbe8:	2300      	movs	r3, #0
 800dbea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800dbec:	f7ff ff3e 	bl	800da6c <__NVIC_GetPriorityGrouping>
 800dbf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800dbf2:	687a      	ldr	r2, [r7, #4]
 800dbf4:	68b9      	ldr	r1, [r7, #8]
 800dbf6:	6978      	ldr	r0, [r7, #20]
 800dbf8:	f7ff ff8e 	bl	800db18 <NVIC_EncodePriority>
 800dbfc:	4602      	mov	r2, r0
 800dbfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc02:	4611      	mov	r1, r2
 800dc04:	4618      	mov	r0, r3
 800dc06:	f7ff ff5d 	bl	800dac4 <__NVIC_SetPriority>
}
 800dc0a:	bf00      	nop
 800dc0c:	3718      	adds	r7, #24
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}

0800dc12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800dc12:	b580      	push	{r7, lr}
 800dc14:	b082      	sub	sp, #8
 800dc16:	af00      	add	r7, sp, #0
 800dc18:	4603      	mov	r3, r0
 800dc1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800dc1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dc20:	4618      	mov	r0, r3
 800dc22:	f7ff ff31 	bl	800da88 <__NVIC_EnableIRQ>
}
 800dc26:	bf00      	nop
 800dc28:	3708      	adds	r7, #8
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bd80      	pop	{r7, pc}

0800dc2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800dc2e:	b580      	push	{r7, lr}
 800dc30:	b082      	sub	sp, #8
 800dc32:	af00      	add	r7, sp, #0
 800dc34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800dc36:	6878      	ldr	r0, [r7, #4]
 800dc38:	f7ff ffa2 	bl	800db80 <SysTick_Config>
 800dc3c:	4603      	mov	r3, r0
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	3708      	adds	r7, #8
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}
	...

0800dc48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800dc48:	b480      	push	{r7}
 800dc4a:	b089      	sub	sp, #36	@ 0x24
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
 800dc50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800dc52:	2300      	movs	r3, #0
 800dc54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800dc56:	2300      	movs	r3, #0
 800dc58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800dc5e:	2300      	movs	r3, #0
 800dc60:	61fb      	str	r3, [r7, #28]
 800dc62:	e16b      	b.n	800df3c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800dc64:	2201      	movs	r2, #1
 800dc66:	69fb      	ldr	r3, [r7, #28]
 800dc68:	fa02 f303 	lsl.w	r3, r2, r3
 800dc6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800dc6e:	683b      	ldr	r3, [r7, #0]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	697a      	ldr	r2, [r7, #20]
 800dc74:	4013      	ands	r3, r2
 800dc76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800dc78:	693a      	ldr	r2, [r7, #16]
 800dc7a:	697b      	ldr	r3, [r7, #20]
 800dc7c:	429a      	cmp	r2, r3
 800dc7e:	f040 815a 	bne.w	800df36 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	685b      	ldr	r3, [r3, #4]
 800dc86:	f003 0303 	and.w	r3, r3, #3
 800dc8a:	2b01      	cmp	r3, #1
 800dc8c:	d005      	beq.n	800dc9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	685b      	ldr	r3, [r3, #4]
 800dc92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800dc96:	2b02      	cmp	r3, #2
 800dc98:	d130      	bne.n	800dcfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	689b      	ldr	r3, [r3, #8]
 800dc9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800dca0:	69fb      	ldr	r3, [r7, #28]
 800dca2:	005b      	lsls	r3, r3, #1
 800dca4:	2203      	movs	r2, #3
 800dca6:	fa02 f303 	lsl.w	r3, r2, r3
 800dcaa:	43db      	mvns	r3, r3
 800dcac:	69ba      	ldr	r2, [r7, #24]
 800dcae:	4013      	ands	r3, r2
 800dcb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	68da      	ldr	r2, [r3, #12]
 800dcb6:	69fb      	ldr	r3, [r7, #28]
 800dcb8:	005b      	lsls	r3, r3, #1
 800dcba:	fa02 f303 	lsl.w	r3, r2, r3
 800dcbe:	69ba      	ldr	r2, [r7, #24]
 800dcc0:	4313      	orrs	r3, r2
 800dcc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	69ba      	ldr	r2, [r7, #24]
 800dcc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	685b      	ldr	r3, [r3, #4]
 800dcce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800dcd0:	2201      	movs	r2, #1
 800dcd2:	69fb      	ldr	r3, [r7, #28]
 800dcd4:	fa02 f303 	lsl.w	r3, r2, r3
 800dcd8:	43db      	mvns	r3, r3
 800dcda:	69ba      	ldr	r2, [r7, #24]
 800dcdc:	4013      	ands	r3, r2
 800dcde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800dce0:	683b      	ldr	r3, [r7, #0]
 800dce2:	685b      	ldr	r3, [r3, #4]
 800dce4:	091b      	lsrs	r3, r3, #4
 800dce6:	f003 0201 	and.w	r2, r3, #1
 800dcea:	69fb      	ldr	r3, [r7, #28]
 800dcec:	fa02 f303 	lsl.w	r3, r2, r3
 800dcf0:	69ba      	ldr	r2, [r7, #24]
 800dcf2:	4313      	orrs	r3, r2
 800dcf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	69ba      	ldr	r2, [r7, #24]
 800dcfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	685b      	ldr	r3, [r3, #4]
 800dd00:	f003 0303 	and.w	r3, r3, #3
 800dd04:	2b03      	cmp	r3, #3
 800dd06:	d017      	beq.n	800dd38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	68db      	ldr	r3, [r3, #12]
 800dd0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800dd0e:	69fb      	ldr	r3, [r7, #28]
 800dd10:	005b      	lsls	r3, r3, #1
 800dd12:	2203      	movs	r2, #3
 800dd14:	fa02 f303 	lsl.w	r3, r2, r3
 800dd18:	43db      	mvns	r3, r3
 800dd1a:	69ba      	ldr	r2, [r7, #24]
 800dd1c:	4013      	ands	r3, r2
 800dd1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	689a      	ldr	r2, [r3, #8]
 800dd24:	69fb      	ldr	r3, [r7, #28]
 800dd26:	005b      	lsls	r3, r3, #1
 800dd28:	fa02 f303 	lsl.w	r3, r2, r3
 800dd2c:	69ba      	ldr	r2, [r7, #24]
 800dd2e:	4313      	orrs	r3, r2
 800dd30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	69ba      	ldr	r2, [r7, #24]
 800dd36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	685b      	ldr	r3, [r3, #4]
 800dd3c:	f003 0303 	and.w	r3, r3, #3
 800dd40:	2b02      	cmp	r3, #2
 800dd42:	d123      	bne.n	800dd8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800dd44:	69fb      	ldr	r3, [r7, #28]
 800dd46:	08da      	lsrs	r2, r3, #3
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	3208      	adds	r2, #8
 800dd4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800dd52:	69fb      	ldr	r3, [r7, #28]
 800dd54:	f003 0307 	and.w	r3, r3, #7
 800dd58:	009b      	lsls	r3, r3, #2
 800dd5a:	220f      	movs	r2, #15
 800dd5c:	fa02 f303 	lsl.w	r3, r2, r3
 800dd60:	43db      	mvns	r3, r3
 800dd62:	69ba      	ldr	r2, [r7, #24]
 800dd64:	4013      	ands	r3, r2
 800dd66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800dd68:	683b      	ldr	r3, [r7, #0]
 800dd6a:	691a      	ldr	r2, [r3, #16]
 800dd6c:	69fb      	ldr	r3, [r7, #28]
 800dd6e:	f003 0307 	and.w	r3, r3, #7
 800dd72:	009b      	lsls	r3, r3, #2
 800dd74:	fa02 f303 	lsl.w	r3, r2, r3
 800dd78:	69ba      	ldr	r2, [r7, #24]
 800dd7a:	4313      	orrs	r3, r2
 800dd7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800dd7e:	69fb      	ldr	r3, [r7, #28]
 800dd80:	08da      	lsrs	r2, r3, #3
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	3208      	adds	r2, #8
 800dd86:	69b9      	ldr	r1, [r7, #24]
 800dd88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800dd92:	69fb      	ldr	r3, [r7, #28]
 800dd94:	005b      	lsls	r3, r3, #1
 800dd96:	2203      	movs	r2, #3
 800dd98:	fa02 f303 	lsl.w	r3, r2, r3
 800dd9c:	43db      	mvns	r3, r3
 800dd9e:	69ba      	ldr	r2, [r7, #24]
 800dda0:	4013      	ands	r3, r2
 800dda2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	685b      	ldr	r3, [r3, #4]
 800dda8:	f003 0203 	and.w	r2, r3, #3
 800ddac:	69fb      	ldr	r3, [r7, #28]
 800ddae:	005b      	lsls	r3, r3, #1
 800ddb0:	fa02 f303 	lsl.w	r3, r2, r3
 800ddb4:	69ba      	ldr	r2, [r7, #24]
 800ddb6:	4313      	orrs	r3, r2
 800ddb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	69ba      	ldr	r2, [r7, #24]
 800ddbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	685b      	ldr	r3, [r3, #4]
 800ddc4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	f000 80b4 	beq.w	800df36 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ddce:	2300      	movs	r3, #0
 800ddd0:	60fb      	str	r3, [r7, #12]
 800ddd2:	4b60      	ldr	r3, [pc, #384]	@ (800df54 <HAL_GPIO_Init+0x30c>)
 800ddd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ddd6:	4a5f      	ldr	r2, [pc, #380]	@ (800df54 <HAL_GPIO_Init+0x30c>)
 800ddd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800dddc:	6453      	str	r3, [r2, #68]	@ 0x44
 800ddde:	4b5d      	ldr	r3, [pc, #372]	@ (800df54 <HAL_GPIO_Init+0x30c>)
 800dde0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dde2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dde6:	60fb      	str	r3, [r7, #12]
 800dde8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ddea:	4a5b      	ldr	r2, [pc, #364]	@ (800df58 <HAL_GPIO_Init+0x310>)
 800ddec:	69fb      	ldr	r3, [r7, #28]
 800ddee:	089b      	lsrs	r3, r3, #2
 800ddf0:	3302      	adds	r3, #2
 800ddf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ddf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800ddf8:	69fb      	ldr	r3, [r7, #28]
 800ddfa:	f003 0303 	and.w	r3, r3, #3
 800ddfe:	009b      	lsls	r3, r3, #2
 800de00:	220f      	movs	r2, #15
 800de02:	fa02 f303 	lsl.w	r3, r2, r3
 800de06:	43db      	mvns	r3, r3
 800de08:	69ba      	ldr	r2, [r7, #24]
 800de0a:	4013      	ands	r3, r2
 800de0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	4a52      	ldr	r2, [pc, #328]	@ (800df5c <HAL_GPIO_Init+0x314>)
 800de12:	4293      	cmp	r3, r2
 800de14:	d02b      	beq.n	800de6e <HAL_GPIO_Init+0x226>
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	4a51      	ldr	r2, [pc, #324]	@ (800df60 <HAL_GPIO_Init+0x318>)
 800de1a:	4293      	cmp	r3, r2
 800de1c:	d025      	beq.n	800de6a <HAL_GPIO_Init+0x222>
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	4a50      	ldr	r2, [pc, #320]	@ (800df64 <HAL_GPIO_Init+0x31c>)
 800de22:	4293      	cmp	r3, r2
 800de24:	d01f      	beq.n	800de66 <HAL_GPIO_Init+0x21e>
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	4a4f      	ldr	r2, [pc, #316]	@ (800df68 <HAL_GPIO_Init+0x320>)
 800de2a:	4293      	cmp	r3, r2
 800de2c:	d019      	beq.n	800de62 <HAL_GPIO_Init+0x21a>
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	4a4e      	ldr	r2, [pc, #312]	@ (800df6c <HAL_GPIO_Init+0x324>)
 800de32:	4293      	cmp	r3, r2
 800de34:	d013      	beq.n	800de5e <HAL_GPIO_Init+0x216>
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	4a4d      	ldr	r2, [pc, #308]	@ (800df70 <HAL_GPIO_Init+0x328>)
 800de3a:	4293      	cmp	r3, r2
 800de3c:	d00d      	beq.n	800de5a <HAL_GPIO_Init+0x212>
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	4a4c      	ldr	r2, [pc, #304]	@ (800df74 <HAL_GPIO_Init+0x32c>)
 800de42:	4293      	cmp	r3, r2
 800de44:	d007      	beq.n	800de56 <HAL_GPIO_Init+0x20e>
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	4a4b      	ldr	r2, [pc, #300]	@ (800df78 <HAL_GPIO_Init+0x330>)
 800de4a:	4293      	cmp	r3, r2
 800de4c:	d101      	bne.n	800de52 <HAL_GPIO_Init+0x20a>
 800de4e:	2307      	movs	r3, #7
 800de50:	e00e      	b.n	800de70 <HAL_GPIO_Init+0x228>
 800de52:	2308      	movs	r3, #8
 800de54:	e00c      	b.n	800de70 <HAL_GPIO_Init+0x228>
 800de56:	2306      	movs	r3, #6
 800de58:	e00a      	b.n	800de70 <HAL_GPIO_Init+0x228>
 800de5a:	2305      	movs	r3, #5
 800de5c:	e008      	b.n	800de70 <HAL_GPIO_Init+0x228>
 800de5e:	2304      	movs	r3, #4
 800de60:	e006      	b.n	800de70 <HAL_GPIO_Init+0x228>
 800de62:	2303      	movs	r3, #3
 800de64:	e004      	b.n	800de70 <HAL_GPIO_Init+0x228>
 800de66:	2302      	movs	r3, #2
 800de68:	e002      	b.n	800de70 <HAL_GPIO_Init+0x228>
 800de6a:	2301      	movs	r3, #1
 800de6c:	e000      	b.n	800de70 <HAL_GPIO_Init+0x228>
 800de6e:	2300      	movs	r3, #0
 800de70:	69fa      	ldr	r2, [r7, #28]
 800de72:	f002 0203 	and.w	r2, r2, #3
 800de76:	0092      	lsls	r2, r2, #2
 800de78:	4093      	lsls	r3, r2
 800de7a:	69ba      	ldr	r2, [r7, #24]
 800de7c:	4313      	orrs	r3, r2
 800de7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800de80:	4935      	ldr	r1, [pc, #212]	@ (800df58 <HAL_GPIO_Init+0x310>)
 800de82:	69fb      	ldr	r3, [r7, #28]
 800de84:	089b      	lsrs	r3, r3, #2
 800de86:	3302      	adds	r3, #2
 800de88:	69ba      	ldr	r2, [r7, #24]
 800de8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800de8e:	4b3b      	ldr	r3, [pc, #236]	@ (800df7c <HAL_GPIO_Init+0x334>)
 800de90:	689b      	ldr	r3, [r3, #8]
 800de92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800de94:	693b      	ldr	r3, [r7, #16]
 800de96:	43db      	mvns	r3, r3
 800de98:	69ba      	ldr	r2, [r7, #24]
 800de9a:	4013      	ands	r3, r2
 800de9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	685b      	ldr	r3, [r3, #4]
 800dea2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d003      	beq.n	800deb2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800deaa:	69ba      	ldr	r2, [r7, #24]
 800deac:	693b      	ldr	r3, [r7, #16]
 800deae:	4313      	orrs	r3, r2
 800deb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800deb2:	4a32      	ldr	r2, [pc, #200]	@ (800df7c <HAL_GPIO_Init+0x334>)
 800deb4:	69bb      	ldr	r3, [r7, #24]
 800deb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800deb8:	4b30      	ldr	r3, [pc, #192]	@ (800df7c <HAL_GPIO_Init+0x334>)
 800deba:	68db      	ldr	r3, [r3, #12]
 800debc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800debe:	693b      	ldr	r3, [r7, #16]
 800dec0:	43db      	mvns	r3, r3
 800dec2:	69ba      	ldr	r2, [r7, #24]
 800dec4:	4013      	ands	r3, r2
 800dec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	685b      	ldr	r3, [r3, #4]
 800decc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d003      	beq.n	800dedc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800ded4:	69ba      	ldr	r2, [r7, #24]
 800ded6:	693b      	ldr	r3, [r7, #16]
 800ded8:	4313      	orrs	r3, r2
 800deda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800dedc:	4a27      	ldr	r2, [pc, #156]	@ (800df7c <HAL_GPIO_Init+0x334>)
 800dede:	69bb      	ldr	r3, [r7, #24]
 800dee0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800dee2:	4b26      	ldr	r3, [pc, #152]	@ (800df7c <HAL_GPIO_Init+0x334>)
 800dee4:	685b      	ldr	r3, [r3, #4]
 800dee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800dee8:	693b      	ldr	r3, [r7, #16]
 800deea:	43db      	mvns	r3, r3
 800deec:	69ba      	ldr	r2, [r7, #24]
 800deee:	4013      	ands	r3, r2
 800def0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	685b      	ldr	r3, [r3, #4]
 800def6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800defa:	2b00      	cmp	r3, #0
 800defc:	d003      	beq.n	800df06 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800defe:	69ba      	ldr	r2, [r7, #24]
 800df00:	693b      	ldr	r3, [r7, #16]
 800df02:	4313      	orrs	r3, r2
 800df04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800df06:	4a1d      	ldr	r2, [pc, #116]	@ (800df7c <HAL_GPIO_Init+0x334>)
 800df08:	69bb      	ldr	r3, [r7, #24]
 800df0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800df0c:	4b1b      	ldr	r3, [pc, #108]	@ (800df7c <HAL_GPIO_Init+0x334>)
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800df12:	693b      	ldr	r3, [r7, #16]
 800df14:	43db      	mvns	r3, r3
 800df16:	69ba      	ldr	r2, [r7, #24]
 800df18:	4013      	ands	r3, r2
 800df1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	685b      	ldr	r3, [r3, #4]
 800df20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800df24:	2b00      	cmp	r3, #0
 800df26:	d003      	beq.n	800df30 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800df28:	69ba      	ldr	r2, [r7, #24]
 800df2a:	693b      	ldr	r3, [r7, #16]
 800df2c:	4313      	orrs	r3, r2
 800df2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800df30:	4a12      	ldr	r2, [pc, #72]	@ (800df7c <HAL_GPIO_Init+0x334>)
 800df32:	69bb      	ldr	r3, [r7, #24]
 800df34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800df36:	69fb      	ldr	r3, [r7, #28]
 800df38:	3301      	adds	r3, #1
 800df3a:	61fb      	str	r3, [r7, #28]
 800df3c:	69fb      	ldr	r3, [r7, #28]
 800df3e:	2b0f      	cmp	r3, #15
 800df40:	f67f ae90 	bls.w	800dc64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800df44:	bf00      	nop
 800df46:	bf00      	nop
 800df48:	3724      	adds	r7, #36	@ 0x24
 800df4a:	46bd      	mov	sp, r7
 800df4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df50:	4770      	bx	lr
 800df52:	bf00      	nop
 800df54:	40023800 	.word	0x40023800
 800df58:	40013800 	.word	0x40013800
 800df5c:	40020000 	.word	0x40020000
 800df60:	40020400 	.word	0x40020400
 800df64:	40020800 	.word	0x40020800
 800df68:	40020c00 	.word	0x40020c00
 800df6c:	40021000 	.word	0x40021000
 800df70:	40021400 	.word	0x40021400
 800df74:	40021800 	.word	0x40021800
 800df78:	40021c00 	.word	0x40021c00
 800df7c:	40013c00 	.word	0x40013c00

0800df80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800df80:	b480      	push	{r7}
 800df82:	b083      	sub	sp, #12
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
 800df88:	460b      	mov	r3, r1
 800df8a:	807b      	strh	r3, [r7, #2]
 800df8c:	4613      	mov	r3, r2
 800df8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800df90:	787b      	ldrb	r3, [r7, #1]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d003      	beq.n	800df9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800df96:	887a      	ldrh	r2, [r7, #2]
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800df9c:	e003      	b.n	800dfa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800df9e:	887b      	ldrh	r3, [r7, #2]
 800dfa0:	041a      	lsls	r2, r3, #16
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	619a      	str	r2, [r3, #24]
}
 800dfa6:	bf00      	nop
 800dfa8:	370c      	adds	r7, #12
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb0:	4770      	bx	lr

0800dfb2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800dfb2:	b580      	push	{r7, lr}
 800dfb4:	b086      	sub	sp, #24
 800dfb6:	af02      	add	r7, sp, #8
 800dfb8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d101      	bne.n	800dfc4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800dfc0:	2301      	movs	r3, #1
 800dfc2:	e059      	b.n	800e078 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 800dfd0:	b2db      	uxtb	r3, r3
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d106      	bne.n	800dfe4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	2200      	movs	r2, #0
 800dfda:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800dfde:	6878      	ldr	r0, [r7, #4]
 800dfe0:	f006 ff80 	bl	8014ee4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	2203      	movs	r2, #3
 800dfe8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800dff2:	d102      	bne.n	800dffa <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2200      	movs	r2, #0
 800dff8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	4618      	mov	r0, r3
 800e000:	f003 fd9a 	bl	8011b38 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	6818      	ldr	r0, [r3, #0]
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	7c1a      	ldrb	r2, [r3, #16]
 800e00c:	f88d 2000 	strb.w	r2, [sp]
 800e010:	3304      	adds	r3, #4
 800e012:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e014:	f003 fd1b 	bl	8011a4e <USB_CoreInit>
 800e018:	4603      	mov	r3, r0
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d005      	beq.n	800e02a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	2202      	movs	r2, #2
 800e022:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800e026:	2301      	movs	r3, #1
 800e028:	e026      	b.n	800e078 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	2101      	movs	r1, #1
 800e030:	4618      	mov	r0, r3
 800e032:	f003 fd92 	bl	8011b5a <USB_SetCurrentMode>
 800e036:	4603      	mov	r3, r0
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d005      	beq.n	800e048 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	2202      	movs	r2, #2
 800e040:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800e044:	2301      	movs	r3, #1
 800e046:	e017      	b.n	800e078 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	6818      	ldr	r0, [r3, #0]
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	7c1a      	ldrb	r2, [r3, #16]
 800e050:	f88d 2000 	strb.w	r2, [sp]
 800e054:	3304      	adds	r3, #4
 800e056:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e058:	f003 ff34 	bl	8011ec4 <USB_HostInit>
 800e05c:	4603      	mov	r3, r0
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d005      	beq.n	800e06e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2202      	movs	r2, #2
 800e066:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800e06a:	2301      	movs	r3, #1
 800e06c:	e004      	b.n	800e078 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	2201      	movs	r2, #1
 800e072:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800e076:	2300      	movs	r3, #0
}
 800e078:	4618      	mov	r0, r3
 800e07a:	3710      	adds	r7, #16
 800e07c:	46bd      	mov	sp, r7
 800e07e:	bd80      	pop	{r7, pc}

0800e080 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e080:	b590      	push	{r4, r7, lr}
 800e082:	b08b      	sub	sp, #44	@ 0x2c
 800e084:	af04      	add	r7, sp, #16
 800e086:	6078      	str	r0, [r7, #4]
 800e088:	4608      	mov	r0, r1
 800e08a:	4611      	mov	r1, r2
 800e08c:	461a      	mov	r2, r3
 800e08e:	4603      	mov	r3, r0
 800e090:	70fb      	strb	r3, [r7, #3]
 800e092:	460b      	mov	r3, r1
 800e094:	70bb      	strb	r3, [r7, #2]
 800e096:	4613      	mov	r3, r2
 800e098:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800e09a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800e09c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800e0a4:	2b01      	cmp	r3, #1
 800e0a6:	d101      	bne.n	800e0ac <HAL_HCD_HC_Init+0x2c>
 800e0a8:	2302      	movs	r3, #2
 800e0aa:	e09d      	b.n	800e1e8 <HAL_HCD_HC_Init+0x168>
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2201      	movs	r2, #1
 800e0b0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800e0b4:	78fa      	ldrb	r2, [r7, #3]
 800e0b6:	6879      	ldr	r1, [r7, #4]
 800e0b8:	4613      	mov	r3, r2
 800e0ba:	011b      	lsls	r3, r3, #4
 800e0bc:	1a9b      	subs	r3, r3, r2
 800e0be:	009b      	lsls	r3, r3, #2
 800e0c0:	440b      	add	r3, r1
 800e0c2:	3319      	adds	r3, #25
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800e0c8:	78fa      	ldrb	r2, [r7, #3]
 800e0ca:	6879      	ldr	r1, [r7, #4]
 800e0cc:	4613      	mov	r3, r2
 800e0ce:	011b      	lsls	r3, r3, #4
 800e0d0:	1a9b      	subs	r3, r3, r2
 800e0d2:	009b      	lsls	r3, r3, #2
 800e0d4:	440b      	add	r3, r1
 800e0d6:	3314      	adds	r3, #20
 800e0d8:	787a      	ldrb	r2, [r7, #1]
 800e0da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800e0dc:	78fa      	ldrb	r2, [r7, #3]
 800e0de:	6879      	ldr	r1, [r7, #4]
 800e0e0:	4613      	mov	r3, r2
 800e0e2:	011b      	lsls	r3, r3, #4
 800e0e4:	1a9b      	subs	r3, r3, r2
 800e0e6:	009b      	lsls	r3, r3, #2
 800e0e8:	440b      	add	r3, r1
 800e0ea:	3315      	adds	r3, #21
 800e0ec:	78fa      	ldrb	r2, [r7, #3]
 800e0ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800e0f0:	78fa      	ldrb	r2, [r7, #3]
 800e0f2:	6879      	ldr	r1, [r7, #4]
 800e0f4:	4613      	mov	r3, r2
 800e0f6:	011b      	lsls	r3, r3, #4
 800e0f8:	1a9b      	subs	r3, r3, r2
 800e0fa:	009b      	lsls	r3, r3, #2
 800e0fc:	440b      	add	r3, r1
 800e0fe:	3326      	adds	r3, #38	@ 0x26
 800e100:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800e104:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800e106:	78fa      	ldrb	r2, [r7, #3]
 800e108:	78bb      	ldrb	r3, [r7, #2]
 800e10a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e10e:	b2d8      	uxtb	r0, r3
 800e110:	6879      	ldr	r1, [r7, #4]
 800e112:	4613      	mov	r3, r2
 800e114:	011b      	lsls	r3, r3, #4
 800e116:	1a9b      	subs	r3, r3, r2
 800e118:	009b      	lsls	r3, r3, #2
 800e11a:	440b      	add	r3, r1
 800e11c:	3316      	adds	r3, #22
 800e11e:	4602      	mov	r2, r0
 800e120:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800e122:	78fb      	ldrb	r3, [r7, #3]
 800e124:	4619      	mov	r1, r3
 800e126:	6878      	ldr	r0, [r7, #4]
 800e128:	f000 fbc8 	bl	800e8bc <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800e12c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e130:	2b00      	cmp	r3, #0
 800e132:	da0a      	bge.n	800e14a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800e134:	78fa      	ldrb	r2, [r7, #3]
 800e136:	6879      	ldr	r1, [r7, #4]
 800e138:	4613      	mov	r3, r2
 800e13a:	011b      	lsls	r3, r3, #4
 800e13c:	1a9b      	subs	r3, r3, r2
 800e13e:	009b      	lsls	r3, r3, #2
 800e140:	440b      	add	r3, r1
 800e142:	3317      	adds	r3, #23
 800e144:	2201      	movs	r2, #1
 800e146:	701a      	strb	r2, [r3, #0]
 800e148:	e009      	b.n	800e15e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800e14a:	78fa      	ldrb	r2, [r7, #3]
 800e14c:	6879      	ldr	r1, [r7, #4]
 800e14e:	4613      	mov	r3, r2
 800e150:	011b      	lsls	r3, r3, #4
 800e152:	1a9b      	subs	r3, r3, r2
 800e154:	009b      	lsls	r3, r3, #2
 800e156:	440b      	add	r3, r1
 800e158:	3317      	adds	r3, #23
 800e15a:	2200      	movs	r2, #0
 800e15c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	4618      	mov	r0, r3
 800e164:	f004 f812 	bl	801218c <USB_GetHostSpeed>
 800e168:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800e16a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e16e:	2b01      	cmp	r3, #1
 800e170:	d10b      	bne.n	800e18a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800e172:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e176:	2b01      	cmp	r3, #1
 800e178:	d107      	bne.n	800e18a <HAL_HCD_HC_Init+0x10a>
 800e17a:	693b      	ldr	r3, [r7, #16]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d104      	bne.n	800e18a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800e180:	697b      	ldr	r3, [r7, #20]
 800e182:	2bbc      	cmp	r3, #188	@ 0xbc
 800e184:	d901      	bls.n	800e18a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800e186:	23bc      	movs	r3, #188	@ 0xbc
 800e188:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800e18a:	78fa      	ldrb	r2, [r7, #3]
 800e18c:	6879      	ldr	r1, [r7, #4]
 800e18e:	4613      	mov	r3, r2
 800e190:	011b      	lsls	r3, r3, #4
 800e192:	1a9b      	subs	r3, r3, r2
 800e194:	009b      	lsls	r3, r3, #2
 800e196:	440b      	add	r3, r1
 800e198:	3318      	adds	r3, #24
 800e19a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800e19e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 800e1a0:	78fa      	ldrb	r2, [r7, #3]
 800e1a2:	697b      	ldr	r3, [r7, #20]
 800e1a4:	b298      	uxth	r0, r3
 800e1a6:	6879      	ldr	r1, [r7, #4]
 800e1a8:	4613      	mov	r3, r2
 800e1aa:	011b      	lsls	r3, r3, #4
 800e1ac:	1a9b      	subs	r3, r3, r2
 800e1ae:	009b      	lsls	r3, r3, #2
 800e1b0:	440b      	add	r3, r1
 800e1b2:	3328      	adds	r3, #40	@ 0x28
 800e1b4:	4602      	mov	r2, r0
 800e1b6:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	6818      	ldr	r0, [r3, #0]
 800e1bc:	697b      	ldr	r3, [r7, #20]
 800e1be:	b29b      	uxth	r3, r3
 800e1c0:	787c      	ldrb	r4, [r7, #1]
 800e1c2:	78ba      	ldrb	r2, [r7, #2]
 800e1c4:	78f9      	ldrb	r1, [r7, #3]
 800e1c6:	9302      	str	r3, [sp, #8]
 800e1c8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e1cc:	9301      	str	r3, [sp, #4]
 800e1ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e1d2:	9300      	str	r3, [sp, #0]
 800e1d4:	4623      	mov	r3, r4
 800e1d6:	f004 f801 	bl	80121dc <USB_HC_Init>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800e1e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	371c      	adds	r7, #28
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	bd90      	pop	{r4, r7, pc}

0800e1f0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b084      	sub	sp, #16
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
 800e1f8:	460b      	mov	r3, r1
 800e1fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800e206:	2b01      	cmp	r3, #1
 800e208:	d101      	bne.n	800e20e <HAL_HCD_HC_Halt+0x1e>
 800e20a:	2302      	movs	r3, #2
 800e20c:	e00f      	b.n	800e22e <HAL_HCD_HC_Halt+0x3e>
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	2201      	movs	r2, #1
 800e212:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	78fa      	ldrb	r2, [r7, #3]
 800e21c:	4611      	mov	r1, r2
 800e21e:	4618      	mov	r0, r3
 800e220:	f004 fb93 	bl	801294a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	2200      	movs	r2, #0
 800e228:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800e22c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e22e:	4618      	mov	r0, r3
 800e230:	3710      	adds	r7, #16
 800e232:	46bd      	mov	sp, r7
 800e234:	bd80      	pop	{r7, pc}
	...

0800e238 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b082      	sub	sp, #8
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
 800e240:	4608      	mov	r0, r1
 800e242:	4611      	mov	r1, r2
 800e244:	461a      	mov	r2, r3
 800e246:	4603      	mov	r3, r0
 800e248:	70fb      	strb	r3, [r7, #3]
 800e24a:	460b      	mov	r3, r1
 800e24c:	70bb      	strb	r3, [r7, #2]
 800e24e:	4613      	mov	r3, r2
 800e250:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800e252:	78fa      	ldrb	r2, [r7, #3]
 800e254:	6879      	ldr	r1, [r7, #4]
 800e256:	4613      	mov	r3, r2
 800e258:	011b      	lsls	r3, r3, #4
 800e25a:	1a9b      	subs	r3, r3, r2
 800e25c:	009b      	lsls	r3, r3, #2
 800e25e:	440b      	add	r3, r1
 800e260:	3317      	adds	r3, #23
 800e262:	78ba      	ldrb	r2, [r7, #2]
 800e264:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800e266:	78fa      	ldrb	r2, [r7, #3]
 800e268:	6879      	ldr	r1, [r7, #4]
 800e26a:	4613      	mov	r3, r2
 800e26c:	011b      	lsls	r3, r3, #4
 800e26e:	1a9b      	subs	r3, r3, r2
 800e270:	009b      	lsls	r3, r3, #2
 800e272:	440b      	add	r3, r1
 800e274:	3326      	adds	r3, #38	@ 0x26
 800e276:	787a      	ldrb	r2, [r7, #1]
 800e278:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800e27a:	7c3b      	ldrb	r3, [r7, #16]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d114      	bne.n	800e2aa <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800e280:	78fa      	ldrb	r2, [r7, #3]
 800e282:	6879      	ldr	r1, [r7, #4]
 800e284:	4613      	mov	r3, r2
 800e286:	011b      	lsls	r3, r3, #4
 800e288:	1a9b      	subs	r3, r3, r2
 800e28a:	009b      	lsls	r3, r3, #2
 800e28c:	440b      	add	r3, r1
 800e28e:	332a      	adds	r3, #42	@ 0x2a
 800e290:	2203      	movs	r2, #3
 800e292:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800e294:	78fa      	ldrb	r2, [r7, #3]
 800e296:	6879      	ldr	r1, [r7, #4]
 800e298:	4613      	mov	r3, r2
 800e29a:	011b      	lsls	r3, r3, #4
 800e29c:	1a9b      	subs	r3, r3, r2
 800e29e:	009b      	lsls	r3, r3, #2
 800e2a0:	440b      	add	r3, r1
 800e2a2:	3319      	adds	r3, #25
 800e2a4:	7f3a      	ldrb	r2, [r7, #28]
 800e2a6:	701a      	strb	r2, [r3, #0]
 800e2a8:	e009      	b.n	800e2be <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800e2aa:	78fa      	ldrb	r2, [r7, #3]
 800e2ac:	6879      	ldr	r1, [r7, #4]
 800e2ae:	4613      	mov	r3, r2
 800e2b0:	011b      	lsls	r3, r3, #4
 800e2b2:	1a9b      	subs	r3, r3, r2
 800e2b4:	009b      	lsls	r3, r3, #2
 800e2b6:	440b      	add	r3, r1
 800e2b8:	332a      	adds	r3, #42	@ 0x2a
 800e2ba:	2202      	movs	r2, #2
 800e2bc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800e2be:	787b      	ldrb	r3, [r7, #1]
 800e2c0:	2b03      	cmp	r3, #3
 800e2c2:	f200 8102 	bhi.w	800e4ca <HAL_HCD_HC_SubmitRequest+0x292>
 800e2c6:	a201      	add	r2, pc, #4	@ (adr r2, 800e2cc <HAL_HCD_HC_SubmitRequest+0x94>)
 800e2c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2cc:	0800e2dd 	.word	0x0800e2dd
 800e2d0:	0800e4b5 	.word	0x0800e4b5
 800e2d4:	0800e3a1 	.word	0x0800e3a1
 800e2d8:	0800e42b 	.word	0x0800e42b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800e2dc:	7c3b      	ldrb	r3, [r7, #16]
 800e2de:	2b01      	cmp	r3, #1
 800e2e0:	f040 80f5 	bne.w	800e4ce <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 800e2e4:	78bb      	ldrb	r3, [r7, #2]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d12d      	bne.n	800e346 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800e2ea:	8b3b      	ldrh	r3, [r7, #24]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d109      	bne.n	800e304 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 800e2f0:	78fa      	ldrb	r2, [r7, #3]
 800e2f2:	6879      	ldr	r1, [r7, #4]
 800e2f4:	4613      	mov	r3, r2
 800e2f6:	011b      	lsls	r3, r3, #4
 800e2f8:	1a9b      	subs	r3, r3, r2
 800e2fa:	009b      	lsls	r3, r3, #2
 800e2fc:	440b      	add	r3, r1
 800e2fe:	333d      	adds	r3, #61	@ 0x3d
 800e300:	2201      	movs	r2, #1
 800e302:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 800e304:	78fa      	ldrb	r2, [r7, #3]
 800e306:	6879      	ldr	r1, [r7, #4]
 800e308:	4613      	mov	r3, r2
 800e30a:	011b      	lsls	r3, r3, #4
 800e30c:	1a9b      	subs	r3, r3, r2
 800e30e:	009b      	lsls	r3, r3, #2
 800e310:	440b      	add	r3, r1
 800e312:	333d      	adds	r3, #61	@ 0x3d
 800e314:	781b      	ldrb	r3, [r3, #0]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d10a      	bne.n	800e330 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800e31a:	78fa      	ldrb	r2, [r7, #3]
 800e31c:	6879      	ldr	r1, [r7, #4]
 800e31e:	4613      	mov	r3, r2
 800e320:	011b      	lsls	r3, r3, #4
 800e322:	1a9b      	subs	r3, r3, r2
 800e324:	009b      	lsls	r3, r3, #2
 800e326:	440b      	add	r3, r1
 800e328:	332a      	adds	r3, #42	@ 0x2a
 800e32a:	2200      	movs	r2, #0
 800e32c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800e32e:	e0ce      	b.n	800e4ce <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800e330:	78fa      	ldrb	r2, [r7, #3]
 800e332:	6879      	ldr	r1, [r7, #4]
 800e334:	4613      	mov	r3, r2
 800e336:	011b      	lsls	r3, r3, #4
 800e338:	1a9b      	subs	r3, r3, r2
 800e33a:	009b      	lsls	r3, r3, #2
 800e33c:	440b      	add	r3, r1
 800e33e:	332a      	adds	r3, #42	@ 0x2a
 800e340:	2202      	movs	r2, #2
 800e342:	701a      	strb	r2, [r3, #0]
      break;
 800e344:	e0c3      	b.n	800e4ce <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800e346:	78fa      	ldrb	r2, [r7, #3]
 800e348:	6879      	ldr	r1, [r7, #4]
 800e34a:	4613      	mov	r3, r2
 800e34c:	011b      	lsls	r3, r3, #4
 800e34e:	1a9b      	subs	r3, r3, r2
 800e350:	009b      	lsls	r3, r3, #2
 800e352:	440b      	add	r3, r1
 800e354:	331a      	adds	r3, #26
 800e356:	781b      	ldrb	r3, [r3, #0]
 800e358:	2b01      	cmp	r3, #1
 800e35a:	f040 80b8 	bne.w	800e4ce <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800e35e:	78fa      	ldrb	r2, [r7, #3]
 800e360:	6879      	ldr	r1, [r7, #4]
 800e362:	4613      	mov	r3, r2
 800e364:	011b      	lsls	r3, r3, #4
 800e366:	1a9b      	subs	r3, r3, r2
 800e368:	009b      	lsls	r3, r3, #2
 800e36a:	440b      	add	r3, r1
 800e36c:	333c      	adds	r3, #60	@ 0x3c
 800e36e:	781b      	ldrb	r3, [r3, #0]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d10a      	bne.n	800e38a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800e374:	78fa      	ldrb	r2, [r7, #3]
 800e376:	6879      	ldr	r1, [r7, #4]
 800e378:	4613      	mov	r3, r2
 800e37a:	011b      	lsls	r3, r3, #4
 800e37c:	1a9b      	subs	r3, r3, r2
 800e37e:	009b      	lsls	r3, r3, #2
 800e380:	440b      	add	r3, r1
 800e382:	332a      	adds	r3, #42	@ 0x2a
 800e384:	2200      	movs	r2, #0
 800e386:	701a      	strb	r2, [r3, #0]
      break;
 800e388:	e0a1      	b.n	800e4ce <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800e38a:	78fa      	ldrb	r2, [r7, #3]
 800e38c:	6879      	ldr	r1, [r7, #4]
 800e38e:	4613      	mov	r3, r2
 800e390:	011b      	lsls	r3, r3, #4
 800e392:	1a9b      	subs	r3, r3, r2
 800e394:	009b      	lsls	r3, r3, #2
 800e396:	440b      	add	r3, r1
 800e398:	332a      	adds	r3, #42	@ 0x2a
 800e39a:	2202      	movs	r2, #2
 800e39c:	701a      	strb	r2, [r3, #0]
      break;
 800e39e:	e096      	b.n	800e4ce <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800e3a0:	78bb      	ldrb	r3, [r7, #2]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d120      	bne.n	800e3e8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800e3a6:	78fa      	ldrb	r2, [r7, #3]
 800e3a8:	6879      	ldr	r1, [r7, #4]
 800e3aa:	4613      	mov	r3, r2
 800e3ac:	011b      	lsls	r3, r3, #4
 800e3ae:	1a9b      	subs	r3, r3, r2
 800e3b0:	009b      	lsls	r3, r3, #2
 800e3b2:	440b      	add	r3, r1
 800e3b4:	333d      	adds	r3, #61	@ 0x3d
 800e3b6:	781b      	ldrb	r3, [r3, #0]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d10a      	bne.n	800e3d2 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800e3bc:	78fa      	ldrb	r2, [r7, #3]
 800e3be:	6879      	ldr	r1, [r7, #4]
 800e3c0:	4613      	mov	r3, r2
 800e3c2:	011b      	lsls	r3, r3, #4
 800e3c4:	1a9b      	subs	r3, r3, r2
 800e3c6:	009b      	lsls	r3, r3, #2
 800e3c8:	440b      	add	r3, r1
 800e3ca:	332a      	adds	r3, #42	@ 0x2a
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800e3d0:	e07e      	b.n	800e4d0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800e3d2:	78fa      	ldrb	r2, [r7, #3]
 800e3d4:	6879      	ldr	r1, [r7, #4]
 800e3d6:	4613      	mov	r3, r2
 800e3d8:	011b      	lsls	r3, r3, #4
 800e3da:	1a9b      	subs	r3, r3, r2
 800e3dc:	009b      	lsls	r3, r3, #2
 800e3de:	440b      	add	r3, r1
 800e3e0:	332a      	adds	r3, #42	@ 0x2a
 800e3e2:	2202      	movs	r2, #2
 800e3e4:	701a      	strb	r2, [r3, #0]
      break;
 800e3e6:	e073      	b.n	800e4d0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800e3e8:	78fa      	ldrb	r2, [r7, #3]
 800e3ea:	6879      	ldr	r1, [r7, #4]
 800e3ec:	4613      	mov	r3, r2
 800e3ee:	011b      	lsls	r3, r3, #4
 800e3f0:	1a9b      	subs	r3, r3, r2
 800e3f2:	009b      	lsls	r3, r3, #2
 800e3f4:	440b      	add	r3, r1
 800e3f6:	333c      	adds	r3, #60	@ 0x3c
 800e3f8:	781b      	ldrb	r3, [r3, #0]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d10a      	bne.n	800e414 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800e3fe:	78fa      	ldrb	r2, [r7, #3]
 800e400:	6879      	ldr	r1, [r7, #4]
 800e402:	4613      	mov	r3, r2
 800e404:	011b      	lsls	r3, r3, #4
 800e406:	1a9b      	subs	r3, r3, r2
 800e408:	009b      	lsls	r3, r3, #2
 800e40a:	440b      	add	r3, r1
 800e40c:	332a      	adds	r3, #42	@ 0x2a
 800e40e:	2200      	movs	r2, #0
 800e410:	701a      	strb	r2, [r3, #0]
      break;
 800e412:	e05d      	b.n	800e4d0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800e414:	78fa      	ldrb	r2, [r7, #3]
 800e416:	6879      	ldr	r1, [r7, #4]
 800e418:	4613      	mov	r3, r2
 800e41a:	011b      	lsls	r3, r3, #4
 800e41c:	1a9b      	subs	r3, r3, r2
 800e41e:	009b      	lsls	r3, r3, #2
 800e420:	440b      	add	r3, r1
 800e422:	332a      	adds	r3, #42	@ 0x2a
 800e424:	2202      	movs	r2, #2
 800e426:	701a      	strb	r2, [r3, #0]
      break;
 800e428:	e052      	b.n	800e4d0 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800e42a:	78bb      	ldrb	r3, [r7, #2]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d120      	bne.n	800e472 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800e430:	78fa      	ldrb	r2, [r7, #3]
 800e432:	6879      	ldr	r1, [r7, #4]
 800e434:	4613      	mov	r3, r2
 800e436:	011b      	lsls	r3, r3, #4
 800e438:	1a9b      	subs	r3, r3, r2
 800e43a:	009b      	lsls	r3, r3, #2
 800e43c:	440b      	add	r3, r1
 800e43e:	333d      	adds	r3, #61	@ 0x3d
 800e440:	781b      	ldrb	r3, [r3, #0]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d10a      	bne.n	800e45c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800e446:	78fa      	ldrb	r2, [r7, #3]
 800e448:	6879      	ldr	r1, [r7, #4]
 800e44a:	4613      	mov	r3, r2
 800e44c:	011b      	lsls	r3, r3, #4
 800e44e:	1a9b      	subs	r3, r3, r2
 800e450:	009b      	lsls	r3, r3, #2
 800e452:	440b      	add	r3, r1
 800e454:	332a      	adds	r3, #42	@ 0x2a
 800e456:	2200      	movs	r2, #0
 800e458:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800e45a:	e039      	b.n	800e4d0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800e45c:	78fa      	ldrb	r2, [r7, #3]
 800e45e:	6879      	ldr	r1, [r7, #4]
 800e460:	4613      	mov	r3, r2
 800e462:	011b      	lsls	r3, r3, #4
 800e464:	1a9b      	subs	r3, r3, r2
 800e466:	009b      	lsls	r3, r3, #2
 800e468:	440b      	add	r3, r1
 800e46a:	332a      	adds	r3, #42	@ 0x2a
 800e46c:	2202      	movs	r2, #2
 800e46e:	701a      	strb	r2, [r3, #0]
      break;
 800e470:	e02e      	b.n	800e4d0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800e472:	78fa      	ldrb	r2, [r7, #3]
 800e474:	6879      	ldr	r1, [r7, #4]
 800e476:	4613      	mov	r3, r2
 800e478:	011b      	lsls	r3, r3, #4
 800e47a:	1a9b      	subs	r3, r3, r2
 800e47c:	009b      	lsls	r3, r3, #2
 800e47e:	440b      	add	r3, r1
 800e480:	333c      	adds	r3, #60	@ 0x3c
 800e482:	781b      	ldrb	r3, [r3, #0]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d10a      	bne.n	800e49e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800e488:	78fa      	ldrb	r2, [r7, #3]
 800e48a:	6879      	ldr	r1, [r7, #4]
 800e48c:	4613      	mov	r3, r2
 800e48e:	011b      	lsls	r3, r3, #4
 800e490:	1a9b      	subs	r3, r3, r2
 800e492:	009b      	lsls	r3, r3, #2
 800e494:	440b      	add	r3, r1
 800e496:	332a      	adds	r3, #42	@ 0x2a
 800e498:	2200      	movs	r2, #0
 800e49a:	701a      	strb	r2, [r3, #0]
      break;
 800e49c:	e018      	b.n	800e4d0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800e49e:	78fa      	ldrb	r2, [r7, #3]
 800e4a0:	6879      	ldr	r1, [r7, #4]
 800e4a2:	4613      	mov	r3, r2
 800e4a4:	011b      	lsls	r3, r3, #4
 800e4a6:	1a9b      	subs	r3, r3, r2
 800e4a8:	009b      	lsls	r3, r3, #2
 800e4aa:	440b      	add	r3, r1
 800e4ac:	332a      	adds	r3, #42	@ 0x2a
 800e4ae:	2202      	movs	r2, #2
 800e4b0:	701a      	strb	r2, [r3, #0]
      break;
 800e4b2:	e00d      	b.n	800e4d0 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800e4b4:	78fa      	ldrb	r2, [r7, #3]
 800e4b6:	6879      	ldr	r1, [r7, #4]
 800e4b8:	4613      	mov	r3, r2
 800e4ba:	011b      	lsls	r3, r3, #4
 800e4bc:	1a9b      	subs	r3, r3, r2
 800e4be:	009b      	lsls	r3, r3, #2
 800e4c0:	440b      	add	r3, r1
 800e4c2:	332a      	adds	r3, #42	@ 0x2a
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	701a      	strb	r2, [r3, #0]
      break;
 800e4c8:	e002      	b.n	800e4d0 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800e4ca:	bf00      	nop
 800e4cc:	e000      	b.n	800e4d0 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800e4ce:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800e4d0:	78fa      	ldrb	r2, [r7, #3]
 800e4d2:	6879      	ldr	r1, [r7, #4]
 800e4d4:	4613      	mov	r3, r2
 800e4d6:	011b      	lsls	r3, r3, #4
 800e4d8:	1a9b      	subs	r3, r3, r2
 800e4da:	009b      	lsls	r3, r3, #2
 800e4dc:	440b      	add	r3, r1
 800e4de:	332c      	adds	r3, #44	@ 0x2c
 800e4e0:	697a      	ldr	r2, [r7, #20]
 800e4e2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800e4e4:	78fa      	ldrb	r2, [r7, #3]
 800e4e6:	8b39      	ldrh	r1, [r7, #24]
 800e4e8:	6878      	ldr	r0, [r7, #4]
 800e4ea:	4613      	mov	r3, r2
 800e4ec:	011b      	lsls	r3, r3, #4
 800e4ee:	1a9b      	subs	r3, r3, r2
 800e4f0:	009b      	lsls	r3, r3, #2
 800e4f2:	4403      	add	r3, r0
 800e4f4:	3334      	adds	r3, #52	@ 0x34
 800e4f6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800e4f8:	78fa      	ldrb	r2, [r7, #3]
 800e4fa:	6879      	ldr	r1, [r7, #4]
 800e4fc:	4613      	mov	r3, r2
 800e4fe:	011b      	lsls	r3, r3, #4
 800e500:	1a9b      	subs	r3, r3, r2
 800e502:	009b      	lsls	r3, r3, #2
 800e504:	440b      	add	r3, r1
 800e506:	334c      	adds	r3, #76	@ 0x4c
 800e508:	2200      	movs	r2, #0
 800e50a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800e50c:	78fa      	ldrb	r2, [r7, #3]
 800e50e:	6879      	ldr	r1, [r7, #4]
 800e510:	4613      	mov	r3, r2
 800e512:	011b      	lsls	r3, r3, #4
 800e514:	1a9b      	subs	r3, r3, r2
 800e516:	009b      	lsls	r3, r3, #2
 800e518:	440b      	add	r3, r1
 800e51a:	3338      	adds	r3, #56	@ 0x38
 800e51c:	2200      	movs	r2, #0
 800e51e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800e520:	78fa      	ldrb	r2, [r7, #3]
 800e522:	6879      	ldr	r1, [r7, #4]
 800e524:	4613      	mov	r3, r2
 800e526:	011b      	lsls	r3, r3, #4
 800e528:	1a9b      	subs	r3, r3, r2
 800e52a:	009b      	lsls	r3, r3, #2
 800e52c:	440b      	add	r3, r1
 800e52e:	3315      	adds	r3, #21
 800e530:	78fa      	ldrb	r2, [r7, #3]
 800e532:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800e534:	78fa      	ldrb	r2, [r7, #3]
 800e536:	6879      	ldr	r1, [r7, #4]
 800e538:	4613      	mov	r3, r2
 800e53a:	011b      	lsls	r3, r3, #4
 800e53c:	1a9b      	subs	r3, r3, r2
 800e53e:	009b      	lsls	r3, r3, #2
 800e540:	440b      	add	r3, r1
 800e542:	334d      	adds	r3, #77	@ 0x4d
 800e544:	2200      	movs	r2, #0
 800e546:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	6818      	ldr	r0, [r3, #0]
 800e54c:	78fa      	ldrb	r2, [r7, #3]
 800e54e:	4613      	mov	r3, r2
 800e550:	011b      	lsls	r3, r3, #4
 800e552:	1a9b      	subs	r3, r3, r2
 800e554:	009b      	lsls	r3, r3, #2
 800e556:	3310      	adds	r3, #16
 800e558:	687a      	ldr	r2, [r7, #4]
 800e55a:	4413      	add	r3, r2
 800e55c:	1d19      	adds	r1, r3, #4
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	799b      	ldrb	r3, [r3, #6]
 800e562:	461a      	mov	r2, r3
 800e564:	f003 ff66 	bl	8012434 <USB_HC_StartXfer>
 800e568:	4603      	mov	r3, r0
}
 800e56a:	4618      	mov	r0, r3
 800e56c:	3708      	adds	r7, #8
 800e56e:	46bd      	mov	sp, r7
 800e570:	bd80      	pop	{r7, pc}
 800e572:	bf00      	nop

0800e574 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b086      	sub	sp, #24
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e582:	693b      	ldr	r3, [r7, #16]
 800e584:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	4618      	mov	r0, r3
 800e58c:	f003 fc5b 	bl	8011e46 <USB_GetMode>
 800e590:	4603      	mov	r3, r0
 800e592:	2b01      	cmp	r3, #1
 800e594:	f040 80fb 	bne.w	800e78e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	4618      	mov	r0, r3
 800e59e:	f003 fc1e 	bl	8011dde <USB_ReadInterrupts>
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	f000 80f1 	beq.w	800e78c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	f003 fc15 	bl	8011dde <USB_ReadInterrupts>
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e5ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e5be:	d104      	bne.n	800e5ca <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800e5c8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	f003 fc05 	bl	8011dde <USB_ReadInterrupts>
 800e5d4:	4603      	mov	r3, r0
 800e5d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e5da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e5de:	d104      	bne.n	800e5ea <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800e5e8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	f003 fbf5 	bl	8011dde <USB_ReadInterrupts>
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e5fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e5fe:	d104      	bne.n	800e60a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800e608:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	4618      	mov	r0, r3
 800e610:	f003 fbe5 	bl	8011dde <USB_ReadInterrupts>
 800e614:	4603      	mov	r3, r0
 800e616:	f003 0302 	and.w	r3, r3, #2
 800e61a:	2b02      	cmp	r3, #2
 800e61c:	d103      	bne.n	800e626 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	2202      	movs	r2, #2
 800e624:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	4618      	mov	r0, r3
 800e62c:	f003 fbd7 	bl	8011dde <USB_ReadInterrupts>
 800e630:	4603      	mov	r3, r0
 800e632:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e636:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e63a:	d120      	bne.n	800e67e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800e644:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	f003 0301 	and.w	r3, r3, #1
 800e652:	2b00      	cmp	r3, #0
 800e654:	d113      	bne.n	800e67e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800e656:	2110      	movs	r1, #16
 800e658:	6938      	ldr	r0, [r7, #16]
 800e65a:	f003 faca 	bl	8011bf2 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800e65e:	6938      	ldr	r0, [r7, #16]
 800e660:	f003 faf9 	bl	8011c56 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	7a5b      	ldrb	r3, [r3, #9]
 800e668:	2b02      	cmp	r3, #2
 800e66a:	d105      	bne.n	800e678 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	2101      	movs	r1, #1
 800e672:	4618      	mov	r0, r3
 800e674:	f003 fcea 	bl	801204c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800e678:	6878      	ldr	r0, [r7, #4]
 800e67a:	f006 fcb1 	bl	8014fe0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	4618      	mov	r0, r3
 800e684:	f003 fbab 	bl	8011dde <USB_ReadInterrupts>
 800e688:	4603      	mov	r3, r0
 800e68a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e68e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e692:	d102      	bne.n	800e69a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800e694:	6878      	ldr	r0, [r7, #4]
 800e696:	f001 fd33 	bl	8010100 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	4618      	mov	r0, r3
 800e6a0:	f003 fb9d 	bl	8011dde <USB_ReadInterrupts>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	f003 0308 	and.w	r3, r3, #8
 800e6aa:	2b08      	cmp	r3, #8
 800e6ac:	d106      	bne.n	800e6bc <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800e6ae:	6878      	ldr	r0, [r7, #4]
 800e6b0:	f006 fc7a 	bl	8014fa8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	2208      	movs	r2, #8
 800e6ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	f003 fb8c 	bl	8011dde <USB_ReadInterrupts>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e6cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e6d0:	d139      	bne.n	800e746 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	f004 f926 	bl	8012928 <USB_HC_ReadInterrupt>
 800e6dc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800e6de:	2300      	movs	r3, #0
 800e6e0:	617b      	str	r3, [r7, #20]
 800e6e2:	e025      	b.n	800e730 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800e6e4:	697b      	ldr	r3, [r7, #20]
 800e6e6:	f003 030f 	and.w	r3, r3, #15
 800e6ea:	68ba      	ldr	r2, [r7, #8]
 800e6ec:	fa22 f303 	lsr.w	r3, r2, r3
 800e6f0:	f003 0301 	and.w	r3, r3, #1
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d018      	beq.n	800e72a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800e6f8:	697b      	ldr	r3, [r7, #20]
 800e6fa:	015a      	lsls	r2, r3, #5
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	4413      	add	r3, r2
 800e700:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e70a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e70e:	d106      	bne.n	800e71e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800e710:	697b      	ldr	r3, [r7, #20]
 800e712:	b2db      	uxtb	r3, r3
 800e714:	4619      	mov	r1, r3
 800e716:	6878      	ldr	r0, [r7, #4]
 800e718:	f000 f905 	bl	800e926 <HCD_HC_IN_IRQHandler>
 800e71c:	e005      	b.n	800e72a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800e71e:	697b      	ldr	r3, [r7, #20]
 800e720:	b2db      	uxtb	r3, r3
 800e722:	4619      	mov	r1, r3
 800e724:	6878      	ldr	r0, [r7, #4]
 800e726:	f000 ff67 	bl	800f5f8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800e72a:	697b      	ldr	r3, [r7, #20]
 800e72c:	3301      	adds	r3, #1
 800e72e:	617b      	str	r3, [r7, #20]
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	795b      	ldrb	r3, [r3, #5]
 800e734:	461a      	mov	r2, r3
 800e736:	697b      	ldr	r3, [r7, #20]
 800e738:	4293      	cmp	r3, r2
 800e73a:	d3d3      	bcc.n	800e6e4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800e744:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	4618      	mov	r0, r3
 800e74c:	f003 fb47 	bl	8011dde <USB_ReadInterrupts>
 800e750:	4603      	mov	r3, r0
 800e752:	f003 0310 	and.w	r3, r3, #16
 800e756:	2b10      	cmp	r3, #16
 800e758:	d101      	bne.n	800e75e <HAL_HCD_IRQHandler+0x1ea>
 800e75a:	2301      	movs	r3, #1
 800e75c:	e000      	b.n	800e760 <HAL_HCD_IRQHandler+0x1ec>
 800e75e:	2300      	movs	r3, #0
 800e760:	2b00      	cmp	r3, #0
 800e762:	d014      	beq.n	800e78e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	699a      	ldr	r2, [r3, #24]
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	f022 0210 	bic.w	r2, r2, #16
 800e772:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800e774:	6878      	ldr	r0, [r7, #4]
 800e776:	f001 fbe4 	bl	800ff42 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	699a      	ldr	r2, [r3, #24]
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	f042 0210 	orr.w	r2, r2, #16
 800e788:	619a      	str	r2, [r3, #24]
 800e78a:	e000      	b.n	800e78e <HAL_HCD_IRQHandler+0x21a>
      return;
 800e78c:	bf00      	nop
    }
  }
}
 800e78e:	3718      	adds	r7, #24
 800e790:	46bd      	mov	sp, r7
 800e792:	bd80      	pop	{r7, pc}

0800e794 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800e794:	b580      	push	{r7, lr}
 800e796:	b082      	sub	sp, #8
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800e7a2:	2b01      	cmp	r3, #1
 800e7a4:	d101      	bne.n	800e7aa <HAL_HCD_Start+0x16>
 800e7a6:	2302      	movs	r3, #2
 800e7a8:	e013      	b.n	800e7d2 <HAL_HCD_Start+0x3e>
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	2201      	movs	r2, #1
 800e7ae:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	2101      	movs	r1, #1
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	f003 fcae 	bl	801211a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	f003 f9a7 	bl	8011b16 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800e7d0:	2300      	movs	r3, #0
}
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	3708      	adds	r7, #8
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	bd80      	pop	{r7, pc}

0800e7da <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800e7da:	b580      	push	{r7, lr}
 800e7dc:	b082      	sub	sp, #8
 800e7de:	af00      	add	r7, sp, #0
 800e7e0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800e7e8:	2b01      	cmp	r3, #1
 800e7ea:	d101      	bne.n	800e7f0 <HAL_HCD_Stop+0x16>
 800e7ec:	2302      	movs	r3, #2
 800e7ee:	e00d      	b.n	800e80c <HAL_HCD_Stop+0x32>
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2201      	movs	r2, #1
 800e7f4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	f004 fa01 	bl	8012c04 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	2200      	movs	r2, #0
 800e806:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800e80a:	2300      	movs	r3, #0
}
 800e80c:	4618      	mov	r0, r3
 800e80e:	3708      	adds	r7, #8
 800e810:	46bd      	mov	sp, r7
 800e812:	bd80      	pop	{r7, pc}

0800e814 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b082      	sub	sp, #8
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	4618      	mov	r0, r3
 800e822:	f003 fc50 	bl	80120c6 <USB_ResetPort>
 800e826:	4603      	mov	r3, r0
}
 800e828:	4618      	mov	r0, r3
 800e82a:	3708      	adds	r7, #8
 800e82c:	46bd      	mov	sp, r7
 800e82e:	bd80      	pop	{r7, pc}

0800e830 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800e830:	b480      	push	{r7}
 800e832:	b083      	sub	sp, #12
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
 800e838:	460b      	mov	r3, r1
 800e83a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800e83c:	78fa      	ldrb	r2, [r7, #3]
 800e83e:	6879      	ldr	r1, [r7, #4]
 800e840:	4613      	mov	r3, r2
 800e842:	011b      	lsls	r3, r3, #4
 800e844:	1a9b      	subs	r3, r3, r2
 800e846:	009b      	lsls	r3, r3, #2
 800e848:	440b      	add	r3, r1
 800e84a:	334c      	adds	r3, #76	@ 0x4c
 800e84c:	781b      	ldrb	r3, [r3, #0]
}
 800e84e:	4618      	mov	r0, r3
 800e850:	370c      	adds	r7, #12
 800e852:	46bd      	mov	sp, r7
 800e854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e858:	4770      	bx	lr

0800e85a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800e85a:	b480      	push	{r7}
 800e85c:	b083      	sub	sp, #12
 800e85e:	af00      	add	r7, sp, #0
 800e860:	6078      	str	r0, [r7, #4]
 800e862:	460b      	mov	r3, r1
 800e864:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800e866:	78fa      	ldrb	r2, [r7, #3]
 800e868:	6879      	ldr	r1, [r7, #4]
 800e86a:	4613      	mov	r3, r2
 800e86c:	011b      	lsls	r3, r3, #4
 800e86e:	1a9b      	subs	r3, r3, r2
 800e870:	009b      	lsls	r3, r3, #2
 800e872:	440b      	add	r3, r1
 800e874:	3338      	adds	r3, #56	@ 0x38
 800e876:	681b      	ldr	r3, [r3, #0]
}
 800e878:	4618      	mov	r0, r3
 800e87a:	370c      	adds	r7, #12
 800e87c:	46bd      	mov	sp, r7
 800e87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e882:	4770      	bx	lr

0800e884 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b082      	sub	sp, #8
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	4618      	mov	r0, r3
 800e892:	f003 fc92 	bl	80121ba <USB_GetCurrentFrame>
 800e896:	4603      	mov	r3, r0
}
 800e898:	4618      	mov	r0, r3
 800e89a:	3708      	adds	r7, #8
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bd80      	pop	{r7, pc}

0800e8a0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b082      	sub	sp, #8
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	f003 fc6d 	bl	801218c <USB_GetHostSpeed>
 800e8b2:	4603      	mov	r3, r0
}
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	3708      	adds	r7, #8
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	bd80      	pop	{r7, pc}

0800e8bc <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800e8bc:	b480      	push	{r7}
 800e8be:	b083      	sub	sp, #12
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
 800e8c4:	460b      	mov	r3, r1
 800e8c6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 800e8c8:	78fa      	ldrb	r2, [r7, #3]
 800e8ca:	6879      	ldr	r1, [r7, #4]
 800e8cc:	4613      	mov	r3, r2
 800e8ce:	011b      	lsls	r3, r3, #4
 800e8d0:	1a9b      	subs	r3, r3, r2
 800e8d2:	009b      	lsls	r3, r3, #2
 800e8d4:	440b      	add	r3, r1
 800e8d6:	331a      	adds	r3, #26
 800e8d8:	2200      	movs	r2, #0
 800e8da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 800e8dc:	78fa      	ldrb	r2, [r7, #3]
 800e8de:	6879      	ldr	r1, [r7, #4]
 800e8e0:	4613      	mov	r3, r2
 800e8e2:	011b      	lsls	r3, r3, #4
 800e8e4:	1a9b      	subs	r3, r3, r2
 800e8e6:	009b      	lsls	r3, r3, #2
 800e8e8:	440b      	add	r3, r1
 800e8ea:	331b      	adds	r3, #27
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 800e8f0:	78fa      	ldrb	r2, [r7, #3]
 800e8f2:	6879      	ldr	r1, [r7, #4]
 800e8f4:	4613      	mov	r3, r2
 800e8f6:	011b      	lsls	r3, r3, #4
 800e8f8:	1a9b      	subs	r3, r3, r2
 800e8fa:	009b      	lsls	r3, r3, #2
 800e8fc:	440b      	add	r3, r1
 800e8fe:	3325      	adds	r3, #37	@ 0x25
 800e900:	2200      	movs	r2, #0
 800e902:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 800e904:	78fa      	ldrb	r2, [r7, #3]
 800e906:	6879      	ldr	r1, [r7, #4]
 800e908:	4613      	mov	r3, r2
 800e90a:	011b      	lsls	r3, r3, #4
 800e90c:	1a9b      	subs	r3, r3, r2
 800e90e:	009b      	lsls	r3, r3, #2
 800e910:	440b      	add	r3, r1
 800e912:	3324      	adds	r3, #36	@ 0x24
 800e914:	2200      	movs	r2, #0
 800e916:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 800e918:	2300      	movs	r3, #0
}
 800e91a:	4618      	mov	r0, r3
 800e91c:	370c      	adds	r7, #12
 800e91e:	46bd      	mov	sp, r7
 800e920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e924:	4770      	bx	lr

0800e926 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800e926:	b580      	push	{r7, lr}
 800e928:	b086      	sub	sp, #24
 800e92a:	af00      	add	r7, sp, #0
 800e92c:	6078      	str	r0, [r7, #4]
 800e92e:	460b      	mov	r3, r1
 800e930:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e938:	697b      	ldr	r3, [r7, #20]
 800e93a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	78fa      	ldrb	r2, [r7, #3]
 800e942:	4611      	mov	r1, r2
 800e944:	4618      	mov	r0, r3
 800e946:	f003 fa5d 	bl	8011e04 <USB_ReadChInterrupts>
 800e94a:	4603      	mov	r3, r0
 800e94c:	f003 0304 	and.w	r3, r3, #4
 800e950:	2b04      	cmp	r3, #4
 800e952:	d11a      	bne.n	800e98a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800e954:	78fb      	ldrb	r3, [r7, #3]
 800e956:	015a      	lsls	r2, r3, #5
 800e958:	693b      	ldr	r3, [r7, #16]
 800e95a:	4413      	add	r3, r2
 800e95c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e960:	461a      	mov	r2, r3
 800e962:	2304      	movs	r3, #4
 800e964:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800e966:	78fa      	ldrb	r2, [r7, #3]
 800e968:	6879      	ldr	r1, [r7, #4]
 800e96a:	4613      	mov	r3, r2
 800e96c:	011b      	lsls	r3, r3, #4
 800e96e:	1a9b      	subs	r3, r3, r2
 800e970:	009b      	lsls	r3, r3, #2
 800e972:	440b      	add	r3, r1
 800e974:	334d      	adds	r3, #77	@ 0x4d
 800e976:	2207      	movs	r2, #7
 800e978:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	78fa      	ldrb	r2, [r7, #3]
 800e980:	4611      	mov	r1, r2
 800e982:	4618      	mov	r0, r3
 800e984:	f003 ffe1 	bl	801294a <USB_HC_Halt>
 800e988:	e09e      	b.n	800eac8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	78fa      	ldrb	r2, [r7, #3]
 800e990:	4611      	mov	r1, r2
 800e992:	4618      	mov	r0, r3
 800e994:	f003 fa36 	bl	8011e04 <USB_ReadChInterrupts>
 800e998:	4603      	mov	r3, r0
 800e99a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e99e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e9a2:	d11b      	bne.n	800e9dc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800e9a4:	78fb      	ldrb	r3, [r7, #3]
 800e9a6:	015a      	lsls	r2, r3, #5
 800e9a8:	693b      	ldr	r3, [r7, #16]
 800e9aa:	4413      	add	r3, r2
 800e9ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e9b0:	461a      	mov	r2, r3
 800e9b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e9b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800e9b8:	78fa      	ldrb	r2, [r7, #3]
 800e9ba:	6879      	ldr	r1, [r7, #4]
 800e9bc:	4613      	mov	r3, r2
 800e9be:	011b      	lsls	r3, r3, #4
 800e9c0:	1a9b      	subs	r3, r3, r2
 800e9c2:	009b      	lsls	r3, r3, #2
 800e9c4:	440b      	add	r3, r1
 800e9c6:	334d      	adds	r3, #77	@ 0x4d
 800e9c8:	2208      	movs	r2, #8
 800e9ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	78fa      	ldrb	r2, [r7, #3]
 800e9d2:	4611      	mov	r1, r2
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	f003 ffb8 	bl	801294a <USB_HC_Halt>
 800e9da:	e075      	b.n	800eac8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	78fa      	ldrb	r2, [r7, #3]
 800e9e2:	4611      	mov	r1, r2
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	f003 fa0d 	bl	8011e04 <USB_ReadChInterrupts>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	f003 0308 	and.w	r3, r3, #8
 800e9f0:	2b08      	cmp	r3, #8
 800e9f2:	d11a      	bne.n	800ea2a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800e9f4:	78fb      	ldrb	r3, [r7, #3]
 800e9f6:	015a      	lsls	r2, r3, #5
 800e9f8:	693b      	ldr	r3, [r7, #16]
 800e9fa:	4413      	add	r3, r2
 800e9fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ea00:	461a      	mov	r2, r3
 800ea02:	2308      	movs	r3, #8
 800ea04:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800ea06:	78fa      	ldrb	r2, [r7, #3]
 800ea08:	6879      	ldr	r1, [r7, #4]
 800ea0a:	4613      	mov	r3, r2
 800ea0c:	011b      	lsls	r3, r3, #4
 800ea0e:	1a9b      	subs	r3, r3, r2
 800ea10:	009b      	lsls	r3, r3, #2
 800ea12:	440b      	add	r3, r1
 800ea14:	334d      	adds	r3, #77	@ 0x4d
 800ea16:	2206      	movs	r2, #6
 800ea18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	78fa      	ldrb	r2, [r7, #3]
 800ea20:	4611      	mov	r1, r2
 800ea22:	4618      	mov	r0, r3
 800ea24:	f003 ff91 	bl	801294a <USB_HC_Halt>
 800ea28:	e04e      	b.n	800eac8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	78fa      	ldrb	r2, [r7, #3]
 800ea30:	4611      	mov	r1, r2
 800ea32:	4618      	mov	r0, r3
 800ea34:	f003 f9e6 	bl	8011e04 <USB_ReadChInterrupts>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ea3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ea42:	d11b      	bne.n	800ea7c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800ea44:	78fb      	ldrb	r3, [r7, #3]
 800ea46:	015a      	lsls	r2, r3, #5
 800ea48:	693b      	ldr	r3, [r7, #16]
 800ea4a:	4413      	add	r3, r2
 800ea4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ea50:	461a      	mov	r2, r3
 800ea52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ea56:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800ea58:	78fa      	ldrb	r2, [r7, #3]
 800ea5a:	6879      	ldr	r1, [r7, #4]
 800ea5c:	4613      	mov	r3, r2
 800ea5e:	011b      	lsls	r3, r3, #4
 800ea60:	1a9b      	subs	r3, r3, r2
 800ea62:	009b      	lsls	r3, r3, #2
 800ea64:	440b      	add	r3, r1
 800ea66:	334d      	adds	r3, #77	@ 0x4d
 800ea68:	2209      	movs	r2, #9
 800ea6a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	78fa      	ldrb	r2, [r7, #3]
 800ea72:	4611      	mov	r1, r2
 800ea74:	4618      	mov	r0, r3
 800ea76:	f003 ff68 	bl	801294a <USB_HC_Halt>
 800ea7a:	e025      	b.n	800eac8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	78fa      	ldrb	r2, [r7, #3]
 800ea82:	4611      	mov	r1, r2
 800ea84:	4618      	mov	r0, r3
 800ea86:	f003 f9bd 	bl	8011e04 <USB_ReadChInterrupts>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ea90:	2b80      	cmp	r3, #128	@ 0x80
 800ea92:	d119      	bne.n	800eac8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800ea94:	78fb      	ldrb	r3, [r7, #3]
 800ea96:	015a      	lsls	r2, r3, #5
 800ea98:	693b      	ldr	r3, [r7, #16]
 800ea9a:	4413      	add	r3, r2
 800ea9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eaa0:	461a      	mov	r2, r3
 800eaa2:	2380      	movs	r3, #128	@ 0x80
 800eaa4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800eaa6:	78fa      	ldrb	r2, [r7, #3]
 800eaa8:	6879      	ldr	r1, [r7, #4]
 800eaaa:	4613      	mov	r3, r2
 800eaac:	011b      	lsls	r3, r3, #4
 800eaae:	1a9b      	subs	r3, r3, r2
 800eab0:	009b      	lsls	r3, r3, #2
 800eab2:	440b      	add	r3, r1
 800eab4:	334d      	adds	r3, #77	@ 0x4d
 800eab6:	2207      	movs	r2, #7
 800eab8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	78fa      	ldrb	r2, [r7, #3]
 800eac0:	4611      	mov	r1, r2
 800eac2:	4618      	mov	r0, r3
 800eac4:	f003 ff41 	bl	801294a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	78fa      	ldrb	r2, [r7, #3]
 800eace:	4611      	mov	r1, r2
 800ead0:	4618      	mov	r0, r3
 800ead2:	f003 f997 	bl	8011e04 <USB_ReadChInterrupts>
 800ead6:	4603      	mov	r3, r0
 800ead8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800eadc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eae0:	d112      	bne.n	800eb08 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	78fa      	ldrb	r2, [r7, #3]
 800eae8:	4611      	mov	r1, r2
 800eaea:	4618      	mov	r0, r3
 800eaec:	f003 ff2d 	bl	801294a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800eaf0:	78fb      	ldrb	r3, [r7, #3]
 800eaf2:	015a      	lsls	r2, r3, #5
 800eaf4:	693b      	ldr	r3, [r7, #16]
 800eaf6:	4413      	add	r3, r2
 800eaf8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eafc:	461a      	mov	r2, r3
 800eafe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800eb02:	6093      	str	r3, [r2, #8]
 800eb04:	f000 bd75 	b.w	800f5f2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	78fa      	ldrb	r2, [r7, #3]
 800eb0e:	4611      	mov	r1, r2
 800eb10:	4618      	mov	r0, r3
 800eb12:	f003 f977 	bl	8011e04 <USB_ReadChInterrupts>
 800eb16:	4603      	mov	r3, r0
 800eb18:	f003 0301 	and.w	r3, r3, #1
 800eb1c:	2b01      	cmp	r3, #1
 800eb1e:	f040 8128 	bne.w	800ed72 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800eb22:	78fb      	ldrb	r3, [r7, #3]
 800eb24:	015a      	lsls	r2, r3, #5
 800eb26:	693b      	ldr	r3, [r7, #16]
 800eb28:	4413      	add	r3, r2
 800eb2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eb2e:	461a      	mov	r2, r3
 800eb30:	2320      	movs	r3, #32
 800eb32:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800eb34:	78fa      	ldrb	r2, [r7, #3]
 800eb36:	6879      	ldr	r1, [r7, #4]
 800eb38:	4613      	mov	r3, r2
 800eb3a:	011b      	lsls	r3, r3, #4
 800eb3c:	1a9b      	subs	r3, r3, r2
 800eb3e:	009b      	lsls	r3, r3, #2
 800eb40:	440b      	add	r3, r1
 800eb42:	331b      	adds	r3, #27
 800eb44:	781b      	ldrb	r3, [r3, #0]
 800eb46:	2b01      	cmp	r3, #1
 800eb48:	d119      	bne.n	800eb7e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800eb4a:	78fa      	ldrb	r2, [r7, #3]
 800eb4c:	6879      	ldr	r1, [r7, #4]
 800eb4e:	4613      	mov	r3, r2
 800eb50:	011b      	lsls	r3, r3, #4
 800eb52:	1a9b      	subs	r3, r3, r2
 800eb54:	009b      	lsls	r3, r3, #2
 800eb56:	440b      	add	r3, r1
 800eb58:	331b      	adds	r3, #27
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800eb5e:	78fb      	ldrb	r3, [r7, #3]
 800eb60:	015a      	lsls	r2, r3, #5
 800eb62:	693b      	ldr	r3, [r7, #16]
 800eb64:	4413      	add	r3, r2
 800eb66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eb6a:	685b      	ldr	r3, [r3, #4]
 800eb6c:	78fa      	ldrb	r2, [r7, #3]
 800eb6e:	0151      	lsls	r1, r2, #5
 800eb70:	693a      	ldr	r2, [r7, #16]
 800eb72:	440a      	add	r2, r1
 800eb74:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800eb78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800eb7c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	799b      	ldrb	r3, [r3, #6]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d01b      	beq.n	800ebbe <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800eb86:	78fa      	ldrb	r2, [r7, #3]
 800eb88:	6879      	ldr	r1, [r7, #4]
 800eb8a:	4613      	mov	r3, r2
 800eb8c:	011b      	lsls	r3, r3, #4
 800eb8e:	1a9b      	subs	r3, r3, r2
 800eb90:	009b      	lsls	r3, r3, #2
 800eb92:	440b      	add	r3, r1
 800eb94:	3330      	adds	r3, #48	@ 0x30
 800eb96:	6819      	ldr	r1, [r3, #0]
 800eb98:	78fb      	ldrb	r3, [r7, #3]
 800eb9a:	015a      	lsls	r2, r3, #5
 800eb9c:	693b      	ldr	r3, [r7, #16]
 800eb9e:	4413      	add	r3, r2
 800eba0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eba4:	691b      	ldr	r3, [r3, #16]
 800eba6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ebaa:	78fa      	ldrb	r2, [r7, #3]
 800ebac:	1ac9      	subs	r1, r1, r3
 800ebae:	6878      	ldr	r0, [r7, #4]
 800ebb0:	4613      	mov	r3, r2
 800ebb2:	011b      	lsls	r3, r3, #4
 800ebb4:	1a9b      	subs	r3, r3, r2
 800ebb6:	009b      	lsls	r3, r3, #2
 800ebb8:	4403      	add	r3, r0
 800ebba:	3338      	adds	r3, #56	@ 0x38
 800ebbc:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800ebbe:	78fa      	ldrb	r2, [r7, #3]
 800ebc0:	6879      	ldr	r1, [r7, #4]
 800ebc2:	4613      	mov	r3, r2
 800ebc4:	011b      	lsls	r3, r3, #4
 800ebc6:	1a9b      	subs	r3, r3, r2
 800ebc8:	009b      	lsls	r3, r3, #2
 800ebca:	440b      	add	r3, r1
 800ebcc:	334d      	adds	r3, #77	@ 0x4d
 800ebce:	2201      	movs	r2, #1
 800ebd0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800ebd2:	78fa      	ldrb	r2, [r7, #3]
 800ebd4:	6879      	ldr	r1, [r7, #4]
 800ebd6:	4613      	mov	r3, r2
 800ebd8:	011b      	lsls	r3, r3, #4
 800ebda:	1a9b      	subs	r3, r3, r2
 800ebdc:	009b      	lsls	r3, r3, #2
 800ebde:	440b      	add	r3, r1
 800ebe0:	3344      	adds	r3, #68	@ 0x44
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800ebe6:	78fb      	ldrb	r3, [r7, #3]
 800ebe8:	015a      	lsls	r2, r3, #5
 800ebea:	693b      	ldr	r3, [r7, #16]
 800ebec:	4413      	add	r3, r2
 800ebee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ebf2:	461a      	mov	r2, r3
 800ebf4:	2301      	movs	r3, #1
 800ebf6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800ebf8:	78fa      	ldrb	r2, [r7, #3]
 800ebfa:	6879      	ldr	r1, [r7, #4]
 800ebfc:	4613      	mov	r3, r2
 800ebfe:	011b      	lsls	r3, r3, #4
 800ec00:	1a9b      	subs	r3, r3, r2
 800ec02:	009b      	lsls	r3, r3, #2
 800ec04:	440b      	add	r3, r1
 800ec06:	3326      	adds	r3, #38	@ 0x26
 800ec08:	781b      	ldrb	r3, [r3, #0]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d00a      	beq.n	800ec24 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800ec0e:	78fa      	ldrb	r2, [r7, #3]
 800ec10:	6879      	ldr	r1, [r7, #4]
 800ec12:	4613      	mov	r3, r2
 800ec14:	011b      	lsls	r3, r3, #4
 800ec16:	1a9b      	subs	r3, r3, r2
 800ec18:	009b      	lsls	r3, r3, #2
 800ec1a:	440b      	add	r3, r1
 800ec1c:	3326      	adds	r3, #38	@ 0x26
 800ec1e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800ec20:	2b02      	cmp	r3, #2
 800ec22:	d110      	bne.n	800ec46 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	78fa      	ldrb	r2, [r7, #3]
 800ec2a:	4611      	mov	r1, r2
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	f003 fe8c 	bl	801294a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800ec32:	78fb      	ldrb	r3, [r7, #3]
 800ec34:	015a      	lsls	r2, r3, #5
 800ec36:	693b      	ldr	r3, [r7, #16]
 800ec38:	4413      	add	r3, r2
 800ec3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ec3e:	461a      	mov	r2, r3
 800ec40:	2310      	movs	r3, #16
 800ec42:	6093      	str	r3, [r2, #8]
 800ec44:	e03d      	b.n	800ecc2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800ec46:	78fa      	ldrb	r2, [r7, #3]
 800ec48:	6879      	ldr	r1, [r7, #4]
 800ec4a:	4613      	mov	r3, r2
 800ec4c:	011b      	lsls	r3, r3, #4
 800ec4e:	1a9b      	subs	r3, r3, r2
 800ec50:	009b      	lsls	r3, r3, #2
 800ec52:	440b      	add	r3, r1
 800ec54:	3326      	adds	r3, #38	@ 0x26
 800ec56:	781b      	ldrb	r3, [r3, #0]
 800ec58:	2b03      	cmp	r3, #3
 800ec5a:	d00a      	beq.n	800ec72 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800ec5c:	78fa      	ldrb	r2, [r7, #3]
 800ec5e:	6879      	ldr	r1, [r7, #4]
 800ec60:	4613      	mov	r3, r2
 800ec62:	011b      	lsls	r3, r3, #4
 800ec64:	1a9b      	subs	r3, r3, r2
 800ec66:	009b      	lsls	r3, r3, #2
 800ec68:	440b      	add	r3, r1
 800ec6a:	3326      	adds	r3, #38	@ 0x26
 800ec6c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800ec6e:	2b01      	cmp	r3, #1
 800ec70:	d127      	bne.n	800ecc2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800ec72:	78fb      	ldrb	r3, [r7, #3]
 800ec74:	015a      	lsls	r2, r3, #5
 800ec76:	693b      	ldr	r3, [r7, #16]
 800ec78:	4413      	add	r3, r2
 800ec7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	78fa      	ldrb	r2, [r7, #3]
 800ec82:	0151      	lsls	r1, r2, #5
 800ec84:	693a      	ldr	r2, [r7, #16]
 800ec86:	440a      	add	r2, r1
 800ec88:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ec8c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ec90:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800ec92:	78fa      	ldrb	r2, [r7, #3]
 800ec94:	6879      	ldr	r1, [r7, #4]
 800ec96:	4613      	mov	r3, r2
 800ec98:	011b      	lsls	r3, r3, #4
 800ec9a:	1a9b      	subs	r3, r3, r2
 800ec9c:	009b      	lsls	r3, r3, #2
 800ec9e:	440b      	add	r3, r1
 800eca0:	334c      	adds	r3, #76	@ 0x4c
 800eca2:	2201      	movs	r2, #1
 800eca4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800eca6:	78fa      	ldrb	r2, [r7, #3]
 800eca8:	6879      	ldr	r1, [r7, #4]
 800ecaa:	4613      	mov	r3, r2
 800ecac:	011b      	lsls	r3, r3, #4
 800ecae:	1a9b      	subs	r3, r3, r2
 800ecb0:	009b      	lsls	r3, r3, #2
 800ecb2:	440b      	add	r3, r1
 800ecb4:	334c      	adds	r3, #76	@ 0x4c
 800ecb6:	781a      	ldrb	r2, [r3, #0]
 800ecb8:	78fb      	ldrb	r3, [r7, #3]
 800ecba:	4619      	mov	r1, r3
 800ecbc:	6878      	ldr	r0, [r7, #4]
 800ecbe:	f006 f99d 	bl	8014ffc <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	799b      	ldrb	r3, [r3, #6]
 800ecc6:	2b01      	cmp	r3, #1
 800ecc8:	d13b      	bne.n	800ed42 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800ecca:	78fa      	ldrb	r2, [r7, #3]
 800eccc:	6879      	ldr	r1, [r7, #4]
 800ecce:	4613      	mov	r3, r2
 800ecd0:	011b      	lsls	r3, r3, #4
 800ecd2:	1a9b      	subs	r3, r3, r2
 800ecd4:	009b      	lsls	r3, r3, #2
 800ecd6:	440b      	add	r3, r1
 800ecd8:	3338      	adds	r3, #56	@ 0x38
 800ecda:	6819      	ldr	r1, [r3, #0]
 800ecdc:	78fa      	ldrb	r2, [r7, #3]
 800ecde:	6878      	ldr	r0, [r7, #4]
 800ece0:	4613      	mov	r3, r2
 800ece2:	011b      	lsls	r3, r3, #4
 800ece4:	1a9b      	subs	r3, r3, r2
 800ece6:	009b      	lsls	r3, r3, #2
 800ece8:	4403      	add	r3, r0
 800ecea:	3328      	adds	r3, #40	@ 0x28
 800ecec:	881b      	ldrh	r3, [r3, #0]
 800ecee:	440b      	add	r3, r1
 800ecf0:	1e59      	subs	r1, r3, #1
 800ecf2:	78fa      	ldrb	r2, [r7, #3]
 800ecf4:	6878      	ldr	r0, [r7, #4]
 800ecf6:	4613      	mov	r3, r2
 800ecf8:	011b      	lsls	r3, r3, #4
 800ecfa:	1a9b      	subs	r3, r3, r2
 800ecfc:	009b      	lsls	r3, r3, #2
 800ecfe:	4403      	add	r3, r0
 800ed00:	3328      	adds	r3, #40	@ 0x28
 800ed02:	881b      	ldrh	r3, [r3, #0]
 800ed04:	fbb1 f3f3 	udiv	r3, r1, r3
 800ed08:	f003 0301 	and.w	r3, r3, #1
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	f000 8470 	beq.w	800f5f2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800ed12:	78fa      	ldrb	r2, [r7, #3]
 800ed14:	6879      	ldr	r1, [r7, #4]
 800ed16:	4613      	mov	r3, r2
 800ed18:	011b      	lsls	r3, r3, #4
 800ed1a:	1a9b      	subs	r3, r3, r2
 800ed1c:	009b      	lsls	r3, r3, #2
 800ed1e:	440b      	add	r3, r1
 800ed20:	333c      	adds	r3, #60	@ 0x3c
 800ed22:	781b      	ldrb	r3, [r3, #0]
 800ed24:	78fa      	ldrb	r2, [r7, #3]
 800ed26:	f083 0301 	eor.w	r3, r3, #1
 800ed2a:	b2d8      	uxtb	r0, r3
 800ed2c:	6879      	ldr	r1, [r7, #4]
 800ed2e:	4613      	mov	r3, r2
 800ed30:	011b      	lsls	r3, r3, #4
 800ed32:	1a9b      	subs	r3, r3, r2
 800ed34:	009b      	lsls	r3, r3, #2
 800ed36:	440b      	add	r3, r1
 800ed38:	333c      	adds	r3, #60	@ 0x3c
 800ed3a:	4602      	mov	r2, r0
 800ed3c:	701a      	strb	r2, [r3, #0]
 800ed3e:	f000 bc58 	b.w	800f5f2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800ed42:	78fa      	ldrb	r2, [r7, #3]
 800ed44:	6879      	ldr	r1, [r7, #4]
 800ed46:	4613      	mov	r3, r2
 800ed48:	011b      	lsls	r3, r3, #4
 800ed4a:	1a9b      	subs	r3, r3, r2
 800ed4c:	009b      	lsls	r3, r3, #2
 800ed4e:	440b      	add	r3, r1
 800ed50:	333c      	adds	r3, #60	@ 0x3c
 800ed52:	781b      	ldrb	r3, [r3, #0]
 800ed54:	78fa      	ldrb	r2, [r7, #3]
 800ed56:	f083 0301 	eor.w	r3, r3, #1
 800ed5a:	b2d8      	uxtb	r0, r3
 800ed5c:	6879      	ldr	r1, [r7, #4]
 800ed5e:	4613      	mov	r3, r2
 800ed60:	011b      	lsls	r3, r3, #4
 800ed62:	1a9b      	subs	r3, r3, r2
 800ed64:	009b      	lsls	r3, r3, #2
 800ed66:	440b      	add	r3, r1
 800ed68:	333c      	adds	r3, #60	@ 0x3c
 800ed6a:	4602      	mov	r2, r0
 800ed6c:	701a      	strb	r2, [r3, #0]
 800ed6e:	f000 bc40 	b.w	800f5f2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	78fa      	ldrb	r2, [r7, #3]
 800ed78:	4611      	mov	r1, r2
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	f003 f842 	bl	8011e04 <USB_ReadChInterrupts>
 800ed80:	4603      	mov	r3, r0
 800ed82:	f003 0320 	and.w	r3, r3, #32
 800ed86:	2b20      	cmp	r3, #32
 800ed88:	d131      	bne.n	800edee <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800ed8a:	78fb      	ldrb	r3, [r7, #3]
 800ed8c:	015a      	lsls	r2, r3, #5
 800ed8e:	693b      	ldr	r3, [r7, #16]
 800ed90:	4413      	add	r3, r2
 800ed92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ed96:	461a      	mov	r2, r3
 800ed98:	2320      	movs	r3, #32
 800ed9a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800ed9c:	78fa      	ldrb	r2, [r7, #3]
 800ed9e:	6879      	ldr	r1, [r7, #4]
 800eda0:	4613      	mov	r3, r2
 800eda2:	011b      	lsls	r3, r3, #4
 800eda4:	1a9b      	subs	r3, r3, r2
 800eda6:	009b      	lsls	r3, r3, #2
 800eda8:	440b      	add	r3, r1
 800edaa:	331a      	adds	r3, #26
 800edac:	781b      	ldrb	r3, [r3, #0]
 800edae:	2b01      	cmp	r3, #1
 800edb0:	f040 841f 	bne.w	800f5f2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800edb4:	78fa      	ldrb	r2, [r7, #3]
 800edb6:	6879      	ldr	r1, [r7, #4]
 800edb8:	4613      	mov	r3, r2
 800edba:	011b      	lsls	r3, r3, #4
 800edbc:	1a9b      	subs	r3, r3, r2
 800edbe:	009b      	lsls	r3, r3, #2
 800edc0:	440b      	add	r3, r1
 800edc2:	331b      	adds	r3, #27
 800edc4:	2201      	movs	r2, #1
 800edc6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800edc8:	78fa      	ldrb	r2, [r7, #3]
 800edca:	6879      	ldr	r1, [r7, #4]
 800edcc:	4613      	mov	r3, r2
 800edce:	011b      	lsls	r3, r3, #4
 800edd0:	1a9b      	subs	r3, r3, r2
 800edd2:	009b      	lsls	r3, r3, #2
 800edd4:	440b      	add	r3, r1
 800edd6:	334d      	adds	r3, #77	@ 0x4d
 800edd8:	2203      	movs	r2, #3
 800edda:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	78fa      	ldrb	r2, [r7, #3]
 800ede2:	4611      	mov	r1, r2
 800ede4:	4618      	mov	r0, r3
 800ede6:	f003 fdb0 	bl	801294a <USB_HC_Halt>
 800edea:	f000 bc02 	b.w	800f5f2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	78fa      	ldrb	r2, [r7, #3]
 800edf4:	4611      	mov	r1, r2
 800edf6:	4618      	mov	r0, r3
 800edf8:	f003 f804 	bl	8011e04 <USB_ReadChInterrupts>
 800edfc:	4603      	mov	r3, r0
 800edfe:	f003 0302 	and.w	r3, r3, #2
 800ee02:	2b02      	cmp	r3, #2
 800ee04:	f040 8305 	bne.w	800f412 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800ee08:	78fb      	ldrb	r3, [r7, #3]
 800ee0a:	015a      	lsls	r2, r3, #5
 800ee0c:	693b      	ldr	r3, [r7, #16]
 800ee0e:	4413      	add	r3, r2
 800ee10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ee14:	461a      	mov	r2, r3
 800ee16:	2302      	movs	r3, #2
 800ee18:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800ee1a:	78fa      	ldrb	r2, [r7, #3]
 800ee1c:	6879      	ldr	r1, [r7, #4]
 800ee1e:	4613      	mov	r3, r2
 800ee20:	011b      	lsls	r3, r3, #4
 800ee22:	1a9b      	subs	r3, r3, r2
 800ee24:	009b      	lsls	r3, r3, #2
 800ee26:	440b      	add	r3, r1
 800ee28:	334d      	adds	r3, #77	@ 0x4d
 800ee2a:	781b      	ldrb	r3, [r3, #0]
 800ee2c:	2b01      	cmp	r3, #1
 800ee2e:	d114      	bne.n	800ee5a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800ee30:	78fa      	ldrb	r2, [r7, #3]
 800ee32:	6879      	ldr	r1, [r7, #4]
 800ee34:	4613      	mov	r3, r2
 800ee36:	011b      	lsls	r3, r3, #4
 800ee38:	1a9b      	subs	r3, r3, r2
 800ee3a:	009b      	lsls	r3, r3, #2
 800ee3c:	440b      	add	r3, r1
 800ee3e:	334d      	adds	r3, #77	@ 0x4d
 800ee40:	2202      	movs	r2, #2
 800ee42:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800ee44:	78fa      	ldrb	r2, [r7, #3]
 800ee46:	6879      	ldr	r1, [r7, #4]
 800ee48:	4613      	mov	r3, r2
 800ee4a:	011b      	lsls	r3, r3, #4
 800ee4c:	1a9b      	subs	r3, r3, r2
 800ee4e:	009b      	lsls	r3, r3, #2
 800ee50:	440b      	add	r3, r1
 800ee52:	334c      	adds	r3, #76	@ 0x4c
 800ee54:	2201      	movs	r2, #1
 800ee56:	701a      	strb	r2, [r3, #0]
 800ee58:	e2cc      	b.n	800f3f4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800ee5a:	78fa      	ldrb	r2, [r7, #3]
 800ee5c:	6879      	ldr	r1, [r7, #4]
 800ee5e:	4613      	mov	r3, r2
 800ee60:	011b      	lsls	r3, r3, #4
 800ee62:	1a9b      	subs	r3, r3, r2
 800ee64:	009b      	lsls	r3, r3, #2
 800ee66:	440b      	add	r3, r1
 800ee68:	334d      	adds	r3, #77	@ 0x4d
 800ee6a:	781b      	ldrb	r3, [r3, #0]
 800ee6c:	2b06      	cmp	r3, #6
 800ee6e:	d114      	bne.n	800ee9a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800ee70:	78fa      	ldrb	r2, [r7, #3]
 800ee72:	6879      	ldr	r1, [r7, #4]
 800ee74:	4613      	mov	r3, r2
 800ee76:	011b      	lsls	r3, r3, #4
 800ee78:	1a9b      	subs	r3, r3, r2
 800ee7a:	009b      	lsls	r3, r3, #2
 800ee7c:	440b      	add	r3, r1
 800ee7e:	334d      	adds	r3, #77	@ 0x4d
 800ee80:	2202      	movs	r2, #2
 800ee82:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800ee84:	78fa      	ldrb	r2, [r7, #3]
 800ee86:	6879      	ldr	r1, [r7, #4]
 800ee88:	4613      	mov	r3, r2
 800ee8a:	011b      	lsls	r3, r3, #4
 800ee8c:	1a9b      	subs	r3, r3, r2
 800ee8e:	009b      	lsls	r3, r3, #2
 800ee90:	440b      	add	r3, r1
 800ee92:	334c      	adds	r3, #76	@ 0x4c
 800ee94:	2205      	movs	r2, #5
 800ee96:	701a      	strb	r2, [r3, #0]
 800ee98:	e2ac      	b.n	800f3f4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800ee9a:	78fa      	ldrb	r2, [r7, #3]
 800ee9c:	6879      	ldr	r1, [r7, #4]
 800ee9e:	4613      	mov	r3, r2
 800eea0:	011b      	lsls	r3, r3, #4
 800eea2:	1a9b      	subs	r3, r3, r2
 800eea4:	009b      	lsls	r3, r3, #2
 800eea6:	440b      	add	r3, r1
 800eea8:	334d      	adds	r3, #77	@ 0x4d
 800eeaa:	781b      	ldrb	r3, [r3, #0]
 800eeac:	2b07      	cmp	r3, #7
 800eeae:	d00b      	beq.n	800eec8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800eeb0:	78fa      	ldrb	r2, [r7, #3]
 800eeb2:	6879      	ldr	r1, [r7, #4]
 800eeb4:	4613      	mov	r3, r2
 800eeb6:	011b      	lsls	r3, r3, #4
 800eeb8:	1a9b      	subs	r3, r3, r2
 800eeba:	009b      	lsls	r3, r3, #2
 800eebc:	440b      	add	r3, r1
 800eebe:	334d      	adds	r3, #77	@ 0x4d
 800eec0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800eec2:	2b09      	cmp	r3, #9
 800eec4:	f040 80a6 	bne.w	800f014 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800eec8:	78fa      	ldrb	r2, [r7, #3]
 800eeca:	6879      	ldr	r1, [r7, #4]
 800eecc:	4613      	mov	r3, r2
 800eece:	011b      	lsls	r3, r3, #4
 800eed0:	1a9b      	subs	r3, r3, r2
 800eed2:	009b      	lsls	r3, r3, #2
 800eed4:	440b      	add	r3, r1
 800eed6:	334d      	adds	r3, #77	@ 0x4d
 800eed8:	2202      	movs	r2, #2
 800eeda:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800eedc:	78fa      	ldrb	r2, [r7, #3]
 800eede:	6879      	ldr	r1, [r7, #4]
 800eee0:	4613      	mov	r3, r2
 800eee2:	011b      	lsls	r3, r3, #4
 800eee4:	1a9b      	subs	r3, r3, r2
 800eee6:	009b      	lsls	r3, r3, #2
 800eee8:	440b      	add	r3, r1
 800eeea:	3344      	adds	r3, #68	@ 0x44
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	1c59      	adds	r1, r3, #1
 800eef0:	6878      	ldr	r0, [r7, #4]
 800eef2:	4613      	mov	r3, r2
 800eef4:	011b      	lsls	r3, r3, #4
 800eef6:	1a9b      	subs	r3, r3, r2
 800eef8:	009b      	lsls	r3, r3, #2
 800eefa:	4403      	add	r3, r0
 800eefc:	3344      	adds	r3, #68	@ 0x44
 800eefe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800ef00:	78fa      	ldrb	r2, [r7, #3]
 800ef02:	6879      	ldr	r1, [r7, #4]
 800ef04:	4613      	mov	r3, r2
 800ef06:	011b      	lsls	r3, r3, #4
 800ef08:	1a9b      	subs	r3, r3, r2
 800ef0a:	009b      	lsls	r3, r3, #2
 800ef0c:	440b      	add	r3, r1
 800ef0e:	3344      	adds	r3, #68	@ 0x44
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	2b02      	cmp	r3, #2
 800ef14:	d943      	bls.n	800ef9e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800ef16:	78fa      	ldrb	r2, [r7, #3]
 800ef18:	6879      	ldr	r1, [r7, #4]
 800ef1a:	4613      	mov	r3, r2
 800ef1c:	011b      	lsls	r3, r3, #4
 800ef1e:	1a9b      	subs	r3, r3, r2
 800ef20:	009b      	lsls	r3, r3, #2
 800ef22:	440b      	add	r3, r1
 800ef24:	3344      	adds	r3, #68	@ 0x44
 800ef26:	2200      	movs	r2, #0
 800ef28:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800ef2a:	78fa      	ldrb	r2, [r7, #3]
 800ef2c:	6879      	ldr	r1, [r7, #4]
 800ef2e:	4613      	mov	r3, r2
 800ef30:	011b      	lsls	r3, r3, #4
 800ef32:	1a9b      	subs	r3, r3, r2
 800ef34:	009b      	lsls	r3, r3, #2
 800ef36:	440b      	add	r3, r1
 800ef38:	331a      	adds	r3, #26
 800ef3a:	781b      	ldrb	r3, [r3, #0]
 800ef3c:	2b01      	cmp	r3, #1
 800ef3e:	d123      	bne.n	800ef88 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800ef40:	78fa      	ldrb	r2, [r7, #3]
 800ef42:	6879      	ldr	r1, [r7, #4]
 800ef44:	4613      	mov	r3, r2
 800ef46:	011b      	lsls	r3, r3, #4
 800ef48:	1a9b      	subs	r3, r3, r2
 800ef4a:	009b      	lsls	r3, r3, #2
 800ef4c:	440b      	add	r3, r1
 800ef4e:	331b      	adds	r3, #27
 800ef50:	2200      	movs	r2, #0
 800ef52:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800ef54:	78fa      	ldrb	r2, [r7, #3]
 800ef56:	6879      	ldr	r1, [r7, #4]
 800ef58:	4613      	mov	r3, r2
 800ef5a:	011b      	lsls	r3, r3, #4
 800ef5c:	1a9b      	subs	r3, r3, r2
 800ef5e:	009b      	lsls	r3, r3, #2
 800ef60:	440b      	add	r3, r1
 800ef62:	331c      	adds	r3, #28
 800ef64:	2200      	movs	r2, #0
 800ef66:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800ef68:	78fb      	ldrb	r3, [r7, #3]
 800ef6a:	015a      	lsls	r2, r3, #5
 800ef6c:	693b      	ldr	r3, [r7, #16]
 800ef6e:	4413      	add	r3, r2
 800ef70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ef74:	685b      	ldr	r3, [r3, #4]
 800ef76:	78fa      	ldrb	r2, [r7, #3]
 800ef78:	0151      	lsls	r1, r2, #5
 800ef7a:	693a      	ldr	r2, [r7, #16]
 800ef7c:	440a      	add	r2, r1
 800ef7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ef82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ef86:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800ef88:	78fa      	ldrb	r2, [r7, #3]
 800ef8a:	6879      	ldr	r1, [r7, #4]
 800ef8c:	4613      	mov	r3, r2
 800ef8e:	011b      	lsls	r3, r3, #4
 800ef90:	1a9b      	subs	r3, r3, r2
 800ef92:	009b      	lsls	r3, r3, #2
 800ef94:	440b      	add	r3, r1
 800ef96:	334c      	adds	r3, #76	@ 0x4c
 800ef98:	2204      	movs	r2, #4
 800ef9a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800ef9c:	e229      	b.n	800f3f2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800ef9e:	78fa      	ldrb	r2, [r7, #3]
 800efa0:	6879      	ldr	r1, [r7, #4]
 800efa2:	4613      	mov	r3, r2
 800efa4:	011b      	lsls	r3, r3, #4
 800efa6:	1a9b      	subs	r3, r3, r2
 800efa8:	009b      	lsls	r3, r3, #2
 800efaa:	440b      	add	r3, r1
 800efac:	334c      	adds	r3, #76	@ 0x4c
 800efae:	2202      	movs	r2, #2
 800efb0:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800efb2:	78fa      	ldrb	r2, [r7, #3]
 800efb4:	6879      	ldr	r1, [r7, #4]
 800efb6:	4613      	mov	r3, r2
 800efb8:	011b      	lsls	r3, r3, #4
 800efba:	1a9b      	subs	r3, r3, r2
 800efbc:	009b      	lsls	r3, r3, #2
 800efbe:	440b      	add	r3, r1
 800efc0:	3326      	adds	r3, #38	@ 0x26
 800efc2:	781b      	ldrb	r3, [r3, #0]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d00b      	beq.n	800efe0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800efc8:	78fa      	ldrb	r2, [r7, #3]
 800efca:	6879      	ldr	r1, [r7, #4]
 800efcc:	4613      	mov	r3, r2
 800efce:	011b      	lsls	r3, r3, #4
 800efd0:	1a9b      	subs	r3, r3, r2
 800efd2:	009b      	lsls	r3, r3, #2
 800efd4:	440b      	add	r3, r1
 800efd6:	3326      	adds	r3, #38	@ 0x26
 800efd8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800efda:	2b02      	cmp	r3, #2
 800efdc:	f040 8209 	bne.w	800f3f2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800efe0:	78fb      	ldrb	r3, [r7, #3]
 800efe2:	015a      	lsls	r2, r3, #5
 800efe4:	693b      	ldr	r3, [r7, #16]
 800efe6:	4413      	add	r3, r2
 800efe8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800eff6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800effe:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800f000:	78fb      	ldrb	r3, [r7, #3]
 800f002:	015a      	lsls	r2, r3, #5
 800f004:	693b      	ldr	r3, [r7, #16]
 800f006:	4413      	add	r3, r2
 800f008:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f00c:	461a      	mov	r2, r3
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800f012:	e1ee      	b.n	800f3f2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800f014:	78fa      	ldrb	r2, [r7, #3]
 800f016:	6879      	ldr	r1, [r7, #4]
 800f018:	4613      	mov	r3, r2
 800f01a:	011b      	lsls	r3, r3, #4
 800f01c:	1a9b      	subs	r3, r3, r2
 800f01e:	009b      	lsls	r3, r3, #2
 800f020:	440b      	add	r3, r1
 800f022:	334d      	adds	r3, #77	@ 0x4d
 800f024:	781b      	ldrb	r3, [r3, #0]
 800f026:	2b05      	cmp	r3, #5
 800f028:	f040 80c8 	bne.w	800f1bc <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800f02c:	78fa      	ldrb	r2, [r7, #3]
 800f02e:	6879      	ldr	r1, [r7, #4]
 800f030:	4613      	mov	r3, r2
 800f032:	011b      	lsls	r3, r3, #4
 800f034:	1a9b      	subs	r3, r3, r2
 800f036:	009b      	lsls	r3, r3, #2
 800f038:	440b      	add	r3, r1
 800f03a:	334d      	adds	r3, #77	@ 0x4d
 800f03c:	2202      	movs	r2, #2
 800f03e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800f040:	78fa      	ldrb	r2, [r7, #3]
 800f042:	6879      	ldr	r1, [r7, #4]
 800f044:	4613      	mov	r3, r2
 800f046:	011b      	lsls	r3, r3, #4
 800f048:	1a9b      	subs	r3, r3, r2
 800f04a:	009b      	lsls	r3, r3, #2
 800f04c:	440b      	add	r3, r1
 800f04e:	331b      	adds	r3, #27
 800f050:	781b      	ldrb	r3, [r3, #0]
 800f052:	2b01      	cmp	r3, #1
 800f054:	f040 81ce 	bne.w	800f3f4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800f058:	78fa      	ldrb	r2, [r7, #3]
 800f05a:	6879      	ldr	r1, [r7, #4]
 800f05c:	4613      	mov	r3, r2
 800f05e:	011b      	lsls	r3, r3, #4
 800f060:	1a9b      	subs	r3, r3, r2
 800f062:	009b      	lsls	r3, r3, #2
 800f064:	440b      	add	r3, r1
 800f066:	3326      	adds	r3, #38	@ 0x26
 800f068:	781b      	ldrb	r3, [r3, #0]
 800f06a:	2b03      	cmp	r3, #3
 800f06c:	d16b      	bne.n	800f146 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800f06e:	78fa      	ldrb	r2, [r7, #3]
 800f070:	6879      	ldr	r1, [r7, #4]
 800f072:	4613      	mov	r3, r2
 800f074:	011b      	lsls	r3, r3, #4
 800f076:	1a9b      	subs	r3, r3, r2
 800f078:	009b      	lsls	r3, r3, #2
 800f07a:	440b      	add	r3, r1
 800f07c:	3348      	adds	r3, #72	@ 0x48
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	1c59      	adds	r1, r3, #1
 800f082:	6878      	ldr	r0, [r7, #4]
 800f084:	4613      	mov	r3, r2
 800f086:	011b      	lsls	r3, r3, #4
 800f088:	1a9b      	subs	r3, r3, r2
 800f08a:	009b      	lsls	r3, r3, #2
 800f08c:	4403      	add	r3, r0
 800f08e:	3348      	adds	r3, #72	@ 0x48
 800f090:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800f092:	78fa      	ldrb	r2, [r7, #3]
 800f094:	6879      	ldr	r1, [r7, #4]
 800f096:	4613      	mov	r3, r2
 800f098:	011b      	lsls	r3, r3, #4
 800f09a:	1a9b      	subs	r3, r3, r2
 800f09c:	009b      	lsls	r3, r3, #2
 800f09e:	440b      	add	r3, r1
 800f0a0:	3348      	adds	r3, #72	@ 0x48
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	2b02      	cmp	r3, #2
 800f0a6:	d943      	bls.n	800f130 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800f0a8:	78fa      	ldrb	r2, [r7, #3]
 800f0aa:	6879      	ldr	r1, [r7, #4]
 800f0ac:	4613      	mov	r3, r2
 800f0ae:	011b      	lsls	r3, r3, #4
 800f0b0:	1a9b      	subs	r3, r3, r2
 800f0b2:	009b      	lsls	r3, r3, #2
 800f0b4:	440b      	add	r3, r1
 800f0b6:	3348      	adds	r3, #72	@ 0x48
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800f0bc:	78fa      	ldrb	r2, [r7, #3]
 800f0be:	6879      	ldr	r1, [r7, #4]
 800f0c0:	4613      	mov	r3, r2
 800f0c2:	011b      	lsls	r3, r3, #4
 800f0c4:	1a9b      	subs	r3, r3, r2
 800f0c6:	009b      	lsls	r3, r3, #2
 800f0c8:	440b      	add	r3, r1
 800f0ca:	331b      	adds	r3, #27
 800f0cc:	2200      	movs	r2, #0
 800f0ce:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800f0d0:	78fa      	ldrb	r2, [r7, #3]
 800f0d2:	6879      	ldr	r1, [r7, #4]
 800f0d4:	4613      	mov	r3, r2
 800f0d6:	011b      	lsls	r3, r3, #4
 800f0d8:	1a9b      	subs	r3, r3, r2
 800f0da:	009b      	lsls	r3, r3, #2
 800f0dc:	440b      	add	r3, r1
 800f0de:	3344      	adds	r3, #68	@ 0x44
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	2b02      	cmp	r3, #2
 800f0e4:	d809      	bhi.n	800f0fa <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800f0e6:	78fa      	ldrb	r2, [r7, #3]
 800f0e8:	6879      	ldr	r1, [r7, #4]
 800f0ea:	4613      	mov	r3, r2
 800f0ec:	011b      	lsls	r3, r3, #4
 800f0ee:	1a9b      	subs	r3, r3, r2
 800f0f0:	009b      	lsls	r3, r3, #2
 800f0f2:	440b      	add	r3, r1
 800f0f4:	331c      	adds	r3, #28
 800f0f6:	2201      	movs	r2, #1
 800f0f8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800f0fa:	78fb      	ldrb	r3, [r7, #3]
 800f0fc:	015a      	lsls	r2, r3, #5
 800f0fe:	693b      	ldr	r3, [r7, #16]
 800f100:	4413      	add	r3, r2
 800f102:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f106:	685b      	ldr	r3, [r3, #4]
 800f108:	78fa      	ldrb	r2, [r7, #3]
 800f10a:	0151      	lsls	r1, r2, #5
 800f10c:	693a      	ldr	r2, [r7, #16]
 800f10e:	440a      	add	r2, r1
 800f110:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f114:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f118:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800f11a:	78fa      	ldrb	r2, [r7, #3]
 800f11c:	6879      	ldr	r1, [r7, #4]
 800f11e:	4613      	mov	r3, r2
 800f120:	011b      	lsls	r3, r3, #4
 800f122:	1a9b      	subs	r3, r3, r2
 800f124:	009b      	lsls	r3, r3, #2
 800f126:	440b      	add	r3, r1
 800f128:	334c      	adds	r3, #76	@ 0x4c
 800f12a:	2204      	movs	r2, #4
 800f12c:	701a      	strb	r2, [r3, #0]
 800f12e:	e014      	b.n	800f15a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800f130:	78fa      	ldrb	r2, [r7, #3]
 800f132:	6879      	ldr	r1, [r7, #4]
 800f134:	4613      	mov	r3, r2
 800f136:	011b      	lsls	r3, r3, #4
 800f138:	1a9b      	subs	r3, r3, r2
 800f13a:	009b      	lsls	r3, r3, #2
 800f13c:	440b      	add	r3, r1
 800f13e:	334c      	adds	r3, #76	@ 0x4c
 800f140:	2202      	movs	r2, #2
 800f142:	701a      	strb	r2, [r3, #0]
 800f144:	e009      	b.n	800f15a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800f146:	78fa      	ldrb	r2, [r7, #3]
 800f148:	6879      	ldr	r1, [r7, #4]
 800f14a:	4613      	mov	r3, r2
 800f14c:	011b      	lsls	r3, r3, #4
 800f14e:	1a9b      	subs	r3, r3, r2
 800f150:	009b      	lsls	r3, r3, #2
 800f152:	440b      	add	r3, r1
 800f154:	334c      	adds	r3, #76	@ 0x4c
 800f156:	2202      	movs	r2, #2
 800f158:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800f15a:	78fa      	ldrb	r2, [r7, #3]
 800f15c:	6879      	ldr	r1, [r7, #4]
 800f15e:	4613      	mov	r3, r2
 800f160:	011b      	lsls	r3, r3, #4
 800f162:	1a9b      	subs	r3, r3, r2
 800f164:	009b      	lsls	r3, r3, #2
 800f166:	440b      	add	r3, r1
 800f168:	3326      	adds	r3, #38	@ 0x26
 800f16a:	781b      	ldrb	r3, [r3, #0]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d00b      	beq.n	800f188 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800f170:	78fa      	ldrb	r2, [r7, #3]
 800f172:	6879      	ldr	r1, [r7, #4]
 800f174:	4613      	mov	r3, r2
 800f176:	011b      	lsls	r3, r3, #4
 800f178:	1a9b      	subs	r3, r3, r2
 800f17a:	009b      	lsls	r3, r3, #2
 800f17c:	440b      	add	r3, r1
 800f17e:	3326      	adds	r3, #38	@ 0x26
 800f180:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800f182:	2b02      	cmp	r3, #2
 800f184:	f040 8136 	bne.w	800f3f4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800f188:	78fb      	ldrb	r3, [r7, #3]
 800f18a:	015a      	lsls	r2, r3, #5
 800f18c:	693b      	ldr	r3, [r7, #16]
 800f18e:	4413      	add	r3, r2
 800f190:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f19e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f1a6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800f1a8:	78fb      	ldrb	r3, [r7, #3]
 800f1aa:	015a      	lsls	r2, r3, #5
 800f1ac:	693b      	ldr	r3, [r7, #16]
 800f1ae:	4413      	add	r3, r2
 800f1b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f1b4:	461a      	mov	r2, r3
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	6013      	str	r3, [r2, #0]
 800f1ba:	e11b      	b.n	800f3f4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800f1bc:	78fa      	ldrb	r2, [r7, #3]
 800f1be:	6879      	ldr	r1, [r7, #4]
 800f1c0:	4613      	mov	r3, r2
 800f1c2:	011b      	lsls	r3, r3, #4
 800f1c4:	1a9b      	subs	r3, r3, r2
 800f1c6:	009b      	lsls	r3, r3, #2
 800f1c8:	440b      	add	r3, r1
 800f1ca:	334d      	adds	r3, #77	@ 0x4d
 800f1cc:	781b      	ldrb	r3, [r3, #0]
 800f1ce:	2b03      	cmp	r3, #3
 800f1d0:	f040 8081 	bne.w	800f2d6 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800f1d4:	78fa      	ldrb	r2, [r7, #3]
 800f1d6:	6879      	ldr	r1, [r7, #4]
 800f1d8:	4613      	mov	r3, r2
 800f1da:	011b      	lsls	r3, r3, #4
 800f1dc:	1a9b      	subs	r3, r3, r2
 800f1de:	009b      	lsls	r3, r3, #2
 800f1e0:	440b      	add	r3, r1
 800f1e2:	334d      	adds	r3, #77	@ 0x4d
 800f1e4:	2202      	movs	r2, #2
 800f1e6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800f1e8:	78fa      	ldrb	r2, [r7, #3]
 800f1ea:	6879      	ldr	r1, [r7, #4]
 800f1ec:	4613      	mov	r3, r2
 800f1ee:	011b      	lsls	r3, r3, #4
 800f1f0:	1a9b      	subs	r3, r3, r2
 800f1f2:	009b      	lsls	r3, r3, #2
 800f1f4:	440b      	add	r3, r1
 800f1f6:	331b      	adds	r3, #27
 800f1f8:	781b      	ldrb	r3, [r3, #0]
 800f1fa:	2b01      	cmp	r3, #1
 800f1fc:	f040 80fa 	bne.w	800f3f4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800f200:	78fa      	ldrb	r2, [r7, #3]
 800f202:	6879      	ldr	r1, [r7, #4]
 800f204:	4613      	mov	r3, r2
 800f206:	011b      	lsls	r3, r3, #4
 800f208:	1a9b      	subs	r3, r3, r2
 800f20a:	009b      	lsls	r3, r3, #2
 800f20c:	440b      	add	r3, r1
 800f20e:	334c      	adds	r3, #76	@ 0x4c
 800f210:	2202      	movs	r2, #2
 800f212:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800f214:	78fb      	ldrb	r3, [r7, #3]
 800f216:	015a      	lsls	r2, r3, #5
 800f218:	693b      	ldr	r3, [r7, #16]
 800f21a:	4413      	add	r3, r2
 800f21c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f220:	685b      	ldr	r3, [r3, #4]
 800f222:	78fa      	ldrb	r2, [r7, #3]
 800f224:	0151      	lsls	r1, r2, #5
 800f226:	693a      	ldr	r2, [r7, #16]
 800f228:	440a      	add	r2, r1
 800f22a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f22e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f232:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800f234:	78fb      	ldrb	r3, [r7, #3]
 800f236:	015a      	lsls	r2, r3, #5
 800f238:	693b      	ldr	r3, [r7, #16]
 800f23a:	4413      	add	r3, r2
 800f23c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f240:	68db      	ldr	r3, [r3, #12]
 800f242:	78fa      	ldrb	r2, [r7, #3]
 800f244:	0151      	lsls	r1, r2, #5
 800f246:	693a      	ldr	r2, [r7, #16]
 800f248:	440a      	add	r2, r1
 800f24a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f24e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f252:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800f254:	78fb      	ldrb	r3, [r7, #3]
 800f256:	015a      	lsls	r2, r3, #5
 800f258:	693b      	ldr	r3, [r7, #16]
 800f25a:	4413      	add	r3, r2
 800f25c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f260:	68db      	ldr	r3, [r3, #12]
 800f262:	78fa      	ldrb	r2, [r7, #3]
 800f264:	0151      	lsls	r1, r2, #5
 800f266:	693a      	ldr	r2, [r7, #16]
 800f268:	440a      	add	r2, r1
 800f26a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f26e:	f023 0320 	bic.w	r3, r3, #32
 800f272:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800f274:	78fa      	ldrb	r2, [r7, #3]
 800f276:	6879      	ldr	r1, [r7, #4]
 800f278:	4613      	mov	r3, r2
 800f27a:	011b      	lsls	r3, r3, #4
 800f27c:	1a9b      	subs	r3, r3, r2
 800f27e:	009b      	lsls	r3, r3, #2
 800f280:	440b      	add	r3, r1
 800f282:	3326      	adds	r3, #38	@ 0x26
 800f284:	781b      	ldrb	r3, [r3, #0]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d00b      	beq.n	800f2a2 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800f28a:	78fa      	ldrb	r2, [r7, #3]
 800f28c:	6879      	ldr	r1, [r7, #4]
 800f28e:	4613      	mov	r3, r2
 800f290:	011b      	lsls	r3, r3, #4
 800f292:	1a9b      	subs	r3, r3, r2
 800f294:	009b      	lsls	r3, r3, #2
 800f296:	440b      	add	r3, r1
 800f298:	3326      	adds	r3, #38	@ 0x26
 800f29a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800f29c:	2b02      	cmp	r3, #2
 800f29e:	f040 80a9 	bne.w	800f3f4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800f2a2:	78fb      	ldrb	r3, [r7, #3]
 800f2a4:	015a      	lsls	r2, r3, #5
 800f2a6:	693b      	ldr	r3, [r7, #16]
 800f2a8:	4413      	add	r3, r2
 800f2aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f2b8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f2c0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800f2c2:	78fb      	ldrb	r3, [r7, #3]
 800f2c4:	015a      	lsls	r2, r3, #5
 800f2c6:	693b      	ldr	r3, [r7, #16]
 800f2c8:	4413      	add	r3, r2
 800f2ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f2ce:	461a      	mov	r2, r3
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	6013      	str	r3, [r2, #0]
 800f2d4:	e08e      	b.n	800f3f4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800f2d6:	78fa      	ldrb	r2, [r7, #3]
 800f2d8:	6879      	ldr	r1, [r7, #4]
 800f2da:	4613      	mov	r3, r2
 800f2dc:	011b      	lsls	r3, r3, #4
 800f2de:	1a9b      	subs	r3, r3, r2
 800f2e0:	009b      	lsls	r3, r3, #2
 800f2e2:	440b      	add	r3, r1
 800f2e4:	334d      	adds	r3, #77	@ 0x4d
 800f2e6:	781b      	ldrb	r3, [r3, #0]
 800f2e8:	2b04      	cmp	r3, #4
 800f2ea:	d143      	bne.n	800f374 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800f2ec:	78fa      	ldrb	r2, [r7, #3]
 800f2ee:	6879      	ldr	r1, [r7, #4]
 800f2f0:	4613      	mov	r3, r2
 800f2f2:	011b      	lsls	r3, r3, #4
 800f2f4:	1a9b      	subs	r3, r3, r2
 800f2f6:	009b      	lsls	r3, r3, #2
 800f2f8:	440b      	add	r3, r1
 800f2fa:	334d      	adds	r3, #77	@ 0x4d
 800f2fc:	2202      	movs	r2, #2
 800f2fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800f300:	78fa      	ldrb	r2, [r7, #3]
 800f302:	6879      	ldr	r1, [r7, #4]
 800f304:	4613      	mov	r3, r2
 800f306:	011b      	lsls	r3, r3, #4
 800f308:	1a9b      	subs	r3, r3, r2
 800f30a:	009b      	lsls	r3, r3, #2
 800f30c:	440b      	add	r3, r1
 800f30e:	334c      	adds	r3, #76	@ 0x4c
 800f310:	2202      	movs	r2, #2
 800f312:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800f314:	78fa      	ldrb	r2, [r7, #3]
 800f316:	6879      	ldr	r1, [r7, #4]
 800f318:	4613      	mov	r3, r2
 800f31a:	011b      	lsls	r3, r3, #4
 800f31c:	1a9b      	subs	r3, r3, r2
 800f31e:	009b      	lsls	r3, r3, #2
 800f320:	440b      	add	r3, r1
 800f322:	3326      	adds	r3, #38	@ 0x26
 800f324:	781b      	ldrb	r3, [r3, #0]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d00a      	beq.n	800f340 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800f32a:	78fa      	ldrb	r2, [r7, #3]
 800f32c:	6879      	ldr	r1, [r7, #4]
 800f32e:	4613      	mov	r3, r2
 800f330:	011b      	lsls	r3, r3, #4
 800f332:	1a9b      	subs	r3, r3, r2
 800f334:	009b      	lsls	r3, r3, #2
 800f336:	440b      	add	r3, r1
 800f338:	3326      	adds	r3, #38	@ 0x26
 800f33a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800f33c:	2b02      	cmp	r3, #2
 800f33e:	d159      	bne.n	800f3f4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800f340:	78fb      	ldrb	r3, [r7, #3]
 800f342:	015a      	lsls	r2, r3, #5
 800f344:	693b      	ldr	r3, [r7, #16]
 800f346:	4413      	add	r3, r2
 800f348:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f356:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f35e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800f360:	78fb      	ldrb	r3, [r7, #3]
 800f362:	015a      	lsls	r2, r3, #5
 800f364:	693b      	ldr	r3, [r7, #16]
 800f366:	4413      	add	r3, r2
 800f368:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f36c:	461a      	mov	r2, r3
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	6013      	str	r3, [r2, #0]
 800f372:	e03f      	b.n	800f3f4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800f374:	78fa      	ldrb	r2, [r7, #3]
 800f376:	6879      	ldr	r1, [r7, #4]
 800f378:	4613      	mov	r3, r2
 800f37a:	011b      	lsls	r3, r3, #4
 800f37c:	1a9b      	subs	r3, r3, r2
 800f37e:	009b      	lsls	r3, r3, #2
 800f380:	440b      	add	r3, r1
 800f382:	334d      	adds	r3, #77	@ 0x4d
 800f384:	781b      	ldrb	r3, [r3, #0]
 800f386:	2b08      	cmp	r3, #8
 800f388:	d126      	bne.n	800f3d8 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800f38a:	78fa      	ldrb	r2, [r7, #3]
 800f38c:	6879      	ldr	r1, [r7, #4]
 800f38e:	4613      	mov	r3, r2
 800f390:	011b      	lsls	r3, r3, #4
 800f392:	1a9b      	subs	r3, r3, r2
 800f394:	009b      	lsls	r3, r3, #2
 800f396:	440b      	add	r3, r1
 800f398:	334d      	adds	r3, #77	@ 0x4d
 800f39a:	2202      	movs	r2, #2
 800f39c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800f39e:	78fa      	ldrb	r2, [r7, #3]
 800f3a0:	6879      	ldr	r1, [r7, #4]
 800f3a2:	4613      	mov	r3, r2
 800f3a4:	011b      	lsls	r3, r3, #4
 800f3a6:	1a9b      	subs	r3, r3, r2
 800f3a8:	009b      	lsls	r3, r3, #2
 800f3aa:	440b      	add	r3, r1
 800f3ac:	3344      	adds	r3, #68	@ 0x44
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	1c59      	adds	r1, r3, #1
 800f3b2:	6878      	ldr	r0, [r7, #4]
 800f3b4:	4613      	mov	r3, r2
 800f3b6:	011b      	lsls	r3, r3, #4
 800f3b8:	1a9b      	subs	r3, r3, r2
 800f3ba:	009b      	lsls	r3, r3, #2
 800f3bc:	4403      	add	r3, r0
 800f3be:	3344      	adds	r3, #68	@ 0x44
 800f3c0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800f3c2:	78fa      	ldrb	r2, [r7, #3]
 800f3c4:	6879      	ldr	r1, [r7, #4]
 800f3c6:	4613      	mov	r3, r2
 800f3c8:	011b      	lsls	r3, r3, #4
 800f3ca:	1a9b      	subs	r3, r3, r2
 800f3cc:	009b      	lsls	r3, r3, #2
 800f3ce:	440b      	add	r3, r1
 800f3d0:	334c      	adds	r3, #76	@ 0x4c
 800f3d2:	2204      	movs	r2, #4
 800f3d4:	701a      	strb	r2, [r3, #0]
 800f3d6:	e00d      	b.n	800f3f4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800f3d8:	78fa      	ldrb	r2, [r7, #3]
 800f3da:	6879      	ldr	r1, [r7, #4]
 800f3dc:	4613      	mov	r3, r2
 800f3de:	011b      	lsls	r3, r3, #4
 800f3e0:	1a9b      	subs	r3, r3, r2
 800f3e2:	009b      	lsls	r3, r3, #2
 800f3e4:	440b      	add	r3, r1
 800f3e6:	334d      	adds	r3, #77	@ 0x4d
 800f3e8:	781b      	ldrb	r3, [r3, #0]
 800f3ea:	2b02      	cmp	r3, #2
 800f3ec:	f000 8100 	beq.w	800f5f0 <HCD_HC_IN_IRQHandler+0xcca>
 800f3f0:	e000      	b.n	800f3f4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800f3f2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800f3f4:	78fa      	ldrb	r2, [r7, #3]
 800f3f6:	6879      	ldr	r1, [r7, #4]
 800f3f8:	4613      	mov	r3, r2
 800f3fa:	011b      	lsls	r3, r3, #4
 800f3fc:	1a9b      	subs	r3, r3, r2
 800f3fe:	009b      	lsls	r3, r3, #2
 800f400:	440b      	add	r3, r1
 800f402:	334c      	adds	r3, #76	@ 0x4c
 800f404:	781a      	ldrb	r2, [r3, #0]
 800f406:	78fb      	ldrb	r3, [r7, #3]
 800f408:	4619      	mov	r1, r3
 800f40a:	6878      	ldr	r0, [r7, #4]
 800f40c:	f005 fdf6 	bl	8014ffc <HAL_HCD_HC_NotifyURBChange_Callback>
 800f410:	e0ef      	b.n	800f5f2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	78fa      	ldrb	r2, [r7, #3]
 800f418:	4611      	mov	r1, r2
 800f41a:	4618      	mov	r0, r3
 800f41c:	f002 fcf2 	bl	8011e04 <USB_ReadChInterrupts>
 800f420:	4603      	mov	r3, r0
 800f422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f426:	2b40      	cmp	r3, #64	@ 0x40
 800f428:	d12f      	bne.n	800f48a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800f42a:	78fb      	ldrb	r3, [r7, #3]
 800f42c:	015a      	lsls	r2, r3, #5
 800f42e:	693b      	ldr	r3, [r7, #16]
 800f430:	4413      	add	r3, r2
 800f432:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f436:	461a      	mov	r2, r3
 800f438:	2340      	movs	r3, #64	@ 0x40
 800f43a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800f43c:	78fa      	ldrb	r2, [r7, #3]
 800f43e:	6879      	ldr	r1, [r7, #4]
 800f440:	4613      	mov	r3, r2
 800f442:	011b      	lsls	r3, r3, #4
 800f444:	1a9b      	subs	r3, r3, r2
 800f446:	009b      	lsls	r3, r3, #2
 800f448:	440b      	add	r3, r1
 800f44a:	334d      	adds	r3, #77	@ 0x4d
 800f44c:	2205      	movs	r2, #5
 800f44e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800f450:	78fa      	ldrb	r2, [r7, #3]
 800f452:	6879      	ldr	r1, [r7, #4]
 800f454:	4613      	mov	r3, r2
 800f456:	011b      	lsls	r3, r3, #4
 800f458:	1a9b      	subs	r3, r3, r2
 800f45a:	009b      	lsls	r3, r3, #2
 800f45c:	440b      	add	r3, r1
 800f45e:	331a      	adds	r3, #26
 800f460:	781b      	ldrb	r3, [r3, #0]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d109      	bne.n	800f47a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800f466:	78fa      	ldrb	r2, [r7, #3]
 800f468:	6879      	ldr	r1, [r7, #4]
 800f46a:	4613      	mov	r3, r2
 800f46c:	011b      	lsls	r3, r3, #4
 800f46e:	1a9b      	subs	r3, r3, r2
 800f470:	009b      	lsls	r3, r3, #2
 800f472:	440b      	add	r3, r1
 800f474:	3344      	adds	r3, #68	@ 0x44
 800f476:	2200      	movs	r2, #0
 800f478:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	78fa      	ldrb	r2, [r7, #3]
 800f480:	4611      	mov	r1, r2
 800f482:	4618      	mov	r0, r3
 800f484:	f003 fa61 	bl	801294a <USB_HC_Halt>
 800f488:	e0b3      	b.n	800f5f2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	78fa      	ldrb	r2, [r7, #3]
 800f490:	4611      	mov	r1, r2
 800f492:	4618      	mov	r0, r3
 800f494:	f002 fcb6 	bl	8011e04 <USB_ReadChInterrupts>
 800f498:	4603      	mov	r3, r0
 800f49a:	f003 0310 	and.w	r3, r3, #16
 800f49e:	2b10      	cmp	r3, #16
 800f4a0:	f040 80a7 	bne.w	800f5f2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800f4a4:	78fa      	ldrb	r2, [r7, #3]
 800f4a6:	6879      	ldr	r1, [r7, #4]
 800f4a8:	4613      	mov	r3, r2
 800f4aa:	011b      	lsls	r3, r3, #4
 800f4ac:	1a9b      	subs	r3, r3, r2
 800f4ae:	009b      	lsls	r3, r3, #2
 800f4b0:	440b      	add	r3, r1
 800f4b2:	3326      	adds	r3, #38	@ 0x26
 800f4b4:	781b      	ldrb	r3, [r3, #0]
 800f4b6:	2b03      	cmp	r3, #3
 800f4b8:	d11b      	bne.n	800f4f2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800f4ba:	78fa      	ldrb	r2, [r7, #3]
 800f4bc:	6879      	ldr	r1, [r7, #4]
 800f4be:	4613      	mov	r3, r2
 800f4c0:	011b      	lsls	r3, r3, #4
 800f4c2:	1a9b      	subs	r3, r3, r2
 800f4c4:	009b      	lsls	r3, r3, #2
 800f4c6:	440b      	add	r3, r1
 800f4c8:	3344      	adds	r3, #68	@ 0x44
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800f4ce:	78fa      	ldrb	r2, [r7, #3]
 800f4d0:	6879      	ldr	r1, [r7, #4]
 800f4d2:	4613      	mov	r3, r2
 800f4d4:	011b      	lsls	r3, r3, #4
 800f4d6:	1a9b      	subs	r3, r3, r2
 800f4d8:	009b      	lsls	r3, r3, #2
 800f4da:	440b      	add	r3, r1
 800f4dc:	334d      	adds	r3, #77	@ 0x4d
 800f4de:	2204      	movs	r2, #4
 800f4e0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	78fa      	ldrb	r2, [r7, #3]
 800f4e8:	4611      	mov	r1, r2
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	f003 fa2d 	bl	801294a <USB_HC_Halt>
 800f4f0:	e03f      	b.n	800f572 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800f4f2:	78fa      	ldrb	r2, [r7, #3]
 800f4f4:	6879      	ldr	r1, [r7, #4]
 800f4f6:	4613      	mov	r3, r2
 800f4f8:	011b      	lsls	r3, r3, #4
 800f4fa:	1a9b      	subs	r3, r3, r2
 800f4fc:	009b      	lsls	r3, r3, #2
 800f4fe:	440b      	add	r3, r1
 800f500:	3326      	adds	r3, #38	@ 0x26
 800f502:	781b      	ldrb	r3, [r3, #0]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d00a      	beq.n	800f51e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800f508:	78fa      	ldrb	r2, [r7, #3]
 800f50a:	6879      	ldr	r1, [r7, #4]
 800f50c:	4613      	mov	r3, r2
 800f50e:	011b      	lsls	r3, r3, #4
 800f510:	1a9b      	subs	r3, r3, r2
 800f512:	009b      	lsls	r3, r3, #2
 800f514:	440b      	add	r3, r1
 800f516:	3326      	adds	r3, #38	@ 0x26
 800f518:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800f51a:	2b02      	cmp	r3, #2
 800f51c:	d129      	bne.n	800f572 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800f51e:	78fa      	ldrb	r2, [r7, #3]
 800f520:	6879      	ldr	r1, [r7, #4]
 800f522:	4613      	mov	r3, r2
 800f524:	011b      	lsls	r3, r3, #4
 800f526:	1a9b      	subs	r3, r3, r2
 800f528:	009b      	lsls	r3, r3, #2
 800f52a:	440b      	add	r3, r1
 800f52c:	3344      	adds	r3, #68	@ 0x44
 800f52e:	2200      	movs	r2, #0
 800f530:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	799b      	ldrb	r3, [r3, #6]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d00a      	beq.n	800f550 <HCD_HC_IN_IRQHandler+0xc2a>
 800f53a:	78fa      	ldrb	r2, [r7, #3]
 800f53c:	6879      	ldr	r1, [r7, #4]
 800f53e:	4613      	mov	r3, r2
 800f540:	011b      	lsls	r3, r3, #4
 800f542:	1a9b      	subs	r3, r3, r2
 800f544:	009b      	lsls	r3, r3, #2
 800f546:	440b      	add	r3, r1
 800f548:	331b      	adds	r3, #27
 800f54a:	781b      	ldrb	r3, [r3, #0]
 800f54c:	2b01      	cmp	r3, #1
 800f54e:	d110      	bne.n	800f572 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800f550:	78fa      	ldrb	r2, [r7, #3]
 800f552:	6879      	ldr	r1, [r7, #4]
 800f554:	4613      	mov	r3, r2
 800f556:	011b      	lsls	r3, r3, #4
 800f558:	1a9b      	subs	r3, r3, r2
 800f55a:	009b      	lsls	r3, r3, #2
 800f55c:	440b      	add	r3, r1
 800f55e:	334d      	adds	r3, #77	@ 0x4d
 800f560:	2204      	movs	r2, #4
 800f562:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	78fa      	ldrb	r2, [r7, #3]
 800f56a:	4611      	mov	r1, r2
 800f56c:	4618      	mov	r0, r3
 800f56e:	f003 f9ec 	bl	801294a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800f572:	78fa      	ldrb	r2, [r7, #3]
 800f574:	6879      	ldr	r1, [r7, #4]
 800f576:	4613      	mov	r3, r2
 800f578:	011b      	lsls	r3, r3, #4
 800f57a:	1a9b      	subs	r3, r3, r2
 800f57c:	009b      	lsls	r3, r3, #2
 800f57e:	440b      	add	r3, r1
 800f580:	331b      	adds	r3, #27
 800f582:	781b      	ldrb	r3, [r3, #0]
 800f584:	2b01      	cmp	r3, #1
 800f586:	d129      	bne.n	800f5dc <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800f588:	78fa      	ldrb	r2, [r7, #3]
 800f58a:	6879      	ldr	r1, [r7, #4]
 800f58c:	4613      	mov	r3, r2
 800f58e:	011b      	lsls	r3, r3, #4
 800f590:	1a9b      	subs	r3, r3, r2
 800f592:	009b      	lsls	r3, r3, #2
 800f594:	440b      	add	r3, r1
 800f596:	331b      	adds	r3, #27
 800f598:	2200      	movs	r2, #0
 800f59a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800f59c:	78fb      	ldrb	r3, [r7, #3]
 800f59e:	015a      	lsls	r2, r3, #5
 800f5a0:	693b      	ldr	r3, [r7, #16]
 800f5a2:	4413      	add	r3, r2
 800f5a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f5a8:	685b      	ldr	r3, [r3, #4]
 800f5aa:	78fa      	ldrb	r2, [r7, #3]
 800f5ac:	0151      	lsls	r1, r2, #5
 800f5ae:	693a      	ldr	r2, [r7, #16]
 800f5b0:	440a      	add	r2, r1
 800f5b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f5b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f5ba:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800f5bc:	78fb      	ldrb	r3, [r7, #3]
 800f5be:	015a      	lsls	r2, r3, #5
 800f5c0:	693b      	ldr	r3, [r7, #16]
 800f5c2:	4413      	add	r3, r2
 800f5c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f5c8:	68db      	ldr	r3, [r3, #12]
 800f5ca:	78fa      	ldrb	r2, [r7, #3]
 800f5cc:	0151      	lsls	r1, r2, #5
 800f5ce:	693a      	ldr	r2, [r7, #16]
 800f5d0:	440a      	add	r2, r1
 800f5d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f5d6:	f043 0320 	orr.w	r3, r3, #32
 800f5da:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800f5dc:	78fb      	ldrb	r3, [r7, #3]
 800f5de:	015a      	lsls	r2, r3, #5
 800f5e0:	693b      	ldr	r3, [r7, #16]
 800f5e2:	4413      	add	r3, r2
 800f5e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f5e8:	461a      	mov	r2, r3
 800f5ea:	2310      	movs	r3, #16
 800f5ec:	6093      	str	r3, [r2, #8]
 800f5ee:	e000      	b.n	800f5f2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800f5f0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800f5f2:	3718      	adds	r7, #24
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	bd80      	pop	{r7, pc}

0800f5f8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800f5f8:	b580      	push	{r7, lr}
 800f5fa:	b086      	sub	sp, #24
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	6078      	str	r0, [r7, #4]
 800f600:	460b      	mov	r3, r1
 800f602:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f60a:	697b      	ldr	r3, [r7, #20]
 800f60c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	78fa      	ldrb	r2, [r7, #3]
 800f614:	4611      	mov	r1, r2
 800f616:	4618      	mov	r0, r3
 800f618:	f002 fbf4 	bl	8011e04 <USB_ReadChInterrupts>
 800f61c:	4603      	mov	r3, r0
 800f61e:	f003 0304 	and.w	r3, r3, #4
 800f622:	2b04      	cmp	r3, #4
 800f624:	d11b      	bne.n	800f65e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800f626:	78fb      	ldrb	r3, [r7, #3]
 800f628:	015a      	lsls	r2, r3, #5
 800f62a:	693b      	ldr	r3, [r7, #16]
 800f62c:	4413      	add	r3, r2
 800f62e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f632:	461a      	mov	r2, r3
 800f634:	2304      	movs	r3, #4
 800f636:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800f638:	78fa      	ldrb	r2, [r7, #3]
 800f63a:	6879      	ldr	r1, [r7, #4]
 800f63c:	4613      	mov	r3, r2
 800f63e:	011b      	lsls	r3, r3, #4
 800f640:	1a9b      	subs	r3, r3, r2
 800f642:	009b      	lsls	r3, r3, #2
 800f644:	440b      	add	r3, r1
 800f646:	334d      	adds	r3, #77	@ 0x4d
 800f648:	2207      	movs	r2, #7
 800f64a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	78fa      	ldrb	r2, [r7, #3]
 800f652:	4611      	mov	r1, r2
 800f654:	4618      	mov	r0, r3
 800f656:	f003 f978 	bl	801294a <USB_HC_Halt>
 800f65a:	f000 bc6f 	b.w	800ff3c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	78fa      	ldrb	r2, [r7, #3]
 800f664:	4611      	mov	r1, r2
 800f666:	4618      	mov	r0, r3
 800f668:	f002 fbcc 	bl	8011e04 <USB_ReadChInterrupts>
 800f66c:	4603      	mov	r3, r0
 800f66e:	f003 0320 	and.w	r3, r3, #32
 800f672:	2b20      	cmp	r3, #32
 800f674:	f040 8082 	bne.w	800f77c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800f678:	78fb      	ldrb	r3, [r7, #3]
 800f67a:	015a      	lsls	r2, r3, #5
 800f67c:	693b      	ldr	r3, [r7, #16]
 800f67e:	4413      	add	r3, r2
 800f680:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f684:	461a      	mov	r2, r3
 800f686:	2320      	movs	r3, #32
 800f688:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800f68a:	78fa      	ldrb	r2, [r7, #3]
 800f68c:	6879      	ldr	r1, [r7, #4]
 800f68e:	4613      	mov	r3, r2
 800f690:	011b      	lsls	r3, r3, #4
 800f692:	1a9b      	subs	r3, r3, r2
 800f694:	009b      	lsls	r3, r3, #2
 800f696:	440b      	add	r3, r1
 800f698:	3319      	adds	r3, #25
 800f69a:	781b      	ldrb	r3, [r3, #0]
 800f69c:	2b01      	cmp	r3, #1
 800f69e:	d124      	bne.n	800f6ea <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800f6a0:	78fa      	ldrb	r2, [r7, #3]
 800f6a2:	6879      	ldr	r1, [r7, #4]
 800f6a4:	4613      	mov	r3, r2
 800f6a6:	011b      	lsls	r3, r3, #4
 800f6a8:	1a9b      	subs	r3, r3, r2
 800f6aa:	009b      	lsls	r3, r3, #2
 800f6ac:	440b      	add	r3, r1
 800f6ae:	3319      	adds	r3, #25
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800f6b4:	78fa      	ldrb	r2, [r7, #3]
 800f6b6:	6879      	ldr	r1, [r7, #4]
 800f6b8:	4613      	mov	r3, r2
 800f6ba:	011b      	lsls	r3, r3, #4
 800f6bc:	1a9b      	subs	r3, r3, r2
 800f6be:	009b      	lsls	r3, r3, #2
 800f6c0:	440b      	add	r3, r1
 800f6c2:	334c      	adds	r3, #76	@ 0x4c
 800f6c4:	2202      	movs	r2, #2
 800f6c6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800f6c8:	78fa      	ldrb	r2, [r7, #3]
 800f6ca:	6879      	ldr	r1, [r7, #4]
 800f6cc:	4613      	mov	r3, r2
 800f6ce:	011b      	lsls	r3, r3, #4
 800f6d0:	1a9b      	subs	r3, r3, r2
 800f6d2:	009b      	lsls	r3, r3, #2
 800f6d4:	440b      	add	r3, r1
 800f6d6:	334d      	adds	r3, #77	@ 0x4d
 800f6d8:	2203      	movs	r2, #3
 800f6da:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	78fa      	ldrb	r2, [r7, #3]
 800f6e2:	4611      	mov	r1, r2
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	f003 f930 	bl	801294a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800f6ea:	78fa      	ldrb	r2, [r7, #3]
 800f6ec:	6879      	ldr	r1, [r7, #4]
 800f6ee:	4613      	mov	r3, r2
 800f6f0:	011b      	lsls	r3, r3, #4
 800f6f2:	1a9b      	subs	r3, r3, r2
 800f6f4:	009b      	lsls	r3, r3, #2
 800f6f6:	440b      	add	r3, r1
 800f6f8:	331a      	adds	r3, #26
 800f6fa:	781b      	ldrb	r3, [r3, #0]
 800f6fc:	2b01      	cmp	r3, #1
 800f6fe:	f040 841d 	bne.w	800ff3c <HCD_HC_OUT_IRQHandler+0x944>
 800f702:	78fa      	ldrb	r2, [r7, #3]
 800f704:	6879      	ldr	r1, [r7, #4]
 800f706:	4613      	mov	r3, r2
 800f708:	011b      	lsls	r3, r3, #4
 800f70a:	1a9b      	subs	r3, r3, r2
 800f70c:	009b      	lsls	r3, r3, #2
 800f70e:	440b      	add	r3, r1
 800f710:	331b      	adds	r3, #27
 800f712:	781b      	ldrb	r3, [r3, #0]
 800f714:	2b00      	cmp	r3, #0
 800f716:	f040 8411 	bne.w	800ff3c <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800f71a:	78fa      	ldrb	r2, [r7, #3]
 800f71c:	6879      	ldr	r1, [r7, #4]
 800f71e:	4613      	mov	r3, r2
 800f720:	011b      	lsls	r3, r3, #4
 800f722:	1a9b      	subs	r3, r3, r2
 800f724:	009b      	lsls	r3, r3, #2
 800f726:	440b      	add	r3, r1
 800f728:	3326      	adds	r3, #38	@ 0x26
 800f72a:	781b      	ldrb	r3, [r3, #0]
 800f72c:	2b01      	cmp	r3, #1
 800f72e:	d009      	beq.n	800f744 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800f730:	78fa      	ldrb	r2, [r7, #3]
 800f732:	6879      	ldr	r1, [r7, #4]
 800f734:	4613      	mov	r3, r2
 800f736:	011b      	lsls	r3, r3, #4
 800f738:	1a9b      	subs	r3, r3, r2
 800f73a:	009b      	lsls	r3, r3, #2
 800f73c:	440b      	add	r3, r1
 800f73e:	331b      	adds	r3, #27
 800f740:	2201      	movs	r2, #1
 800f742:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800f744:	78fa      	ldrb	r2, [r7, #3]
 800f746:	6879      	ldr	r1, [r7, #4]
 800f748:	4613      	mov	r3, r2
 800f74a:	011b      	lsls	r3, r3, #4
 800f74c:	1a9b      	subs	r3, r3, r2
 800f74e:	009b      	lsls	r3, r3, #2
 800f750:	440b      	add	r3, r1
 800f752:	334d      	adds	r3, #77	@ 0x4d
 800f754:	2203      	movs	r2, #3
 800f756:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	78fa      	ldrb	r2, [r7, #3]
 800f75e:	4611      	mov	r1, r2
 800f760:	4618      	mov	r0, r3
 800f762:	f003 f8f2 	bl	801294a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800f766:	78fa      	ldrb	r2, [r7, #3]
 800f768:	6879      	ldr	r1, [r7, #4]
 800f76a:	4613      	mov	r3, r2
 800f76c:	011b      	lsls	r3, r3, #4
 800f76e:	1a9b      	subs	r3, r3, r2
 800f770:	009b      	lsls	r3, r3, #2
 800f772:	440b      	add	r3, r1
 800f774:	3344      	adds	r3, #68	@ 0x44
 800f776:	2200      	movs	r2, #0
 800f778:	601a      	str	r2, [r3, #0]
 800f77a:	e3df      	b.n	800ff3c <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	78fa      	ldrb	r2, [r7, #3]
 800f782:	4611      	mov	r1, r2
 800f784:	4618      	mov	r0, r3
 800f786:	f002 fb3d 	bl	8011e04 <USB_ReadChInterrupts>
 800f78a:	4603      	mov	r3, r0
 800f78c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f790:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f794:	d111      	bne.n	800f7ba <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800f796:	78fb      	ldrb	r3, [r7, #3]
 800f798:	015a      	lsls	r2, r3, #5
 800f79a:	693b      	ldr	r3, [r7, #16]
 800f79c:	4413      	add	r3, r2
 800f79e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f7a2:	461a      	mov	r2, r3
 800f7a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f7a8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	78fa      	ldrb	r2, [r7, #3]
 800f7b0:	4611      	mov	r1, r2
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	f003 f8c9 	bl	801294a <USB_HC_Halt>
 800f7b8:	e3c0      	b.n	800ff3c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	78fa      	ldrb	r2, [r7, #3]
 800f7c0:	4611      	mov	r1, r2
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	f002 fb1e 	bl	8011e04 <USB_ReadChInterrupts>
 800f7c8:	4603      	mov	r3, r0
 800f7ca:	f003 0301 	and.w	r3, r3, #1
 800f7ce:	2b01      	cmp	r3, #1
 800f7d0:	d168      	bne.n	800f8a4 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800f7d2:	78fa      	ldrb	r2, [r7, #3]
 800f7d4:	6879      	ldr	r1, [r7, #4]
 800f7d6:	4613      	mov	r3, r2
 800f7d8:	011b      	lsls	r3, r3, #4
 800f7da:	1a9b      	subs	r3, r3, r2
 800f7dc:	009b      	lsls	r3, r3, #2
 800f7de:	440b      	add	r3, r1
 800f7e0:	3344      	adds	r3, #68	@ 0x44
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	78fa      	ldrb	r2, [r7, #3]
 800f7ec:	4611      	mov	r1, r2
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	f002 fb08 	bl	8011e04 <USB_ReadChInterrupts>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f7fa:	2b40      	cmp	r3, #64	@ 0x40
 800f7fc:	d112      	bne.n	800f824 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800f7fe:	78fa      	ldrb	r2, [r7, #3]
 800f800:	6879      	ldr	r1, [r7, #4]
 800f802:	4613      	mov	r3, r2
 800f804:	011b      	lsls	r3, r3, #4
 800f806:	1a9b      	subs	r3, r3, r2
 800f808:	009b      	lsls	r3, r3, #2
 800f80a:	440b      	add	r3, r1
 800f80c:	3319      	adds	r3, #25
 800f80e:	2201      	movs	r2, #1
 800f810:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800f812:	78fb      	ldrb	r3, [r7, #3]
 800f814:	015a      	lsls	r2, r3, #5
 800f816:	693b      	ldr	r3, [r7, #16]
 800f818:	4413      	add	r3, r2
 800f81a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f81e:	461a      	mov	r2, r3
 800f820:	2340      	movs	r3, #64	@ 0x40
 800f822:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800f824:	78fa      	ldrb	r2, [r7, #3]
 800f826:	6879      	ldr	r1, [r7, #4]
 800f828:	4613      	mov	r3, r2
 800f82a:	011b      	lsls	r3, r3, #4
 800f82c:	1a9b      	subs	r3, r3, r2
 800f82e:	009b      	lsls	r3, r3, #2
 800f830:	440b      	add	r3, r1
 800f832:	331b      	adds	r3, #27
 800f834:	781b      	ldrb	r3, [r3, #0]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d019      	beq.n	800f86e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800f83a:	78fa      	ldrb	r2, [r7, #3]
 800f83c:	6879      	ldr	r1, [r7, #4]
 800f83e:	4613      	mov	r3, r2
 800f840:	011b      	lsls	r3, r3, #4
 800f842:	1a9b      	subs	r3, r3, r2
 800f844:	009b      	lsls	r3, r3, #2
 800f846:	440b      	add	r3, r1
 800f848:	331b      	adds	r3, #27
 800f84a:	2200      	movs	r2, #0
 800f84c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800f84e:	78fb      	ldrb	r3, [r7, #3]
 800f850:	015a      	lsls	r2, r3, #5
 800f852:	693b      	ldr	r3, [r7, #16]
 800f854:	4413      	add	r3, r2
 800f856:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f85a:	685b      	ldr	r3, [r3, #4]
 800f85c:	78fa      	ldrb	r2, [r7, #3]
 800f85e:	0151      	lsls	r1, r2, #5
 800f860:	693a      	ldr	r2, [r7, #16]
 800f862:	440a      	add	r2, r1
 800f864:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f868:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f86c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800f86e:	78fb      	ldrb	r3, [r7, #3]
 800f870:	015a      	lsls	r2, r3, #5
 800f872:	693b      	ldr	r3, [r7, #16]
 800f874:	4413      	add	r3, r2
 800f876:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f87a:	461a      	mov	r2, r3
 800f87c:	2301      	movs	r3, #1
 800f87e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800f880:	78fa      	ldrb	r2, [r7, #3]
 800f882:	6879      	ldr	r1, [r7, #4]
 800f884:	4613      	mov	r3, r2
 800f886:	011b      	lsls	r3, r3, #4
 800f888:	1a9b      	subs	r3, r3, r2
 800f88a:	009b      	lsls	r3, r3, #2
 800f88c:	440b      	add	r3, r1
 800f88e:	334d      	adds	r3, #77	@ 0x4d
 800f890:	2201      	movs	r2, #1
 800f892:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	78fa      	ldrb	r2, [r7, #3]
 800f89a:	4611      	mov	r1, r2
 800f89c:	4618      	mov	r0, r3
 800f89e:	f003 f854 	bl	801294a <USB_HC_Halt>
 800f8a2:	e34b      	b.n	800ff3c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	78fa      	ldrb	r2, [r7, #3]
 800f8aa:	4611      	mov	r1, r2
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	f002 faa9 	bl	8011e04 <USB_ReadChInterrupts>
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f8b8:	2b40      	cmp	r3, #64	@ 0x40
 800f8ba:	d139      	bne.n	800f930 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800f8bc:	78fa      	ldrb	r2, [r7, #3]
 800f8be:	6879      	ldr	r1, [r7, #4]
 800f8c0:	4613      	mov	r3, r2
 800f8c2:	011b      	lsls	r3, r3, #4
 800f8c4:	1a9b      	subs	r3, r3, r2
 800f8c6:	009b      	lsls	r3, r3, #2
 800f8c8:	440b      	add	r3, r1
 800f8ca:	334d      	adds	r3, #77	@ 0x4d
 800f8cc:	2205      	movs	r2, #5
 800f8ce:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800f8d0:	78fa      	ldrb	r2, [r7, #3]
 800f8d2:	6879      	ldr	r1, [r7, #4]
 800f8d4:	4613      	mov	r3, r2
 800f8d6:	011b      	lsls	r3, r3, #4
 800f8d8:	1a9b      	subs	r3, r3, r2
 800f8da:	009b      	lsls	r3, r3, #2
 800f8dc:	440b      	add	r3, r1
 800f8de:	331a      	adds	r3, #26
 800f8e0:	781b      	ldrb	r3, [r3, #0]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d109      	bne.n	800f8fa <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800f8e6:	78fa      	ldrb	r2, [r7, #3]
 800f8e8:	6879      	ldr	r1, [r7, #4]
 800f8ea:	4613      	mov	r3, r2
 800f8ec:	011b      	lsls	r3, r3, #4
 800f8ee:	1a9b      	subs	r3, r3, r2
 800f8f0:	009b      	lsls	r3, r3, #2
 800f8f2:	440b      	add	r3, r1
 800f8f4:	3319      	adds	r3, #25
 800f8f6:	2201      	movs	r2, #1
 800f8f8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800f8fa:	78fa      	ldrb	r2, [r7, #3]
 800f8fc:	6879      	ldr	r1, [r7, #4]
 800f8fe:	4613      	mov	r3, r2
 800f900:	011b      	lsls	r3, r3, #4
 800f902:	1a9b      	subs	r3, r3, r2
 800f904:	009b      	lsls	r3, r3, #2
 800f906:	440b      	add	r3, r1
 800f908:	3344      	adds	r3, #68	@ 0x44
 800f90a:	2200      	movs	r2, #0
 800f90c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	78fa      	ldrb	r2, [r7, #3]
 800f914:	4611      	mov	r1, r2
 800f916:	4618      	mov	r0, r3
 800f918:	f003 f817 	bl	801294a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800f91c:	78fb      	ldrb	r3, [r7, #3]
 800f91e:	015a      	lsls	r2, r3, #5
 800f920:	693b      	ldr	r3, [r7, #16]
 800f922:	4413      	add	r3, r2
 800f924:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f928:	461a      	mov	r2, r3
 800f92a:	2340      	movs	r3, #64	@ 0x40
 800f92c:	6093      	str	r3, [r2, #8]
 800f92e:	e305      	b.n	800ff3c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	78fa      	ldrb	r2, [r7, #3]
 800f936:	4611      	mov	r1, r2
 800f938:	4618      	mov	r0, r3
 800f93a:	f002 fa63 	bl	8011e04 <USB_ReadChInterrupts>
 800f93e:	4603      	mov	r3, r0
 800f940:	f003 0308 	and.w	r3, r3, #8
 800f944:	2b08      	cmp	r3, #8
 800f946:	d11a      	bne.n	800f97e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800f948:	78fb      	ldrb	r3, [r7, #3]
 800f94a:	015a      	lsls	r2, r3, #5
 800f94c:	693b      	ldr	r3, [r7, #16]
 800f94e:	4413      	add	r3, r2
 800f950:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f954:	461a      	mov	r2, r3
 800f956:	2308      	movs	r3, #8
 800f958:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800f95a:	78fa      	ldrb	r2, [r7, #3]
 800f95c:	6879      	ldr	r1, [r7, #4]
 800f95e:	4613      	mov	r3, r2
 800f960:	011b      	lsls	r3, r3, #4
 800f962:	1a9b      	subs	r3, r3, r2
 800f964:	009b      	lsls	r3, r3, #2
 800f966:	440b      	add	r3, r1
 800f968:	334d      	adds	r3, #77	@ 0x4d
 800f96a:	2206      	movs	r2, #6
 800f96c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	78fa      	ldrb	r2, [r7, #3]
 800f974:	4611      	mov	r1, r2
 800f976:	4618      	mov	r0, r3
 800f978:	f002 ffe7 	bl	801294a <USB_HC_Halt>
 800f97c:	e2de      	b.n	800ff3c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	78fa      	ldrb	r2, [r7, #3]
 800f984:	4611      	mov	r1, r2
 800f986:	4618      	mov	r0, r3
 800f988:	f002 fa3c 	bl	8011e04 <USB_ReadChInterrupts>
 800f98c:	4603      	mov	r3, r0
 800f98e:	f003 0310 	and.w	r3, r3, #16
 800f992:	2b10      	cmp	r3, #16
 800f994:	d144      	bne.n	800fa20 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800f996:	78fa      	ldrb	r2, [r7, #3]
 800f998:	6879      	ldr	r1, [r7, #4]
 800f99a:	4613      	mov	r3, r2
 800f99c:	011b      	lsls	r3, r3, #4
 800f99e:	1a9b      	subs	r3, r3, r2
 800f9a0:	009b      	lsls	r3, r3, #2
 800f9a2:	440b      	add	r3, r1
 800f9a4:	3344      	adds	r3, #68	@ 0x44
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800f9aa:	78fa      	ldrb	r2, [r7, #3]
 800f9ac:	6879      	ldr	r1, [r7, #4]
 800f9ae:	4613      	mov	r3, r2
 800f9b0:	011b      	lsls	r3, r3, #4
 800f9b2:	1a9b      	subs	r3, r3, r2
 800f9b4:	009b      	lsls	r3, r3, #2
 800f9b6:	440b      	add	r3, r1
 800f9b8:	334d      	adds	r3, #77	@ 0x4d
 800f9ba:	2204      	movs	r2, #4
 800f9bc:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800f9be:	78fa      	ldrb	r2, [r7, #3]
 800f9c0:	6879      	ldr	r1, [r7, #4]
 800f9c2:	4613      	mov	r3, r2
 800f9c4:	011b      	lsls	r3, r3, #4
 800f9c6:	1a9b      	subs	r3, r3, r2
 800f9c8:	009b      	lsls	r3, r3, #2
 800f9ca:	440b      	add	r3, r1
 800f9cc:	3319      	adds	r3, #25
 800f9ce:	781b      	ldrb	r3, [r3, #0]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d114      	bne.n	800f9fe <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800f9d4:	78fa      	ldrb	r2, [r7, #3]
 800f9d6:	6879      	ldr	r1, [r7, #4]
 800f9d8:	4613      	mov	r3, r2
 800f9da:	011b      	lsls	r3, r3, #4
 800f9dc:	1a9b      	subs	r3, r3, r2
 800f9de:	009b      	lsls	r3, r3, #2
 800f9e0:	440b      	add	r3, r1
 800f9e2:	3318      	adds	r3, #24
 800f9e4:	781b      	ldrb	r3, [r3, #0]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d109      	bne.n	800f9fe <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800f9ea:	78fa      	ldrb	r2, [r7, #3]
 800f9ec:	6879      	ldr	r1, [r7, #4]
 800f9ee:	4613      	mov	r3, r2
 800f9f0:	011b      	lsls	r3, r3, #4
 800f9f2:	1a9b      	subs	r3, r3, r2
 800f9f4:	009b      	lsls	r3, r3, #2
 800f9f6:	440b      	add	r3, r1
 800f9f8:	3319      	adds	r3, #25
 800f9fa:	2201      	movs	r2, #1
 800f9fc:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	78fa      	ldrb	r2, [r7, #3]
 800fa04:	4611      	mov	r1, r2
 800fa06:	4618      	mov	r0, r3
 800fa08:	f002 ff9f 	bl	801294a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800fa0c:	78fb      	ldrb	r3, [r7, #3]
 800fa0e:	015a      	lsls	r2, r3, #5
 800fa10:	693b      	ldr	r3, [r7, #16]
 800fa12:	4413      	add	r3, r2
 800fa14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800fa18:	461a      	mov	r2, r3
 800fa1a:	2310      	movs	r3, #16
 800fa1c:	6093      	str	r3, [r2, #8]
 800fa1e:	e28d      	b.n	800ff3c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	78fa      	ldrb	r2, [r7, #3]
 800fa26:	4611      	mov	r1, r2
 800fa28:	4618      	mov	r0, r3
 800fa2a:	f002 f9eb 	bl	8011e04 <USB_ReadChInterrupts>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fa34:	2b80      	cmp	r3, #128	@ 0x80
 800fa36:	d169      	bne.n	800fb0c <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	799b      	ldrb	r3, [r3, #6]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d111      	bne.n	800fa64 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800fa40:	78fa      	ldrb	r2, [r7, #3]
 800fa42:	6879      	ldr	r1, [r7, #4]
 800fa44:	4613      	mov	r3, r2
 800fa46:	011b      	lsls	r3, r3, #4
 800fa48:	1a9b      	subs	r3, r3, r2
 800fa4a:	009b      	lsls	r3, r3, #2
 800fa4c:	440b      	add	r3, r1
 800fa4e:	334d      	adds	r3, #77	@ 0x4d
 800fa50:	2207      	movs	r2, #7
 800fa52:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	78fa      	ldrb	r2, [r7, #3]
 800fa5a:	4611      	mov	r1, r2
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	f002 ff74 	bl	801294a <USB_HC_Halt>
 800fa62:	e049      	b.n	800faf8 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800fa64:	78fa      	ldrb	r2, [r7, #3]
 800fa66:	6879      	ldr	r1, [r7, #4]
 800fa68:	4613      	mov	r3, r2
 800fa6a:	011b      	lsls	r3, r3, #4
 800fa6c:	1a9b      	subs	r3, r3, r2
 800fa6e:	009b      	lsls	r3, r3, #2
 800fa70:	440b      	add	r3, r1
 800fa72:	3344      	adds	r3, #68	@ 0x44
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	1c59      	adds	r1, r3, #1
 800fa78:	6878      	ldr	r0, [r7, #4]
 800fa7a:	4613      	mov	r3, r2
 800fa7c:	011b      	lsls	r3, r3, #4
 800fa7e:	1a9b      	subs	r3, r3, r2
 800fa80:	009b      	lsls	r3, r3, #2
 800fa82:	4403      	add	r3, r0
 800fa84:	3344      	adds	r3, #68	@ 0x44
 800fa86:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800fa88:	78fa      	ldrb	r2, [r7, #3]
 800fa8a:	6879      	ldr	r1, [r7, #4]
 800fa8c:	4613      	mov	r3, r2
 800fa8e:	011b      	lsls	r3, r3, #4
 800fa90:	1a9b      	subs	r3, r3, r2
 800fa92:	009b      	lsls	r3, r3, #2
 800fa94:	440b      	add	r3, r1
 800fa96:	3344      	adds	r3, #68	@ 0x44
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	2b02      	cmp	r3, #2
 800fa9c:	d922      	bls.n	800fae4 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800fa9e:	78fa      	ldrb	r2, [r7, #3]
 800faa0:	6879      	ldr	r1, [r7, #4]
 800faa2:	4613      	mov	r3, r2
 800faa4:	011b      	lsls	r3, r3, #4
 800faa6:	1a9b      	subs	r3, r3, r2
 800faa8:	009b      	lsls	r3, r3, #2
 800faaa:	440b      	add	r3, r1
 800faac:	3344      	adds	r3, #68	@ 0x44
 800faae:	2200      	movs	r2, #0
 800fab0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800fab2:	78fa      	ldrb	r2, [r7, #3]
 800fab4:	6879      	ldr	r1, [r7, #4]
 800fab6:	4613      	mov	r3, r2
 800fab8:	011b      	lsls	r3, r3, #4
 800faba:	1a9b      	subs	r3, r3, r2
 800fabc:	009b      	lsls	r3, r3, #2
 800fabe:	440b      	add	r3, r1
 800fac0:	334c      	adds	r3, #76	@ 0x4c
 800fac2:	2204      	movs	r2, #4
 800fac4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800fac6:	78fa      	ldrb	r2, [r7, #3]
 800fac8:	6879      	ldr	r1, [r7, #4]
 800faca:	4613      	mov	r3, r2
 800facc:	011b      	lsls	r3, r3, #4
 800face:	1a9b      	subs	r3, r3, r2
 800fad0:	009b      	lsls	r3, r3, #2
 800fad2:	440b      	add	r3, r1
 800fad4:	334c      	adds	r3, #76	@ 0x4c
 800fad6:	781a      	ldrb	r2, [r3, #0]
 800fad8:	78fb      	ldrb	r3, [r7, #3]
 800fada:	4619      	mov	r1, r3
 800fadc:	6878      	ldr	r0, [r7, #4]
 800fade:	f005 fa8d 	bl	8014ffc <HAL_HCD_HC_NotifyURBChange_Callback>
 800fae2:	e009      	b.n	800faf8 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800fae4:	78fa      	ldrb	r2, [r7, #3]
 800fae6:	6879      	ldr	r1, [r7, #4]
 800fae8:	4613      	mov	r3, r2
 800faea:	011b      	lsls	r3, r3, #4
 800faec:	1a9b      	subs	r3, r3, r2
 800faee:	009b      	lsls	r3, r3, #2
 800faf0:	440b      	add	r3, r1
 800faf2:	334c      	adds	r3, #76	@ 0x4c
 800faf4:	2202      	movs	r2, #2
 800faf6:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800faf8:	78fb      	ldrb	r3, [r7, #3]
 800fafa:	015a      	lsls	r2, r3, #5
 800fafc:	693b      	ldr	r3, [r7, #16]
 800fafe:	4413      	add	r3, r2
 800fb00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800fb04:	461a      	mov	r2, r3
 800fb06:	2380      	movs	r3, #128	@ 0x80
 800fb08:	6093      	str	r3, [r2, #8]
 800fb0a:	e217      	b.n	800ff3c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	78fa      	ldrb	r2, [r7, #3]
 800fb12:	4611      	mov	r1, r2
 800fb14:	4618      	mov	r0, r3
 800fb16:	f002 f975 	bl	8011e04 <USB_ReadChInterrupts>
 800fb1a:	4603      	mov	r3, r0
 800fb1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fb20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fb24:	d11b      	bne.n	800fb5e <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800fb26:	78fa      	ldrb	r2, [r7, #3]
 800fb28:	6879      	ldr	r1, [r7, #4]
 800fb2a:	4613      	mov	r3, r2
 800fb2c:	011b      	lsls	r3, r3, #4
 800fb2e:	1a9b      	subs	r3, r3, r2
 800fb30:	009b      	lsls	r3, r3, #2
 800fb32:	440b      	add	r3, r1
 800fb34:	334d      	adds	r3, #77	@ 0x4d
 800fb36:	2209      	movs	r2, #9
 800fb38:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	78fa      	ldrb	r2, [r7, #3]
 800fb40:	4611      	mov	r1, r2
 800fb42:	4618      	mov	r0, r3
 800fb44:	f002 ff01 	bl	801294a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800fb48:	78fb      	ldrb	r3, [r7, #3]
 800fb4a:	015a      	lsls	r2, r3, #5
 800fb4c:	693b      	ldr	r3, [r7, #16]
 800fb4e:	4413      	add	r3, r2
 800fb50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800fb54:	461a      	mov	r2, r3
 800fb56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fb5a:	6093      	str	r3, [r2, #8]
 800fb5c:	e1ee      	b.n	800ff3c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	78fa      	ldrb	r2, [r7, #3]
 800fb64:	4611      	mov	r1, r2
 800fb66:	4618      	mov	r0, r3
 800fb68:	f002 f94c 	bl	8011e04 <USB_ReadChInterrupts>
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	f003 0302 	and.w	r3, r3, #2
 800fb72:	2b02      	cmp	r3, #2
 800fb74:	f040 81df 	bne.w	800ff36 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800fb78:	78fb      	ldrb	r3, [r7, #3]
 800fb7a:	015a      	lsls	r2, r3, #5
 800fb7c:	693b      	ldr	r3, [r7, #16]
 800fb7e:	4413      	add	r3, r2
 800fb80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800fb84:	461a      	mov	r2, r3
 800fb86:	2302      	movs	r3, #2
 800fb88:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800fb8a:	78fa      	ldrb	r2, [r7, #3]
 800fb8c:	6879      	ldr	r1, [r7, #4]
 800fb8e:	4613      	mov	r3, r2
 800fb90:	011b      	lsls	r3, r3, #4
 800fb92:	1a9b      	subs	r3, r3, r2
 800fb94:	009b      	lsls	r3, r3, #2
 800fb96:	440b      	add	r3, r1
 800fb98:	334d      	adds	r3, #77	@ 0x4d
 800fb9a:	781b      	ldrb	r3, [r3, #0]
 800fb9c:	2b01      	cmp	r3, #1
 800fb9e:	f040 8093 	bne.w	800fcc8 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800fba2:	78fa      	ldrb	r2, [r7, #3]
 800fba4:	6879      	ldr	r1, [r7, #4]
 800fba6:	4613      	mov	r3, r2
 800fba8:	011b      	lsls	r3, r3, #4
 800fbaa:	1a9b      	subs	r3, r3, r2
 800fbac:	009b      	lsls	r3, r3, #2
 800fbae:	440b      	add	r3, r1
 800fbb0:	334d      	adds	r3, #77	@ 0x4d
 800fbb2:	2202      	movs	r2, #2
 800fbb4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800fbb6:	78fa      	ldrb	r2, [r7, #3]
 800fbb8:	6879      	ldr	r1, [r7, #4]
 800fbba:	4613      	mov	r3, r2
 800fbbc:	011b      	lsls	r3, r3, #4
 800fbbe:	1a9b      	subs	r3, r3, r2
 800fbc0:	009b      	lsls	r3, r3, #2
 800fbc2:	440b      	add	r3, r1
 800fbc4:	334c      	adds	r3, #76	@ 0x4c
 800fbc6:	2201      	movs	r2, #1
 800fbc8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800fbca:	78fa      	ldrb	r2, [r7, #3]
 800fbcc:	6879      	ldr	r1, [r7, #4]
 800fbce:	4613      	mov	r3, r2
 800fbd0:	011b      	lsls	r3, r3, #4
 800fbd2:	1a9b      	subs	r3, r3, r2
 800fbd4:	009b      	lsls	r3, r3, #2
 800fbd6:	440b      	add	r3, r1
 800fbd8:	3326      	adds	r3, #38	@ 0x26
 800fbda:	781b      	ldrb	r3, [r3, #0]
 800fbdc:	2b02      	cmp	r3, #2
 800fbde:	d00b      	beq.n	800fbf8 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800fbe0:	78fa      	ldrb	r2, [r7, #3]
 800fbe2:	6879      	ldr	r1, [r7, #4]
 800fbe4:	4613      	mov	r3, r2
 800fbe6:	011b      	lsls	r3, r3, #4
 800fbe8:	1a9b      	subs	r3, r3, r2
 800fbea:	009b      	lsls	r3, r3, #2
 800fbec:	440b      	add	r3, r1
 800fbee:	3326      	adds	r3, #38	@ 0x26
 800fbf0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800fbf2:	2b03      	cmp	r3, #3
 800fbf4:	f040 8190 	bne.w	800ff18 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	799b      	ldrb	r3, [r3, #6]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d115      	bne.n	800fc2c <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800fc00:	78fa      	ldrb	r2, [r7, #3]
 800fc02:	6879      	ldr	r1, [r7, #4]
 800fc04:	4613      	mov	r3, r2
 800fc06:	011b      	lsls	r3, r3, #4
 800fc08:	1a9b      	subs	r3, r3, r2
 800fc0a:	009b      	lsls	r3, r3, #2
 800fc0c:	440b      	add	r3, r1
 800fc0e:	333d      	adds	r3, #61	@ 0x3d
 800fc10:	781b      	ldrb	r3, [r3, #0]
 800fc12:	78fa      	ldrb	r2, [r7, #3]
 800fc14:	f083 0301 	eor.w	r3, r3, #1
 800fc18:	b2d8      	uxtb	r0, r3
 800fc1a:	6879      	ldr	r1, [r7, #4]
 800fc1c:	4613      	mov	r3, r2
 800fc1e:	011b      	lsls	r3, r3, #4
 800fc20:	1a9b      	subs	r3, r3, r2
 800fc22:	009b      	lsls	r3, r3, #2
 800fc24:	440b      	add	r3, r1
 800fc26:	333d      	adds	r3, #61	@ 0x3d
 800fc28:	4602      	mov	r2, r0
 800fc2a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	799b      	ldrb	r3, [r3, #6]
 800fc30:	2b01      	cmp	r3, #1
 800fc32:	f040 8171 	bne.w	800ff18 <HCD_HC_OUT_IRQHandler+0x920>
 800fc36:	78fa      	ldrb	r2, [r7, #3]
 800fc38:	6879      	ldr	r1, [r7, #4]
 800fc3a:	4613      	mov	r3, r2
 800fc3c:	011b      	lsls	r3, r3, #4
 800fc3e:	1a9b      	subs	r3, r3, r2
 800fc40:	009b      	lsls	r3, r3, #2
 800fc42:	440b      	add	r3, r1
 800fc44:	3334      	adds	r3, #52	@ 0x34
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	f000 8165 	beq.w	800ff18 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800fc4e:	78fa      	ldrb	r2, [r7, #3]
 800fc50:	6879      	ldr	r1, [r7, #4]
 800fc52:	4613      	mov	r3, r2
 800fc54:	011b      	lsls	r3, r3, #4
 800fc56:	1a9b      	subs	r3, r3, r2
 800fc58:	009b      	lsls	r3, r3, #2
 800fc5a:	440b      	add	r3, r1
 800fc5c:	3334      	adds	r3, #52	@ 0x34
 800fc5e:	6819      	ldr	r1, [r3, #0]
 800fc60:	78fa      	ldrb	r2, [r7, #3]
 800fc62:	6878      	ldr	r0, [r7, #4]
 800fc64:	4613      	mov	r3, r2
 800fc66:	011b      	lsls	r3, r3, #4
 800fc68:	1a9b      	subs	r3, r3, r2
 800fc6a:	009b      	lsls	r3, r3, #2
 800fc6c:	4403      	add	r3, r0
 800fc6e:	3328      	adds	r3, #40	@ 0x28
 800fc70:	881b      	ldrh	r3, [r3, #0]
 800fc72:	440b      	add	r3, r1
 800fc74:	1e59      	subs	r1, r3, #1
 800fc76:	78fa      	ldrb	r2, [r7, #3]
 800fc78:	6878      	ldr	r0, [r7, #4]
 800fc7a:	4613      	mov	r3, r2
 800fc7c:	011b      	lsls	r3, r3, #4
 800fc7e:	1a9b      	subs	r3, r3, r2
 800fc80:	009b      	lsls	r3, r3, #2
 800fc82:	4403      	add	r3, r0
 800fc84:	3328      	adds	r3, #40	@ 0x28
 800fc86:	881b      	ldrh	r3, [r3, #0]
 800fc88:	fbb1 f3f3 	udiv	r3, r1, r3
 800fc8c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800fc8e:	68bb      	ldr	r3, [r7, #8]
 800fc90:	f003 0301 	and.w	r3, r3, #1
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	f000 813f 	beq.w	800ff18 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800fc9a:	78fa      	ldrb	r2, [r7, #3]
 800fc9c:	6879      	ldr	r1, [r7, #4]
 800fc9e:	4613      	mov	r3, r2
 800fca0:	011b      	lsls	r3, r3, #4
 800fca2:	1a9b      	subs	r3, r3, r2
 800fca4:	009b      	lsls	r3, r3, #2
 800fca6:	440b      	add	r3, r1
 800fca8:	333d      	adds	r3, #61	@ 0x3d
 800fcaa:	781b      	ldrb	r3, [r3, #0]
 800fcac:	78fa      	ldrb	r2, [r7, #3]
 800fcae:	f083 0301 	eor.w	r3, r3, #1
 800fcb2:	b2d8      	uxtb	r0, r3
 800fcb4:	6879      	ldr	r1, [r7, #4]
 800fcb6:	4613      	mov	r3, r2
 800fcb8:	011b      	lsls	r3, r3, #4
 800fcba:	1a9b      	subs	r3, r3, r2
 800fcbc:	009b      	lsls	r3, r3, #2
 800fcbe:	440b      	add	r3, r1
 800fcc0:	333d      	adds	r3, #61	@ 0x3d
 800fcc2:	4602      	mov	r2, r0
 800fcc4:	701a      	strb	r2, [r3, #0]
 800fcc6:	e127      	b.n	800ff18 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800fcc8:	78fa      	ldrb	r2, [r7, #3]
 800fcca:	6879      	ldr	r1, [r7, #4]
 800fccc:	4613      	mov	r3, r2
 800fcce:	011b      	lsls	r3, r3, #4
 800fcd0:	1a9b      	subs	r3, r3, r2
 800fcd2:	009b      	lsls	r3, r3, #2
 800fcd4:	440b      	add	r3, r1
 800fcd6:	334d      	adds	r3, #77	@ 0x4d
 800fcd8:	781b      	ldrb	r3, [r3, #0]
 800fcda:	2b03      	cmp	r3, #3
 800fcdc:	d120      	bne.n	800fd20 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800fcde:	78fa      	ldrb	r2, [r7, #3]
 800fce0:	6879      	ldr	r1, [r7, #4]
 800fce2:	4613      	mov	r3, r2
 800fce4:	011b      	lsls	r3, r3, #4
 800fce6:	1a9b      	subs	r3, r3, r2
 800fce8:	009b      	lsls	r3, r3, #2
 800fcea:	440b      	add	r3, r1
 800fcec:	334d      	adds	r3, #77	@ 0x4d
 800fcee:	2202      	movs	r2, #2
 800fcf0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800fcf2:	78fa      	ldrb	r2, [r7, #3]
 800fcf4:	6879      	ldr	r1, [r7, #4]
 800fcf6:	4613      	mov	r3, r2
 800fcf8:	011b      	lsls	r3, r3, #4
 800fcfa:	1a9b      	subs	r3, r3, r2
 800fcfc:	009b      	lsls	r3, r3, #2
 800fcfe:	440b      	add	r3, r1
 800fd00:	331b      	adds	r3, #27
 800fd02:	781b      	ldrb	r3, [r3, #0]
 800fd04:	2b01      	cmp	r3, #1
 800fd06:	f040 8107 	bne.w	800ff18 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800fd0a:	78fa      	ldrb	r2, [r7, #3]
 800fd0c:	6879      	ldr	r1, [r7, #4]
 800fd0e:	4613      	mov	r3, r2
 800fd10:	011b      	lsls	r3, r3, #4
 800fd12:	1a9b      	subs	r3, r3, r2
 800fd14:	009b      	lsls	r3, r3, #2
 800fd16:	440b      	add	r3, r1
 800fd18:	334c      	adds	r3, #76	@ 0x4c
 800fd1a:	2202      	movs	r2, #2
 800fd1c:	701a      	strb	r2, [r3, #0]
 800fd1e:	e0fb      	b.n	800ff18 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800fd20:	78fa      	ldrb	r2, [r7, #3]
 800fd22:	6879      	ldr	r1, [r7, #4]
 800fd24:	4613      	mov	r3, r2
 800fd26:	011b      	lsls	r3, r3, #4
 800fd28:	1a9b      	subs	r3, r3, r2
 800fd2a:	009b      	lsls	r3, r3, #2
 800fd2c:	440b      	add	r3, r1
 800fd2e:	334d      	adds	r3, #77	@ 0x4d
 800fd30:	781b      	ldrb	r3, [r3, #0]
 800fd32:	2b04      	cmp	r3, #4
 800fd34:	d13a      	bne.n	800fdac <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800fd36:	78fa      	ldrb	r2, [r7, #3]
 800fd38:	6879      	ldr	r1, [r7, #4]
 800fd3a:	4613      	mov	r3, r2
 800fd3c:	011b      	lsls	r3, r3, #4
 800fd3e:	1a9b      	subs	r3, r3, r2
 800fd40:	009b      	lsls	r3, r3, #2
 800fd42:	440b      	add	r3, r1
 800fd44:	334d      	adds	r3, #77	@ 0x4d
 800fd46:	2202      	movs	r2, #2
 800fd48:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800fd4a:	78fa      	ldrb	r2, [r7, #3]
 800fd4c:	6879      	ldr	r1, [r7, #4]
 800fd4e:	4613      	mov	r3, r2
 800fd50:	011b      	lsls	r3, r3, #4
 800fd52:	1a9b      	subs	r3, r3, r2
 800fd54:	009b      	lsls	r3, r3, #2
 800fd56:	440b      	add	r3, r1
 800fd58:	334c      	adds	r3, #76	@ 0x4c
 800fd5a:	2202      	movs	r2, #2
 800fd5c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800fd5e:	78fa      	ldrb	r2, [r7, #3]
 800fd60:	6879      	ldr	r1, [r7, #4]
 800fd62:	4613      	mov	r3, r2
 800fd64:	011b      	lsls	r3, r3, #4
 800fd66:	1a9b      	subs	r3, r3, r2
 800fd68:	009b      	lsls	r3, r3, #2
 800fd6a:	440b      	add	r3, r1
 800fd6c:	331b      	adds	r3, #27
 800fd6e:	781b      	ldrb	r3, [r3, #0]
 800fd70:	2b01      	cmp	r3, #1
 800fd72:	f040 80d1 	bne.w	800ff18 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800fd76:	78fa      	ldrb	r2, [r7, #3]
 800fd78:	6879      	ldr	r1, [r7, #4]
 800fd7a:	4613      	mov	r3, r2
 800fd7c:	011b      	lsls	r3, r3, #4
 800fd7e:	1a9b      	subs	r3, r3, r2
 800fd80:	009b      	lsls	r3, r3, #2
 800fd82:	440b      	add	r3, r1
 800fd84:	331b      	adds	r3, #27
 800fd86:	2200      	movs	r2, #0
 800fd88:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800fd8a:	78fb      	ldrb	r3, [r7, #3]
 800fd8c:	015a      	lsls	r2, r3, #5
 800fd8e:	693b      	ldr	r3, [r7, #16]
 800fd90:	4413      	add	r3, r2
 800fd92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800fd96:	685b      	ldr	r3, [r3, #4]
 800fd98:	78fa      	ldrb	r2, [r7, #3]
 800fd9a:	0151      	lsls	r1, r2, #5
 800fd9c:	693a      	ldr	r2, [r7, #16]
 800fd9e:	440a      	add	r2, r1
 800fda0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800fda4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fda8:	6053      	str	r3, [r2, #4]
 800fdaa:	e0b5      	b.n	800ff18 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800fdac:	78fa      	ldrb	r2, [r7, #3]
 800fdae:	6879      	ldr	r1, [r7, #4]
 800fdb0:	4613      	mov	r3, r2
 800fdb2:	011b      	lsls	r3, r3, #4
 800fdb4:	1a9b      	subs	r3, r3, r2
 800fdb6:	009b      	lsls	r3, r3, #2
 800fdb8:	440b      	add	r3, r1
 800fdba:	334d      	adds	r3, #77	@ 0x4d
 800fdbc:	781b      	ldrb	r3, [r3, #0]
 800fdbe:	2b05      	cmp	r3, #5
 800fdc0:	d114      	bne.n	800fdec <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800fdc2:	78fa      	ldrb	r2, [r7, #3]
 800fdc4:	6879      	ldr	r1, [r7, #4]
 800fdc6:	4613      	mov	r3, r2
 800fdc8:	011b      	lsls	r3, r3, #4
 800fdca:	1a9b      	subs	r3, r3, r2
 800fdcc:	009b      	lsls	r3, r3, #2
 800fdce:	440b      	add	r3, r1
 800fdd0:	334d      	adds	r3, #77	@ 0x4d
 800fdd2:	2202      	movs	r2, #2
 800fdd4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800fdd6:	78fa      	ldrb	r2, [r7, #3]
 800fdd8:	6879      	ldr	r1, [r7, #4]
 800fdda:	4613      	mov	r3, r2
 800fddc:	011b      	lsls	r3, r3, #4
 800fdde:	1a9b      	subs	r3, r3, r2
 800fde0:	009b      	lsls	r3, r3, #2
 800fde2:	440b      	add	r3, r1
 800fde4:	334c      	adds	r3, #76	@ 0x4c
 800fde6:	2202      	movs	r2, #2
 800fde8:	701a      	strb	r2, [r3, #0]
 800fdea:	e095      	b.n	800ff18 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800fdec:	78fa      	ldrb	r2, [r7, #3]
 800fdee:	6879      	ldr	r1, [r7, #4]
 800fdf0:	4613      	mov	r3, r2
 800fdf2:	011b      	lsls	r3, r3, #4
 800fdf4:	1a9b      	subs	r3, r3, r2
 800fdf6:	009b      	lsls	r3, r3, #2
 800fdf8:	440b      	add	r3, r1
 800fdfa:	334d      	adds	r3, #77	@ 0x4d
 800fdfc:	781b      	ldrb	r3, [r3, #0]
 800fdfe:	2b06      	cmp	r3, #6
 800fe00:	d114      	bne.n	800fe2c <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800fe02:	78fa      	ldrb	r2, [r7, #3]
 800fe04:	6879      	ldr	r1, [r7, #4]
 800fe06:	4613      	mov	r3, r2
 800fe08:	011b      	lsls	r3, r3, #4
 800fe0a:	1a9b      	subs	r3, r3, r2
 800fe0c:	009b      	lsls	r3, r3, #2
 800fe0e:	440b      	add	r3, r1
 800fe10:	334d      	adds	r3, #77	@ 0x4d
 800fe12:	2202      	movs	r2, #2
 800fe14:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800fe16:	78fa      	ldrb	r2, [r7, #3]
 800fe18:	6879      	ldr	r1, [r7, #4]
 800fe1a:	4613      	mov	r3, r2
 800fe1c:	011b      	lsls	r3, r3, #4
 800fe1e:	1a9b      	subs	r3, r3, r2
 800fe20:	009b      	lsls	r3, r3, #2
 800fe22:	440b      	add	r3, r1
 800fe24:	334c      	adds	r3, #76	@ 0x4c
 800fe26:	2205      	movs	r2, #5
 800fe28:	701a      	strb	r2, [r3, #0]
 800fe2a:	e075      	b.n	800ff18 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800fe2c:	78fa      	ldrb	r2, [r7, #3]
 800fe2e:	6879      	ldr	r1, [r7, #4]
 800fe30:	4613      	mov	r3, r2
 800fe32:	011b      	lsls	r3, r3, #4
 800fe34:	1a9b      	subs	r3, r3, r2
 800fe36:	009b      	lsls	r3, r3, #2
 800fe38:	440b      	add	r3, r1
 800fe3a:	334d      	adds	r3, #77	@ 0x4d
 800fe3c:	781b      	ldrb	r3, [r3, #0]
 800fe3e:	2b07      	cmp	r3, #7
 800fe40:	d00a      	beq.n	800fe58 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800fe42:	78fa      	ldrb	r2, [r7, #3]
 800fe44:	6879      	ldr	r1, [r7, #4]
 800fe46:	4613      	mov	r3, r2
 800fe48:	011b      	lsls	r3, r3, #4
 800fe4a:	1a9b      	subs	r3, r3, r2
 800fe4c:	009b      	lsls	r3, r3, #2
 800fe4e:	440b      	add	r3, r1
 800fe50:	334d      	adds	r3, #77	@ 0x4d
 800fe52:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800fe54:	2b09      	cmp	r3, #9
 800fe56:	d170      	bne.n	800ff3a <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800fe58:	78fa      	ldrb	r2, [r7, #3]
 800fe5a:	6879      	ldr	r1, [r7, #4]
 800fe5c:	4613      	mov	r3, r2
 800fe5e:	011b      	lsls	r3, r3, #4
 800fe60:	1a9b      	subs	r3, r3, r2
 800fe62:	009b      	lsls	r3, r3, #2
 800fe64:	440b      	add	r3, r1
 800fe66:	334d      	adds	r3, #77	@ 0x4d
 800fe68:	2202      	movs	r2, #2
 800fe6a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800fe6c:	78fa      	ldrb	r2, [r7, #3]
 800fe6e:	6879      	ldr	r1, [r7, #4]
 800fe70:	4613      	mov	r3, r2
 800fe72:	011b      	lsls	r3, r3, #4
 800fe74:	1a9b      	subs	r3, r3, r2
 800fe76:	009b      	lsls	r3, r3, #2
 800fe78:	440b      	add	r3, r1
 800fe7a:	3344      	adds	r3, #68	@ 0x44
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	1c59      	adds	r1, r3, #1
 800fe80:	6878      	ldr	r0, [r7, #4]
 800fe82:	4613      	mov	r3, r2
 800fe84:	011b      	lsls	r3, r3, #4
 800fe86:	1a9b      	subs	r3, r3, r2
 800fe88:	009b      	lsls	r3, r3, #2
 800fe8a:	4403      	add	r3, r0
 800fe8c:	3344      	adds	r3, #68	@ 0x44
 800fe8e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800fe90:	78fa      	ldrb	r2, [r7, #3]
 800fe92:	6879      	ldr	r1, [r7, #4]
 800fe94:	4613      	mov	r3, r2
 800fe96:	011b      	lsls	r3, r3, #4
 800fe98:	1a9b      	subs	r3, r3, r2
 800fe9a:	009b      	lsls	r3, r3, #2
 800fe9c:	440b      	add	r3, r1
 800fe9e:	3344      	adds	r3, #68	@ 0x44
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	2b02      	cmp	r3, #2
 800fea4:	d914      	bls.n	800fed0 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800fea6:	78fa      	ldrb	r2, [r7, #3]
 800fea8:	6879      	ldr	r1, [r7, #4]
 800feaa:	4613      	mov	r3, r2
 800feac:	011b      	lsls	r3, r3, #4
 800feae:	1a9b      	subs	r3, r3, r2
 800feb0:	009b      	lsls	r3, r3, #2
 800feb2:	440b      	add	r3, r1
 800feb4:	3344      	adds	r3, #68	@ 0x44
 800feb6:	2200      	movs	r2, #0
 800feb8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800feba:	78fa      	ldrb	r2, [r7, #3]
 800febc:	6879      	ldr	r1, [r7, #4]
 800febe:	4613      	mov	r3, r2
 800fec0:	011b      	lsls	r3, r3, #4
 800fec2:	1a9b      	subs	r3, r3, r2
 800fec4:	009b      	lsls	r3, r3, #2
 800fec6:	440b      	add	r3, r1
 800fec8:	334c      	adds	r3, #76	@ 0x4c
 800feca:	2204      	movs	r2, #4
 800fecc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800fece:	e022      	b.n	800ff16 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800fed0:	78fa      	ldrb	r2, [r7, #3]
 800fed2:	6879      	ldr	r1, [r7, #4]
 800fed4:	4613      	mov	r3, r2
 800fed6:	011b      	lsls	r3, r3, #4
 800fed8:	1a9b      	subs	r3, r3, r2
 800feda:	009b      	lsls	r3, r3, #2
 800fedc:	440b      	add	r3, r1
 800fede:	334c      	adds	r3, #76	@ 0x4c
 800fee0:	2202      	movs	r2, #2
 800fee2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800fee4:	78fb      	ldrb	r3, [r7, #3]
 800fee6:	015a      	lsls	r2, r3, #5
 800fee8:	693b      	ldr	r3, [r7, #16]
 800feea:	4413      	add	r3, r2
 800feec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800fefa:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ff02:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800ff04:	78fb      	ldrb	r3, [r7, #3]
 800ff06:	015a      	lsls	r2, r3, #5
 800ff08:	693b      	ldr	r3, [r7, #16]
 800ff0a:	4413      	add	r3, r2
 800ff0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ff10:	461a      	mov	r2, r3
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800ff16:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800ff18:	78fa      	ldrb	r2, [r7, #3]
 800ff1a:	6879      	ldr	r1, [r7, #4]
 800ff1c:	4613      	mov	r3, r2
 800ff1e:	011b      	lsls	r3, r3, #4
 800ff20:	1a9b      	subs	r3, r3, r2
 800ff22:	009b      	lsls	r3, r3, #2
 800ff24:	440b      	add	r3, r1
 800ff26:	334c      	adds	r3, #76	@ 0x4c
 800ff28:	781a      	ldrb	r2, [r3, #0]
 800ff2a:	78fb      	ldrb	r3, [r7, #3]
 800ff2c:	4619      	mov	r1, r3
 800ff2e:	6878      	ldr	r0, [r7, #4]
 800ff30:	f005 f864 	bl	8014ffc <HAL_HCD_HC_NotifyURBChange_Callback>
 800ff34:	e002      	b.n	800ff3c <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800ff36:	bf00      	nop
 800ff38:	e000      	b.n	800ff3c <HCD_HC_OUT_IRQHandler+0x944>
      return;
 800ff3a:	bf00      	nop
  }
}
 800ff3c:	3718      	adds	r7, #24
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	bd80      	pop	{r7, pc}

0800ff42 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800ff42:	b580      	push	{r7, lr}
 800ff44:	b08a      	sub	sp, #40	@ 0x28
 800ff46:	af00      	add	r7, sp, #0
 800ff48:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff52:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	6a1b      	ldr	r3, [r3, #32]
 800ff5a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800ff5c:	69fb      	ldr	r3, [r7, #28]
 800ff5e:	f003 030f 	and.w	r3, r3, #15
 800ff62:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800ff64:	69fb      	ldr	r3, [r7, #28]
 800ff66:	0c5b      	lsrs	r3, r3, #17
 800ff68:	f003 030f 	and.w	r3, r3, #15
 800ff6c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800ff6e:	69fb      	ldr	r3, [r7, #28]
 800ff70:	091b      	lsrs	r3, r3, #4
 800ff72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ff76:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800ff78:	697b      	ldr	r3, [r7, #20]
 800ff7a:	2b02      	cmp	r3, #2
 800ff7c:	d004      	beq.n	800ff88 <HCD_RXQLVL_IRQHandler+0x46>
 800ff7e:	697b      	ldr	r3, [r7, #20]
 800ff80:	2b05      	cmp	r3, #5
 800ff82:	f000 80b6 	beq.w	80100f2 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800ff86:	e0b7      	b.n	80100f8 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800ff88:	693b      	ldr	r3, [r7, #16]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	f000 80b3 	beq.w	80100f6 <HCD_RXQLVL_IRQHandler+0x1b4>
 800ff90:	6879      	ldr	r1, [r7, #4]
 800ff92:	69ba      	ldr	r2, [r7, #24]
 800ff94:	4613      	mov	r3, r2
 800ff96:	011b      	lsls	r3, r3, #4
 800ff98:	1a9b      	subs	r3, r3, r2
 800ff9a:	009b      	lsls	r3, r3, #2
 800ff9c:	440b      	add	r3, r1
 800ff9e:	332c      	adds	r3, #44	@ 0x2c
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	f000 80a7 	beq.w	80100f6 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800ffa8:	6879      	ldr	r1, [r7, #4]
 800ffaa:	69ba      	ldr	r2, [r7, #24]
 800ffac:	4613      	mov	r3, r2
 800ffae:	011b      	lsls	r3, r3, #4
 800ffb0:	1a9b      	subs	r3, r3, r2
 800ffb2:	009b      	lsls	r3, r3, #2
 800ffb4:	440b      	add	r3, r1
 800ffb6:	3338      	adds	r3, #56	@ 0x38
 800ffb8:	681a      	ldr	r2, [r3, #0]
 800ffba:	693b      	ldr	r3, [r7, #16]
 800ffbc:	18d1      	adds	r1, r2, r3
 800ffbe:	6878      	ldr	r0, [r7, #4]
 800ffc0:	69ba      	ldr	r2, [r7, #24]
 800ffc2:	4613      	mov	r3, r2
 800ffc4:	011b      	lsls	r3, r3, #4
 800ffc6:	1a9b      	subs	r3, r3, r2
 800ffc8:	009b      	lsls	r3, r3, #2
 800ffca:	4403      	add	r3, r0
 800ffcc:	3334      	adds	r3, #52	@ 0x34
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	4299      	cmp	r1, r3
 800ffd2:	f200 8083 	bhi.w	80100dc <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	6818      	ldr	r0, [r3, #0]
 800ffda:	6879      	ldr	r1, [r7, #4]
 800ffdc:	69ba      	ldr	r2, [r7, #24]
 800ffde:	4613      	mov	r3, r2
 800ffe0:	011b      	lsls	r3, r3, #4
 800ffe2:	1a9b      	subs	r3, r3, r2
 800ffe4:	009b      	lsls	r3, r3, #2
 800ffe6:	440b      	add	r3, r1
 800ffe8:	332c      	adds	r3, #44	@ 0x2c
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	693a      	ldr	r2, [r7, #16]
 800ffee:	b292      	uxth	r2, r2
 800fff0:	4619      	mov	r1, r3
 800fff2:	f001 fe9c 	bl	8011d2e <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800fff6:	6879      	ldr	r1, [r7, #4]
 800fff8:	69ba      	ldr	r2, [r7, #24]
 800fffa:	4613      	mov	r3, r2
 800fffc:	011b      	lsls	r3, r3, #4
 800fffe:	1a9b      	subs	r3, r3, r2
 8010000:	009b      	lsls	r3, r3, #2
 8010002:	440b      	add	r3, r1
 8010004:	332c      	adds	r3, #44	@ 0x2c
 8010006:	681a      	ldr	r2, [r3, #0]
 8010008:	693b      	ldr	r3, [r7, #16]
 801000a:	18d1      	adds	r1, r2, r3
 801000c:	6878      	ldr	r0, [r7, #4]
 801000e:	69ba      	ldr	r2, [r7, #24]
 8010010:	4613      	mov	r3, r2
 8010012:	011b      	lsls	r3, r3, #4
 8010014:	1a9b      	subs	r3, r3, r2
 8010016:	009b      	lsls	r3, r3, #2
 8010018:	4403      	add	r3, r0
 801001a:	332c      	adds	r3, #44	@ 0x2c
 801001c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 801001e:	6879      	ldr	r1, [r7, #4]
 8010020:	69ba      	ldr	r2, [r7, #24]
 8010022:	4613      	mov	r3, r2
 8010024:	011b      	lsls	r3, r3, #4
 8010026:	1a9b      	subs	r3, r3, r2
 8010028:	009b      	lsls	r3, r3, #2
 801002a:	440b      	add	r3, r1
 801002c:	3338      	adds	r3, #56	@ 0x38
 801002e:	681a      	ldr	r2, [r3, #0]
 8010030:	693b      	ldr	r3, [r7, #16]
 8010032:	18d1      	adds	r1, r2, r3
 8010034:	6878      	ldr	r0, [r7, #4]
 8010036:	69ba      	ldr	r2, [r7, #24]
 8010038:	4613      	mov	r3, r2
 801003a:	011b      	lsls	r3, r3, #4
 801003c:	1a9b      	subs	r3, r3, r2
 801003e:	009b      	lsls	r3, r3, #2
 8010040:	4403      	add	r3, r0
 8010042:	3338      	adds	r3, #56	@ 0x38
 8010044:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8010046:	69bb      	ldr	r3, [r7, #24]
 8010048:	015a      	lsls	r2, r3, #5
 801004a:	6a3b      	ldr	r3, [r7, #32]
 801004c:	4413      	add	r3, r2
 801004e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010052:	691b      	ldr	r3, [r3, #16]
 8010054:	0cdb      	lsrs	r3, r3, #19
 8010056:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801005a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 801005c:	6879      	ldr	r1, [r7, #4]
 801005e:	69ba      	ldr	r2, [r7, #24]
 8010060:	4613      	mov	r3, r2
 8010062:	011b      	lsls	r3, r3, #4
 8010064:	1a9b      	subs	r3, r3, r2
 8010066:	009b      	lsls	r3, r3, #2
 8010068:	440b      	add	r3, r1
 801006a:	3328      	adds	r3, #40	@ 0x28
 801006c:	881b      	ldrh	r3, [r3, #0]
 801006e:	461a      	mov	r2, r3
 8010070:	693b      	ldr	r3, [r7, #16]
 8010072:	4293      	cmp	r3, r2
 8010074:	d13f      	bne.n	80100f6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d03c      	beq.n	80100f6 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 801007c:	69bb      	ldr	r3, [r7, #24]
 801007e:	015a      	lsls	r2, r3, #5
 8010080:	6a3b      	ldr	r3, [r7, #32]
 8010082:	4413      	add	r3, r2
 8010084:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 801008c:	68bb      	ldr	r3, [r7, #8]
 801008e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8010092:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8010094:	68bb      	ldr	r3, [r7, #8]
 8010096:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801009a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 801009c:	69bb      	ldr	r3, [r7, #24]
 801009e:	015a      	lsls	r2, r3, #5
 80100a0:	6a3b      	ldr	r3, [r7, #32]
 80100a2:	4413      	add	r3, r2
 80100a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80100a8:	461a      	mov	r2, r3
 80100aa:	68bb      	ldr	r3, [r7, #8]
 80100ac:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80100ae:	6879      	ldr	r1, [r7, #4]
 80100b0:	69ba      	ldr	r2, [r7, #24]
 80100b2:	4613      	mov	r3, r2
 80100b4:	011b      	lsls	r3, r3, #4
 80100b6:	1a9b      	subs	r3, r3, r2
 80100b8:	009b      	lsls	r3, r3, #2
 80100ba:	440b      	add	r3, r1
 80100bc:	333c      	adds	r3, #60	@ 0x3c
 80100be:	781b      	ldrb	r3, [r3, #0]
 80100c0:	f083 0301 	eor.w	r3, r3, #1
 80100c4:	b2d8      	uxtb	r0, r3
 80100c6:	6879      	ldr	r1, [r7, #4]
 80100c8:	69ba      	ldr	r2, [r7, #24]
 80100ca:	4613      	mov	r3, r2
 80100cc:	011b      	lsls	r3, r3, #4
 80100ce:	1a9b      	subs	r3, r3, r2
 80100d0:	009b      	lsls	r3, r3, #2
 80100d2:	440b      	add	r3, r1
 80100d4:	333c      	adds	r3, #60	@ 0x3c
 80100d6:	4602      	mov	r2, r0
 80100d8:	701a      	strb	r2, [r3, #0]
      break;
 80100da:	e00c      	b.n	80100f6 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80100dc:	6879      	ldr	r1, [r7, #4]
 80100de:	69ba      	ldr	r2, [r7, #24]
 80100e0:	4613      	mov	r3, r2
 80100e2:	011b      	lsls	r3, r3, #4
 80100e4:	1a9b      	subs	r3, r3, r2
 80100e6:	009b      	lsls	r3, r3, #2
 80100e8:	440b      	add	r3, r1
 80100ea:	334c      	adds	r3, #76	@ 0x4c
 80100ec:	2204      	movs	r2, #4
 80100ee:	701a      	strb	r2, [r3, #0]
      break;
 80100f0:	e001      	b.n	80100f6 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80100f2:	bf00      	nop
 80100f4:	e000      	b.n	80100f8 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80100f6:	bf00      	nop
  }
}
 80100f8:	bf00      	nop
 80100fa:	3728      	adds	r7, #40	@ 0x28
 80100fc:	46bd      	mov	sp, r7
 80100fe:	bd80      	pop	{r7, pc}

08010100 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8010100:	b580      	push	{r7, lr}
 8010102:	b086      	sub	sp, #24
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801010e:	697b      	ldr	r3, [r7, #20]
 8010110:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8010112:	693b      	ldr	r3, [r7, #16]
 8010114:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 801011c:	693b      	ldr	r3, [r7, #16]
 801011e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8010126:	68bb      	ldr	r3, [r7, #8]
 8010128:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 801012c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	f003 0302 	and.w	r3, r3, #2
 8010134:	2b02      	cmp	r3, #2
 8010136:	d10b      	bne.n	8010150 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	f003 0301 	and.w	r3, r3, #1
 801013e:	2b01      	cmp	r3, #1
 8010140:	d102      	bne.n	8010148 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8010142:	6878      	ldr	r0, [r7, #4]
 8010144:	f004 ff3e 	bl	8014fc4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8010148:	68bb      	ldr	r3, [r7, #8]
 801014a:	f043 0302 	orr.w	r3, r3, #2
 801014e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	f003 0308 	and.w	r3, r3, #8
 8010156:	2b08      	cmp	r3, #8
 8010158:	d132      	bne.n	80101c0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 801015a:	68bb      	ldr	r3, [r7, #8]
 801015c:	f043 0308 	orr.w	r3, r3, #8
 8010160:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	f003 0304 	and.w	r3, r3, #4
 8010168:	2b04      	cmp	r3, #4
 801016a:	d126      	bne.n	80101ba <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	7a5b      	ldrb	r3, [r3, #9]
 8010170:	2b02      	cmp	r3, #2
 8010172:	d113      	bne.n	801019c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 801017a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801017e:	d106      	bne.n	801018e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	2102      	movs	r1, #2
 8010186:	4618      	mov	r0, r3
 8010188:	f001 ff60 	bl	801204c <USB_InitFSLSPClkSel>
 801018c:	e011      	b.n	80101b2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	2101      	movs	r1, #1
 8010194:	4618      	mov	r0, r3
 8010196:	f001 ff59 	bl	801204c <USB_InitFSLSPClkSel>
 801019a:	e00a      	b.n	80101b2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	79db      	ldrb	r3, [r3, #7]
 80101a0:	2b01      	cmp	r3, #1
 80101a2:	d106      	bne.n	80101b2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80101a4:	693b      	ldr	r3, [r7, #16]
 80101a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80101aa:	461a      	mov	r2, r3
 80101ac:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80101b0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80101b2:	6878      	ldr	r0, [r7, #4]
 80101b4:	f004 ff30 	bl	8015018 <HAL_HCD_PortEnabled_Callback>
 80101b8:	e002      	b.n	80101c0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80101ba:	6878      	ldr	r0, [r7, #4]
 80101bc:	f004 ff3a 	bl	8015034 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	f003 0320 	and.w	r3, r3, #32
 80101c6:	2b20      	cmp	r3, #32
 80101c8:	d103      	bne.n	80101d2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80101ca:	68bb      	ldr	r3, [r7, #8]
 80101cc:	f043 0320 	orr.w	r3, r3, #32
 80101d0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80101d2:	693b      	ldr	r3, [r7, #16]
 80101d4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80101d8:	461a      	mov	r2, r3
 80101da:	68bb      	ldr	r3, [r7, #8]
 80101dc:	6013      	str	r3, [r2, #0]
}
 80101de:	bf00      	nop
 80101e0:	3718      	adds	r7, #24
 80101e2:	46bd      	mov	sp, r7
 80101e4:	bd80      	pop	{r7, pc}
	...

080101e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b084      	sub	sp, #16
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d101      	bne.n	80101fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80101f6:	2301      	movs	r3, #1
 80101f8:	e12b      	b.n	8010452 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010200:	b2db      	uxtb	r3, r3
 8010202:	2b00      	cmp	r3, #0
 8010204:	d106      	bne.n	8010214 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	2200      	movs	r2, #0
 801020a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 801020e:	6878      	ldr	r0, [r7, #4]
 8010210:	f7fd f900 	bl	800d414 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	2224      	movs	r2, #36	@ 0x24
 8010218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	681a      	ldr	r2, [r3, #0]
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	f022 0201 	bic.w	r2, r2, #1
 801022a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	681a      	ldr	r2, [r3, #0]
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801023a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	681a      	ldr	r2, [r3, #0]
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801024a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 801024c:	f001 fa20 	bl	8011690 <HAL_RCC_GetPCLK1Freq>
 8010250:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	685b      	ldr	r3, [r3, #4]
 8010256:	4a81      	ldr	r2, [pc, #516]	@ (801045c <HAL_I2C_Init+0x274>)
 8010258:	4293      	cmp	r3, r2
 801025a:	d807      	bhi.n	801026c <HAL_I2C_Init+0x84>
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	4a80      	ldr	r2, [pc, #512]	@ (8010460 <HAL_I2C_Init+0x278>)
 8010260:	4293      	cmp	r3, r2
 8010262:	bf94      	ite	ls
 8010264:	2301      	movls	r3, #1
 8010266:	2300      	movhi	r3, #0
 8010268:	b2db      	uxtb	r3, r3
 801026a:	e006      	b.n	801027a <HAL_I2C_Init+0x92>
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	4a7d      	ldr	r2, [pc, #500]	@ (8010464 <HAL_I2C_Init+0x27c>)
 8010270:	4293      	cmp	r3, r2
 8010272:	bf94      	ite	ls
 8010274:	2301      	movls	r3, #1
 8010276:	2300      	movhi	r3, #0
 8010278:	b2db      	uxtb	r3, r3
 801027a:	2b00      	cmp	r3, #0
 801027c:	d001      	beq.n	8010282 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 801027e:	2301      	movs	r3, #1
 8010280:	e0e7      	b.n	8010452 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	4a78      	ldr	r2, [pc, #480]	@ (8010468 <HAL_I2C_Init+0x280>)
 8010286:	fba2 2303 	umull	r2, r3, r2, r3
 801028a:	0c9b      	lsrs	r3, r3, #18
 801028c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	685b      	ldr	r3, [r3, #4]
 8010294:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	68ba      	ldr	r2, [r7, #8]
 801029e:	430a      	orrs	r2, r1
 80102a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	6a1b      	ldr	r3, [r3, #32]
 80102a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	685b      	ldr	r3, [r3, #4]
 80102b0:	4a6a      	ldr	r2, [pc, #424]	@ (801045c <HAL_I2C_Init+0x274>)
 80102b2:	4293      	cmp	r3, r2
 80102b4:	d802      	bhi.n	80102bc <HAL_I2C_Init+0xd4>
 80102b6:	68bb      	ldr	r3, [r7, #8]
 80102b8:	3301      	adds	r3, #1
 80102ba:	e009      	b.n	80102d0 <HAL_I2C_Init+0xe8>
 80102bc:	68bb      	ldr	r3, [r7, #8]
 80102be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80102c2:	fb02 f303 	mul.w	r3, r2, r3
 80102c6:	4a69      	ldr	r2, [pc, #420]	@ (801046c <HAL_I2C_Init+0x284>)
 80102c8:	fba2 2303 	umull	r2, r3, r2, r3
 80102cc:	099b      	lsrs	r3, r3, #6
 80102ce:	3301      	adds	r3, #1
 80102d0:	687a      	ldr	r2, [r7, #4]
 80102d2:	6812      	ldr	r2, [r2, #0]
 80102d4:	430b      	orrs	r3, r1
 80102d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	69db      	ldr	r3, [r3, #28]
 80102de:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80102e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	685b      	ldr	r3, [r3, #4]
 80102ea:	495c      	ldr	r1, [pc, #368]	@ (801045c <HAL_I2C_Init+0x274>)
 80102ec:	428b      	cmp	r3, r1
 80102ee:	d819      	bhi.n	8010324 <HAL_I2C_Init+0x13c>
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	1e59      	subs	r1, r3, #1
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	685b      	ldr	r3, [r3, #4]
 80102f8:	005b      	lsls	r3, r3, #1
 80102fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80102fe:	1c59      	adds	r1, r3, #1
 8010300:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8010304:	400b      	ands	r3, r1
 8010306:	2b00      	cmp	r3, #0
 8010308:	d00a      	beq.n	8010320 <HAL_I2C_Init+0x138>
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	1e59      	subs	r1, r3, #1
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	685b      	ldr	r3, [r3, #4]
 8010312:	005b      	lsls	r3, r3, #1
 8010314:	fbb1 f3f3 	udiv	r3, r1, r3
 8010318:	3301      	adds	r3, #1
 801031a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801031e:	e051      	b.n	80103c4 <HAL_I2C_Init+0x1dc>
 8010320:	2304      	movs	r3, #4
 8010322:	e04f      	b.n	80103c4 <HAL_I2C_Init+0x1dc>
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	689b      	ldr	r3, [r3, #8]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d111      	bne.n	8010350 <HAL_I2C_Init+0x168>
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	1e58      	subs	r0, r3, #1
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	6859      	ldr	r1, [r3, #4]
 8010334:	460b      	mov	r3, r1
 8010336:	005b      	lsls	r3, r3, #1
 8010338:	440b      	add	r3, r1
 801033a:	fbb0 f3f3 	udiv	r3, r0, r3
 801033e:	3301      	adds	r3, #1
 8010340:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010344:	2b00      	cmp	r3, #0
 8010346:	bf0c      	ite	eq
 8010348:	2301      	moveq	r3, #1
 801034a:	2300      	movne	r3, #0
 801034c:	b2db      	uxtb	r3, r3
 801034e:	e012      	b.n	8010376 <HAL_I2C_Init+0x18e>
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	1e58      	subs	r0, r3, #1
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	6859      	ldr	r1, [r3, #4]
 8010358:	460b      	mov	r3, r1
 801035a:	009b      	lsls	r3, r3, #2
 801035c:	440b      	add	r3, r1
 801035e:	0099      	lsls	r1, r3, #2
 8010360:	440b      	add	r3, r1
 8010362:	fbb0 f3f3 	udiv	r3, r0, r3
 8010366:	3301      	adds	r3, #1
 8010368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801036c:	2b00      	cmp	r3, #0
 801036e:	bf0c      	ite	eq
 8010370:	2301      	moveq	r3, #1
 8010372:	2300      	movne	r3, #0
 8010374:	b2db      	uxtb	r3, r3
 8010376:	2b00      	cmp	r3, #0
 8010378:	d001      	beq.n	801037e <HAL_I2C_Init+0x196>
 801037a:	2301      	movs	r3, #1
 801037c:	e022      	b.n	80103c4 <HAL_I2C_Init+0x1dc>
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	689b      	ldr	r3, [r3, #8]
 8010382:	2b00      	cmp	r3, #0
 8010384:	d10e      	bne.n	80103a4 <HAL_I2C_Init+0x1bc>
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	1e58      	subs	r0, r3, #1
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	6859      	ldr	r1, [r3, #4]
 801038e:	460b      	mov	r3, r1
 8010390:	005b      	lsls	r3, r3, #1
 8010392:	440b      	add	r3, r1
 8010394:	fbb0 f3f3 	udiv	r3, r0, r3
 8010398:	3301      	adds	r3, #1
 801039a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801039e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80103a2:	e00f      	b.n	80103c4 <HAL_I2C_Init+0x1dc>
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	1e58      	subs	r0, r3, #1
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	6859      	ldr	r1, [r3, #4]
 80103ac:	460b      	mov	r3, r1
 80103ae:	009b      	lsls	r3, r3, #2
 80103b0:	440b      	add	r3, r1
 80103b2:	0099      	lsls	r1, r3, #2
 80103b4:	440b      	add	r3, r1
 80103b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80103ba:	3301      	adds	r3, #1
 80103bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80103c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80103c4:	6879      	ldr	r1, [r7, #4]
 80103c6:	6809      	ldr	r1, [r1, #0]
 80103c8:	4313      	orrs	r3, r2
 80103ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	69da      	ldr	r2, [r3, #28]
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	6a1b      	ldr	r3, [r3, #32]
 80103de:	431a      	orrs	r2, r3
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	430a      	orrs	r2, r1
 80103e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	689b      	ldr	r3, [r3, #8]
 80103ee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80103f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80103f6:	687a      	ldr	r2, [r7, #4]
 80103f8:	6911      	ldr	r1, [r2, #16]
 80103fa:	687a      	ldr	r2, [r7, #4]
 80103fc:	68d2      	ldr	r2, [r2, #12]
 80103fe:	4311      	orrs	r1, r2
 8010400:	687a      	ldr	r2, [r7, #4]
 8010402:	6812      	ldr	r2, [r2, #0]
 8010404:	430b      	orrs	r3, r1
 8010406:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	68db      	ldr	r3, [r3, #12]
 801040e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	695a      	ldr	r2, [r3, #20]
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	699b      	ldr	r3, [r3, #24]
 801041a:	431a      	orrs	r2, r3
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	430a      	orrs	r2, r1
 8010422:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	681a      	ldr	r2, [r3, #0]
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	f042 0201 	orr.w	r2, r2, #1
 8010432:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	2200      	movs	r2, #0
 8010438:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	2220      	movs	r2, #32
 801043e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	2200      	movs	r2, #0
 8010446:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	2200      	movs	r2, #0
 801044c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8010450:	2300      	movs	r3, #0
}
 8010452:	4618      	mov	r0, r3
 8010454:	3710      	adds	r7, #16
 8010456:	46bd      	mov	sp, r7
 8010458:	bd80      	pop	{r7, pc}
 801045a:	bf00      	nop
 801045c:	000186a0 	.word	0x000186a0
 8010460:	001e847f 	.word	0x001e847f
 8010464:	003d08ff 	.word	0x003d08ff
 8010468:	431bde83 	.word	0x431bde83
 801046c:	10624dd3 	.word	0x10624dd3

08010470 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b088      	sub	sp, #32
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	2b00      	cmp	r3, #0
 801047c:	d101      	bne.n	8010482 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 801047e:	2301      	movs	r3, #1
 8010480:	e128      	b.n	80106d4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010488:	b2db      	uxtb	r3, r3
 801048a:	2b00      	cmp	r3, #0
 801048c:	d109      	bne.n	80104a2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	2200      	movs	r2, #0
 8010492:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	4a90      	ldr	r2, [pc, #576]	@ (80106dc <HAL_I2S_Init+0x26c>)
 801049a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 801049c:	6878      	ldr	r0, [r7, #4]
 801049e:	f7fd f801 	bl	800d4a4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	2202      	movs	r2, #2
 80104a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	69db      	ldr	r3, [r3, #28]
 80104b0:	687a      	ldr	r2, [r7, #4]
 80104b2:	6812      	ldr	r2, [r2, #0]
 80104b4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80104b8:	f023 030f 	bic.w	r3, r3, #15
 80104bc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	2202      	movs	r2, #2
 80104c4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	695b      	ldr	r3, [r3, #20]
 80104ca:	2b02      	cmp	r3, #2
 80104cc:	d060      	beq.n	8010590 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	68db      	ldr	r3, [r3, #12]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d102      	bne.n	80104dc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80104d6:	2310      	movs	r3, #16
 80104d8:	617b      	str	r3, [r7, #20]
 80104da:	e001      	b.n	80104e0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80104dc:	2320      	movs	r3, #32
 80104de:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	689b      	ldr	r3, [r3, #8]
 80104e4:	2b20      	cmp	r3, #32
 80104e6:	d802      	bhi.n	80104ee <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80104e8:	697b      	ldr	r3, [r7, #20]
 80104ea:	005b      	lsls	r3, r3, #1
 80104ec:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80104ee:	2001      	movs	r0, #1
 80104f0:	f001 f9c4 	bl	801187c <HAL_RCCEx_GetPeriphCLKFreq>
 80104f4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	691b      	ldr	r3, [r3, #16]
 80104fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80104fe:	d125      	bne.n	801054c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	68db      	ldr	r3, [r3, #12]
 8010504:	2b00      	cmp	r3, #0
 8010506:	d010      	beq.n	801052a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8010508:	697b      	ldr	r3, [r7, #20]
 801050a:	009b      	lsls	r3, r3, #2
 801050c:	68fa      	ldr	r2, [r7, #12]
 801050e:	fbb2 f2f3 	udiv	r2, r2, r3
 8010512:	4613      	mov	r3, r2
 8010514:	009b      	lsls	r3, r3, #2
 8010516:	4413      	add	r3, r2
 8010518:	005b      	lsls	r3, r3, #1
 801051a:	461a      	mov	r2, r3
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	695b      	ldr	r3, [r3, #20]
 8010520:	fbb2 f3f3 	udiv	r3, r2, r3
 8010524:	3305      	adds	r3, #5
 8010526:	613b      	str	r3, [r7, #16]
 8010528:	e01f      	b.n	801056a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 801052a:	697b      	ldr	r3, [r7, #20]
 801052c:	00db      	lsls	r3, r3, #3
 801052e:	68fa      	ldr	r2, [r7, #12]
 8010530:	fbb2 f2f3 	udiv	r2, r2, r3
 8010534:	4613      	mov	r3, r2
 8010536:	009b      	lsls	r3, r3, #2
 8010538:	4413      	add	r3, r2
 801053a:	005b      	lsls	r3, r3, #1
 801053c:	461a      	mov	r2, r3
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	695b      	ldr	r3, [r3, #20]
 8010542:	fbb2 f3f3 	udiv	r3, r2, r3
 8010546:	3305      	adds	r3, #5
 8010548:	613b      	str	r3, [r7, #16]
 801054a:	e00e      	b.n	801056a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 801054c:	68fa      	ldr	r2, [r7, #12]
 801054e:	697b      	ldr	r3, [r7, #20]
 8010550:	fbb2 f2f3 	udiv	r2, r2, r3
 8010554:	4613      	mov	r3, r2
 8010556:	009b      	lsls	r3, r3, #2
 8010558:	4413      	add	r3, r2
 801055a:	005b      	lsls	r3, r3, #1
 801055c:	461a      	mov	r2, r3
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	695b      	ldr	r3, [r3, #20]
 8010562:	fbb2 f3f3 	udiv	r3, r2, r3
 8010566:	3305      	adds	r3, #5
 8010568:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 801056a:	693b      	ldr	r3, [r7, #16]
 801056c:	4a5c      	ldr	r2, [pc, #368]	@ (80106e0 <HAL_I2S_Init+0x270>)
 801056e:	fba2 2303 	umull	r2, r3, r2, r3
 8010572:	08db      	lsrs	r3, r3, #3
 8010574:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8010576:	693b      	ldr	r3, [r7, #16]
 8010578:	f003 0301 	and.w	r3, r3, #1
 801057c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 801057e:	693a      	ldr	r2, [r7, #16]
 8010580:	69bb      	ldr	r3, [r7, #24]
 8010582:	1ad3      	subs	r3, r2, r3
 8010584:	085b      	lsrs	r3, r3, #1
 8010586:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8010588:	69bb      	ldr	r3, [r7, #24]
 801058a:	021b      	lsls	r3, r3, #8
 801058c:	61bb      	str	r3, [r7, #24]
 801058e:	e003      	b.n	8010598 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8010590:	2302      	movs	r3, #2
 8010592:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8010594:	2300      	movs	r3, #0
 8010596:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8010598:	69fb      	ldr	r3, [r7, #28]
 801059a:	2b01      	cmp	r3, #1
 801059c:	d902      	bls.n	80105a4 <HAL_I2S_Init+0x134>
 801059e:	69fb      	ldr	r3, [r7, #28]
 80105a0:	2bff      	cmp	r3, #255	@ 0xff
 80105a2:	d907      	bls.n	80105b4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80105a8:	f043 0210 	orr.w	r2, r3, #16
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80105b0:	2301      	movs	r3, #1
 80105b2:	e08f      	b.n	80106d4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	691a      	ldr	r2, [r3, #16]
 80105b8:	69bb      	ldr	r3, [r7, #24]
 80105ba:	ea42 0103 	orr.w	r1, r2, r3
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	69fa      	ldr	r2, [r7, #28]
 80105c4:	430a      	orrs	r2, r1
 80105c6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	69db      	ldr	r3, [r3, #28]
 80105ce:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80105d2:	f023 030f 	bic.w	r3, r3, #15
 80105d6:	687a      	ldr	r2, [r7, #4]
 80105d8:	6851      	ldr	r1, [r2, #4]
 80105da:	687a      	ldr	r2, [r7, #4]
 80105dc:	6892      	ldr	r2, [r2, #8]
 80105de:	4311      	orrs	r1, r2
 80105e0:	687a      	ldr	r2, [r7, #4]
 80105e2:	68d2      	ldr	r2, [r2, #12]
 80105e4:	4311      	orrs	r1, r2
 80105e6:	687a      	ldr	r2, [r7, #4]
 80105e8:	6992      	ldr	r2, [r2, #24]
 80105ea:	430a      	orrs	r2, r1
 80105ec:	431a      	orrs	r2, r3
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80105f6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	6a1b      	ldr	r3, [r3, #32]
 80105fc:	2b01      	cmp	r3, #1
 80105fe:	d161      	bne.n	80106c4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	4a38      	ldr	r2, [pc, #224]	@ (80106e4 <HAL_I2S_Init+0x274>)
 8010604:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	4a37      	ldr	r2, [pc, #220]	@ (80106e8 <HAL_I2S_Init+0x278>)
 801060c:	4293      	cmp	r3, r2
 801060e:	d101      	bne.n	8010614 <HAL_I2S_Init+0x1a4>
 8010610:	4b36      	ldr	r3, [pc, #216]	@ (80106ec <HAL_I2S_Init+0x27c>)
 8010612:	e001      	b.n	8010618 <HAL_I2S_Init+0x1a8>
 8010614:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8010618:	69db      	ldr	r3, [r3, #28]
 801061a:	687a      	ldr	r2, [r7, #4]
 801061c:	6812      	ldr	r2, [r2, #0]
 801061e:	4932      	ldr	r1, [pc, #200]	@ (80106e8 <HAL_I2S_Init+0x278>)
 8010620:	428a      	cmp	r2, r1
 8010622:	d101      	bne.n	8010628 <HAL_I2S_Init+0x1b8>
 8010624:	4a31      	ldr	r2, [pc, #196]	@ (80106ec <HAL_I2S_Init+0x27c>)
 8010626:	e001      	b.n	801062c <HAL_I2S_Init+0x1bc>
 8010628:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 801062c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8010630:	f023 030f 	bic.w	r3, r3, #15
 8010634:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	4a2b      	ldr	r2, [pc, #172]	@ (80106e8 <HAL_I2S_Init+0x278>)
 801063c:	4293      	cmp	r3, r2
 801063e:	d101      	bne.n	8010644 <HAL_I2S_Init+0x1d4>
 8010640:	4b2a      	ldr	r3, [pc, #168]	@ (80106ec <HAL_I2S_Init+0x27c>)
 8010642:	e001      	b.n	8010648 <HAL_I2S_Init+0x1d8>
 8010644:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8010648:	2202      	movs	r2, #2
 801064a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	4a25      	ldr	r2, [pc, #148]	@ (80106e8 <HAL_I2S_Init+0x278>)
 8010652:	4293      	cmp	r3, r2
 8010654:	d101      	bne.n	801065a <HAL_I2S_Init+0x1ea>
 8010656:	4b25      	ldr	r3, [pc, #148]	@ (80106ec <HAL_I2S_Init+0x27c>)
 8010658:	e001      	b.n	801065e <HAL_I2S_Init+0x1ee>
 801065a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 801065e:	69db      	ldr	r3, [r3, #28]
 8010660:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	685b      	ldr	r3, [r3, #4]
 8010666:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801066a:	d003      	beq.n	8010674 <HAL_I2S_Init+0x204>
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	685b      	ldr	r3, [r3, #4]
 8010670:	2b00      	cmp	r3, #0
 8010672:	d103      	bne.n	801067c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8010674:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010678:	613b      	str	r3, [r7, #16]
 801067a:	e001      	b.n	8010680 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 801067c:	2300      	movs	r3, #0
 801067e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8010680:	693b      	ldr	r3, [r7, #16]
 8010682:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	689b      	ldr	r3, [r3, #8]
 8010688:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 801068a:	4313      	orrs	r3, r2
 801068c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	68db      	ldr	r3, [r3, #12]
 8010692:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8010694:	4313      	orrs	r3, r2
 8010696:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	699b      	ldr	r3, [r3, #24]
 801069c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 801069e:	4313      	orrs	r3, r2
 80106a0:	b29a      	uxth	r2, r3
 80106a2:	897b      	ldrh	r3, [r7, #10]
 80106a4:	4313      	orrs	r3, r2
 80106a6:	b29b      	uxth	r3, r3
 80106a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80106ac:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	4a0d      	ldr	r2, [pc, #52]	@ (80106e8 <HAL_I2S_Init+0x278>)
 80106b4:	4293      	cmp	r3, r2
 80106b6:	d101      	bne.n	80106bc <HAL_I2S_Init+0x24c>
 80106b8:	4b0c      	ldr	r3, [pc, #48]	@ (80106ec <HAL_I2S_Init+0x27c>)
 80106ba:	e001      	b.n	80106c0 <HAL_I2S_Init+0x250>
 80106bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80106c0:	897a      	ldrh	r2, [r7, #10]
 80106c2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	2200      	movs	r2, #0
 80106c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	2201      	movs	r2, #1
 80106ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80106d2:	2300      	movs	r3, #0
}
 80106d4:	4618      	mov	r0, r3
 80106d6:	3720      	adds	r7, #32
 80106d8:	46bd      	mov	sp, r7
 80106da:	bd80      	pop	{r7, pc}
 80106dc:	080107e7 	.word	0x080107e7
 80106e0:	cccccccd 	.word	0xcccccccd
 80106e4:	080108fd 	.word	0x080108fd
 80106e8:	40003800 	.word	0x40003800
 80106ec:	40003400 	.word	0x40003400

080106f0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80106f0:	b480      	push	{r7}
 80106f2:	b083      	sub	sp, #12
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80106f8:	bf00      	nop
 80106fa:	370c      	adds	r7, #12
 80106fc:	46bd      	mov	sp, r7
 80106fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010702:	4770      	bx	lr

08010704 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8010704:	b480      	push	{r7}
 8010706:	b083      	sub	sp, #12
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 801070c:	bf00      	nop
 801070e:	370c      	adds	r7, #12
 8010710:	46bd      	mov	sp, r7
 8010712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010716:	4770      	bx	lr

08010718 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8010718:	b480      	push	{r7}
 801071a:	b083      	sub	sp, #12
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8010720:	bf00      	nop
 8010722:	370c      	adds	r7, #12
 8010724:	46bd      	mov	sp, r7
 8010726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072a:	4770      	bx	lr

0801072c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 801072c:	b580      	push	{r7, lr}
 801072e:	b082      	sub	sp, #8
 8010730:	af00      	add	r7, sp, #0
 8010732:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010738:	881a      	ldrh	r2, [r3, #0]
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010744:	1c9a      	adds	r2, r3, #2
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801074e:	b29b      	uxth	r3, r3
 8010750:	3b01      	subs	r3, #1
 8010752:	b29a      	uxth	r2, r3
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801075c:	b29b      	uxth	r3, r3
 801075e:	2b00      	cmp	r3, #0
 8010760:	d10e      	bne.n	8010780 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	685a      	ldr	r2, [r3, #4]
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8010770:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	2201      	movs	r2, #1
 8010776:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 801077a:	6878      	ldr	r0, [r7, #4]
 801077c:	f7ff ffb8 	bl	80106f0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8010780:	bf00      	nop
 8010782:	3708      	adds	r7, #8
 8010784:	46bd      	mov	sp, r7
 8010786:	bd80      	pop	{r7, pc}

08010788 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8010788:	b580      	push	{r7, lr}
 801078a:	b082      	sub	sp, #8
 801078c:	af00      	add	r7, sp, #0
 801078e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	68da      	ldr	r2, [r3, #12]
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801079a:	b292      	uxth	r2, r2
 801079c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80107a2:	1c9a      	adds	r2, r3, #2
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80107ac:	b29b      	uxth	r3, r3
 80107ae:	3b01      	subs	r3, #1
 80107b0:	b29a      	uxth	r2, r3
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80107ba:	b29b      	uxth	r3, r3
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d10e      	bne.n	80107de <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	685a      	ldr	r2, [r3, #4]
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80107ce:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	2201      	movs	r2, #1
 80107d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80107d8:	6878      	ldr	r0, [r7, #4]
 80107da:	f7ff ff93 	bl	8010704 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80107de:	bf00      	nop
 80107e0:	3708      	adds	r7, #8
 80107e2:	46bd      	mov	sp, r7
 80107e4:	bd80      	pop	{r7, pc}

080107e6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80107e6:	b580      	push	{r7, lr}
 80107e8:	b086      	sub	sp, #24
 80107ea:	af00      	add	r7, sp, #0
 80107ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	689b      	ldr	r3, [r3, #8]
 80107f4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80107fc:	b2db      	uxtb	r3, r3
 80107fe:	2b04      	cmp	r3, #4
 8010800:	d13a      	bne.n	8010878 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8010802:	697b      	ldr	r3, [r7, #20]
 8010804:	f003 0301 	and.w	r3, r3, #1
 8010808:	2b01      	cmp	r3, #1
 801080a:	d109      	bne.n	8010820 <I2S_IRQHandler+0x3a>
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	685b      	ldr	r3, [r3, #4]
 8010812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010816:	2b40      	cmp	r3, #64	@ 0x40
 8010818:	d102      	bne.n	8010820 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 801081a:	6878      	ldr	r0, [r7, #4]
 801081c:	f7ff ffb4 	bl	8010788 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8010820:	697b      	ldr	r3, [r7, #20]
 8010822:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010826:	2b40      	cmp	r3, #64	@ 0x40
 8010828:	d126      	bne.n	8010878 <I2S_IRQHandler+0x92>
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	685b      	ldr	r3, [r3, #4]
 8010830:	f003 0320 	and.w	r3, r3, #32
 8010834:	2b20      	cmp	r3, #32
 8010836:	d11f      	bne.n	8010878 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	685a      	ldr	r2, [r3, #4]
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8010846:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8010848:	2300      	movs	r3, #0
 801084a:	613b      	str	r3, [r7, #16]
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	68db      	ldr	r3, [r3, #12]
 8010852:	613b      	str	r3, [r7, #16]
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	689b      	ldr	r3, [r3, #8]
 801085a:	613b      	str	r3, [r7, #16]
 801085c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	2201      	movs	r2, #1
 8010862:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801086a:	f043 0202 	orr.w	r2, r3, #2
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8010872:	6878      	ldr	r0, [r7, #4]
 8010874:	f7ff ff50 	bl	8010718 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801087e:	b2db      	uxtb	r3, r3
 8010880:	2b03      	cmp	r3, #3
 8010882:	d136      	bne.n	80108f2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8010884:	697b      	ldr	r3, [r7, #20]
 8010886:	f003 0302 	and.w	r3, r3, #2
 801088a:	2b02      	cmp	r3, #2
 801088c:	d109      	bne.n	80108a2 <I2S_IRQHandler+0xbc>
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	685b      	ldr	r3, [r3, #4]
 8010894:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010898:	2b80      	cmp	r3, #128	@ 0x80
 801089a:	d102      	bne.n	80108a2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 801089c:	6878      	ldr	r0, [r7, #4]
 801089e:	f7ff ff45 	bl	801072c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80108a2:	697b      	ldr	r3, [r7, #20]
 80108a4:	f003 0308 	and.w	r3, r3, #8
 80108a8:	2b08      	cmp	r3, #8
 80108aa:	d122      	bne.n	80108f2 <I2S_IRQHandler+0x10c>
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	685b      	ldr	r3, [r3, #4]
 80108b2:	f003 0320 	and.w	r3, r3, #32
 80108b6:	2b20      	cmp	r3, #32
 80108b8:	d11b      	bne.n	80108f2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	685a      	ldr	r2, [r3, #4]
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80108c8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80108ca:	2300      	movs	r3, #0
 80108cc:	60fb      	str	r3, [r7, #12]
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	689b      	ldr	r3, [r3, #8]
 80108d4:	60fb      	str	r3, [r7, #12]
 80108d6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	2201      	movs	r2, #1
 80108dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80108e4:	f043 0204 	orr.w	r2, r3, #4
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80108ec:	6878      	ldr	r0, [r7, #4]
 80108ee:	f7ff ff13 	bl	8010718 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80108f2:	bf00      	nop
 80108f4:	3718      	adds	r7, #24
 80108f6:	46bd      	mov	sp, r7
 80108f8:	bd80      	pop	{r7, pc}
	...

080108fc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b088      	sub	sp, #32
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	689b      	ldr	r3, [r3, #8]
 801090a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	4a92      	ldr	r2, [pc, #584]	@ (8010b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8010912:	4293      	cmp	r3, r2
 8010914:	d101      	bne.n	801091a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8010916:	4b92      	ldr	r3, [pc, #584]	@ (8010b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8010918:	e001      	b.n	801091e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 801091a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 801091e:	689b      	ldr	r3, [r3, #8]
 8010920:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	685b      	ldr	r3, [r3, #4]
 8010928:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	4a8b      	ldr	r2, [pc, #556]	@ (8010b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8010930:	4293      	cmp	r3, r2
 8010932:	d101      	bne.n	8010938 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8010934:	4b8a      	ldr	r3, [pc, #552]	@ (8010b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8010936:	e001      	b.n	801093c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8010938:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 801093c:	685b      	ldr	r3, [r3, #4]
 801093e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	685b      	ldr	r3, [r3, #4]
 8010944:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010948:	d004      	beq.n	8010954 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	685b      	ldr	r3, [r3, #4]
 801094e:	2b00      	cmp	r3, #0
 8010950:	f040 8099 	bne.w	8010a86 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8010954:	69fb      	ldr	r3, [r7, #28]
 8010956:	f003 0302 	and.w	r3, r3, #2
 801095a:	2b02      	cmp	r3, #2
 801095c:	d107      	bne.n	801096e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 801095e:	697b      	ldr	r3, [r7, #20]
 8010960:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010964:	2b00      	cmp	r3, #0
 8010966:	d002      	beq.n	801096e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8010968:	6878      	ldr	r0, [r7, #4]
 801096a:	f000 f925 	bl	8010bb8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 801096e:	69bb      	ldr	r3, [r7, #24]
 8010970:	f003 0301 	and.w	r3, r3, #1
 8010974:	2b01      	cmp	r3, #1
 8010976:	d107      	bne.n	8010988 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8010978:	693b      	ldr	r3, [r7, #16]
 801097a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801097e:	2b00      	cmp	r3, #0
 8010980:	d002      	beq.n	8010988 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8010982:	6878      	ldr	r0, [r7, #4]
 8010984:	f000 f9c8 	bl	8010d18 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8010988:	69bb      	ldr	r3, [r7, #24]
 801098a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801098e:	2b40      	cmp	r3, #64	@ 0x40
 8010990:	d13a      	bne.n	8010a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8010992:	693b      	ldr	r3, [r7, #16]
 8010994:	f003 0320 	and.w	r3, r3, #32
 8010998:	2b00      	cmp	r3, #0
 801099a:	d035      	beq.n	8010a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	4a6e      	ldr	r2, [pc, #440]	@ (8010b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80109a2:	4293      	cmp	r3, r2
 80109a4:	d101      	bne.n	80109aa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80109a6:	4b6e      	ldr	r3, [pc, #440]	@ (8010b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80109a8:	e001      	b.n	80109ae <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80109aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80109ae:	685a      	ldr	r2, [r3, #4]
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	4969      	ldr	r1, [pc, #420]	@ (8010b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80109b6:	428b      	cmp	r3, r1
 80109b8:	d101      	bne.n	80109be <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80109ba:	4b69      	ldr	r3, [pc, #420]	@ (8010b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80109bc:	e001      	b.n	80109c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80109be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80109c2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80109c6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	685a      	ldr	r2, [r3, #4]
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80109d6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80109d8:	2300      	movs	r3, #0
 80109da:	60fb      	str	r3, [r7, #12]
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	68db      	ldr	r3, [r3, #12]
 80109e2:	60fb      	str	r3, [r7, #12]
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	689b      	ldr	r3, [r3, #8]
 80109ea:	60fb      	str	r3, [r7, #12]
 80109ec:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	2201      	movs	r2, #1
 80109f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80109fa:	f043 0202 	orr.w	r2, r3, #2
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8010a02:	6878      	ldr	r0, [r7, #4]
 8010a04:	f7ff fe88 	bl	8010718 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8010a08:	69fb      	ldr	r3, [r7, #28]
 8010a0a:	f003 0308 	and.w	r3, r3, #8
 8010a0e:	2b08      	cmp	r3, #8
 8010a10:	f040 80c3 	bne.w	8010b9a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8010a14:	697b      	ldr	r3, [r7, #20]
 8010a16:	f003 0320 	and.w	r3, r3, #32
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	f000 80bd 	beq.w	8010b9a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	685a      	ldr	r2, [r3, #4]
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8010a2e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	4a49      	ldr	r2, [pc, #292]	@ (8010b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8010a36:	4293      	cmp	r3, r2
 8010a38:	d101      	bne.n	8010a3e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8010a3a:	4b49      	ldr	r3, [pc, #292]	@ (8010b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8010a3c:	e001      	b.n	8010a42 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8010a3e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8010a42:	685a      	ldr	r2, [r3, #4]
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	4944      	ldr	r1, [pc, #272]	@ (8010b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8010a4a:	428b      	cmp	r3, r1
 8010a4c:	d101      	bne.n	8010a52 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8010a4e:	4b44      	ldr	r3, [pc, #272]	@ (8010b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8010a50:	e001      	b.n	8010a56 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8010a52:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8010a56:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8010a5a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	60bb      	str	r3, [r7, #8]
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	689b      	ldr	r3, [r3, #8]
 8010a66:	60bb      	str	r3, [r7, #8]
 8010a68:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	2201      	movs	r2, #1
 8010a6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a76:	f043 0204 	orr.w	r2, r3, #4
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8010a7e:	6878      	ldr	r0, [r7, #4]
 8010a80:	f7ff fe4a 	bl	8010718 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8010a84:	e089      	b.n	8010b9a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8010a86:	69bb      	ldr	r3, [r7, #24]
 8010a88:	f003 0302 	and.w	r3, r3, #2
 8010a8c:	2b02      	cmp	r3, #2
 8010a8e:	d107      	bne.n	8010aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8010a90:	693b      	ldr	r3, [r7, #16]
 8010a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d002      	beq.n	8010aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8010a9a:	6878      	ldr	r0, [r7, #4]
 8010a9c:	f000 f8be 	bl	8010c1c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8010aa0:	69fb      	ldr	r3, [r7, #28]
 8010aa2:	f003 0301 	and.w	r3, r3, #1
 8010aa6:	2b01      	cmp	r3, #1
 8010aa8:	d107      	bne.n	8010aba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8010aaa:	697b      	ldr	r3, [r7, #20]
 8010aac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d002      	beq.n	8010aba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8010ab4:	6878      	ldr	r0, [r7, #4]
 8010ab6:	f000 f8fd 	bl	8010cb4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8010aba:	69fb      	ldr	r3, [r7, #28]
 8010abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010ac0:	2b40      	cmp	r3, #64	@ 0x40
 8010ac2:	d12f      	bne.n	8010b24 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8010ac4:	697b      	ldr	r3, [r7, #20]
 8010ac6:	f003 0320 	and.w	r3, r3, #32
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d02a      	beq.n	8010b24 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	685a      	ldr	r2, [r3, #4]
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8010adc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	4a1e      	ldr	r2, [pc, #120]	@ (8010b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8010ae4:	4293      	cmp	r3, r2
 8010ae6:	d101      	bne.n	8010aec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8010ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8010b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8010aea:	e001      	b.n	8010af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8010aec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8010af0:	685a      	ldr	r2, [r3, #4]
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	4919      	ldr	r1, [pc, #100]	@ (8010b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8010af8:	428b      	cmp	r3, r1
 8010afa:	d101      	bne.n	8010b00 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8010afc:	4b18      	ldr	r3, [pc, #96]	@ (8010b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8010afe:	e001      	b.n	8010b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8010b00:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8010b04:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8010b08:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	2201      	movs	r2, #1
 8010b0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b16:	f043 0202 	orr.w	r2, r3, #2
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8010b1e:	6878      	ldr	r0, [r7, #4]
 8010b20:	f7ff fdfa 	bl	8010718 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8010b24:	69bb      	ldr	r3, [r7, #24]
 8010b26:	f003 0308 	and.w	r3, r3, #8
 8010b2a:	2b08      	cmp	r3, #8
 8010b2c:	d136      	bne.n	8010b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8010b2e:	693b      	ldr	r3, [r7, #16]
 8010b30:	f003 0320 	and.w	r3, r3, #32
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d031      	beq.n	8010b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	4a07      	ldr	r2, [pc, #28]	@ (8010b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8010b3e:	4293      	cmp	r3, r2
 8010b40:	d101      	bne.n	8010b46 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8010b42:	4b07      	ldr	r3, [pc, #28]	@ (8010b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8010b44:	e001      	b.n	8010b4a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8010b46:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8010b4a:	685a      	ldr	r2, [r3, #4]
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	4902      	ldr	r1, [pc, #8]	@ (8010b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8010b52:	428b      	cmp	r3, r1
 8010b54:	d106      	bne.n	8010b64 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8010b56:	4b02      	ldr	r3, [pc, #8]	@ (8010b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8010b58:	e006      	b.n	8010b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8010b5a:	bf00      	nop
 8010b5c:	40003800 	.word	0x40003800
 8010b60:	40003400 	.word	0x40003400
 8010b64:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8010b68:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8010b6c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	685a      	ldr	r2, [r3, #4]
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8010b7c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	2201      	movs	r2, #1
 8010b82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b8a:	f043 0204 	orr.w	r2, r3, #4
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8010b92:	6878      	ldr	r0, [r7, #4]
 8010b94:	f7ff fdc0 	bl	8010718 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8010b98:	e000      	b.n	8010b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8010b9a:	bf00      	nop
}
 8010b9c:	bf00      	nop
 8010b9e:	3720      	adds	r7, #32
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	bd80      	pop	{r7, pc}

08010ba4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8010ba4:	b480      	push	{r7}
 8010ba6:	b083      	sub	sp, #12
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8010bac:	bf00      	nop
 8010bae:	370c      	adds	r7, #12
 8010bb0:	46bd      	mov	sp, r7
 8010bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb6:	4770      	bx	lr

08010bb8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b082      	sub	sp, #8
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010bc4:	1c99      	adds	r1, r3, #2
 8010bc6:	687a      	ldr	r2, [r7, #4]
 8010bc8:	6251      	str	r1, [r2, #36]	@ 0x24
 8010bca:	881a      	ldrh	r2, [r3, #0]
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010bd6:	b29b      	uxth	r3, r3
 8010bd8:	3b01      	subs	r3, #1
 8010bda:	b29a      	uxth	r2, r3
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010be4:	b29b      	uxth	r3, r3
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d113      	bne.n	8010c12 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	685a      	ldr	r2, [r3, #4]
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8010bf8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010bfe:	b29b      	uxth	r3, r3
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d106      	bne.n	8010c12 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	2201      	movs	r2, #1
 8010c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8010c0c:	6878      	ldr	r0, [r7, #4]
 8010c0e:	f7ff ffc9 	bl	8010ba4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8010c12:	bf00      	nop
 8010c14:	3708      	adds	r7, #8
 8010c16:	46bd      	mov	sp, r7
 8010c18:	bd80      	pop	{r7, pc}
	...

08010c1c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b082      	sub	sp, #8
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c28:	1c99      	adds	r1, r3, #2
 8010c2a:	687a      	ldr	r2, [r7, #4]
 8010c2c:	6251      	str	r1, [r2, #36]	@ 0x24
 8010c2e:	8819      	ldrh	r1, [r3, #0]
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	4a1d      	ldr	r2, [pc, #116]	@ (8010cac <I2SEx_TxISR_I2SExt+0x90>)
 8010c36:	4293      	cmp	r3, r2
 8010c38:	d101      	bne.n	8010c3e <I2SEx_TxISR_I2SExt+0x22>
 8010c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8010cb0 <I2SEx_TxISR_I2SExt+0x94>)
 8010c3c:	e001      	b.n	8010c42 <I2SEx_TxISR_I2SExt+0x26>
 8010c3e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8010c42:	460a      	mov	r2, r1
 8010c44:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010c4a:	b29b      	uxth	r3, r3
 8010c4c:	3b01      	subs	r3, #1
 8010c4e:	b29a      	uxth	r2, r3
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010c58:	b29b      	uxth	r3, r3
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d121      	bne.n	8010ca2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	4a12      	ldr	r2, [pc, #72]	@ (8010cac <I2SEx_TxISR_I2SExt+0x90>)
 8010c64:	4293      	cmp	r3, r2
 8010c66:	d101      	bne.n	8010c6c <I2SEx_TxISR_I2SExt+0x50>
 8010c68:	4b11      	ldr	r3, [pc, #68]	@ (8010cb0 <I2SEx_TxISR_I2SExt+0x94>)
 8010c6a:	e001      	b.n	8010c70 <I2SEx_TxISR_I2SExt+0x54>
 8010c6c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8010c70:	685a      	ldr	r2, [r3, #4]
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	490d      	ldr	r1, [pc, #52]	@ (8010cac <I2SEx_TxISR_I2SExt+0x90>)
 8010c78:	428b      	cmp	r3, r1
 8010c7a:	d101      	bne.n	8010c80 <I2SEx_TxISR_I2SExt+0x64>
 8010c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8010cb0 <I2SEx_TxISR_I2SExt+0x94>)
 8010c7e:	e001      	b.n	8010c84 <I2SEx_TxISR_I2SExt+0x68>
 8010c80:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8010c84:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8010c88:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010c8e:	b29b      	uxth	r3, r3
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d106      	bne.n	8010ca2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	2201      	movs	r2, #1
 8010c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8010c9c:	6878      	ldr	r0, [r7, #4]
 8010c9e:	f7ff ff81 	bl	8010ba4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8010ca2:	bf00      	nop
 8010ca4:	3708      	adds	r7, #8
 8010ca6:	46bd      	mov	sp, r7
 8010ca8:	bd80      	pop	{r7, pc}
 8010caa:	bf00      	nop
 8010cac:	40003800 	.word	0x40003800
 8010cb0:	40003400 	.word	0x40003400

08010cb4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8010cb4:	b580      	push	{r7, lr}
 8010cb6:	b082      	sub	sp, #8
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	68d8      	ldr	r0, [r3, #12]
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010cc6:	1c99      	adds	r1, r3, #2
 8010cc8:	687a      	ldr	r2, [r7, #4]
 8010cca:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8010ccc:	b282      	uxth	r2, r0
 8010cce:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010cd4:	b29b      	uxth	r3, r3
 8010cd6:	3b01      	subs	r3, #1
 8010cd8:	b29a      	uxth	r2, r3
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010ce2:	b29b      	uxth	r3, r3
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d113      	bne.n	8010d10 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	685a      	ldr	r2, [r3, #4]
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8010cf6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010cfc:	b29b      	uxth	r3, r3
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d106      	bne.n	8010d10 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	2201      	movs	r2, #1
 8010d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8010d0a:	6878      	ldr	r0, [r7, #4]
 8010d0c:	f7ff ff4a 	bl	8010ba4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8010d10:	bf00      	nop
 8010d12:	3708      	adds	r7, #8
 8010d14:	46bd      	mov	sp, r7
 8010d16:	bd80      	pop	{r7, pc}

08010d18 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8010d18:	b580      	push	{r7, lr}
 8010d1a:	b082      	sub	sp, #8
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	4a20      	ldr	r2, [pc, #128]	@ (8010da8 <I2SEx_RxISR_I2SExt+0x90>)
 8010d26:	4293      	cmp	r3, r2
 8010d28:	d101      	bne.n	8010d2e <I2SEx_RxISR_I2SExt+0x16>
 8010d2a:	4b20      	ldr	r3, [pc, #128]	@ (8010dac <I2SEx_RxISR_I2SExt+0x94>)
 8010d2c:	e001      	b.n	8010d32 <I2SEx_RxISR_I2SExt+0x1a>
 8010d2e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8010d32:	68d8      	ldr	r0, [r3, #12]
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d38:	1c99      	adds	r1, r3, #2
 8010d3a:	687a      	ldr	r2, [r7, #4]
 8010d3c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8010d3e:	b282      	uxth	r2, r0
 8010d40:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010d46:	b29b      	uxth	r3, r3
 8010d48:	3b01      	subs	r3, #1
 8010d4a:	b29a      	uxth	r2, r3
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010d54:	b29b      	uxth	r3, r3
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d121      	bne.n	8010d9e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	4a12      	ldr	r2, [pc, #72]	@ (8010da8 <I2SEx_RxISR_I2SExt+0x90>)
 8010d60:	4293      	cmp	r3, r2
 8010d62:	d101      	bne.n	8010d68 <I2SEx_RxISR_I2SExt+0x50>
 8010d64:	4b11      	ldr	r3, [pc, #68]	@ (8010dac <I2SEx_RxISR_I2SExt+0x94>)
 8010d66:	e001      	b.n	8010d6c <I2SEx_RxISR_I2SExt+0x54>
 8010d68:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8010d6c:	685a      	ldr	r2, [r3, #4]
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	490d      	ldr	r1, [pc, #52]	@ (8010da8 <I2SEx_RxISR_I2SExt+0x90>)
 8010d74:	428b      	cmp	r3, r1
 8010d76:	d101      	bne.n	8010d7c <I2SEx_RxISR_I2SExt+0x64>
 8010d78:	4b0c      	ldr	r3, [pc, #48]	@ (8010dac <I2SEx_RxISR_I2SExt+0x94>)
 8010d7a:	e001      	b.n	8010d80 <I2SEx_RxISR_I2SExt+0x68>
 8010d7c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8010d80:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8010d84:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010d8a:	b29b      	uxth	r3, r3
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d106      	bne.n	8010d9e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	2201      	movs	r2, #1
 8010d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8010d98:	6878      	ldr	r0, [r7, #4]
 8010d9a:	f7ff ff03 	bl	8010ba4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8010d9e:	bf00      	nop
 8010da0:	3708      	adds	r7, #8
 8010da2:	46bd      	mov	sp, r7
 8010da4:	bd80      	pop	{r7, pc}
 8010da6:	bf00      	nop
 8010da8:	40003800 	.word	0x40003800
 8010dac:	40003400 	.word	0x40003400

08010db0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010db0:	b580      	push	{r7, lr}
 8010db2:	b086      	sub	sp, #24
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d101      	bne.n	8010dc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8010dbe:	2301      	movs	r3, #1
 8010dc0:	e267      	b.n	8011292 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	f003 0301 	and.w	r3, r3, #1
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d075      	beq.n	8010eba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8010dce:	4b88      	ldr	r3, [pc, #544]	@ (8010ff0 <HAL_RCC_OscConfig+0x240>)
 8010dd0:	689b      	ldr	r3, [r3, #8]
 8010dd2:	f003 030c 	and.w	r3, r3, #12
 8010dd6:	2b04      	cmp	r3, #4
 8010dd8:	d00c      	beq.n	8010df4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8010dda:	4b85      	ldr	r3, [pc, #532]	@ (8010ff0 <HAL_RCC_OscConfig+0x240>)
 8010ddc:	689b      	ldr	r3, [r3, #8]
 8010dde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8010de2:	2b08      	cmp	r3, #8
 8010de4:	d112      	bne.n	8010e0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8010de6:	4b82      	ldr	r3, [pc, #520]	@ (8010ff0 <HAL_RCC_OscConfig+0x240>)
 8010de8:	685b      	ldr	r3, [r3, #4]
 8010dea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010dee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010df2:	d10b      	bne.n	8010e0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010df4:	4b7e      	ldr	r3, [pc, #504]	@ (8010ff0 <HAL_RCC_OscConfig+0x240>)
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d05b      	beq.n	8010eb8 <HAL_RCC_OscConfig+0x108>
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	685b      	ldr	r3, [r3, #4]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d157      	bne.n	8010eb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8010e08:	2301      	movs	r3, #1
 8010e0a:	e242      	b.n	8011292 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	685b      	ldr	r3, [r3, #4]
 8010e10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010e14:	d106      	bne.n	8010e24 <HAL_RCC_OscConfig+0x74>
 8010e16:	4b76      	ldr	r3, [pc, #472]	@ (8010ff0 <HAL_RCC_OscConfig+0x240>)
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	4a75      	ldr	r2, [pc, #468]	@ (8010ff0 <HAL_RCC_OscConfig+0x240>)
 8010e1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010e20:	6013      	str	r3, [r2, #0]
 8010e22:	e01d      	b.n	8010e60 <HAL_RCC_OscConfig+0xb0>
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	685b      	ldr	r3, [r3, #4]
 8010e28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8010e2c:	d10c      	bne.n	8010e48 <HAL_RCC_OscConfig+0x98>
 8010e2e:	4b70      	ldr	r3, [pc, #448]	@ (8010ff0 <HAL_RCC_OscConfig+0x240>)
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	4a6f      	ldr	r2, [pc, #444]	@ (8010ff0 <HAL_RCC_OscConfig+0x240>)
 8010e34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8010e38:	6013      	str	r3, [r2, #0]
 8010e3a:	4b6d      	ldr	r3, [pc, #436]	@ (8010ff0 <HAL_RCC_OscConfig+0x240>)
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	4a6c      	ldr	r2, [pc, #432]	@ (8010ff0 <HAL_RCC_OscConfig+0x240>)
 8010e40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010e44:	6013      	str	r3, [r2, #0]
 8010e46:	e00b      	b.n	8010e60 <HAL_RCC_OscConfig+0xb0>
 8010e48:	4b69      	ldr	r3, [pc, #420]	@ (8010ff0 <HAL_RCC_OscConfig+0x240>)
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	4a68      	ldr	r2, [pc, #416]	@ (8010ff0 <HAL_RCC_OscConfig+0x240>)
 8010e4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010e52:	6013      	str	r3, [r2, #0]
 8010e54:	4b66      	ldr	r3, [pc, #408]	@ (8010ff0 <HAL_RCC_OscConfig+0x240>)
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	4a65      	ldr	r2, [pc, #404]	@ (8010ff0 <HAL_RCC_OscConfig+0x240>)
 8010e5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8010e5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	685b      	ldr	r3, [r3, #4]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d013      	beq.n	8010e90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010e68:	f7fc fdac 	bl	800d9c4 <HAL_GetTick>
 8010e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010e6e:	e008      	b.n	8010e82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010e70:	f7fc fda8 	bl	800d9c4 <HAL_GetTick>
 8010e74:	4602      	mov	r2, r0
 8010e76:	693b      	ldr	r3, [r7, #16]
 8010e78:	1ad3      	subs	r3, r2, r3
 8010e7a:	2b64      	cmp	r3, #100	@ 0x64
 8010e7c:	d901      	bls.n	8010e82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8010e7e:	2303      	movs	r3, #3
 8010e80:	e207      	b.n	8011292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010e82:	4b5b      	ldr	r3, [pc, #364]	@ (8010ff0 <HAL_RCC_OscConfig+0x240>)
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d0f0      	beq.n	8010e70 <HAL_RCC_OscConfig+0xc0>
 8010e8e:	e014      	b.n	8010eba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010e90:	f7fc fd98 	bl	800d9c4 <HAL_GetTick>
 8010e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010e96:	e008      	b.n	8010eaa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010e98:	f7fc fd94 	bl	800d9c4 <HAL_GetTick>
 8010e9c:	4602      	mov	r2, r0
 8010e9e:	693b      	ldr	r3, [r7, #16]
 8010ea0:	1ad3      	subs	r3, r2, r3
 8010ea2:	2b64      	cmp	r3, #100	@ 0x64
 8010ea4:	d901      	bls.n	8010eaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8010ea6:	2303      	movs	r3, #3
 8010ea8:	e1f3      	b.n	8011292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010eaa:	4b51      	ldr	r3, [pc, #324]	@ (8010ff0 <HAL_RCC_OscConfig+0x240>)
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d1f0      	bne.n	8010e98 <HAL_RCC_OscConfig+0xe8>
 8010eb6:	e000      	b.n	8010eba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	f003 0302 	and.w	r3, r3, #2
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d063      	beq.n	8010f8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8010ec6:	4b4a      	ldr	r3, [pc, #296]	@ (8010ff0 <HAL_RCC_OscConfig+0x240>)
 8010ec8:	689b      	ldr	r3, [r3, #8]
 8010eca:	f003 030c 	and.w	r3, r3, #12
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d00b      	beq.n	8010eea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8010ed2:	4b47      	ldr	r3, [pc, #284]	@ (8010ff0 <HAL_RCC_OscConfig+0x240>)
 8010ed4:	689b      	ldr	r3, [r3, #8]
 8010ed6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8010eda:	2b08      	cmp	r3, #8
 8010edc:	d11c      	bne.n	8010f18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8010ede:	4b44      	ldr	r3, [pc, #272]	@ (8010ff0 <HAL_RCC_OscConfig+0x240>)
 8010ee0:	685b      	ldr	r3, [r3, #4]
 8010ee2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d116      	bne.n	8010f18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010eea:	4b41      	ldr	r3, [pc, #260]	@ (8010ff0 <HAL_RCC_OscConfig+0x240>)
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	f003 0302 	and.w	r3, r3, #2
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d005      	beq.n	8010f02 <HAL_RCC_OscConfig+0x152>
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	68db      	ldr	r3, [r3, #12]
 8010efa:	2b01      	cmp	r3, #1
 8010efc:	d001      	beq.n	8010f02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8010efe:	2301      	movs	r3, #1
 8010f00:	e1c7      	b.n	8011292 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010f02:	4b3b      	ldr	r3, [pc, #236]	@ (8010ff0 <HAL_RCC_OscConfig+0x240>)
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	691b      	ldr	r3, [r3, #16]
 8010f0e:	00db      	lsls	r3, r3, #3
 8010f10:	4937      	ldr	r1, [pc, #220]	@ (8010ff0 <HAL_RCC_OscConfig+0x240>)
 8010f12:	4313      	orrs	r3, r2
 8010f14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010f16:	e03a      	b.n	8010f8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	68db      	ldr	r3, [r3, #12]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d020      	beq.n	8010f62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8010f20:	4b34      	ldr	r3, [pc, #208]	@ (8010ff4 <HAL_RCC_OscConfig+0x244>)
 8010f22:	2201      	movs	r2, #1
 8010f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010f26:	f7fc fd4d 	bl	800d9c4 <HAL_GetTick>
 8010f2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010f2c:	e008      	b.n	8010f40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010f2e:	f7fc fd49 	bl	800d9c4 <HAL_GetTick>
 8010f32:	4602      	mov	r2, r0
 8010f34:	693b      	ldr	r3, [r7, #16]
 8010f36:	1ad3      	subs	r3, r2, r3
 8010f38:	2b02      	cmp	r3, #2
 8010f3a:	d901      	bls.n	8010f40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8010f3c:	2303      	movs	r3, #3
 8010f3e:	e1a8      	b.n	8011292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010f40:	4b2b      	ldr	r3, [pc, #172]	@ (8010ff0 <HAL_RCC_OscConfig+0x240>)
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	f003 0302 	and.w	r3, r3, #2
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d0f0      	beq.n	8010f2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010f4c:	4b28      	ldr	r3, [pc, #160]	@ (8010ff0 <HAL_RCC_OscConfig+0x240>)
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	691b      	ldr	r3, [r3, #16]
 8010f58:	00db      	lsls	r3, r3, #3
 8010f5a:	4925      	ldr	r1, [pc, #148]	@ (8010ff0 <HAL_RCC_OscConfig+0x240>)
 8010f5c:	4313      	orrs	r3, r2
 8010f5e:	600b      	str	r3, [r1, #0]
 8010f60:	e015      	b.n	8010f8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8010f62:	4b24      	ldr	r3, [pc, #144]	@ (8010ff4 <HAL_RCC_OscConfig+0x244>)
 8010f64:	2200      	movs	r2, #0
 8010f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010f68:	f7fc fd2c 	bl	800d9c4 <HAL_GetTick>
 8010f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8010f6e:	e008      	b.n	8010f82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010f70:	f7fc fd28 	bl	800d9c4 <HAL_GetTick>
 8010f74:	4602      	mov	r2, r0
 8010f76:	693b      	ldr	r3, [r7, #16]
 8010f78:	1ad3      	subs	r3, r2, r3
 8010f7a:	2b02      	cmp	r3, #2
 8010f7c:	d901      	bls.n	8010f82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8010f7e:	2303      	movs	r3, #3
 8010f80:	e187      	b.n	8011292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8010f82:	4b1b      	ldr	r3, [pc, #108]	@ (8010ff0 <HAL_RCC_OscConfig+0x240>)
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	f003 0302 	and.w	r3, r3, #2
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d1f0      	bne.n	8010f70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	f003 0308 	and.w	r3, r3, #8
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d036      	beq.n	8011008 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	695b      	ldr	r3, [r3, #20]
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d016      	beq.n	8010fd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8010fa2:	4b15      	ldr	r3, [pc, #84]	@ (8010ff8 <HAL_RCC_OscConfig+0x248>)
 8010fa4:	2201      	movs	r2, #1
 8010fa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010fa8:	f7fc fd0c 	bl	800d9c4 <HAL_GetTick>
 8010fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010fae:	e008      	b.n	8010fc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010fb0:	f7fc fd08 	bl	800d9c4 <HAL_GetTick>
 8010fb4:	4602      	mov	r2, r0
 8010fb6:	693b      	ldr	r3, [r7, #16]
 8010fb8:	1ad3      	subs	r3, r2, r3
 8010fba:	2b02      	cmp	r3, #2
 8010fbc:	d901      	bls.n	8010fc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8010fbe:	2303      	movs	r3, #3
 8010fc0:	e167      	b.n	8011292 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8010ff0 <HAL_RCC_OscConfig+0x240>)
 8010fc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010fc6:	f003 0302 	and.w	r3, r3, #2
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d0f0      	beq.n	8010fb0 <HAL_RCC_OscConfig+0x200>
 8010fce:	e01b      	b.n	8011008 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8010fd0:	4b09      	ldr	r3, [pc, #36]	@ (8010ff8 <HAL_RCC_OscConfig+0x248>)
 8010fd2:	2200      	movs	r2, #0
 8010fd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8010fd6:	f7fc fcf5 	bl	800d9c4 <HAL_GetTick>
 8010fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010fdc:	e00e      	b.n	8010ffc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010fde:	f7fc fcf1 	bl	800d9c4 <HAL_GetTick>
 8010fe2:	4602      	mov	r2, r0
 8010fe4:	693b      	ldr	r3, [r7, #16]
 8010fe6:	1ad3      	subs	r3, r2, r3
 8010fe8:	2b02      	cmp	r3, #2
 8010fea:	d907      	bls.n	8010ffc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8010fec:	2303      	movs	r3, #3
 8010fee:	e150      	b.n	8011292 <HAL_RCC_OscConfig+0x4e2>
 8010ff0:	40023800 	.word	0x40023800
 8010ff4:	42470000 	.word	0x42470000
 8010ff8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010ffc:	4b88      	ldr	r3, [pc, #544]	@ (8011220 <HAL_RCC_OscConfig+0x470>)
 8010ffe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011000:	f003 0302 	and.w	r3, r3, #2
 8011004:	2b00      	cmp	r3, #0
 8011006:	d1ea      	bne.n	8010fde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	f003 0304 	and.w	r3, r3, #4
 8011010:	2b00      	cmp	r3, #0
 8011012:	f000 8097 	beq.w	8011144 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8011016:	2300      	movs	r3, #0
 8011018:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801101a:	4b81      	ldr	r3, [pc, #516]	@ (8011220 <HAL_RCC_OscConfig+0x470>)
 801101c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801101e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8011022:	2b00      	cmp	r3, #0
 8011024:	d10f      	bne.n	8011046 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011026:	2300      	movs	r3, #0
 8011028:	60bb      	str	r3, [r7, #8]
 801102a:	4b7d      	ldr	r3, [pc, #500]	@ (8011220 <HAL_RCC_OscConfig+0x470>)
 801102c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801102e:	4a7c      	ldr	r2, [pc, #496]	@ (8011220 <HAL_RCC_OscConfig+0x470>)
 8011030:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011034:	6413      	str	r3, [r2, #64]	@ 0x40
 8011036:	4b7a      	ldr	r3, [pc, #488]	@ (8011220 <HAL_RCC_OscConfig+0x470>)
 8011038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801103a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801103e:	60bb      	str	r3, [r7, #8]
 8011040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8011042:	2301      	movs	r3, #1
 8011044:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011046:	4b77      	ldr	r3, [pc, #476]	@ (8011224 <HAL_RCC_OscConfig+0x474>)
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801104e:	2b00      	cmp	r3, #0
 8011050:	d118      	bne.n	8011084 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011052:	4b74      	ldr	r3, [pc, #464]	@ (8011224 <HAL_RCC_OscConfig+0x474>)
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	4a73      	ldr	r2, [pc, #460]	@ (8011224 <HAL_RCC_OscConfig+0x474>)
 8011058:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801105c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801105e:	f7fc fcb1 	bl	800d9c4 <HAL_GetTick>
 8011062:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011064:	e008      	b.n	8011078 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011066:	f7fc fcad 	bl	800d9c4 <HAL_GetTick>
 801106a:	4602      	mov	r2, r0
 801106c:	693b      	ldr	r3, [r7, #16]
 801106e:	1ad3      	subs	r3, r2, r3
 8011070:	2b02      	cmp	r3, #2
 8011072:	d901      	bls.n	8011078 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8011074:	2303      	movs	r3, #3
 8011076:	e10c      	b.n	8011292 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011078:	4b6a      	ldr	r3, [pc, #424]	@ (8011224 <HAL_RCC_OscConfig+0x474>)
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011080:	2b00      	cmp	r3, #0
 8011082:	d0f0      	beq.n	8011066 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	689b      	ldr	r3, [r3, #8]
 8011088:	2b01      	cmp	r3, #1
 801108a:	d106      	bne.n	801109a <HAL_RCC_OscConfig+0x2ea>
 801108c:	4b64      	ldr	r3, [pc, #400]	@ (8011220 <HAL_RCC_OscConfig+0x470>)
 801108e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011090:	4a63      	ldr	r2, [pc, #396]	@ (8011220 <HAL_RCC_OscConfig+0x470>)
 8011092:	f043 0301 	orr.w	r3, r3, #1
 8011096:	6713      	str	r3, [r2, #112]	@ 0x70
 8011098:	e01c      	b.n	80110d4 <HAL_RCC_OscConfig+0x324>
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	689b      	ldr	r3, [r3, #8]
 801109e:	2b05      	cmp	r3, #5
 80110a0:	d10c      	bne.n	80110bc <HAL_RCC_OscConfig+0x30c>
 80110a2:	4b5f      	ldr	r3, [pc, #380]	@ (8011220 <HAL_RCC_OscConfig+0x470>)
 80110a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80110a6:	4a5e      	ldr	r2, [pc, #376]	@ (8011220 <HAL_RCC_OscConfig+0x470>)
 80110a8:	f043 0304 	orr.w	r3, r3, #4
 80110ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80110ae:	4b5c      	ldr	r3, [pc, #368]	@ (8011220 <HAL_RCC_OscConfig+0x470>)
 80110b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80110b2:	4a5b      	ldr	r2, [pc, #364]	@ (8011220 <HAL_RCC_OscConfig+0x470>)
 80110b4:	f043 0301 	orr.w	r3, r3, #1
 80110b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80110ba:	e00b      	b.n	80110d4 <HAL_RCC_OscConfig+0x324>
 80110bc:	4b58      	ldr	r3, [pc, #352]	@ (8011220 <HAL_RCC_OscConfig+0x470>)
 80110be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80110c0:	4a57      	ldr	r2, [pc, #348]	@ (8011220 <HAL_RCC_OscConfig+0x470>)
 80110c2:	f023 0301 	bic.w	r3, r3, #1
 80110c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80110c8:	4b55      	ldr	r3, [pc, #340]	@ (8011220 <HAL_RCC_OscConfig+0x470>)
 80110ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80110cc:	4a54      	ldr	r2, [pc, #336]	@ (8011220 <HAL_RCC_OscConfig+0x470>)
 80110ce:	f023 0304 	bic.w	r3, r3, #4
 80110d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	689b      	ldr	r3, [r3, #8]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d015      	beq.n	8011108 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80110dc:	f7fc fc72 	bl	800d9c4 <HAL_GetTick>
 80110e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80110e2:	e00a      	b.n	80110fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80110e4:	f7fc fc6e 	bl	800d9c4 <HAL_GetTick>
 80110e8:	4602      	mov	r2, r0
 80110ea:	693b      	ldr	r3, [r7, #16]
 80110ec:	1ad3      	subs	r3, r2, r3
 80110ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80110f2:	4293      	cmp	r3, r2
 80110f4:	d901      	bls.n	80110fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80110f6:	2303      	movs	r3, #3
 80110f8:	e0cb      	b.n	8011292 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80110fa:	4b49      	ldr	r3, [pc, #292]	@ (8011220 <HAL_RCC_OscConfig+0x470>)
 80110fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80110fe:	f003 0302 	and.w	r3, r3, #2
 8011102:	2b00      	cmp	r3, #0
 8011104:	d0ee      	beq.n	80110e4 <HAL_RCC_OscConfig+0x334>
 8011106:	e014      	b.n	8011132 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011108:	f7fc fc5c 	bl	800d9c4 <HAL_GetTick>
 801110c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801110e:	e00a      	b.n	8011126 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011110:	f7fc fc58 	bl	800d9c4 <HAL_GetTick>
 8011114:	4602      	mov	r2, r0
 8011116:	693b      	ldr	r3, [r7, #16]
 8011118:	1ad3      	subs	r3, r2, r3
 801111a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801111e:	4293      	cmp	r3, r2
 8011120:	d901      	bls.n	8011126 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8011122:	2303      	movs	r3, #3
 8011124:	e0b5      	b.n	8011292 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011126:	4b3e      	ldr	r3, [pc, #248]	@ (8011220 <HAL_RCC_OscConfig+0x470>)
 8011128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801112a:	f003 0302 	and.w	r3, r3, #2
 801112e:	2b00      	cmp	r3, #0
 8011130:	d1ee      	bne.n	8011110 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8011132:	7dfb      	ldrb	r3, [r7, #23]
 8011134:	2b01      	cmp	r3, #1
 8011136:	d105      	bne.n	8011144 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011138:	4b39      	ldr	r3, [pc, #228]	@ (8011220 <HAL_RCC_OscConfig+0x470>)
 801113a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801113c:	4a38      	ldr	r2, [pc, #224]	@ (8011220 <HAL_RCC_OscConfig+0x470>)
 801113e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011142:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	699b      	ldr	r3, [r3, #24]
 8011148:	2b00      	cmp	r3, #0
 801114a:	f000 80a1 	beq.w	8011290 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801114e:	4b34      	ldr	r3, [pc, #208]	@ (8011220 <HAL_RCC_OscConfig+0x470>)
 8011150:	689b      	ldr	r3, [r3, #8]
 8011152:	f003 030c 	and.w	r3, r3, #12
 8011156:	2b08      	cmp	r3, #8
 8011158:	d05c      	beq.n	8011214 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	699b      	ldr	r3, [r3, #24]
 801115e:	2b02      	cmp	r3, #2
 8011160:	d141      	bne.n	80111e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011162:	4b31      	ldr	r3, [pc, #196]	@ (8011228 <HAL_RCC_OscConfig+0x478>)
 8011164:	2200      	movs	r2, #0
 8011166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011168:	f7fc fc2c 	bl	800d9c4 <HAL_GetTick>
 801116c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801116e:	e008      	b.n	8011182 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011170:	f7fc fc28 	bl	800d9c4 <HAL_GetTick>
 8011174:	4602      	mov	r2, r0
 8011176:	693b      	ldr	r3, [r7, #16]
 8011178:	1ad3      	subs	r3, r2, r3
 801117a:	2b02      	cmp	r3, #2
 801117c:	d901      	bls.n	8011182 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 801117e:	2303      	movs	r3, #3
 8011180:	e087      	b.n	8011292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011182:	4b27      	ldr	r3, [pc, #156]	@ (8011220 <HAL_RCC_OscConfig+0x470>)
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801118a:	2b00      	cmp	r3, #0
 801118c:	d1f0      	bne.n	8011170 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	69da      	ldr	r2, [r3, #28]
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	6a1b      	ldr	r3, [r3, #32]
 8011196:	431a      	orrs	r2, r3
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801119c:	019b      	lsls	r3, r3, #6
 801119e:	431a      	orrs	r2, r3
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80111a4:	085b      	lsrs	r3, r3, #1
 80111a6:	3b01      	subs	r3, #1
 80111a8:	041b      	lsls	r3, r3, #16
 80111aa:	431a      	orrs	r2, r3
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111b0:	061b      	lsls	r3, r3, #24
 80111b2:	491b      	ldr	r1, [pc, #108]	@ (8011220 <HAL_RCC_OscConfig+0x470>)
 80111b4:	4313      	orrs	r3, r2
 80111b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80111b8:	4b1b      	ldr	r3, [pc, #108]	@ (8011228 <HAL_RCC_OscConfig+0x478>)
 80111ba:	2201      	movs	r2, #1
 80111bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80111be:	f7fc fc01 	bl	800d9c4 <HAL_GetTick>
 80111c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80111c4:	e008      	b.n	80111d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80111c6:	f7fc fbfd 	bl	800d9c4 <HAL_GetTick>
 80111ca:	4602      	mov	r2, r0
 80111cc:	693b      	ldr	r3, [r7, #16]
 80111ce:	1ad3      	subs	r3, r2, r3
 80111d0:	2b02      	cmp	r3, #2
 80111d2:	d901      	bls.n	80111d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80111d4:	2303      	movs	r3, #3
 80111d6:	e05c      	b.n	8011292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80111d8:	4b11      	ldr	r3, [pc, #68]	@ (8011220 <HAL_RCC_OscConfig+0x470>)
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d0f0      	beq.n	80111c6 <HAL_RCC_OscConfig+0x416>
 80111e4:	e054      	b.n	8011290 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80111e6:	4b10      	ldr	r3, [pc, #64]	@ (8011228 <HAL_RCC_OscConfig+0x478>)
 80111e8:	2200      	movs	r2, #0
 80111ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80111ec:	f7fc fbea 	bl	800d9c4 <HAL_GetTick>
 80111f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80111f2:	e008      	b.n	8011206 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80111f4:	f7fc fbe6 	bl	800d9c4 <HAL_GetTick>
 80111f8:	4602      	mov	r2, r0
 80111fa:	693b      	ldr	r3, [r7, #16]
 80111fc:	1ad3      	subs	r3, r2, r3
 80111fe:	2b02      	cmp	r3, #2
 8011200:	d901      	bls.n	8011206 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8011202:	2303      	movs	r3, #3
 8011204:	e045      	b.n	8011292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011206:	4b06      	ldr	r3, [pc, #24]	@ (8011220 <HAL_RCC_OscConfig+0x470>)
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801120e:	2b00      	cmp	r3, #0
 8011210:	d1f0      	bne.n	80111f4 <HAL_RCC_OscConfig+0x444>
 8011212:	e03d      	b.n	8011290 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	699b      	ldr	r3, [r3, #24]
 8011218:	2b01      	cmp	r3, #1
 801121a:	d107      	bne.n	801122c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 801121c:	2301      	movs	r3, #1
 801121e:	e038      	b.n	8011292 <HAL_RCC_OscConfig+0x4e2>
 8011220:	40023800 	.word	0x40023800
 8011224:	40007000 	.word	0x40007000
 8011228:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801122c:	4b1b      	ldr	r3, [pc, #108]	@ (801129c <HAL_RCC_OscConfig+0x4ec>)
 801122e:	685b      	ldr	r3, [r3, #4]
 8011230:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	699b      	ldr	r3, [r3, #24]
 8011236:	2b01      	cmp	r3, #1
 8011238:	d028      	beq.n	801128c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011244:	429a      	cmp	r2, r3
 8011246:	d121      	bne.n	801128c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011252:	429a      	cmp	r2, r3
 8011254:	d11a      	bne.n	801128c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8011256:	68fa      	ldr	r2, [r7, #12]
 8011258:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 801125c:	4013      	ands	r3, r2
 801125e:	687a      	ldr	r2, [r7, #4]
 8011260:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8011262:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8011264:	4293      	cmp	r3, r2
 8011266:	d111      	bne.n	801128c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011272:	085b      	lsrs	r3, r3, #1
 8011274:	3b01      	subs	r3, #1
 8011276:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8011278:	429a      	cmp	r2, r3
 801127a:	d107      	bne.n	801128c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011286:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8011288:	429a      	cmp	r2, r3
 801128a:	d001      	beq.n	8011290 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 801128c:	2301      	movs	r3, #1
 801128e:	e000      	b.n	8011292 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8011290:	2300      	movs	r3, #0
}
 8011292:	4618      	mov	r0, r3
 8011294:	3718      	adds	r7, #24
 8011296:	46bd      	mov	sp, r7
 8011298:	bd80      	pop	{r7, pc}
 801129a:	bf00      	nop
 801129c:	40023800 	.word	0x40023800

080112a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b084      	sub	sp, #16
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	6078      	str	r0, [r7, #4]
 80112a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d101      	bne.n	80112b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80112b0:	2301      	movs	r3, #1
 80112b2:	e0cc      	b.n	801144e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80112b4:	4b68      	ldr	r3, [pc, #416]	@ (8011458 <HAL_RCC_ClockConfig+0x1b8>)
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	f003 0307 	and.w	r3, r3, #7
 80112bc:	683a      	ldr	r2, [r7, #0]
 80112be:	429a      	cmp	r2, r3
 80112c0:	d90c      	bls.n	80112dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80112c2:	4b65      	ldr	r3, [pc, #404]	@ (8011458 <HAL_RCC_ClockConfig+0x1b8>)
 80112c4:	683a      	ldr	r2, [r7, #0]
 80112c6:	b2d2      	uxtb	r2, r2
 80112c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80112ca:	4b63      	ldr	r3, [pc, #396]	@ (8011458 <HAL_RCC_ClockConfig+0x1b8>)
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	f003 0307 	and.w	r3, r3, #7
 80112d2:	683a      	ldr	r2, [r7, #0]
 80112d4:	429a      	cmp	r2, r3
 80112d6:	d001      	beq.n	80112dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80112d8:	2301      	movs	r3, #1
 80112da:	e0b8      	b.n	801144e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	f003 0302 	and.w	r3, r3, #2
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d020      	beq.n	801132a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	f003 0304 	and.w	r3, r3, #4
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d005      	beq.n	8011300 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80112f4:	4b59      	ldr	r3, [pc, #356]	@ (801145c <HAL_RCC_ClockConfig+0x1bc>)
 80112f6:	689b      	ldr	r3, [r3, #8]
 80112f8:	4a58      	ldr	r2, [pc, #352]	@ (801145c <HAL_RCC_ClockConfig+0x1bc>)
 80112fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80112fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	f003 0308 	and.w	r3, r3, #8
 8011308:	2b00      	cmp	r3, #0
 801130a:	d005      	beq.n	8011318 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801130c:	4b53      	ldr	r3, [pc, #332]	@ (801145c <HAL_RCC_ClockConfig+0x1bc>)
 801130e:	689b      	ldr	r3, [r3, #8]
 8011310:	4a52      	ldr	r2, [pc, #328]	@ (801145c <HAL_RCC_ClockConfig+0x1bc>)
 8011312:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8011316:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011318:	4b50      	ldr	r3, [pc, #320]	@ (801145c <HAL_RCC_ClockConfig+0x1bc>)
 801131a:	689b      	ldr	r3, [r3, #8]
 801131c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	689b      	ldr	r3, [r3, #8]
 8011324:	494d      	ldr	r1, [pc, #308]	@ (801145c <HAL_RCC_ClockConfig+0x1bc>)
 8011326:	4313      	orrs	r3, r2
 8011328:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	f003 0301 	and.w	r3, r3, #1
 8011332:	2b00      	cmp	r3, #0
 8011334:	d044      	beq.n	80113c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	685b      	ldr	r3, [r3, #4]
 801133a:	2b01      	cmp	r3, #1
 801133c:	d107      	bne.n	801134e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801133e:	4b47      	ldr	r3, [pc, #284]	@ (801145c <HAL_RCC_ClockConfig+0x1bc>)
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011346:	2b00      	cmp	r3, #0
 8011348:	d119      	bne.n	801137e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801134a:	2301      	movs	r3, #1
 801134c:	e07f      	b.n	801144e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	685b      	ldr	r3, [r3, #4]
 8011352:	2b02      	cmp	r3, #2
 8011354:	d003      	beq.n	801135e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801135a:	2b03      	cmp	r3, #3
 801135c:	d107      	bne.n	801136e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801135e:	4b3f      	ldr	r3, [pc, #252]	@ (801145c <HAL_RCC_ClockConfig+0x1bc>)
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011366:	2b00      	cmp	r3, #0
 8011368:	d109      	bne.n	801137e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801136a:	2301      	movs	r3, #1
 801136c:	e06f      	b.n	801144e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801136e:	4b3b      	ldr	r3, [pc, #236]	@ (801145c <HAL_RCC_ClockConfig+0x1bc>)
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	f003 0302 	and.w	r3, r3, #2
 8011376:	2b00      	cmp	r3, #0
 8011378:	d101      	bne.n	801137e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801137a:	2301      	movs	r3, #1
 801137c:	e067      	b.n	801144e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801137e:	4b37      	ldr	r3, [pc, #220]	@ (801145c <HAL_RCC_ClockConfig+0x1bc>)
 8011380:	689b      	ldr	r3, [r3, #8]
 8011382:	f023 0203 	bic.w	r2, r3, #3
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	685b      	ldr	r3, [r3, #4]
 801138a:	4934      	ldr	r1, [pc, #208]	@ (801145c <HAL_RCC_ClockConfig+0x1bc>)
 801138c:	4313      	orrs	r3, r2
 801138e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8011390:	f7fc fb18 	bl	800d9c4 <HAL_GetTick>
 8011394:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011396:	e00a      	b.n	80113ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011398:	f7fc fb14 	bl	800d9c4 <HAL_GetTick>
 801139c:	4602      	mov	r2, r0
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	1ad3      	subs	r3, r2, r3
 80113a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80113a6:	4293      	cmp	r3, r2
 80113a8:	d901      	bls.n	80113ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80113aa:	2303      	movs	r3, #3
 80113ac:	e04f      	b.n	801144e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80113ae:	4b2b      	ldr	r3, [pc, #172]	@ (801145c <HAL_RCC_ClockConfig+0x1bc>)
 80113b0:	689b      	ldr	r3, [r3, #8]
 80113b2:	f003 020c 	and.w	r2, r3, #12
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	685b      	ldr	r3, [r3, #4]
 80113ba:	009b      	lsls	r3, r3, #2
 80113bc:	429a      	cmp	r2, r3
 80113be:	d1eb      	bne.n	8011398 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80113c0:	4b25      	ldr	r3, [pc, #148]	@ (8011458 <HAL_RCC_ClockConfig+0x1b8>)
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	f003 0307 	and.w	r3, r3, #7
 80113c8:	683a      	ldr	r2, [r7, #0]
 80113ca:	429a      	cmp	r2, r3
 80113cc:	d20c      	bcs.n	80113e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80113ce:	4b22      	ldr	r3, [pc, #136]	@ (8011458 <HAL_RCC_ClockConfig+0x1b8>)
 80113d0:	683a      	ldr	r2, [r7, #0]
 80113d2:	b2d2      	uxtb	r2, r2
 80113d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80113d6:	4b20      	ldr	r3, [pc, #128]	@ (8011458 <HAL_RCC_ClockConfig+0x1b8>)
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	f003 0307 	and.w	r3, r3, #7
 80113de:	683a      	ldr	r2, [r7, #0]
 80113e0:	429a      	cmp	r2, r3
 80113e2:	d001      	beq.n	80113e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80113e4:	2301      	movs	r3, #1
 80113e6:	e032      	b.n	801144e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	f003 0304 	and.w	r3, r3, #4
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d008      	beq.n	8011406 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80113f4:	4b19      	ldr	r3, [pc, #100]	@ (801145c <HAL_RCC_ClockConfig+0x1bc>)
 80113f6:	689b      	ldr	r3, [r3, #8]
 80113f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	68db      	ldr	r3, [r3, #12]
 8011400:	4916      	ldr	r1, [pc, #88]	@ (801145c <HAL_RCC_ClockConfig+0x1bc>)
 8011402:	4313      	orrs	r3, r2
 8011404:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	f003 0308 	and.w	r3, r3, #8
 801140e:	2b00      	cmp	r3, #0
 8011410:	d009      	beq.n	8011426 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8011412:	4b12      	ldr	r3, [pc, #72]	@ (801145c <HAL_RCC_ClockConfig+0x1bc>)
 8011414:	689b      	ldr	r3, [r3, #8]
 8011416:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	691b      	ldr	r3, [r3, #16]
 801141e:	00db      	lsls	r3, r3, #3
 8011420:	490e      	ldr	r1, [pc, #56]	@ (801145c <HAL_RCC_ClockConfig+0x1bc>)
 8011422:	4313      	orrs	r3, r2
 8011424:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8011426:	f000 f821 	bl	801146c <HAL_RCC_GetSysClockFreq>
 801142a:	4602      	mov	r2, r0
 801142c:	4b0b      	ldr	r3, [pc, #44]	@ (801145c <HAL_RCC_ClockConfig+0x1bc>)
 801142e:	689b      	ldr	r3, [r3, #8]
 8011430:	091b      	lsrs	r3, r3, #4
 8011432:	f003 030f 	and.w	r3, r3, #15
 8011436:	490a      	ldr	r1, [pc, #40]	@ (8011460 <HAL_RCC_ClockConfig+0x1c0>)
 8011438:	5ccb      	ldrb	r3, [r1, r3]
 801143a:	fa22 f303 	lsr.w	r3, r2, r3
 801143e:	4a09      	ldr	r2, [pc, #36]	@ (8011464 <HAL_RCC_ClockConfig+0x1c4>)
 8011440:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8011442:	4b09      	ldr	r3, [pc, #36]	@ (8011468 <HAL_RCC_ClockConfig+0x1c8>)
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	4618      	mov	r0, r3
 8011448:	f7fc fa78 	bl	800d93c <HAL_InitTick>

  return HAL_OK;
 801144c:	2300      	movs	r3, #0
}
 801144e:	4618      	mov	r0, r3
 8011450:	3710      	adds	r7, #16
 8011452:	46bd      	mov	sp, r7
 8011454:	bd80      	pop	{r7, pc}
 8011456:	bf00      	nop
 8011458:	40023c00 	.word	0x40023c00
 801145c:	40023800 	.word	0x40023800
 8011460:	08017be0 	.word	0x08017be0
 8011464:	20001288 	.word	0x20001288
 8011468:	2000128c 	.word	0x2000128c

0801146c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801146c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011470:	b094      	sub	sp, #80	@ 0x50
 8011472:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8011474:	2300      	movs	r3, #0
 8011476:	647b      	str	r3, [r7, #68]	@ 0x44
 8011478:	2300      	movs	r3, #0
 801147a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801147c:	2300      	movs	r3, #0
 801147e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8011480:	2300      	movs	r3, #0
 8011482:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8011484:	4b79      	ldr	r3, [pc, #484]	@ (801166c <HAL_RCC_GetSysClockFreq+0x200>)
 8011486:	689b      	ldr	r3, [r3, #8]
 8011488:	f003 030c 	and.w	r3, r3, #12
 801148c:	2b08      	cmp	r3, #8
 801148e:	d00d      	beq.n	80114ac <HAL_RCC_GetSysClockFreq+0x40>
 8011490:	2b08      	cmp	r3, #8
 8011492:	f200 80e1 	bhi.w	8011658 <HAL_RCC_GetSysClockFreq+0x1ec>
 8011496:	2b00      	cmp	r3, #0
 8011498:	d002      	beq.n	80114a0 <HAL_RCC_GetSysClockFreq+0x34>
 801149a:	2b04      	cmp	r3, #4
 801149c:	d003      	beq.n	80114a6 <HAL_RCC_GetSysClockFreq+0x3a>
 801149e:	e0db      	b.n	8011658 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80114a0:	4b73      	ldr	r3, [pc, #460]	@ (8011670 <HAL_RCC_GetSysClockFreq+0x204>)
 80114a2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80114a4:	e0db      	b.n	801165e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80114a6:	4b73      	ldr	r3, [pc, #460]	@ (8011674 <HAL_RCC_GetSysClockFreq+0x208>)
 80114a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80114aa:	e0d8      	b.n	801165e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80114ac:	4b6f      	ldr	r3, [pc, #444]	@ (801166c <HAL_RCC_GetSysClockFreq+0x200>)
 80114ae:	685b      	ldr	r3, [r3, #4]
 80114b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80114b4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80114b6:	4b6d      	ldr	r3, [pc, #436]	@ (801166c <HAL_RCC_GetSysClockFreq+0x200>)
 80114b8:	685b      	ldr	r3, [r3, #4]
 80114ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d063      	beq.n	801158a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80114c2:	4b6a      	ldr	r3, [pc, #424]	@ (801166c <HAL_RCC_GetSysClockFreq+0x200>)
 80114c4:	685b      	ldr	r3, [r3, #4]
 80114c6:	099b      	lsrs	r3, r3, #6
 80114c8:	2200      	movs	r2, #0
 80114ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80114cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80114ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80114d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80114d6:	2300      	movs	r3, #0
 80114d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80114da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80114de:	4622      	mov	r2, r4
 80114e0:	462b      	mov	r3, r5
 80114e2:	f04f 0000 	mov.w	r0, #0
 80114e6:	f04f 0100 	mov.w	r1, #0
 80114ea:	0159      	lsls	r1, r3, #5
 80114ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80114f0:	0150      	lsls	r0, r2, #5
 80114f2:	4602      	mov	r2, r0
 80114f4:	460b      	mov	r3, r1
 80114f6:	4621      	mov	r1, r4
 80114f8:	1a51      	subs	r1, r2, r1
 80114fa:	6139      	str	r1, [r7, #16]
 80114fc:	4629      	mov	r1, r5
 80114fe:	eb63 0301 	sbc.w	r3, r3, r1
 8011502:	617b      	str	r3, [r7, #20]
 8011504:	f04f 0200 	mov.w	r2, #0
 8011508:	f04f 0300 	mov.w	r3, #0
 801150c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8011510:	4659      	mov	r1, fp
 8011512:	018b      	lsls	r3, r1, #6
 8011514:	4651      	mov	r1, sl
 8011516:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 801151a:	4651      	mov	r1, sl
 801151c:	018a      	lsls	r2, r1, #6
 801151e:	4651      	mov	r1, sl
 8011520:	ebb2 0801 	subs.w	r8, r2, r1
 8011524:	4659      	mov	r1, fp
 8011526:	eb63 0901 	sbc.w	r9, r3, r1
 801152a:	f04f 0200 	mov.w	r2, #0
 801152e:	f04f 0300 	mov.w	r3, #0
 8011532:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8011536:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801153a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801153e:	4690      	mov	r8, r2
 8011540:	4699      	mov	r9, r3
 8011542:	4623      	mov	r3, r4
 8011544:	eb18 0303 	adds.w	r3, r8, r3
 8011548:	60bb      	str	r3, [r7, #8]
 801154a:	462b      	mov	r3, r5
 801154c:	eb49 0303 	adc.w	r3, r9, r3
 8011550:	60fb      	str	r3, [r7, #12]
 8011552:	f04f 0200 	mov.w	r2, #0
 8011556:	f04f 0300 	mov.w	r3, #0
 801155a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 801155e:	4629      	mov	r1, r5
 8011560:	024b      	lsls	r3, r1, #9
 8011562:	4621      	mov	r1, r4
 8011564:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8011568:	4621      	mov	r1, r4
 801156a:	024a      	lsls	r2, r1, #9
 801156c:	4610      	mov	r0, r2
 801156e:	4619      	mov	r1, r3
 8011570:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011572:	2200      	movs	r2, #0
 8011574:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011576:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011578:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801157c:	f7ef ff18 	bl	80013b0 <__aeabi_uldivmod>
 8011580:	4602      	mov	r2, r0
 8011582:	460b      	mov	r3, r1
 8011584:	4613      	mov	r3, r2
 8011586:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011588:	e058      	b.n	801163c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801158a:	4b38      	ldr	r3, [pc, #224]	@ (801166c <HAL_RCC_GetSysClockFreq+0x200>)
 801158c:	685b      	ldr	r3, [r3, #4]
 801158e:	099b      	lsrs	r3, r3, #6
 8011590:	2200      	movs	r2, #0
 8011592:	4618      	mov	r0, r3
 8011594:	4611      	mov	r1, r2
 8011596:	f3c0 0308 	ubfx	r3, r0, #0, #9
 801159a:	623b      	str	r3, [r7, #32]
 801159c:	2300      	movs	r3, #0
 801159e:	627b      	str	r3, [r7, #36]	@ 0x24
 80115a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80115a4:	4642      	mov	r2, r8
 80115a6:	464b      	mov	r3, r9
 80115a8:	f04f 0000 	mov.w	r0, #0
 80115ac:	f04f 0100 	mov.w	r1, #0
 80115b0:	0159      	lsls	r1, r3, #5
 80115b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80115b6:	0150      	lsls	r0, r2, #5
 80115b8:	4602      	mov	r2, r0
 80115ba:	460b      	mov	r3, r1
 80115bc:	4641      	mov	r1, r8
 80115be:	ebb2 0a01 	subs.w	sl, r2, r1
 80115c2:	4649      	mov	r1, r9
 80115c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80115c8:	f04f 0200 	mov.w	r2, #0
 80115cc:	f04f 0300 	mov.w	r3, #0
 80115d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80115d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80115d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80115dc:	ebb2 040a 	subs.w	r4, r2, sl
 80115e0:	eb63 050b 	sbc.w	r5, r3, fp
 80115e4:	f04f 0200 	mov.w	r2, #0
 80115e8:	f04f 0300 	mov.w	r3, #0
 80115ec:	00eb      	lsls	r3, r5, #3
 80115ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80115f2:	00e2      	lsls	r2, r4, #3
 80115f4:	4614      	mov	r4, r2
 80115f6:	461d      	mov	r5, r3
 80115f8:	4643      	mov	r3, r8
 80115fa:	18e3      	adds	r3, r4, r3
 80115fc:	603b      	str	r3, [r7, #0]
 80115fe:	464b      	mov	r3, r9
 8011600:	eb45 0303 	adc.w	r3, r5, r3
 8011604:	607b      	str	r3, [r7, #4]
 8011606:	f04f 0200 	mov.w	r2, #0
 801160a:	f04f 0300 	mov.w	r3, #0
 801160e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8011612:	4629      	mov	r1, r5
 8011614:	028b      	lsls	r3, r1, #10
 8011616:	4621      	mov	r1, r4
 8011618:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 801161c:	4621      	mov	r1, r4
 801161e:	028a      	lsls	r2, r1, #10
 8011620:	4610      	mov	r0, r2
 8011622:	4619      	mov	r1, r3
 8011624:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011626:	2200      	movs	r2, #0
 8011628:	61bb      	str	r3, [r7, #24]
 801162a:	61fa      	str	r2, [r7, #28]
 801162c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011630:	f7ef febe 	bl	80013b0 <__aeabi_uldivmod>
 8011634:	4602      	mov	r2, r0
 8011636:	460b      	mov	r3, r1
 8011638:	4613      	mov	r3, r2
 801163a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801163c:	4b0b      	ldr	r3, [pc, #44]	@ (801166c <HAL_RCC_GetSysClockFreq+0x200>)
 801163e:	685b      	ldr	r3, [r3, #4]
 8011640:	0c1b      	lsrs	r3, r3, #16
 8011642:	f003 0303 	and.w	r3, r3, #3
 8011646:	3301      	adds	r3, #1
 8011648:	005b      	lsls	r3, r3, #1
 801164a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 801164c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801164e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011650:	fbb2 f3f3 	udiv	r3, r2, r3
 8011654:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8011656:	e002      	b.n	801165e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8011658:	4b05      	ldr	r3, [pc, #20]	@ (8011670 <HAL_RCC_GetSysClockFreq+0x204>)
 801165a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 801165c:	bf00      	nop
    }
  }
  return sysclockfreq;
 801165e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8011660:	4618      	mov	r0, r3
 8011662:	3750      	adds	r7, #80	@ 0x50
 8011664:	46bd      	mov	sp, r7
 8011666:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801166a:	bf00      	nop
 801166c:	40023800 	.word	0x40023800
 8011670:	00f42400 	.word	0x00f42400
 8011674:	007a1200 	.word	0x007a1200

08011678 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011678:	b480      	push	{r7}
 801167a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801167c:	4b03      	ldr	r3, [pc, #12]	@ (801168c <HAL_RCC_GetHCLKFreq+0x14>)
 801167e:	681b      	ldr	r3, [r3, #0]
}
 8011680:	4618      	mov	r0, r3
 8011682:	46bd      	mov	sp, r7
 8011684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011688:	4770      	bx	lr
 801168a:	bf00      	nop
 801168c:	20001288 	.word	0x20001288

08011690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011690:	b580      	push	{r7, lr}
 8011692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8011694:	f7ff fff0 	bl	8011678 <HAL_RCC_GetHCLKFreq>
 8011698:	4602      	mov	r2, r0
 801169a:	4b05      	ldr	r3, [pc, #20]	@ (80116b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 801169c:	689b      	ldr	r3, [r3, #8]
 801169e:	0a9b      	lsrs	r3, r3, #10
 80116a0:	f003 0307 	and.w	r3, r3, #7
 80116a4:	4903      	ldr	r1, [pc, #12]	@ (80116b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80116a6:	5ccb      	ldrb	r3, [r1, r3]
 80116a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80116ac:	4618      	mov	r0, r3
 80116ae:	bd80      	pop	{r7, pc}
 80116b0:	40023800 	.word	0x40023800
 80116b4:	08017bf0 	.word	0x08017bf0

080116b8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b086      	sub	sp, #24
 80116bc:	af00      	add	r7, sp, #0
 80116be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80116c0:	2300      	movs	r3, #0
 80116c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80116c4:	2300      	movs	r3, #0
 80116c6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	f003 0301 	and.w	r3, r3, #1
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d105      	bne.n	80116e0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d035      	beq.n	801174c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80116e0:	4b62      	ldr	r3, [pc, #392]	@ (801186c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80116e2:	2200      	movs	r2, #0
 80116e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80116e6:	f7fc f96d 	bl	800d9c4 <HAL_GetTick>
 80116ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80116ec:	e008      	b.n	8011700 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80116ee:	f7fc f969 	bl	800d9c4 <HAL_GetTick>
 80116f2:	4602      	mov	r2, r0
 80116f4:	697b      	ldr	r3, [r7, #20]
 80116f6:	1ad3      	subs	r3, r2, r3
 80116f8:	2b02      	cmp	r3, #2
 80116fa:	d901      	bls.n	8011700 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80116fc:	2303      	movs	r3, #3
 80116fe:	e0b0      	b.n	8011862 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8011700:	4b5b      	ldr	r3, [pc, #364]	@ (8011870 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011708:	2b00      	cmp	r3, #0
 801170a:	d1f0      	bne.n	80116ee <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	685b      	ldr	r3, [r3, #4]
 8011710:	019a      	lsls	r2, r3, #6
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	689b      	ldr	r3, [r3, #8]
 8011716:	071b      	lsls	r3, r3, #28
 8011718:	4955      	ldr	r1, [pc, #340]	@ (8011870 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 801171a:	4313      	orrs	r3, r2
 801171c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8011720:	4b52      	ldr	r3, [pc, #328]	@ (801186c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8011722:	2201      	movs	r2, #1
 8011724:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8011726:	f7fc f94d 	bl	800d9c4 <HAL_GetTick>
 801172a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801172c:	e008      	b.n	8011740 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 801172e:	f7fc f949 	bl	800d9c4 <HAL_GetTick>
 8011732:	4602      	mov	r2, r0
 8011734:	697b      	ldr	r3, [r7, #20]
 8011736:	1ad3      	subs	r3, r2, r3
 8011738:	2b02      	cmp	r3, #2
 801173a:	d901      	bls.n	8011740 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801173c:	2303      	movs	r3, #3
 801173e:	e090      	b.n	8011862 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8011740:	4b4b      	ldr	r3, [pc, #300]	@ (8011870 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011748:	2b00      	cmp	r3, #0
 801174a:	d0f0      	beq.n	801172e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	f003 0302 	and.w	r3, r3, #2
 8011754:	2b00      	cmp	r3, #0
 8011756:	f000 8083 	beq.w	8011860 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 801175a:	2300      	movs	r3, #0
 801175c:	60fb      	str	r3, [r7, #12]
 801175e:	4b44      	ldr	r3, [pc, #272]	@ (8011870 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8011760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011762:	4a43      	ldr	r2, [pc, #268]	@ (8011870 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8011764:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011768:	6413      	str	r3, [r2, #64]	@ 0x40
 801176a:	4b41      	ldr	r3, [pc, #260]	@ (8011870 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 801176c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801176e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8011772:	60fb      	str	r3, [r7, #12]
 8011774:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8011776:	4b3f      	ldr	r3, [pc, #252]	@ (8011874 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	4a3e      	ldr	r2, [pc, #248]	@ (8011874 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 801177c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011780:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8011782:	f7fc f91f 	bl	800d9c4 <HAL_GetTick>
 8011786:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8011788:	e008      	b.n	801179c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 801178a:	f7fc f91b 	bl	800d9c4 <HAL_GetTick>
 801178e:	4602      	mov	r2, r0
 8011790:	697b      	ldr	r3, [r7, #20]
 8011792:	1ad3      	subs	r3, r2, r3
 8011794:	2b02      	cmp	r3, #2
 8011796:	d901      	bls.n	801179c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8011798:	2303      	movs	r3, #3
 801179a:	e062      	b.n	8011862 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 801179c:	4b35      	ldr	r3, [pc, #212]	@ (8011874 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d0f0      	beq.n	801178a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80117a8:	4b31      	ldr	r3, [pc, #196]	@ (8011870 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80117aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80117ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80117b0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80117b2:	693b      	ldr	r3, [r7, #16]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d02f      	beq.n	8011818 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	68db      	ldr	r3, [r3, #12]
 80117bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80117c0:	693a      	ldr	r2, [r7, #16]
 80117c2:	429a      	cmp	r2, r3
 80117c4:	d028      	beq.n	8011818 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80117c6:	4b2a      	ldr	r3, [pc, #168]	@ (8011870 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80117c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80117ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80117ce:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80117d0:	4b29      	ldr	r3, [pc, #164]	@ (8011878 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80117d2:	2201      	movs	r2, #1
 80117d4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80117d6:	4b28      	ldr	r3, [pc, #160]	@ (8011878 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80117d8:	2200      	movs	r2, #0
 80117da:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80117dc:	4a24      	ldr	r2, [pc, #144]	@ (8011870 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80117de:	693b      	ldr	r3, [r7, #16]
 80117e0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80117e2:	4b23      	ldr	r3, [pc, #140]	@ (8011870 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80117e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80117e6:	f003 0301 	and.w	r3, r3, #1
 80117ea:	2b01      	cmp	r3, #1
 80117ec:	d114      	bne.n	8011818 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80117ee:	f7fc f8e9 	bl	800d9c4 <HAL_GetTick>
 80117f2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80117f4:	e00a      	b.n	801180c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80117f6:	f7fc f8e5 	bl	800d9c4 <HAL_GetTick>
 80117fa:	4602      	mov	r2, r0
 80117fc:	697b      	ldr	r3, [r7, #20]
 80117fe:	1ad3      	subs	r3, r2, r3
 8011800:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011804:	4293      	cmp	r3, r2
 8011806:	d901      	bls.n	801180c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8011808:	2303      	movs	r3, #3
 801180a:	e02a      	b.n	8011862 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801180c:	4b18      	ldr	r3, [pc, #96]	@ (8011870 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 801180e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011810:	f003 0302 	and.w	r3, r3, #2
 8011814:	2b00      	cmp	r3, #0
 8011816:	d0ee      	beq.n	80117f6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	68db      	ldr	r3, [r3, #12]
 801181c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8011820:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011824:	d10d      	bne.n	8011842 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8011826:	4b12      	ldr	r3, [pc, #72]	@ (8011870 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8011828:	689b      	ldr	r3, [r3, #8]
 801182a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	68db      	ldr	r3, [r3, #12]
 8011832:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8011836:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801183a:	490d      	ldr	r1, [pc, #52]	@ (8011870 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 801183c:	4313      	orrs	r3, r2
 801183e:	608b      	str	r3, [r1, #8]
 8011840:	e005      	b.n	801184e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8011842:	4b0b      	ldr	r3, [pc, #44]	@ (8011870 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8011844:	689b      	ldr	r3, [r3, #8]
 8011846:	4a0a      	ldr	r2, [pc, #40]	@ (8011870 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8011848:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 801184c:	6093      	str	r3, [r2, #8]
 801184e:	4b08      	ldr	r3, [pc, #32]	@ (8011870 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8011850:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	68db      	ldr	r3, [r3, #12]
 8011856:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801185a:	4905      	ldr	r1, [pc, #20]	@ (8011870 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 801185c:	4313      	orrs	r3, r2
 801185e:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8011860:	2300      	movs	r3, #0
}
 8011862:	4618      	mov	r0, r3
 8011864:	3718      	adds	r7, #24
 8011866:	46bd      	mov	sp, r7
 8011868:	bd80      	pop	{r7, pc}
 801186a:	bf00      	nop
 801186c:	42470068 	.word	0x42470068
 8011870:	40023800 	.word	0x40023800
 8011874:	40007000 	.word	0x40007000
 8011878:	42470e40 	.word	0x42470e40

0801187c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 801187c:	b480      	push	{r7}
 801187e:	b087      	sub	sp, #28
 8011880:	af00      	add	r7, sp, #0
 8011882:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8011884:	2300      	movs	r3, #0
 8011886:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8011888:	2300      	movs	r3, #0
 801188a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 801188c:	2300      	movs	r3, #0
 801188e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8011890:	2300      	movs	r3, #0
 8011892:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	2b01      	cmp	r3, #1
 8011898:	d13f      	bne.n	801191a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 801189a:	4b24      	ldr	r3, [pc, #144]	@ (801192c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 801189c:	689b      	ldr	r3, [r3, #8]
 801189e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80118a2:	60fb      	str	r3, [r7, #12]
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d006      	beq.n	80118b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80118b0:	d12f      	bne.n	8011912 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80118b2:	4b1f      	ldr	r3, [pc, #124]	@ (8011930 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80118b4:	617b      	str	r3, [r7, #20]
          break;
 80118b6:	e02f      	b.n	8011918 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80118b8:	4b1c      	ldr	r3, [pc, #112]	@ (801192c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80118ba:	685b      	ldr	r3, [r3, #4]
 80118bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80118c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80118c4:	d108      	bne.n	80118d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80118c6:	4b19      	ldr	r3, [pc, #100]	@ (801192c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80118c8:	685b      	ldr	r3, [r3, #4]
 80118ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80118ce:	4a19      	ldr	r2, [pc, #100]	@ (8011934 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80118d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80118d4:	613b      	str	r3, [r7, #16]
 80118d6:	e007      	b.n	80118e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80118d8:	4b14      	ldr	r3, [pc, #80]	@ (801192c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80118da:	685b      	ldr	r3, [r3, #4]
 80118dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80118e0:	4a15      	ldr	r2, [pc, #84]	@ (8011938 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80118e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80118e6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80118e8:	4b10      	ldr	r3, [pc, #64]	@ (801192c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80118ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80118ee:	099b      	lsrs	r3, r3, #6
 80118f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80118f4:	693b      	ldr	r3, [r7, #16]
 80118f6:	fb02 f303 	mul.w	r3, r2, r3
 80118fa:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80118fc:	4b0b      	ldr	r3, [pc, #44]	@ (801192c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80118fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011902:	0f1b      	lsrs	r3, r3, #28
 8011904:	f003 0307 	and.w	r3, r3, #7
 8011908:	68ba      	ldr	r2, [r7, #8]
 801190a:	fbb2 f3f3 	udiv	r3, r2, r3
 801190e:	617b      	str	r3, [r7, #20]
          break;
 8011910:	e002      	b.n	8011918 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8011912:	2300      	movs	r3, #0
 8011914:	617b      	str	r3, [r7, #20]
          break;
 8011916:	bf00      	nop
        }
      }
      break;
 8011918:	e000      	b.n	801191c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 801191a:	bf00      	nop
    }
  }
  return frequency;
 801191c:	697b      	ldr	r3, [r7, #20]
}
 801191e:	4618      	mov	r0, r3
 8011920:	371c      	adds	r7, #28
 8011922:	46bd      	mov	sp, r7
 8011924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011928:	4770      	bx	lr
 801192a:	bf00      	nop
 801192c:	40023800 	.word	0x40023800
 8011930:	00bb8000 	.word	0x00bb8000
 8011934:	007a1200 	.word	0x007a1200
 8011938:	00f42400 	.word	0x00f42400

0801193c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801193c:	b580      	push	{r7, lr}
 801193e:	b082      	sub	sp, #8
 8011940:	af00      	add	r7, sp, #0
 8011942:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	2b00      	cmp	r3, #0
 8011948:	d101      	bne.n	801194e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801194a:	2301      	movs	r3, #1
 801194c:	e07b      	b.n	8011a46 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011952:	2b00      	cmp	r3, #0
 8011954:	d108      	bne.n	8011968 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	685b      	ldr	r3, [r3, #4]
 801195a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801195e:	d009      	beq.n	8011974 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	2200      	movs	r2, #0
 8011964:	61da      	str	r2, [r3, #28]
 8011966:	e005      	b.n	8011974 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	2200      	movs	r2, #0
 801196c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	2200      	movs	r2, #0
 8011972:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	2200      	movs	r2, #0
 8011978:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8011980:	b2db      	uxtb	r3, r3
 8011982:	2b00      	cmp	r3, #0
 8011984:	d106      	bne.n	8011994 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	2200      	movs	r2, #0
 801198a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801198e:	6878      	ldr	r0, [r7, #4]
 8011990:	f7fb fe08 	bl	800d5a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	2202      	movs	r2, #2
 8011998:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	681a      	ldr	r2, [r3, #0]
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80119aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	685b      	ldr	r3, [r3, #4]
 80119b0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	689b      	ldr	r3, [r3, #8]
 80119b8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80119bc:	431a      	orrs	r2, r3
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	68db      	ldr	r3, [r3, #12]
 80119c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80119c6:	431a      	orrs	r2, r3
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	691b      	ldr	r3, [r3, #16]
 80119cc:	f003 0302 	and.w	r3, r3, #2
 80119d0:	431a      	orrs	r2, r3
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	695b      	ldr	r3, [r3, #20]
 80119d6:	f003 0301 	and.w	r3, r3, #1
 80119da:	431a      	orrs	r2, r3
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	699b      	ldr	r3, [r3, #24]
 80119e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80119e4:	431a      	orrs	r2, r3
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	69db      	ldr	r3, [r3, #28]
 80119ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80119ee:	431a      	orrs	r2, r3
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	6a1b      	ldr	r3, [r3, #32]
 80119f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80119f8:	ea42 0103 	orr.w	r1, r2, r3
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a00:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	430a      	orrs	r2, r1
 8011a0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	699b      	ldr	r3, [r3, #24]
 8011a10:	0c1b      	lsrs	r3, r3, #16
 8011a12:	f003 0104 	and.w	r1, r3, #4
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a1a:	f003 0210 	and.w	r2, r3, #16
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	430a      	orrs	r2, r1
 8011a24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	69da      	ldr	r2, [r3, #28]
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8011a34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	2200      	movs	r2, #0
 8011a3a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	2201      	movs	r2, #1
 8011a40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8011a44:	2300      	movs	r3, #0
}
 8011a46:	4618      	mov	r0, r3
 8011a48:	3708      	adds	r7, #8
 8011a4a:	46bd      	mov	sp, r7
 8011a4c:	bd80      	pop	{r7, pc}

08011a4e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011a4e:	b084      	sub	sp, #16
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b084      	sub	sp, #16
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	6078      	str	r0, [r7, #4]
 8011a58:	f107 001c 	add.w	r0, r7, #28
 8011a5c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011a60:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8011a64:	2b01      	cmp	r3, #1
 8011a66:	d123      	bne.n	8011ab0 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a6c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	68db      	ldr	r3, [r3, #12]
 8011a78:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8011a7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011a80:	687a      	ldr	r2, [r7, #4]
 8011a82:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	68db      	ldr	r3, [r3, #12]
 8011a88:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8011a90:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011a94:	2b01      	cmp	r3, #1
 8011a96:	d105      	bne.n	8011aa4 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	68db      	ldr	r3, [r3, #12]
 8011a9c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011aa4:	6878      	ldr	r0, [r7, #4]
 8011aa6:	f000 f9dc 	bl	8011e62 <USB_CoreReset>
 8011aaa:	4603      	mov	r3, r0
 8011aac:	73fb      	strb	r3, [r7, #15]
 8011aae:	e01b      	b.n	8011ae8 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	68db      	ldr	r3, [r3, #12]
 8011ab4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011abc:	6878      	ldr	r0, [r7, #4]
 8011abe:	f000 f9d0 	bl	8011e62 <USB_CoreReset>
 8011ac2:	4603      	mov	r3, r0
 8011ac4:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8011ac6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d106      	bne.n	8011adc <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011ad2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	639a      	str	r2, [r3, #56]	@ 0x38
 8011ada:	e005      	b.n	8011ae8 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011ae0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8011ae8:	7fbb      	ldrb	r3, [r7, #30]
 8011aea:	2b01      	cmp	r3, #1
 8011aec:	d10b      	bne.n	8011b06 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	689b      	ldr	r3, [r3, #8]
 8011af2:	f043 0206 	orr.w	r2, r3, #6
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	689b      	ldr	r3, [r3, #8]
 8011afe:	f043 0220 	orr.w	r2, r3, #32
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8011b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b08:	4618      	mov	r0, r3
 8011b0a:	3710      	adds	r7, #16
 8011b0c:	46bd      	mov	sp, r7
 8011b0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011b12:	b004      	add	sp, #16
 8011b14:	4770      	bx	lr

08011b16 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011b16:	b480      	push	{r7}
 8011b18:	b083      	sub	sp, #12
 8011b1a:	af00      	add	r7, sp, #0
 8011b1c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	689b      	ldr	r3, [r3, #8]
 8011b22:	f043 0201 	orr.w	r2, r3, #1
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011b2a:	2300      	movs	r3, #0
}
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	370c      	adds	r7, #12
 8011b30:	46bd      	mov	sp, r7
 8011b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b36:	4770      	bx	lr

08011b38 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011b38:	b480      	push	{r7}
 8011b3a:	b083      	sub	sp, #12
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	689b      	ldr	r3, [r3, #8]
 8011b44:	f023 0201 	bic.w	r2, r3, #1
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011b4c:	2300      	movs	r3, #0
}
 8011b4e:	4618      	mov	r0, r3
 8011b50:	370c      	adds	r7, #12
 8011b52:	46bd      	mov	sp, r7
 8011b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b58:	4770      	bx	lr

08011b5a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8011b5a:	b580      	push	{r7, lr}
 8011b5c:	b084      	sub	sp, #16
 8011b5e:	af00      	add	r7, sp, #0
 8011b60:	6078      	str	r0, [r7, #4]
 8011b62:	460b      	mov	r3, r1
 8011b64:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8011b66:	2300      	movs	r3, #0
 8011b68:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	68db      	ldr	r3, [r3, #12]
 8011b6e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011b76:	78fb      	ldrb	r3, [r7, #3]
 8011b78:	2b01      	cmp	r3, #1
 8011b7a:	d115      	bne.n	8011ba8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	68db      	ldr	r3, [r3, #12]
 8011b80:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8011b88:	200a      	movs	r0, #10
 8011b8a:	f7fb ff27 	bl	800d9dc <HAL_Delay>
      ms += 10U;
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	330a      	adds	r3, #10
 8011b92:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8011b94:	6878      	ldr	r0, [r7, #4]
 8011b96:	f000 f956 	bl	8011e46 <USB_GetMode>
 8011b9a:	4603      	mov	r3, r0
 8011b9c:	2b01      	cmp	r3, #1
 8011b9e:	d01e      	beq.n	8011bde <USB_SetCurrentMode+0x84>
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	2bc7      	cmp	r3, #199	@ 0xc7
 8011ba4:	d9f0      	bls.n	8011b88 <USB_SetCurrentMode+0x2e>
 8011ba6:	e01a      	b.n	8011bde <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8011ba8:	78fb      	ldrb	r3, [r7, #3]
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d115      	bne.n	8011bda <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	68db      	ldr	r3, [r3, #12]
 8011bb2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8011bba:	200a      	movs	r0, #10
 8011bbc:	f7fb ff0e 	bl	800d9dc <HAL_Delay>
      ms += 10U;
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	330a      	adds	r3, #10
 8011bc4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8011bc6:	6878      	ldr	r0, [r7, #4]
 8011bc8:	f000 f93d 	bl	8011e46 <USB_GetMode>
 8011bcc:	4603      	mov	r3, r0
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d005      	beq.n	8011bde <USB_SetCurrentMode+0x84>
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	2bc7      	cmp	r3, #199	@ 0xc7
 8011bd6:	d9f0      	bls.n	8011bba <USB_SetCurrentMode+0x60>
 8011bd8:	e001      	b.n	8011bde <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8011bda:	2301      	movs	r3, #1
 8011bdc:	e005      	b.n	8011bea <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	2bc8      	cmp	r3, #200	@ 0xc8
 8011be2:	d101      	bne.n	8011be8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8011be4:	2301      	movs	r3, #1
 8011be6:	e000      	b.n	8011bea <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8011be8:	2300      	movs	r3, #0
}
 8011bea:	4618      	mov	r0, r3
 8011bec:	3710      	adds	r7, #16
 8011bee:	46bd      	mov	sp, r7
 8011bf0:	bd80      	pop	{r7, pc}

08011bf2 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011bf2:	b480      	push	{r7}
 8011bf4:	b085      	sub	sp, #20
 8011bf6:	af00      	add	r7, sp, #0
 8011bf8:	6078      	str	r0, [r7, #4]
 8011bfa:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	3301      	adds	r3, #1
 8011c04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011c0c:	d901      	bls.n	8011c12 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8011c0e:	2303      	movs	r3, #3
 8011c10:	e01b      	b.n	8011c4a <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	691b      	ldr	r3, [r3, #16]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	daf2      	bge.n	8011c00 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8011c1a:	2300      	movs	r3, #0
 8011c1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011c1e:	683b      	ldr	r3, [r7, #0]
 8011c20:	019b      	lsls	r3, r3, #6
 8011c22:	f043 0220 	orr.w	r2, r3, #32
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	3301      	adds	r3, #1
 8011c2e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011c36:	d901      	bls.n	8011c3c <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8011c38:	2303      	movs	r3, #3
 8011c3a:	e006      	b.n	8011c4a <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	691b      	ldr	r3, [r3, #16]
 8011c40:	f003 0320 	and.w	r3, r3, #32
 8011c44:	2b20      	cmp	r3, #32
 8011c46:	d0f0      	beq.n	8011c2a <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8011c48:	2300      	movs	r3, #0
}
 8011c4a:	4618      	mov	r0, r3
 8011c4c:	3714      	adds	r7, #20
 8011c4e:	46bd      	mov	sp, r7
 8011c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c54:	4770      	bx	lr

08011c56 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011c56:	b480      	push	{r7}
 8011c58:	b085      	sub	sp, #20
 8011c5a:	af00      	add	r7, sp, #0
 8011c5c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011c5e:	2300      	movs	r3, #0
 8011c60:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	3301      	adds	r3, #1
 8011c66:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011c6e:	d901      	bls.n	8011c74 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8011c70:	2303      	movs	r3, #3
 8011c72:	e018      	b.n	8011ca6 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	691b      	ldr	r3, [r3, #16]
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	daf2      	bge.n	8011c62 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	2210      	movs	r2, #16
 8011c84:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	3301      	adds	r3, #1
 8011c8a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011c92:	d901      	bls.n	8011c98 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8011c94:	2303      	movs	r3, #3
 8011c96:	e006      	b.n	8011ca6 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	691b      	ldr	r3, [r3, #16]
 8011c9c:	f003 0310 	and.w	r3, r3, #16
 8011ca0:	2b10      	cmp	r3, #16
 8011ca2:	d0f0      	beq.n	8011c86 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8011ca4:	2300      	movs	r3, #0
}
 8011ca6:	4618      	mov	r0, r3
 8011ca8:	3714      	adds	r7, #20
 8011caa:	46bd      	mov	sp, r7
 8011cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb0:	4770      	bx	lr

08011cb2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8011cb2:	b480      	push	{r7}
 8011cb4:	b089      	sub	sp, #36	@ 0x24
 8011cb6:	af00      	add	r7, sp, #0
 8011cb8:	60f8      	str	r0, [r7, #12]
 8011cba:	60b9      	str	r1, [r7, #8]
 8011cbc:	4611      	mov	r1, r2
 8011cbe:	461a      	mov	r2, r3
 8011cc0:	460b      	mov	r3, r1
 8011cc2:	71fb      	strb	r3, [r7, #7]
 8011cc4:	4613      	mov	r3, r2
 8011cc6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8011ccc:	68bb      	ldr	r3, [r7, #8]
 8011cce:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8011cd0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d123      	bne.n	8011d20 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8011cd8:	88bb      	ldrh	r3, [r7, #4]
 8011cda:	3303      	adds	r3, #3
 8011cdc:	089b      	lsrs	r3, r3, #2
 8011cde:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8011ce0:	2300      	movs	r3, #0
 8011ce2:	61bb      	str	r3, [r7, #24]
 8011ce4:	e018      	b.n	8011d18 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8011ce6:	79fb      	ldrb	r3, [r7, #7]
 8011ce8:	031a      	lsls	r2, r3, #12
 8011cea:	697b      	ldr	r3, [r7, #20]
 8011cec:	4413      	add	r3, r2
 8011cee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011cf2:	461a      	mov	r2, r3
 8011cf4:	69fb      	ldr	r3, [r7, #28]
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	6013      	str	r3, [r2, #0]
      pSrc++;
 8011cfa:	69fb      	ldr	r3, [r7, #28]
 8011cfc:	3301      	adds	r3, #1
 8011cfe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011d00:	69fb      	ldr	r3, [r7, #28]
 8011d02:	3301      	adds	r3, #1
 8011d04:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011d06:	69fb      	ldr	r3, [r7, #28]
 8011d08:	3301      	adds	r3, #1
 8011d0a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011d0c:	69fb      	ldr	r3, [r7, #28]
 8011d0e:	3301      	adds	r3, #1
 8011d10:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8011d12:	69bb      	ldr	r3, [r7, #24]
 8011d14:	3301      	adds	r3, #1
 8011d16:	61bb      	str	r3, [r7, #24]
 8011d18:	69ba      	ldr	r2, [r7, #24]
 8011d1a:	693b      	ldr	r3, [r7, #16]
 8011d1c:	429a      	cmp	r2, r3
 8011d1e:	d3e2      	bcc.n	8011ce6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8011d20:	2300      	movs	r3, #0
}
 8011d22:	4618      	mov	r0, r3
 8011d24:	3724      	adds	r7, #36	@ 0x24
 8011d26:	46bd      	mov	sp, r7
 8011d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d2c:	4770      	bx	lr

08011d2e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011d2e:	b480      	push	{r7}
 8011d30:	b08b      	sub	sp, #44	@ 0x2c
 8011d32:	af00      	add	r7, sp, #0
 8011d34:	60f8      	str	r0, [r7, #12]
 8011d36:	60b9      	str	r1, [r7, #8]
 8011d38:	4613      	mov	r3, r2
 8011d3a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8011d40:	68bb      	ldr	r3, [r7, #8]
 8011d42:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8011d44:	88fb      	ldrh	r3, [r7, #6]
 8011d46:	089b      	lsrs	r3, r3, #2
 8011d48:	b29b      	uxth	r3, r3
 8011d4a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8011d4c:	88fb      	ldrh	r3, [r7, #6]
 8011d4e:	f003 0303 	and.w	r3, r3, #3
 8011d52:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8011d54:	2300      	movs	r3, #0
 8011d56:	623b      	str	r3, [r7, #32]
 8011d58:	e014      	b.n	8011d84 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8011d5a:	69bb      	ldr	r3, [r7, #24]
 8011d5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011d60:	681a      	ldr	r2, [r3, #0]
 8011d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d64:	601a      	str	r2, [r3, #0]
    pDest++;
 8011d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d68:	3301      	adds	r3, #1
 8011d6a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d6e:	3301      	adds	r3, #1
 8011d70:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d74:	3301      	adds	r3, #1
 8011d76:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d7a:	3301      	adds	r3, #1
 8011d7c:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8011d7e:	6a3b      	ldr	r3, [r7, #32]
 8011d80:	3301      	adds	r3, #1
 8011d82:	623b      	str	r3, [r7, #32]
 8011d84:	6a3a      	ldr	r2, [r7, #32]
 8011d86:	697b      	ldr	r3, [r7, #20]
 8011d88:	429a      	cmp	r2, r3
 8011d8a:	d3e6      	bcc.n	8011d5a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8011d8c:	8bfb      	ldrh	r3, [r7, #30]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d01e      	beq.n	8011dd0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8011d92:	2300      	movs	r3, #0
 8011d94:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8011d96:	69bb      	ldr	r3, [r7, #24]
 8011d98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011d9c:	461a      	mov	r2, r3
 8011d9e:	f107 0310 	add.w	r3, r7, #16
 8011da2:	6812      	ldr	r2, [r2, #0]
 8011da4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8011da6:	693a      	ldr	r2, [r7, #16]
 8011da8:	6a3b      	ldr	r3, [r7, #32]
 8011daa:	b2db      	uxtb	r3, r3
 8011dac:	00db      	lsls	r3, r3, #3
 8011dae:	fa22 f303 	lsr.w	r3, r2, r3
 8011db2:	b2da      	uxtb	r2, r3
 8011db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011db6:	701a      	strb	r2, [r3, #0]
      i++;
 8011db8:	6a3b      	ldr	r3, [r7, #32]
 8011dba:	3301      	adds	r3, #1
 8011dbc:	623b      	str	r3, [r7, #32]
      pDest++;
 8011dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dc0:	3301      	adds	r3, #1
 8011dc2:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8011dc4:	8bfb      	ldrh	r3, [r7, #30]
 8011dc6:	3b01      	subs	r3, #1
 8011dc8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8011dca:	8bfb      	ldrh	r3, [r7, #30]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d1ea      	bne.n	8011da6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8011dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	372c      	adds	r7, #44	@ 0x2c
 8011dd6:	46bd      	mov	sp, r7
 8011dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ddc:	4770      	bx	lr

08011dde <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8011dde:	b480      	push	{r7}
 8011de0:	b085      	sub	sp, #20
 8011de2:	af00      	add	r7, sp, #0
 8011de4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	695b      	ldr	r3, [r3, #20]
 8011dea:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	699b      	ldr	r3, [r3, #24]
 8011df0:	68fa      	ldr	r2, [r7, #12]
 8011df2:	4013      	ands	r3, r2
 8011df4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011df6:	68fb      	ldr	r3, [r7, #12]
}
 8011df8:	4618      	mov	r0, r3
 8011dfa:	3714      	adds	r7, #20
 8011dfc:	46bd      	mov	sp, r7
 8011dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e02:	4770      	bx	lr

08011e04 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8011e04:	b480      	push	{r7}
 8011e06:	b085      	sub	sp, #20
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
 8011e0c:	460b      	mov	r3, r1
 8011e0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8011e14:	78fb      	ldrb	r3, [r7, #3]
 8011e16:	015a      	lsls	r2, r3, #5
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	4413      	add	r3, r2
 8011e1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011e20:	689b      	ldr	r3, [r3, #8]
 8011e22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8011e24:	78fb      	ldrb	r3, [r7, #3]
 8011e26:	015a      	lsls	r2, r3, #5
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	4413      	add	r3, r2
 8011e2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011e30:	68db      	ldr	r3, [r3, #12]
 8011e32:	68ba      	ldr	r2, [r7, #8]
 8011e34:	4013      	ands	r3, r2
 8011e36:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011e38:	68bb      	ldr	r3, [r7, #8]
}
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	3714      	adds	r7, #20
 8011e3e:	46bd      	mov	sp, r7
 8011e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e44:	4770      	bx	lr

08011e46 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8011e46:	b480      	push	{r7}
 8011e48:	b083      	sub	sp, #12
 8011e4a:	af00      	add	r7, sp, #0
 8011e4c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	695b      	ldr	r3, [r3, #20]
 8011e52:	f003 0301 	and.w	r3, r3, #1
}
 8011e56:	4618      	mov	r0, r3
 8011e58:	370c      	adds	r7, #12
 8011e5a:	46bd      	mov	sp, r7
 8011e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e60:	4770      	bx	lr

08011e62 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011e62:	b480      	push	{r7}
 8011e64:	b085      	sub	sp, #20
 8011e66:	af00      	add	r7, sp, #0
 8011e68:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	3301      	adds	r3, #1
 8011e72:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011e7a:	d901      	bls.n	8011e80 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8011e7c:	2303      	movs	r3, #3
 8011e7e:	e01b      	b.n	8011eb8 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	691b      	ldr	r3, [r3, #16]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	daf2      	bge.n	8011e6e <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8011e88:	2300      	movs	r3, #0
 8011e8a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	691b      	ldr	r3, [r3, #16]
 8011e90:	f043 0201 	orr.w	r2, r3, #1
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	3301      	adds	r3, #1
 8011e9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011ea4:	d901      	bls.n	8011eaa <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8011ea6:	2303      	movs	r3, #3
 8011ea8:	e006      	b.n	8011eb8 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	691b      	ldr	r3, [r3, #16]
 8011eae:	f003 0301 	and.w	r3, r3, #1
 8011eb2:	2b01      	cmp	r3, #1
 8011eb4:	d0f0      	beq.n	8011e98 <USB_CoreReset+0x36>

  return HAL_OK;
 8011eb6:	2300      	movs	r3, #0
}
 8011eb8:	4618      	mov	r0, r3
 8011eba:	3714      	adds	r7, #20
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec2:	4770      	bx	lr

08011ec4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011ec4:	b084      	sub	sp, #16
 8011ec6:	b580      	push	{r7, lr}
 8011ec8:	b086      	sub	sp, #24
 8011eca:	af00      	add	r7, sp, #0
 8011ecc:	6078      	str	r0, [r7, #4]
 8011ece:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8011ed2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8011ed6:	2300      	movs	r3, #0
 8011ed8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011ee4:	461a      	mov	r2, r3
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011eee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011efa:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f06:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	68db      	ldr	r3, [r3, #12]
 8011f12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d119      	bne.n	8011f4e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8011f1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011f1e:	2b01      	cmp	r3, #1
 8011f20:	d10a      	bne.n	8011f38 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	68fa      	ldr	r2, [r7, #12]
 8011f2c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8011f30:	f043 0304 	orr.w	r3, r3, #4
 8011f34:	6013      	str	r3, [r2, #0]
 8011f36:	e014      	b.n	8011f62 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	68fa      	ldr	r2, [r7, #12]
 8011f42:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8011f46:	f023 0304 	bic.w	r3, r3, #4
 8011f4a:	6013      	str	r3, [r2, #0]
 8011f4c:	e009      	b.n	8011f62 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	68fa      	ldr	r2, [r7, #12]
 8011f58:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8011f5c:	f023 0304 	bic.w	r3, r3, #4
 8011f60:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011f62:	2110      	movs	r1, #16
 8011f64:	6878      	ldr	r0, [r7, #4]
 8011f66:	f7ff fe44 	bl	8011bf2 <USB_FlushTxFifo>
 8011f6a:	4603      	mov	r3, r0
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d001      	beq.n	8011f74 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8011f70:	2301      	movs	r3, #1
 8011f72:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011f74:	6878      	ldr	r0, [r7, #4]
 8011f76:	f7ff fe6e 	bl	8011c56 <USB_FlushRxFifo>
 8011f7a:	4603      	mov	r3, r0
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d001      	beq.n	8011f84 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8011f80:	2301      	movs	r3, #1
 8011f82:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8011f84:	2300      	movs	r3, #0
 8011f86:	613b      	str	r3, [r7, #16]
 8011f88:	e015      	b.n	8011fb6 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8011f8a:	693b      	ldr	r3, [r7, #16]
 8011f8c:	015a      	lsls	r2, r3, #5
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	4413      	add	r3, r2
 8011f92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011f96:	461a      	mov	r2, r3
 8011f98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011f9c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8011f9e:	693b      	ldr	r3, [r7, #16]
 8011fa0:	015a      	lsls	r2, r3, #5
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	4413      	add	r3, r2
 8011fa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011faa:	461a      	mov	r2, r3
 8011fac:	2300      	movs	r3, #0
 8011fae:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8011fb0:	693b      	ldr	r3, [r7, #16]
 8011fb2:	3301      	adds	r3, #1
 8011fb4:	613b      	str	r3, [r7, #16]
 8011fb6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8011fba:	461a      	mov	r2, r3
 8011fbc:	693b      	ldr	r3, [r7, #16]
 8011fbe:	4293      	cmp	r3, r2
 8011fc0:	d3e3      	bcc.n	8011f8a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	2200      	movs	r2, #0
 8011fc6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011fce:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	4a18      	ldr	r2, [pc, #96]	@ (8012034 <USB_HostInit+0x170>)
 8011fd4:	4293      	cmp	r3, r2
 8011fd6:	d10b      	bne.n	8011ff0 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011fde:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	4a15      	ldr	r2, [pc, #84]	@ (8012038 <USB_HostInit+0x174>)
 8011fe4:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	4a14      	ldr	r2, [pc, #80]	@ (801203c <USB_HostInit+0x178>)
 8011fea:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8011fee:	e009      	b.n	8012004 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	2280      	movs	r2, #128	@ 0x80
 8011ff4:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	4a11      	ldr	r2, [pc, #68]	@ (8012040 <USB_HostInit+0x17c>)
 8011ffa:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	4a11      	ldr	r2, [pc, #68]	@ (8012044 <USB_HostInit+0x180>)
 8012000:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8012004:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012008:	2b00      	cmp	r3, #0
 801200a:	d105      	bne.n	8012018 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	699b      	ldr	r3, [r3, #24]
 8012010:	f043 0210 	orr.w	r2, r3, #16
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	699a      	ldr	r2, [r3, #24]
 801201c:	4b0a      	ldr	r3, [pc, #40]	@ (8012048 <USB_HostInit+0x184>)
 801201e:	4313      	orrs	r3, r2
 8012020:	687a      	ldr	r2, [r7, #4]
 8012022:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8012024:	7dfb      	ldrb	r3, [r7, #23]
}
 8012026:	4618      	mov	r0, r3
 8012028:	3718      	adds	r7, #24
 801202a:	46bd      	mov	sp, r7
 801202c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012030:	b004      	add	sp, #16
 8012032:	4770      	bx	lr
 8012034:	40040000 	.word	0x40040000
 8012038:	01000200 	.word	0x01000200
 801203c:	00e00300 	.word	0x00e00300
 8012040:	00600080 	.word	0x00600080
 8012044:	004000e0 	.word	0x004000e0
 8012048:	a3200008 	.word	0xa3200008

0801204c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 801204c:	b480      	push	{r7}
 801204e:	b085      	sub	sp, #20
 8012050:	af00      	add	r7, sp, #0
 8012052:	6078      	str	r0, [r7, #4]
 8012054:	460b      	mov	r3, r1
 8012056:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	68fa      	ldr	r2, [r7, #12]
 8012066:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801206a:	f023 0303 	bic.w	r3, r3, #3
 801206e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8012076:	681a      	ldr	r2, [r3, #0]
 8012078:	78fb      	ldrb	r3, [r7, #3]
 801207a:	f003 0303 	and.w	r3, r3, #3
 801207e:	68f9      	ldr	r1, [r7, #12]
 8012080:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8012084:	4313      	orrs	r3, r2
 8012086:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8012088:	78fb      	ldrb	r3, [r7, #3]
 801208a:	2b01      	cmp	r3, #1
 801208c:	d107      	bne.n	801209e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8012094:	461a      	mov	r2, r3
 8012096:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 801209a:	6053      	str	r3, [r2, #4]
 801209c:	e00c      	b.n	80120b8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 801209e:	78fb      	ldrb	r3, [r7, #3]
 80120a0:	2b02      	cmp	r3, #2
 80120a2:	d107      	bne.n	80120b4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80120aa:	461a      	mov	r2, r3
 80120ac:	f241 7370 	movw	r3, #6000	@ 0x1770
 80120b0:	6053      	str	r3, [r2, #4]
 80120b2:	e001      	b.n	80120b8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80120b4:	2301      	movs	r3, #1
 80120b6:	e000      	b.n	80120ba <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80120b8:	2300      	movs	r3, #0
}
 80120ba:	4618      	mov	r0, r3
 80120bc:	3714      	adds	r7, #20
 80120be:	46bd      	mov	sp, r7
 80120c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c4:	4770      	bx	lr

080120c6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80120c6:	b580      	push	{r7, lr}
 80120c8:	b084      	sub	sp, #16
 80120ca:	af00      	add	r7, sp, #0
 80120cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80120d2:	2300      	movs	r3, #0
 80120d4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80120e0:	68bb      	ldr	r3, [r7, #8]
 80120e2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80120e6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80120e8:	68bb      	ldr	r3, [r7, #8]
 80120ea:	68fa      	ldr	r2, [r7, #12]
 80120ec:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80120f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80120f4:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80120f6:	2064      	movs	r0, #100	@ 0x64
 80120f8:	f7fb fc70 	bl	800d9dc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80120fc:	68bb      	ldr	r3, [r7, #8]
 80120fe:	68fa      	ldr	r2, [r7, #12]
 8012100:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8012104:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012108:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 801210a:	200a      	movs	r0, #10
 801210c:	f7fb fc66 	bl	800d9dc <HAL_Delay>

  return HAL_OK;
 8012110:	2300      	movs	r3, #0
}
 8012112:	4618      	mov	r0, r3
 8012114:	3710      	adds	r7, #16
 8012116:	46bd      	mov	sp, r7
 8012118:	bd80      	pop	{r7, pc}

0801211a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 801211a:	b480      	push	{r7}
 801211c:	b085      	sub	sp, #20
 801211e:	af00      	add	r7, sp, #0
 8012120:	6078      	str	r0, [r7, #4]
 8012122:	460b      	mov	r3, r1
 8012124:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 801212a:	2300      	movs	r3, #0
 801212c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8012138:	68bb      	ldr	r3, [r7, #8]
 801213a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 801213e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8012140:	68bb      	ldr	r3, [r7, #8]
 8012142:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8012146:	2b00      	cmp	r3, #0
 8012148:	d109      	bne.n	801215e <USB_DriveVbus+0x44>
 801214a:	78fb      	ldrb	r3, [r7, #3]
 801214c:	2b01      	cmp	r3, #1
 801214e:	d106      	bne.n	801215e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8012150:	68bb      	ldr	r3, [r7, #8]
 8012152:	68fa      	ldr	r2, [r7, #12]
 8012154:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8012158:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801215c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 801215e:	68bb      	ldr	r3, [r7, #8]
 8012160:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8012164:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012168:	d109      	bne.n	801217e <USB_DriveVbus+0x64>
 801216a:	78fb      	ldrb	r3, [r7, #3]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d106      	bne.n	801217e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8012170:	68bb      	ldr	r3, [r7, #8]
 8012172:	68fa      	ldr	r2, [r7, #12]
 8012174:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8012178:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801217c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 801217e:	2300      	movs	r3, #0
}
 8012180:	4618      	mov	r0, r3
 8012182:	3714      	adds	r7, #20
 8012184:	46bd      	mov	sp, r7
 8012186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801218a:	4770      	bx	lr

0801218c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 801218c:	b480      	push	{r7}
 801218e:	b085      	sub	sp, #20
 8012190:	af00      	add	r7, sp, #0
 8012192:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8012198:	2300      	movs	r3, #0
 801219a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80121a6:	68bb      	ldr	r3, [r7, #8]
 80121a8:	0c5b      	lsrs	r3, r3, #17
 80121aa:	f003 0303 	and.w	r3, r3, #3
}
 80121ae:	4618      	mov	r0, r3
 80121b0:	3714      	adds	r7, #20
 80121b2:	46bd      	mov	sp, r7
 80121b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b8:	4770      	bx	lr

080121ba <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80121ba:	b480      	push	{r7}
 80121bc:	b085      	sub	sp, #20
 80121be:	af00      	add	r7, sp, #0
 80121c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80121cc:	689b      	ldr	r3, [r3, #8]
 80121ce:	b29b      	uxth	r3, r3
}
 80121d0:	4618      	mov	r0, r3
 80121d2:	3714      	adds	r7, #20
 80121d4:	46bd      	mov	sp, r7
 80121d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121da:	4770      	bx	lr

080121dc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80121dc:	b580      	push	{r7, lr}
 80121de:	b088      	sub	sp, #32
 80121e0:	af00      	add	r7, sp, #0
 80121e2:	6078      	str	r0, [r7, #4]
 80121e4:	4608      	mov	r0, r1
 80121e6:	4611      	mov	r1, r2
 80121e8:	461a      	mov	r2, r3
 80121ea:	4603      	mov	r3, r0
 80121ec:	70fb      	strb	r3, [r7, #3]
 80121ee:	460b      	mov	r3, r1
 80121f0:	70bb      	strb	r3, [r7, #2]
 80121f2:	4613      	mov	r3, r2
 80121f4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80121f6:	2300      	movs	r3, #0
 80121f8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80121fe:	78fb      	ldrb	r3, [r7, #3]
 8012200:	015a      	lsls	r2, r3, #5
 8012202:	693b      	ldr	r3, [r7, #16]
 8012204:	4413      	add	r3, r2
 8012206:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801220a:	461a      	mov	r2, r3
 801220c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012210:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8012212:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8012216:	2b03      	cmp	r3, #3
 8012218:	d87c      	bhi.n	8012314 <USB_HC_Init+0x138>
 801221a:	a201      	add	r2, pc, #4	@ (adr r2, 8012220 <USB_HC_Init+0x44>)
 801221c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012220:	08012231 	.word	0x08012231
 8012224:	080122d7 	.word	0x080122d7
 8012228:	08012231 	.word	0x08012231
 801222c:	08012299 	.word	0x08012299
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8012230:	78fb      	ldrb	r3, [r7, #3]
 8012232:	015a      	lsls	r2, r3, #5
 8012234:	693b      	ldr	r3, [r7, #16]
 8012236:	4413      	add	r3, r2
 8012238:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801223c:	461a      	mov	r2, r3
 801223e:	f240 439d 	movw	r3, #1181	@ 0x49d
 8012242:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8012244:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8012248:	2b00      	cmp	r3, #0
 801224a:	da10      	bge.n	801226e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 801224c:	78fb      	ldrb	r3, [r7, #3]
 801224e:	015a      	lsls	r2, r3, #5
 8012250:	693b      	ldr	r3, [r7, #16]
 8012252:	4413      	add	r3, r2
 8012254:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012258:	68db      	ldr	r3, [r3, #12]
 801225a:	78fa      	ldrb	r2, [r7, #3]
 801225c:	0151      	lsls	r1, r2, #5
 801225e:	693a      	ldr	r2, [r7, #16]
 8012260:	440a      	add	r2, r1
 8012262:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012266:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801226a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 801226c:	e055      	b.n	801231a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	4a6f      	ldr	r2, [pc, #444]	@ (8012430 <USB_HC_Init+0x254>)
 8012272:	4293      	cmp	r3, r2
 8012274:	d151      	bne.n	801231a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8012276:	78fb      	ldrb	r3, [r7, #3]
 8012278:	015a      	lsls	r2, r3, #5
 801227a:	693b      	ldr	r3, [r7, #16]
 801227c:	4413      	add	r3, r2
 801227e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012282:	68db      	ldr	r3, [r3, #12]
 8012284:	78fa      	ldrb	r2, [r7, #3]
 8012286:	0151      	lsls	r1, r2, #5
 8012288:	693a      	ldr	r2, [r7, #16]
 801228a:	440a      	add	r2, r1
 801228c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012290:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8012294:	60d3      	str	r3, [r2, #12]
      break;
 8012296:	e040      	b.n	801231a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8012298:	78fb      	ldrb	r3, [r7, #3]
 801229a:	015a      	lsls	r2, r3, #5
 801229c:	693b      	ldr	r3, [r7, #16]
 801229e:	4413      	add	r3, r2
 80122a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80122a4:	461a      	mov	r2, r3
 80122a6:	f240 639d 	movw	r3, #1693	@ 0x69d
 80122aa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80122ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	da34      	bge.n	801231e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80122b4:	78fb      	ldrb	r3, [r7, #3]
 80122b6:	015a      	lsls	r2, r3, #5
 80122b8:	693b      	ldr	r3, [r7, #16]
 80122ba:	4413      	add	r3, r2
 80122bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80122c0:	68db      	ldr	r3, [r3, #12]
 80122c2:	78fa      	ldrb	r2, [r7, #3]
 80122c4:	0151      	lsls	r1, r2, #5
 80122c6:	693a      	ldr	r2, [r7, #16]
 80122c8:	440a      	add	r2, r1
 80122ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80122ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80122d2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80122d4:	e023      	b.n	801231e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80122d6:	78fb      	ldrb	r3, [r7, #3]
 80122d8:	015a      	lsls	r2, r3, #5
 80122da:	693b      	ldr	r3, [r7, #16]
 80122dc:	4413      	add	r3, r2
 80122de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80122e2:	461a      	mov	r2, r3
 80122e4:	f240 2325 	movw	r3, #549	@ 0x225
 80122e8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80122ea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	da17      	bge.n	8012322 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80122f2:	78fb      	ldrb	r3, [r7, #3]
 80122f4:	015a      	lsls	r2, r3, #5
 80122f6:	693b      	ldr	r3, [r7, #16]
 80122f8:	4413      	add	r3, r2
 80122fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80122fe:	68db      	ldr	r3, [r3, #12]
 8012300:	78fa      	ldrb	r2, [r7, #3]
 8012302:	0151      	lsls	r1, r2, #5
 8012304:	693a      	ldr	r2, [r7, #16]
 8012306:	440a      	add	r2, r1
 8012308:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801230c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8012310:	60d3      	str	r3, [r2, #12]
      }
      break;
 8012312:	e006      	b.n	8012322 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8012314:	2301      	movs	r3, #1
 8012316:	77fb      	strb	r3, [r7, #31]
      break;
 8012318:	e004      	b.n	8012324 <USB_HC_Init+0x148>
      break;
 801231a:	bf00      	nop
 801231c:	e002      	b.n	8012324 <USB_HC_Init+0x148>
      break;
 801231e:	bf00      	nop
 8012320:	e000      	b.n	8012324 <USB_HC_Init+0x148>
      break;
 8012322:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8012324:	78fb      	ldrb	r3, [r7, #3]
 8012326:	015a      	lsls	r2, r3, #5
 8012328:	693b      	ldr	r3, [r7, #16]
 801232a:	4413      	add	r3, r2
 801232c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012330:	461a      	mov	r2, r3
 8012332:	2300      	movs	r3, #0
 8012334:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8012336:	78fb      	ldrb	r3, [r7, #3]
 8012338:	015a      	lsls	r2, r3, #5
 801233a:	693b      	ldr	r3, [r7, #16]
 801233c:	4413      	add	r3, r2
 801233e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012342:	68db      	ldr	r3, [r3, #12]
 8012344:	78fa      	ldrb	r2, [r7, #3]
 8012346:	0151      	lsls	r1, r2, #5
 8012348:	693a      	ldr	r2, [r7, #16]
 801234a:	440a      	add	r2, r1
 801234c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012350:	f043 0302 	orr.w	r3, r3, #2
 8012354:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8012356:	693b      	ldr	r3, [r7, #16]
 8012358:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801235c:	699a      	ldr	r2, [r3, #24]
 801235e:	78fb      	ldrb	r3, [r7, #3]
 8012360:	f003 030f 	and.w	r3, r3, #15
 8012364:	2101      	movs	r1, #1
 8012366:	fa01 f303 	lsl.w	r3, r1, r3
 801236a:	6939      	ldr	r1, [r7, #16]
 801236c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8012370:	4313      	orrs	r3, r2
 8012372:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	699b      	ldr	r3, [r3, #24]
 8012378:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8012380:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8012384:	2b00      	cmp	r3, #0
 8012386:	da03      	bge.n	8012390 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8012388:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801238c:	61bb      	str	r3, [r7, #24]
 801238e:	e001      	b.n	8012394 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8012390:	2300      	movs	r3, #0
 8012392:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8012394:	6878      	ldr	r0, [r7, #4]
 8012396:	f7ff fef9 	bl	801218c <USB_GetHostSpeed>
 801239a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 801239c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80123a0:	2b02      	cmp	r3, #2
 80123a2:	d106      	bne.n	80123b2 <USB_HC_Init+0x1d6>
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	2b02      	cmp	r3, #2
 80123a8:	d003      	beq.n	80123b2 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80123aa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80123ae:	617b      	str	r3, [r7, #20]
 80123b0:	e001      	b.n	80123b6 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80123b2:	2300      	movs	r3, #0
 80123b4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80123b6:	787b      	ldrb	r3, [r7, #1]
 80123b8:	059b      	lsls	r3, r3, #22
 80123ba:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80123be:	78bb      	ldrb	r3, [r7, #2]
 80123c0:	02db      	lsls	r3, r3, #11
 80123c2:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80123c6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80123c8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80123cc:	049b      	lsls	r3, r3, #18
 80123ce:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80123d2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80123d4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80123d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80123da:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80123dc:	69bb      	ldr	r3, [r7, #24]
 80123de:	431a      	orrs	r2, r3
 80123e0:	697b      	ldr	r3, [r7, #20]
 80123e2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80123e4:	78fa      	ldrb	r2, [r7, #3]
 80123e6:	0151      	lsls	r1, r2, #5
 80123e8:	693a      	ldr	r2, [r7, #16]
 80123ea:	440a      	add	r2, r1
 80123ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80123f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80123f4:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80123f6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80123fa:	2b03      	cmp	r3, #3
 80123fc:	d003      	beq.n	8012406 <USB_HC_Init+0x22a>
 80123fe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8012402:	2b01      	cmp	r3, #1
 8012404:	d10f      	bne.n	8012426 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8012406:	78fb      	ldrb	r3, [r7, #3]
 8012408:	015a      	lsls	r2, r3, #5
 801240a:	693b      	ldr	r3, [r7, #16]
 801240c:	4413      	add	r3, r2
 801240e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	78fa      	ldrb	r2, [r7, #3]
 8012416:	0151      	lsls	r1, r2, #5
 8012418:	693a      	ldr	r2, [r7, #16]
 801241a:	440a      	add	r2, r1
 801241c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012420:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8012424:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8012426:	7ffb      	ldrb	r3, [r7, #31]
}
 8012428:	4618      	mov	r0, r3
 801242a:	3720      	adds	r7, #32
 801242c:	46bd      	mov	sp, r7
 801242e:	bd80      	pop	{r7, pc}
 8012430:	40040000 	.word	0x40040000

08012434 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8012434:	b580      	push	{r7, lr}
 8012436:	b08c      	sub	sp, #48	@ 0x30
 8012438:	af02      	add	r7, sp, #8
 801243a:	60f8      	str	r0, [r7, #12]
 801243c:	60b9      	str	r1, [r7, #8]
 801243e:	4613      	mov	r3, r2
 8012440:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8012446:	68bb      	ldr	r3, [r7, #8]
 8012448:	785b      	ldrb	r3, [r3, #1]
 801244a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 801244c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012450:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	4a5d      	ldr	r2, [pc, #372]	@ (80125cc <USB_HC_StartXfer+0x198>)
 8012456:	4293      	cmp	r3, r2
 8012458:	d12f      	bne.n	80124ba <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 801245a:	79fb      	ldrb	r3, [r7, #7]
 801245c:	2b01      	cmp	r3, #1
 801245e:	d11c      	bne.n	801249a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8012460:	68bb      	ldr	r3, [r7, #8]
 8012462:	7c9b      	ldrb	r3, [r3, #18]
 8012464:	2b00      	cmp	r3, #0
 8012466:	d003      	beq.n	8012470 <USB_HC_StartXfer+0x3c>
 8012468:	68bb      	ldr	r3, [r7, #8]
 801246a:	7c9b      	ldrb	r3, [r3, #18]
 801246c:	2b02      	cmp	r3, #2
 801246e:	d124      	bne.n	80124ba <USB_HC_StartXfer+0x86>
 8012470:	68bb      	ldr	r3, [r7, #8]
 8012472:	799b      	ldrb	r3, [r3, #6]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d120      	bne.n	80124ba <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8012478:	69fb      	ldr	r3, [r7, #28]
 801247a:	015a      	lsls	r2, r3, #5
 801247c:	6a3b      	ldr	r3, [r7, #32]
 801247e:	4413      	add	r3, r2
 8012480:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012484:	68db      	ldr	r3, [r3, #12]
 8012486:	69fa      	ldr	r2, [r7, #28]
 8012488:	0151      	lsls	r1, r2, #5
 801248a:	6a3a      	ldr	r2, [r7, #32]
 801248c:	440a      	add	r2, r1
 801248e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012492:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012496:	60d3      	str	r3, [r2, #12]
 8012498:	e00f      	b.n	80124ba <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 801249a:	68bb      	ldr	r3, [r7, #8]
 801249c:	791b      	ldrb	r3, [r3, #4]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d10b      	bne.n	80124ba <USB_HC_StartXfer+0x86>
 80124a2:	68bb      	ldr	r3, [r7, #8]
 80124a4:	795b      	ldrb	r3, [r3, #5]
 80124a6:	2b01      	cmp	r3, #1
 80124a8:	d107      	bne.n	80124ba <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80124aa:	68bb      	ldr	r3, [r7, #8]
 80124ac:	785b      	ldrb	r3, [r3, #1]
 80124ae:	4619      	mov	r1, r3
 80124b0:	68f8      	ldr	r0, [r7, #12]
 80124b2:	f000 fb6b 	bl	8012b8c <USB_DoPing>
        return HAL_OK;
 80124b6:	2300      	movs	r3, #0
 80124b8:	e232      	b.n	8012920 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80124ba:	68bb      	ldr	r3, [r7, #8]
 80124bc:	799b      	ldrb	r3, [r3, #6]
 80124be:	2b01      	cmp	r3, #1
 80124c0:	d158      	bne.n	8012574 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80124c2:	2301      	movs	r3, #1
 80124c4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80124c6:	68bb      	ldr	r3, [r7, #8]
 80124c8:	78db      	ldrb	r3, [r3, #3]
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d007      	beq.n	80124de <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80124ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80124d0:	68ba      	ldr	r2, [r7, #8]
 80124d2:	8a92      	ldrh	r2, [r2, #20]
 80124d4:	fb03 f202 	mul.w	r2, r3, r2
 80124d8:	68bb      	ldr	r3, [r7, #8]
 80124da:	61da      	str	r2, [r3, #28]
 80124dc:	e07c      	b.n	80125d8 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80124de:	68bb      	ldr	r3, [r7, #8]
 80124e0:	7c9b      	ldrb	r3, [r3, #18]
 80124e2:	2b01      	cmp	r3, #1
 80124e4:	d130      	bne.n	8012548 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80124e6:	68bb      	ldr	r3, [r7, #8]
 80124e8:	6a1b      	ldr	r3, [r3, #32]
 80124ea:	2bbc      	cmp	r3, #188	@ 0xbc
 80124ec:	d918      	bls.n	8012520 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80124ee:	68bb      	ldr	r3, [r7, #8]
 80124f0:	8a9b      	ldrh	r3, [r3, #20]
 80124f2:	461a      	mov	r2, r3
 80124f4:	68bb      	ldr	r3, [r7, #8]
 80124f6:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80124f8:	68bb      	ldr	r3, [r7, #8]
 80124fa:	69da      	ldr	r2, [r3, #28]
 80124fc:	68bb      	ldr	r3, [r7, #8]
 80124fe:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8012500:	68bb      	ldr	r3, [r7, #8]
 8012502:	68db      	ldr	r3, [r3, #12]
 8012504:	2b01      	cmp	r3, #1
 8012506:	d003      	beq.n	8012510 <USB_HC_StartXfer+0xdc>
 8012508:	68bb      	ldr	r3, [r7, #8]
 801250a:	68db      	ldr	r3, [r3, #12]
 801250c:	2b02      	cmp	r3, #2
 801250e:	d103      	bne.n	8012518 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8012510:	68bb      	ldr	r3, [r7, #8]
 8012512:	2202      	movs	r2, #2
 8012514:	60da      	str	r2, [r3, #12]
 8012516:	e05f      	b.n	80125d8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8012518:	68bb      	ldr	r3, [r7, #8]
 801251a:	2201      	movs	r2, #1
 801251c:	60da      	str	r2, [r3, #12]
 801251e:	e05b      	b.n	80125d8 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8012520:	68bb      	ldr	r3, [r7, #8]
 8012522:	6a1a      	ldr	r2, [r3, #32]
 8012524:	68bb      	ldr	r3, [r7, #8]
 8012526:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8012528:	68bb      	ldr	r3, [r7, #8]
 801252a:	68db      	ldr	r3, [r3, #12]
 801252c:	2b01      	cmp	r3, #1
 801252e:	d007      	beq.n	8012540 <USB_HC_StartXfer+0x10c>
 8012530:	68bb      	ldr	r3, [r7, #8]
 8012532:	68db      	ldr	r3, [r3, #12]
 8012534:	2b02      	cmp	r3, #2
 8012536:	d003      	beq.n	8012540 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8012538:	68bb      	ldr	r3, [r7, #8]
 801253a:	2204      	movs	r2, #4
 801253c:	60da      	str	r2, [r3, #12]
 801253e:	e04b      	b.n	80125d8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8012540:	68bb      	ldr	r3, [r7, #8]
 8012542:	2203      	movs	r2, #3
 8012544:	60da      	str	r2, [r3, #12]
 8012546:	e047      	b.n	80125d8 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8012548:	79fb      	ldrb	r3, [r7, #7]
 801254a:	2b01      	cmp	r3, #1
 801254c:	d10d      	bne.n	801256a <USB_HC_StartXfer+0x136>
 801254e:	68bb      	ldr	r3, [r7, #8]
 8012550:	6a1b      	ldr	r3, [r3, #32]
 8012552:	68ba      	ldr	r2, [r7, #8]
 8012554:	8a92      	ldrh	r2, [r2, #20]
 8012556:	4293      	cmp	r3, r2
 8012558:	d907      	bls.n	801256a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 801255a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801255c:	68ba      	ldr	r2, [r7, #8]
 801255e:	8a92      	ldrh	r2, [r2, #20]
 8012560:	fb03 f202 	mul.w	r2, r3, r2
 8012564:	68bb      	ldr	r3, [r7, #8]
 8012566:	61da      	str	r2, [r3, #28]
 8012568:	e036      	b.n	80125d8 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 801256a:	68bb      	ldr	r3, [r7, #8]
 801256c:	6a1a      	ldr	r2, [r3, #32]
 801256e:	68bb      	ldr	r3, [r7, #8]
 8012570:	61da      	str	r2, [r3, #28]
 8012572:	e031      	b.n	80125d8 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8012574:	68bb      	ldr	r3, [r7, #8]
 8012576:	6a1b      	ldr	r3, [r3, #32]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d018      	beq.n	80125ae <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 801257c:	68bb      	ldr	r3, [r7, #8]
 801257e:	6a1b      	ldr	r3, [r3, #32]
 8012580:	68ba      	ldr	r2, [r7, #8]
 8012582:	8a92      	ldrh	r2, [r2, #20]
 8012584:	4413      	add	r3, r2
 8012586:	3b01      	subs	r3, #1
 8012588:	68ba      	ldr	r2, [r7, #8]
 801258a:	8a92      	ldrh	r2, [r2, #20]
 801258c:	fbb3 f3f2 	udiv	r3, r3, r2
 8012590:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8012592:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8012594:	8b7b      	ldrh	r3, [r7, #26]
 8012596:	429a      	cmp	r2, r3
 8012598:	d90b      	bls.n	80125b2 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 801259a:	8b7b      	ldrh	r3, [r7, #26]
 801259c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 801259e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80125a0:	68ba      	ldr	r2, [r7, #8]
 80125a2:	8a92      	ldrh	r2, [r2, #20]
 80125a4:	fb03 f202 	mul.w	r2, r3, r2
 80125a8:	68bb      	ldr	r3, [r7, #8]
 80125aa:	61da      	str	r2, [r3, #28]
 80125ac:	e001      	b.n	80125b2 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80125ae:	2301      	movs	r3, #1
 80125b0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80125b2:	68bb      	ldr	r3, [r7, #8]
 80125b4:	78db      	ldrb	r3, [r3, #3]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d00a      	beq.n	80125d0 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80125ba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80125bc:	68ba      	ldr	r2, [r7, #8]
 80125be:	8a92      	ldrh	r2, [r2, #20]
 80125c0:	fb03 f202 	mul.w	r2, r3, r2
 80125c4:	68bb      	ldr	r3, [r7, #8]
 80125c6:	61da      	str	r2, [r3, #28]
 80125c8:	e006      	b.n	80125d8 <USB_HC_StartXfer+0x1a4>
 80125ca:	bf00      	nop
 80125cc:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80125d0:	68bb      	ldr	r3, [r7, #8]
 80125d2:	6a1a      	ldr	r2, [r3, #32]
 80125d4:	68bb      	ldr	r3, [r7, #8]
 80125d6:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80125d8:	68bb      	ldr	r3, [r7, #8]
 80125da:	69db      	ldr	r3, [r3, #28]
 80125dc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80125e0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80125e2:	04d9      	lsls	r1, r3, #19
 80125e4:	4ba3      	ldr	r3, [pc, #652]	@ (8012874 <USB_HC_StartXfer+0x440>)
 80125e6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80125e8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80125ea:	68bb      	ldr	r3, [r7, #8]
 80125ec:	7d9b      	ldrb	r3, [r3, #22]
 80125ee:	075b      	lsls	r3, r3, #29
 80125f0:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80125f4:	69f9      	ldr	r1, [r7, #28]
 80125f6:	0148      	lsls	r0, r1, #5
 80125f8:	6a39      	ldr	r1, [r7, #32]
 80125fa:	4401      	add	r1, r0
 80125fc:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8012600:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8012602:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8012604:	79fb      	ldrb	r3, [r7, #7]
 8012606:	2b00      	cmp	r3, #0
 8012608:	d009      	beq.n	801261e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 801260a:	68bb      	ldr	r3, [r7, #8]
 801260c:	6999      	ldr	r1, [r3, #24]
 801260e:	69fb      	ldr	r3, [r7, #28]
 8012610:	015a      	lsls	r2, r3, #5
 8012612:	6a3b      	ldr	r3, [r7, #32]
 8012614:	4413      	add	r3, r2
 8012616:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801261a:	460a      	mov	r2, r1
 801261c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 801261e:	6a3b      	ldr	r3, [r7, #32]
 8012620:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8012624:	689b      	ldr	r3, [r3, #8]
 8012626:	f003 0301 	and.w	r3, r3, #1
 801262a:	2b00      	cmp	r3, #0
 801262c:	bf0c      	ite	eq
 801262e:	2301      	moveq	r3, #1
 8012630:	2300      	movne	r3, #0
 8012632:	b2db      	uxtb	r3, r3
 8012634:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8012636:	69fb      	ldr	r3, [r7, #28]
 8012638:	015a      	lsls	r2, r3, #5
 801263a:	6a3b      	ldr	r3, [r7, #32]
 801263c:	4413      	add	r3, r2
 801263e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	69fa      	ldr	r2, [r7, #28]
 8012646:	0151      	lsls	r1, r2, #5
 8012648:	6a3a      	ldr	r2, [r7, #32]
 801264a:	440a      	add	r2, r1
 801264c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012650:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8012654:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8012656:	69fb      	ldr	r3, [r7, #28]
 8012658:	015a      	lsls	r2, r3, #5
 801265a:	6a3b      	ldr	r3, [r7, #32]
 801265c:	4413      	add	r3, r2
 801265e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012662:	681a      	ldr	r2, [r3, #0]
 8012664:	7e7b      	ldrb	r3, [r7, #25]
 8012666:	075b      	lsls	r3, r3, #29
 8012668:	69f9      	ldr	r1, [r7, #28]
 801266a:	0148      	lsls	r0, r1, #5
 801266c:	6a39      	ldr	r1, [r7, #32]
 801266e:	4401      	add	r1, r0
 8012670:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8012674:	4313      	orrs	r3, r2
 8012676:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8012678:	68bb      	ldr	r3, [r7, #8]
 801267a:	799b      	ldrb	r3, [r3, #6]
 801267c:	2b01      	cmp	r3, #1
 801267e:	f040 80c3 	bne.w	8012808 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8012682:	68bb      	ldr	r3, [r7, #8]
 8012684:	7c5b      	ldrb	r3, [r3, #17]
 8012686:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8012688:	68ba      	ldr	r2, [r7, #8]
 801268a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 801268c:	4313      	orrs	r3, r2
 801268e:	69fa      	ldr	r2, [r7, #28]
 8012690:	0151      	lsls	r1, r2, #5
 8012692:	6a3a      	ldr	r2, [r7, #32]
 8012694:	440a      	add	r2, r1
 8012696:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 801269a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 801269e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80126a0:	69fb      	ldr	r3, [r7, #28]
 80126a2:	015a      	lsls	r2, r3, #5
 80126a4:	6a3b      	ldr	r3, [r7, #32]
 80126a6:	4413      	add	r3, r2
 80126a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80126ac:	68db      	ldr	r3, [r3, #12]
 80126ae:	69fa      	ldr	r2, [r7, #28]
 80126b0:	0151      	lsls	r1, r2, #5
 80126b2:	6a3a      	ldr	r2, [r7, #32]
 80126b4:	440a      	add	r2, r1
 80126b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80126ba:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80126be:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80126c0:	68bb      	ldr	r3, [r7, #8]
 80126c2:	79db      	ldrb	r3, [r3, #7]
 80126c4:	2b01      	cmp	r3, #1
 80126c6:	d123      	bne.n	8012710 <USB_HC_StartXfer+0x2dc>
 80126c8:	68bb      	ldr	r3, [r7, #8]
 80126ca:	78db      	ldrb	r3, [r3, #3]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d11f      	bne.n	8012710 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80126d0:	69fb      	ldr	r3, [r7, #28]
 80126d2:	015a      	lsls	r2, r3, #5
 80126d4:	6a3b      	ldr	r3, [r7, #32]
 80126d6:	4413      	add	r3, r2
 80126d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80126dc:	685b      	ldr	r3, [r3, #4]
 80126de:	69fa      	ldr	r2, [r7, #28]
 80126e0:	0151      	lsls	r1, r2, #5
 80126e2:	6a3a      	ldr	r2, [r7, #32]
 80126e4:	440a      	add	r2, r1
 80126e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80126ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80126ee:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80126f0:	69fb      	ldr	r3, [r7, #28]
 80126f2:	015a      	lsls	r2, r3, #5
 80126f4:	6a3b      	ldr	r3, [r7, #32]
 80126f6:	4413      	add	r3, r2
 80126f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80126fc:	68db      	ldr	r3, [r3, #12]
 80126fe:	69fa      	ldr	r2, [r7, #28]
 8012700:	0151      	lsls	r1, r2, #5
 8012702:	6a3a      	ldr	r2, [r7, #32]
 8012704:	440a      	add	r2, r1
 8012706:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801270a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801270e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8012710:	68bb      	ldr	r3, [r7, #8]
 8012712:	7c9b      	ldrb	r3, [r3, #18]
 8012714:	2b01      	cmp	r3, #1
 8012716:	d003      	beq.n	8012720 <USB_HC_StartXfer+0x2ec>
 8012718:	68bb      	ldr	r3, [r7, #8]
 801271a:	7c9b      	ldrb	r3, [r3, #18]
 801271c:	2b03      	cmp	r3, #3
 801271e:	d117      	bne.n	8012750 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8012720:	68bb      	ldr	r3, [r7, #8]
 8012722:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8012724:	2b01      	cmp	r3, #1
 8012726:	d113      	bne.n	8012750 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8012728:	68bb      	ldr	r3, [r7, #8]
 801272a:	78db      	ldrb	r3, [r3, #3]
 801272c:	2b01      	cmp	r3, #1
 801272e:	d10f      	bne.n	8012750 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8012730:	69fb      	ldr	r3, [r7, #28]
 8012732:	015a      	lsls	r2, r3, #5
 8012734:	6a3b      	ldr	r3, [r7, #32]
 8012736:	4413      	add	r3, r2
 8012738:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801273c:	685b      	ldr	r3, [r3, #4]
 801273e:	69fa      	ldr	r2, [r7, #28]
 8012740:	0151      	lsls	r1, r2, #5
 8012742:	6a3a      	ldr	r2, [r7, #32]
 8012744:	440a      	add	r2, r1
 8012746:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801274a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801274e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8012750:	68bb      	ldr	r3, [r7, #8]
 8012752:	7c9b      	ldrb	r3, [r3, #18]
 8012754:	2b01      	cmp	r3, #1
 8012756:	d162      	bne.n	801281e <USB_HC_StartXfer+0x3ea>
 8012758:	68bb      	ldr	r3, [r7, #8]
 801275a:	78db      	ldrb	r3, [r3, #3]
 801275c:	2b00      	cmp	r3, #0
 801275e:	d15e      	bne.n	801281e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8012760:	68bb      	ldr	r3, [r7, #8]
 8012762:	68db      	ldr	r3, [r3, #12]
 8012764:	3b01      	subs	r3, #1
 8012766:	2b03      	cmp	r3, #3
 8012768:	d858      	bhi.n	801281c <USB_HC_StartXfer+0x3e8>
 801276a:	a201      	add	r2, pc, #4	@ (adr r2, 8012770 <USB_HC_StartXfer+0x33c>)
 801276c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012770:	08012781 	.word	0x08012781
 8012774:	080127a3 	.word	0x080127a3
 8012778:	080127c5 	.word	0x080127c5
 801277c:	080127e7 	.word	0x080127e7
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8012780:	69fb      	ldr	r3, [r7, #28]
 8012782:	015a      	lsls	r2, r3, #5
 8012784:	6a3b      	ldr	r3, [r7, #32]
 8012786:	4413      	add	r3, r2
 8012788:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801278c:	685b      	ldr	r3, [r3, #4]
 801278e:	69fa      	ldr	r2, [r7, #28]
 8012790:	0151      	lsls	r1, r2, #5
 8012792:	6a3a      	ldr	r2, [r7, #32]
 8012794:	440a      	add	r2, r1
 8012796:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801279a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801279e:	6053      	str	r3, [r2, #4]
          break;
 80127a0:	e03d      	b.n	801281e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80127a2:	69fb      	ldr	r3, [r7, #28]
 80127a4:	015a      	lsls	r2, r3, #5
 80127a6:	6a3b      	ldr	r3, [r7, #32]
 80127a8:	4413      	add	r3, r2
 80127aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80127ae:	685b      	ldr	r3, [r3, #4]
 80127b0:	69fa      	ldr	r2, [r7, #28]
 80127b2:	0151      	lsls	r1, r2, #5
 80127b4:	6a3a      	ldr	r2, [r7, #32]
 80127b6:	440a      	add	r2, r1
 80127b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80127bc:	f043 030e 	orr.w	r3, r3, #14
 80127c0:	6053      	str	r3, [r2, #4]
          break;
 80127c2:	e02c      	b.n	801281e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80127c4:	69fb      	ldr	r3, [r7, #28]
 80127c6:	015a      	lsls	r2, r3, #5
 80127c8:	6a3b      	ldr	r3, [r7, #32]
 80127ca:	4413      	add	r3, r2
 80127cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80127d0:	685b      	ldr	r3, [r3, #4]
 80127d2:	69fa      	ldr	r2, [r7, #28]
 80127d4:	0151      	lsls	r1, r2, #5
 80127d6:	6a3a      	ldr	r2, [r7, #32]
 80127d8:	440a      	add	r2, r1
 80127da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80127de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80127e2:	6053      	str	r3, [r2, #4]
          break;
 80127e4:	e01b      	b.n	801281e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80127e6:	69fb      	ldr	r3, [r7, #28]
 80127e8:	015a      	lsls	r2, r3, #5
 80127ea:	6a3b      	ldr	r3, [r7, #32]
 80127ec:	4413      	add	r3, r2
 80127ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80127f2:	685b      	ldr	r3, [r3, #4]
 80127f4:	69fa      	ldr	r2, [r7, #28]
 80127f6:	0151      	lsls	r1, r2, #5
 80127f8:	6a3a      	ldr	r2, [r7, #32]
 80127fa:	440a      	add	r2, r1
 80127fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012800:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8012804:	6053      	str	r3, [r2, #4]
          break;
 8012806:	e00a      	b.n	801281e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8012808:	69fb      	ldr	r3, [r7, #28]
 801280a:	015a      	lsls	r2, r3, #5
 801280c:	6a3b      	ldr	r3, [r7, #32]
 801280e:	4413      	add	r3, r2
 8012810:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012814:	461a      	mov	r2, r3
 8012816:	2300      	movs	r3, #0
 8012818:	6053      	str	r3, [r2, #4]
 801281a:	e000      	b.n	801281e <USB_HC_StartXfer+0x3ea>
          break;
 801281c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 801281e:	69fb      	ldr	r3, [r7, #28]
 8012820:	015a      	lsls	r2, r3, #5
 8012822:	6a3b      	ldr	r3, [r7, #32]
 8012824:	4413      	add	r3, r2
 8012826:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 801282e:	693b      	ldr	r3, [r7, #16]
 8012830:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8012834:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8012836:	68bb      	ldr	r3, [r7, #8]
 8012838:	78db      	ldrb	r3, [r3, #3]
 801283a:	2b00      	cmp	r3, #0
 801283c:	d004      	beq.n	8012848 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 801283e:	693b      	ldr	r3, [r7, #16]
 8012840:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012844:	613b      	str	r3, [r7, #16]
 8012846:	e003      	b.n	8012850 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8012848:	693b      	ldr	r3, [r7, #16]
 801284a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801284e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8012850:	693b      	ldr	r3, [r7, #16]
 8012852:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8012856:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8012858:	69fb      	ldr	r3, [r7, #28]
 801285a:	015a      	lsls	r2, r3, #5
 801285c:	6a3b      	ldr	r3, [r7, #32]
 801285e:	4413      	add	r3, r2
 8012860:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012864:	461a      	mov	r2, r3
 8012866:	693b      	ldr	r3, [r7, #16]
 8012868:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 801286a:	79fb      	ldrb	r3, [r7, #7]
 801286c:	2b00      	cmp	r3, #0
 801286e:	d003      	beq.n	8012878 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8012870:	2300      	movs	r3, #0
 8012872:	e055      	b.n	8012920 <USB_HC_StartXfer+0x4ec>
 8012874:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8012878:	68bb      	ldr	r3, [r7, #8]
 801287a:	78db      	ldrb	r3, [r3, #3]
 801287c:	2b00      	cmp	r3, #0
 801287e:	d14e      	bne.n	801291e <USB_HC_StartXfer+0x4ea>
 8012880:	68bb      	ldr	r3, [r7, #8]
 8012882:	6a1b      	ldr	r3, [r3, #32]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d04a      	beq.n	801291e <USB_HC_StartXfer+0x4ea>
 8012888:	68bb      	ldr	r3, [r7, #8]
 801288a:	79db      	ldrb	r3, [r3, #7]
 801288c:	2b00      	cmp	r3, #0
 801288e:	d146      	bne.n	801291e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8012890:	68bb      	ldr	r3, [r7, #8]
 8012892:	7c9b      	ldrb	r3, [r3, #18]
 8012894:	2b03      	cmp	r3, #3
 8012896:	d831      	bhi.n	80128fc <USB_HC_StartXfer+0x4c8>
 8012898:	a201      	add	r2, pc, #4	@ (adr r2, 80128a0 <USB_HC_StartXfer+0x46c>)
 801289a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801289e:	bf00      	nop
 80128a0:	080128b1 	.word	0x080128b1
 80128a4:	080128d5 	.word	0x080128d5
 80128a8:	080128b1 	.word	0x080128b1
 80128ac:	080128d5 	.word	0x080128d5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80128b0:	68bb      	ldr	r3, [r7, #8]
 80128b2:	6a1b      	ldr	r3, [r3, #32]
 80128b4:	3303      	adds	r3, #3
 80128b6:	089b      	lsrs	r3, r3, #2
 80128b8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80128ba:	8afa      	ldrh	r2, [r7, #22]
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80128c0:	b29b      	uxth	r3, r3
 80128c2:	429a      	cmp	r2, r3
 80128c4:	d91c      	bls.n	8012900 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	699b      	ldr	r3, [r3, #24]
 80128ca:	f043 0220 	orr.w	r2, r3, #32
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	619a      	str	r2, [r3, #24]
        }
        break;
 80128d2:	e015      	b.n	8012900 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80128d4:	68bb      	ldr	r3, [r7, #8]
 80128d6:	6a1b      	ldr	r3, [r3, #32]
 80128d8:	3303      	adds	r3, #3
 80128da:	089b      	lsrs	r3, r3, #2
 80128dc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80128de:	8afa      	ldrh	r2, [r7, #22]
 80128e0:	6a3b      	ldr	r3, [r7, #32]
 80128e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80128e6:	691b      	ldr	r3, [r3, #16]
 80128e8:	b29b      	uxth	r3, r3
 80128ea:	429a      	cmp	r2, r3
 80128ec:	d90a      	bls.n	8012904 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80128ee:	68fb      	ldr	r3, [r7, #12]
 80128f0:	699b      	ldr	r3, [r3, #24]
 80128f2:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	619a      	str	r2, [r3, #24]
        }
        break;
 80128fa:	e003      	b.n	8012904 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80128fc:	bf00      	nop
 80128fe:	e002      	b.n	8012906 <USB_HC_StartXfer+0x4d2>
        break;
 8012900:	bf00      	nop
 8012902:	e000      	b.n	8012906 <USB_HC_StartXfer+0x4d2>
        break;
 8012904:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8012906:	68bb      	ldr	r3, [r7, #8]
 8012908:	6999      	ldr	r1, [r3, #24]
 801290a:	68bb      	ldr	r3, [r7, #8]
 801290c:	785a      	ldrb	r2, [r3, #1]
 801290e:	68bb      	ldr	r3, [r7, #8]
 8012910:	6a1b      	ldr	r3, [r3, #32]
 8012912:	b29b      	uxth	r3, r3
 8012914:	2000      	movs	r0, #0
 8012916:	9000      	str	r0, [sp, #0]
 8012918:	68f8      	ldr	r0, [r7, #12]
 801291a:	f7ff f9ca 	bl	8011cb2 <USB_WritePacket>
  }

  return HAL_OK;
 801291e:	2300      	movs	r3, #0
}
 8012920:	4618      	mov	r0, r3
 8012922:	3728      	adds	r7, #40	@ 0x28
 8012924:	46bd      	mov	sp, r7
 8012926:	bd80      	pop	{r7, pc}

08012928 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8012928:	b480      	push	{r7}
 801292a:	b085      	sub	sp, #20
 801292c:	af00      	add	r7, sp, #0
 801292e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801293a:	695b      	ldr	r3, [r3, #20]
 801293c:	b29b      	uxth	r3, r3
}
 801293e:	4618      	mov	r0, r3
 8012940:	3714      	adds	r7, #20
 8012942:	46bd      	mov	sp, r7
 8012944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012948:	4770      	bx	lr

0801294a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 801294a:	b480      	push	{r7}
 801294c:	b089      	sub	sp, #36	@ 0x24
 801294e:	af00      	add	r7, sp, #0
 8012950:	6078      	str	r0, [r7, #4]
 8012952:	460b      	mov	r3, r1
 8012954:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 801295a:	78fb      	ldrb	r3, [r7, #3]
 801295c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 801295e:	2300      	movs	r3, #0
 8012960:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8012962:	69bb      	ldr	r3, [r7, #24]
 8012964:	015a      	lsls	r2, r3, #5
 8012966:	69fb      	ldr	r3, [r7, #28]
 8012968:	4413      	add	r3, r2
 801296a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	0c9b      	lsrs	r3, r3, #18
 8012972:	f003 0303 	and.w	r3, r3, #3
 8012976:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8012978:	69bb      	ldr	r3, [r7, #24]
 801297a:	015a      	lsls	r2, r3, #5
 801297c:	69fb      	ldr	r3, [r7, #28]
 801297e:	4413      	add	r3, r2
 8012980:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	0fdb      	lsrs	r3, r3, #31
 8012988:	f003 0301 	and.w	r3, r3, #1
 801298c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 801298e:	69bb      	ldr	r3, [r7, #24]
 8012990:	015a      	lsls	r2, r3, #5
 8012992:	69fb      	ldr	r3, [r7, #28]
 8012994:	4413      	add	r3, r2
 8012996:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801299a:	685b      	ldr	r3, [r3, #4]
 801299c:	0fdb      	lsrs	r3, r3, #31
 801299e:	f003 0301 	and.w	r3, r3, #1
 80129a2:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	689b      	ldr	r3, [r3, #8]
 80129a8:	f003 0320 	and.w	r3, r3, #32
 80129ac:	2b20      	cmp	r3, #32
 80129ae:	d10d      	bne.n	80129cc <USB_HC_Halt+0x82>
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d10a      	bne.n	80129cc <USB_HC_Halt+0x82>
 80129b6:	693b      	ldr	r3, [r7, #16]
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d005      	beq.n	80129c8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80129bc:	697b      	ldr	r3, [r7, #20]
 80129be:	2b01      	cmp	r3, #1
 80129c0:	d002      	beq.n	80129c8 <USB_HC_Halt+0x7e>
 80129c2:	697b      	ldr	r3, [r7, #20]
 80129c4:	2b03      	cmp	r3, #3
 80129c6:	d101      	bne.n	80129cc <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80129c8:	2300      	movs	r3, #0
 80129ca:	e0d8      	b.n	8012b7e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80129cc:	697b      	ldr	r3, [r7, #20]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d002      	beq.n	80129d8 <USB_HC_Halt+0x8e>
 80129d2:	697b      	ldr	r3, [r7, #20]
 80129d4:	2b02      	cmp	r3, #2
 80129d6:	d173      	bne.n	8012ac0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80129d8:	69bb      	ldr	r3, [r7, #24]
 80129da:	015a      	lsls	r2, r3, #5
 80129dc:	69fb      	ldr	r3, [r7, #28]
 80129de:	4413      	add	r3, r2
 80129e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	69ba      	ldr	r2, [r7, #24]
 80129e8:	0151      	lsls	r1, r2, #5
 80129ea:	69fa      	ldr	r2, [r7, #28]
 80129ec:	440a      	add	r2, r1
 80129ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80129f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80129f6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	689b      	ldr	r3, [r3, #8]
 80129fc:	f003 0320 	and.w	r3, r3, #32
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d14a      	bne.n	8012a9a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a08:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d133      	bne.n	8012a78 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8012a10:	69bb      	ldr	r3, [r7, #24]
 8012a12:	015a      	lsls	r2, r3, #5
 8012a14:	69fb      	ldr	r3, [r7, #28]
 8012a16:	4413      	add	r3, r2
 8012a18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	69ba      	ldr	r2, [r7, #24]
 8012a20:	0151      	lsls	r1, r2, #5
 8012a22:	69fa      	ldr	r2, [r7, #28]
 8012a24:	440a      	add	r2, r1
 8012a26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012a2a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012a2e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8012a30:	69bb      	ldr	r3, [r7, #24]
 8012a32:	015a      	lsls	r2, r3, #5
 8012a34:	69fb      	ldr	r3, [r7, #28]
 8012a36:	4413      	add	r3, r2
 8012a38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	69ba      	ldr	r2, [r7, #24]
 8012a40:	0151      	lsls	r1, r2, #5
 8012a42:	69fa      	ldr	r2, [r7, #28]
 8012a44:	440a      	add	r2, r1
 8012a46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012a4a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8012a4e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8012a50:	68bb      	ldr	r3, [r7, #8]
 8012a52:	3301      	adds	r3, #1
 8012a54:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8012a56:	68bb      	ldr	r3, [r7, #8]
 8012a58:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8012a5c:	d82e      	bhi.n	8012abc <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8012a5e:	69bb      	ldr	r3, [r7, #24]
 8012a60:	015a      	lsls	r2, r3, #5
 8012a62:	69fb      	ldr	r3, [r7, #28]
 8012a64:	4413      	add	r3, r2
 8012a66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012a70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012a74:	d0ec      	beq.n	8012a50 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8012a76:	e081      	b.n	8012b7c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8012a78:	69bb      	ldr	r3, [r7, #24]
 8012a7a:	015a      	lsls	r2, r3, #5
 8012a7c:	69fb      	ldr	r3, [r7, #28]
 8012a7e:	4413      	add	r3, r2
 8012a80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	69ba      	ldr	r2, [r7, #24]
 8012a88:	0151      	lsls	r1, r2, #5
 8012a8a:	69fa      	ldr	r2, [r7, #28]
 8012a8c:	440a      	add	r2, r1
 8012a8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012a92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8012a96:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8012a98:	e070      	b.n	8012b7c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8012a9a:	69bb      	ldr	r3, [r7, #24]
 8012a9c:	015a      	lsls	r2, r3, #5
 8012a9e:	69fb      	ldr	r3, [r7, #28]
 8012aa0:	4413      	add	r3, r2
 8012aa2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	69ba      	ldr	r2, [r7, #24]
 8012aaa:	0151      	lsls	r1, r2, #5
 8012aac:	69fa      	ldr	r2, [r7, #28]
 8012aae:	440a      	add	r2, r1
 8012ab0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012ab4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8012ab8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8012aba:	e05f      	b.n	8012b7c <USB_HC_Halt+0x232>
            break;
 8012abc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8012abe:	e05d      	b.n	8012b7c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8012ac0:	69bb      	ldr	r3, [r7, #24]
 8012ac2:	015a      	lsls	r2, r3, #5
 8012ac4:	69fb      	ldr	r3, [r7, #28]
 8012ac6:	4413      	add	r3, r2
 8012ac8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	69ba      	ldr	r2, [r7, #24]
 8012ad0:	0151      	lsls	r1, r2, #5
 8012ad2:	69fa      	ldr	r2, [r7, #28]
 8012ad4:	440a      	add	r2, r1
 8012ad6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012ada:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012ade:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8012ae0:	69fb      	ldr	r3, [r7, #28]
 8012ae2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8012ae6:	691b      	ldr	r3, [r3, #16]
 8012ae8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d133      	bne.n	8012b58 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8012af0:	69bb      	ldr	r3, [r7, #24]
 8012af2:	015a      	lsls	r2, r3, #5
 8012af4:	69fb      	ldr	r3, [r7, #28]
 8012af6:	4413      	add	r3, r2
 8012af8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	69ba      	ldr	r2, [r7, #24]
 8012b00:	0151      	lsls	r1, r2, #5
 8012b02:	69fa      	ldr	r2, [r7, #28]
 8012b04:	440a      	add	r2, r1
 8012b06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012b0a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012b0e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8012b10:	69bb      	ldr	r3, [r7, #24]
 8012b12:	015a      	lsls	r2, r3, #5
 8012b14:	69fb      	ldr	r3, [r7, #28]
 8012b16:	4413      	add	r3, r2
 8012b18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	69ba      	ldr	r2, [r7, #24]
 8012b20:	0151      	lsls	r1, r2, #5
 8012b22:	69fa      	ldr	r2, [r7, #28]
 8012b24:	440a      	add	r2, r1
 8012b26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012b2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8012b2e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8012b30:	68bb      	ldr	r3, [r7, #8]
 8012b32:	3301      	adds	r3, #1
 8012b34:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8012b36:	68bb      	ldr	r3, [r7, #8]
 8012b38:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8012b3c:	d81d      	bhi.n	8012b7a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8012b3e:	69bb      	ldr	r3, [r7, #24]
 8012b40:	015a      	lsls	r2, r3, #5
 8012b42:	69fb      	ldr	r3, [r7, #28]
 8012b44:	4413      	add	r3, r2
 8012b46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012b50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012b54:	d0ec      	beq.n	8012b30 <USB_HC_Halt+0x1e6>
 8012b56:	e011      	b.n	8012b7c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8012b58:	69bb      	ldr	r3, [r7, #24]
 8012b5a:	015a      	lsls	r2, r3, #5
 8012b5c:	69fb      	ldr	r3, [r7, #28]
 8012b5e:	4413      	add	r3, r2
 8012b60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	69ba      	ldr	r2, [r7, #24]
 8012b68:	0151      	lsls	r1, r2, #5
 8012b6a:	69fa      	ldr	r2, [r7, #28]
 8012b6c:	440a      	add	r2, r1
 8012b6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8012b76:	6013      	str	r3, [r2, #0]
 8012b78:	e000      	b.n	8012b7c <USB_HC_Halt+0x232>
          break;
 8012b7a:	bf00      	nop
    }
  }

  return HAL_OK;
 8012b7c:	2300      	movs	r3, #0
}
 8012b7e:	4618      	mov	r0, r3
 8012b80:	3724      	adds	r7, #36	@ 0x24
 8012b82:	46bd      	mov	sp, r7
 8012b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b88:	4770      	bx	lr
	...

08012b8c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8012b8c:	b480      	push	{r7}
 8012b8e:	b087      	sub	sp, #28
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	6078      	str	r0, [r7, #4]
 8012b94:	460b      	mov	r3, r1
 8012b96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8012b9c:	78fb      	ldrb	r3, [r7, #3]
 8012b9e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8012ba0:	2301      	movs	r3, #1
 8012ba2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	04da      	lsls	r2, r3, #19
 8012ba8:	4b15      	ldr	r3, [pc, #84]	@ (8012c00 <USB_DoPing+0x74>)
 8012baa:	4013      	ands	r3, r2
 8012bac:	693a      	ldr	r2, [r7, #16]
 8012bae:	0151      	lsls	r1, r2, #5
 8012bb0:	697a      	ldr	r2, [r7, #20]
 8012bb2:	440a      	add	r2, r1
 8012bb4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012bb8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8012bbc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8012bbe:	693b      	ldr	r3, [r7, #16]
 8012bc0:	015a      	lsls	r2, r3, #5
 8012bc2:	697b      	ldr	r3, [r7, #20]
 8012bc4:	4413      	add	r3, r2
 8012bc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8012bce:	68bb      	ldr	r3, [r7, #8]
 8012bd0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8012bd4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8012bd6:	68bb      	ldr	r3, [r7, #8]
 8012bd8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8012bdc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8012bde:	693b      	ldr	r3, [r7, #16]
 8012be0:	015a      	lsls	r2, r3, #5
 8012be2:	697b      	ldr	r3, [r7, #20]
 8012be4:	4413      	add	r3, r2
 8012be6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012bea:	461a      	mov	r2, r3
 8012bec:	68bb      	ldr	r3, [r7, #8]
 8012bee:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8012bf0:	2300      	movs	r3, #0
}
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	371c      	adds	r7, #28
 8012bf6:	46bd      	mov	sp, r7
 8012bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bfc:	4770      	bx	lr
 8012bfe:	bf00      	nop
 8012c00:	1ff80000 	.word	0x1ff80000

08012c04 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8012c04:	b580      	push	{r7, lr}
 8012c06:	b088      	sub	sp, #32
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8012c0c:	2300      	movs	r3, #0
 8012c0e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8012c14:	2300      	movs	r3, #0
 8012c16:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8012c18:	6878      	ldr	r0, [r7, #4]
 8012c1a:	f7fe ff8d 	bl	8011b38 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012c1e:	2110      	movs	r1, #16
 8012c20:	6878      	ldr	r0, [r7, #4]
 8012c22:	f7fe ffe6 	bl	8011bf2 <USB_FlushTxFifo>
 8012c26:	4603      	mov	r3, r0
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d001      	beq.n	8012c30 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8012c2c:	2301      	movs	r3, #1
 8012c2e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012c30:	6878      	ldr	r0, [r7, #4]
 8012c32:	f7ff f810 	bl	8011c56 <USB_FlushRxFifo>
 8012c36:	4603      	mov	r3, r0
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d001      	beq.n	8012c40 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8012c3c:	2301      	movs	r3, #1
 8012c3e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8012c40:	2300      	movs	r3, #0
 8012c42:	61bb      	str	r3, [r7, #24]
 8012c44:	e01f      	b.n	8012c86 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8012c46:	69bb      	ldr	r3, [r7, #24]
 8012c48:	015a      	lsls	r2, r3, #5
 8012c4a:	697b      	ldr	r3, [r7, #20]
 8012c4c:	4413      	add	r3, r2
 8012c4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8012c56:	693b      	ldr	r3, [r7, #16]
 8012c58:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012c5c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8012c5e:	693b      	ldr	r3, [r7, #16]
 8012c60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012c64:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8012c66:	693b      	ldr	r3, [r7, #16]
 8012c68:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8012c6c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8012c6e:	69bb      	ldr	r3, [r7, #24]
 8012c70:	015a      	lsls	r2, r3, #5
 8012c72:	697b      	ldr	r3, [r7, #20]
 8012c74:	4413      	add	r3, r2
 8012c76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012c7a:	461a      	mov	r2, r3
 8012c7c:	693b      	ldr	r3, [r7, #16]
 8012c7e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8012c80:	69bb      	ldr	r3, [r7, #24]
 8012c82:	3301      	adds	r3, #1
 8012c84:	61bb      	str	r3, [r7, #24]
 8012c86:	69bb      	ldr	r3, [r7, #24]
 8012c88:	2b0f      	cmp	r3, #15
 8012c8a:	d9dc      	bls.n	8012c46 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8012c8c:	2300      	movs	r3, #0
 8012c8e:	61bb      	str	r3, [r7, #24]
 8012c90:	e034      	b.n	8012cfc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8012c92:	69bb      	ldr	r3, [r7, #24]
 8012c94:	015a      	lsls	r2, r3, #5
 8012c96:	697b      	ldr	r3, [r7, #20]
 8012c98:	4413      	add	r3, r2
 8012c9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8012ca2:	693b      	ldr	r3, [r7, #16]
 8012ca4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012ca8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8012caa:	693b      	ldr	r3, [r7, #16]
 8012cac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8012cb0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8012cb2:	693b      	ldr	r3, [r7, #16]
 8012cb4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8012cb8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8012cba:	69bb      	ldr	r3, [r7, #24]
 8012cbc:	015a      	lsls	r2, r3, #5
 8012cbe:	697b      	ldr	r3, [r7, #20]
 8012cc0:	4413      	add	r3, r2
 8012cc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012cc6:	461a      	mov	r2, r3
 8012cc8:	693b      	ldr	r3, [r7, #16]
 8012cca:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	3301      	adds	r3, #1
 8012cd0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8012cd8:	d80c      	bhi.n	8012cf4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8012cda:	69bb      	ldr	r3, [r7, #24]
 8012cdc:	015a      	lsls	r2, r3, #5
 8012cde:	697b      	ldr	r3, [r7, #20]
 8012ce0:	4413      	add	r3, r2
 8012ce2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012cec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012cf0:	d0ec      	beq.n	8012ccc <USB_StopHost+0xc8>
 8012cf2:	e000      	b.n	8012cf6 <USB_StopHost+0xf2>
        break;
 8012cf4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8012cf6:	69bb      	ldr	r3, [r7, #24]
 8012cf8:	3301      	adds	r3, #1
 8012cfa:	61bb      	str	r3, [r7, #24]
 8012cfc:	69bb      	ldr	r3, [r7, #24]
 8012cfe:	2b0f      	cmp	r3, #15
 8012d00:	d9c7      	bls.n	8012c92 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8012d02:	697b      	ldr	r3, [r7, #20]
 8012d04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8012d08:	461a      	mov	r2, r3
 8012d0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012d0e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012d16:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8012d18:	6878      	ldr	r0, [r7, #4]
 8012d1a:	f7fe fefc 	bl	8011b16 <USB_EnableGlobalInt>

  return ret;
 8012d1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8012d20:	4618      	mov	r0, r3
 8012d22:	3720      	adds	r7, #32
 8012d24:	46bd      	mov	sp, r7
 8012d26:	bd80      	pop	{r7, pc}

08012d28 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8012d28:	b590      	push	{r4, r7, lr}
 8012d2a:	b089      	sub	sp, #36	@ 0x24
 8012d2c:	af04      	add	r7, sp, #16
 8012d2e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8012d30:	2301      	movs	r3, #1
 8012d32:	2202      	movs	r2, #2
 8012d34:	2102      	movs	r1, #2
 8012d36:	6878      	ldr	r0, [r7, #4]
 8012d38:	f000 fc85 	bl	8013646 <USBH_FindInterface>
 8012d3c:	4603      	mov	r3, r0
 8012d3e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8012d40:	7bfb      	ldrb	r3, [r7, #15]
 8012d42:	2bff      	cmp	r3, #255	@ 0xff
 8012d44:	d002      	beq.n	8012d4c <USBH_CDC_InterfaceInit+0x24>
 8012d46:	7bfb      	ldrb	r3, [r7, #15]
 8012d48:	2b01      	cmp	r3, #1
 8012d4a:	d901      	bls.n	8012d50 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8012d4c:	2302      	movs	r3, #2
 8012d4e:	e13d      	b.n	8012fcc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8012d50:	7bfb      	ldrb	r3, [r7, #15]
 8012d52:	4619      	mov	r1, r3
 8012d54:	6878      	ldr	r0, [r7, #4]
 8012d56:	f000 fc5a 	bl	801360e <USBH_SelectInterface>
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8012d5e:	7bbb      	ldrb	r3, [r7, #14]
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d001      	beq.n	8012d68 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8012d64:	2302      	movs	r3, #2
 8012d66:	e131      	b.n	8012fcc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8012d6e:	2050      	movs	r0, #80	@ 0x50
 8012d70:	f002 fb64 	bl	801543c <malloc>
 8012d74:	4603      	mov	r3, r0
 8012d76:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012d7e:	69db      	ldr	r3, [r3, #28]
 8012d80:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8012d82:	68bb      	ldr	r3, [r7, #8]
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d101      	bne.n	8012d8c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8012d88:	2302      	movs	r3, #2
 8012d8a:	e11f      	b.n	8012fcc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8012d8c:	2250      	movs	r2, #80	@ 0x50
 8012d8e:	2100      	movs	r1, #0
 8012d90:	68b8      	ldr	r0, [r7, #8]
 8012d92:	f002 fc11 	bl	80155b8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8012d96:	7bfb      	ldrb	r3, [r7, #15]
 8012d98:	687a      	ldr	r2, [r7, #4]
 8012d9a:	211a      	movs	r1, #26
 8012d9c:	fb01 f303 	mul.w	r3, r1, r3
 8012da0:	4413      	add	r3, r2
 8012da2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8012da6:	781b      	ldrb	r3, [r3, #0]
 8012da8:	b25b      	sxtb	r3, r3
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	da15      	bge.n	8012dda <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8012dae:	7bfb      	ldrb	r3, [r7, #15]
 8012db0:	687a      	ldr	r2, [r7, #4]
 8012db2:	211a      	movs	r1, #26
 8012db4:	fb01 f303 	mul.w	r3, r1, r3
 8012db8:	4413      	add	r3, r2
 8012dba:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8012dbe:	781a      	ldrb	r2, [r3, #0]
 8012dc0:	68bb      	ldr	r3, [r7, #8]
 8012dc2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8012dc4:	7bfb      	ldrb	r3, [r7, #15]
 8012dc6:	687a      	ldr	r2, [r7, #4]
 8012dc8:	211a      	movs	r1, #26
 8012dca:	fb01 f303 	mul.w	r3, r1, r3
 8012dce:	4413      	add	r3, r2
 8012dd0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8012dd4:	881a      	ldrh	r2, [r3, #0]
 8012dd6:	68bb      	ldr	r3, [r7, #8]
 8012dd8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8012dda:	68bb      	ldr	r3, [r7, #8]
 8012ddc:	785b      	ldrb	r3, [r3, #1]
 8012dde:	4619      	mov	r1, r3
 8012de0:	6878      	ldr	r0, [r7, #4]
 8012de2:	f001 ffbe 	bl	8014d62 <USBH_AllocPipe>
 8012de6:	4603      	mov	r3, r0
 8012de8:	461a      	mov	r2, r3
 8012dea:	68bb      	ldr	r3, [r7, #8]
 8012dec:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8012dee:	68bb      	ldr	r3, [r7, #8]
 8012df0:	7819      	ldrb	r1, [r3, #0]
 8012df2:	68bb      	ldr	r3, [r7, #8]
 8012df4:	7858      	ldrb	r0, [r3, #1]
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8012e02:	68ba      	ldr	r2, [r7, #8]
 8012e04:	8952      	ldrh	r2, [r2, #10]
 8012e06:	9202      	str	r2, [sp, #8]
 8012e08:	2203      	movs	r2, #3
 8012e0a:	9201      	str	r2, [sp, #4]
 8012e0c:	9300      	str	r3, [sp, #0]
 8012e0e:	4623      	mov	r3, r4
 8012e10:	4602      	mov	r2, r0
 8012e12:	6878      	ldr	r0, [r7, #4]
 8012e14:	f001 ff76 	bl	8014d04 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8012e18:	68bb      	ldr	r3, [r7, #8]
 8012e1a:	781b      	ldrb	r3, [r3, #0]
 8012e1c:	2200      	movs	r2, #0
 8012e1e:	4619      	mov	r1, r3
 8012e20:	6878      	ldr	r0, [r7, #4]
 8012e22:	f002 fa85 	bl	8015330 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8012e26:	2300      	movs	r3, #0
 8012e28:	2200      	movs	r2, #0
 8012e2a:	210a      	movs	r1, #10
 8012e2c:	6878      	ldr	r0, [r7, #4]
 8012e2e:	f000 fc0a 	bl	8013646 <USBH_FindInterface>
 8012e32:	4603      	mov	r3, r0
 8012e34:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8012e36:	7bfb      	ldrb	r3, [r7, #15]
 8012e38:	2bff      	cmp	r3, #255	@ 0xff
 8012e3a:	d002      	beq.n	8012e42 <USBH_CDC_InterfaceInit+0x11a>
 8012e3c:	7bfb      	ldrb	r3, [r7, #15]
 8012e3e:	2b01      	cmp	r3, #1
 8012e40:	d901      	bls.n	8012e46 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8012e42:	2302      	movs	r3, #2
 8012e44:	e0c2      	b.n	8012fcc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8012e46:	7bfb      	ldrb	r3, [r7, #15]
 8012e48:	687a      	ldr	r2, [r7, #4]
 8012e4a:	211a      	movs	r1, #26
 8012e4c:	fb01 f303 	mul.w	r3, r1, r3
 8012e50:	4413      	add	r3, r2
 8012e52:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8012e56:	781b      	ldrb	r3, [r3, #0]
 8012e58:	b25b      	sxtb	r3, r3
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	da16      	bge.n	8012e8c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8012e5e:	7bfb      	ldrb	r3, [r7, #15]
 8012e60:	687a      	ldr	r2, [r7, #4]
 8012e62:	211a      	movs	r1, #26
 8012e64:	fb01 f303 	mul.w	r3, r1, r3
 8012e68:	4413      	add	r3, r2
 8012e6a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8012e6e:	781a      	ldrb	r2, [r3, #0]
 8012e70:	68bb      	ldr	r3, [r7, #8]
 8012e72:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8012e74:	7bfb      	ldrb	r3, [r7, #15]
 8012e76:	687a      	ldr	r2, [r7, #4]
 8012e78:	211a      	movs	r1, #26
 8012e7a:	fb01 f303 	mul.w	r3, r1, r3
 8012e7e:	4413      	add	r3, r2
 8012e80:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8012e84:	881a      	ldrh	r2, [r3, #0]
 8012e86:	68bb      	ldr	r3, [r7, #8]
 8012e88:	835a      	strh	r2, [r3, #26]
 8012e8a:	e015      	b.n	8012eb8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8012e8c:	7bfb      	ldrb	r3, [r7, #15]
 8012e8e:	687a      	ldr	r2, [r7, #4]
 8012e90:	211a      	movs	r1, #26
 8012e92:	fb01 f303 	mul.w	r3, r1, r3
 8012e96:	4413      	add	r3, r2
 8012e98:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8012e9c:	781a      	ldrb	r2, [r3, #0]
 8012e9e:	68bb      	ldr	r3, [r7, #8]
 8012ea0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8012ea2:	7bfb      	ldrb	r3, [r7, #15]
 8012ea4:	687a      	ldr	r2, [r7, #4]
 8012ea6:	211a      	movs	r1, #26
 8012ea8:	fb01 f303 	mul.w	r3, r1, r3
 8012eac:	4413      	add	r3, r2
 8012eae:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8012eb2:	881a      	ldrh	r2, [r3, #0]
 8012eb4:	68bb      	ldr	r3, [r7, #8]
 8012eb6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8012eb8:	7bfb      	ldrb	r3, [r7, #15]
 8012eba:	687a      	ldr	r2, [r7, #4]
 8012ebc:	211a      	movs	r1, #26
 8012ebe:	fb01 f303 	mul.w	r3, r1, r3
 8012ec2:	4413      	add	r3, r2
 8012ec4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8012ec8:	781b      	ldrb	r3, [r3, #0]
 8012eca:	b25b      	sxtb	r3, r3
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	da16      	bge.n	8012efe <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8012ed0:	7bfb      	ldrb	r3, [r7, #15]
 8012ed2:	687a      	ldr	r2, [r7, #4]
 8012ed4:	211a      	movs	r1, #26
 8012ed6:	fb01 f303 	mul.w	r3, r1, r3
 8012eda:	4413      	add	r3, r2
 8012edc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8012ee0:	781a      	ldrb	r2, [r3, #0]
 8012ee2:	68bb      	ldr	r3, [r7, #8]
 8012ee4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8012ee6:	7bfb      	ldrb	r3, [r7, #15]
 8012ee8:	687a      	ldr	r2, [r7, #4]
 8012eea:	211a      	movs	r1, #26
 8012eec:	fb01 f303 	mul.w	r3, r1, r3
 8012ef0:	4413      	add	r3, r2
 8012ef2:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8012ef6:	881a      	ldrh	r2, [r3, #0]
 8012ef8:	68bb      	ldr	r3, [r7, #8]
 8012efa:	835a      	strh	r2, [r3, #26]
 8012efc:	e015      	b.n	8012f2a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8012efe:	7bfb      	ldrb	r3, [r7, #15]
 8012f00:	687a      	ldr	r2, [r7, #4]
 8012f02:	211a      	movs	r1, #26
 8012f04:	fb01 f303 	mul.w	r3, r1, r3
 8012f08:	4413      	add	r3, r2
 8012f0a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8012f0e:	781a      	ldrb	r2, [r3, #0]
 8012f10:	68bb      	ldr	r3, [r7, #8]
 8012f12:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8012f14:	7bfb      	ldrb	r3, [r7, #15]
 8012f16:	687a      	ldr	r2, [r7, #4]
 8012f18:	211a      	movs	r1, #26
 8012f1a:	fb01 f303 	mul.w	r3, r1, r3
 8012f1e:	4413      	add	r3, r2
 8012f20:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8012f24:	881a      	ldrh	r2, [r3, #0]
 8012f26:	68bb      	ldr	r3, [r7, #8]
 8012f28:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8012f2a:	68bb      	ldr	r3, [r7, #8]
 8012f2c:	7b9b      	ldrb	r3, [r3, #14]
 8012f2e:	4619      	mov	r1, r3
 8012f30:	6878      	ldr	r0, [r7, #4]
 8012f32:	f001 ff16 	bl	8014d62 <USBH_AllocPipe>
 8012f36:	4603      	mov	r3, r0
 8012f38:	461a      	mov	r2, r3
 8012f3a:	68bb      	ldr	r3, [r7, #8]
 8012f3c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8012f3e:	68bb      	ldr	r3, [r7, #8]
 8012f40:	7bdb      	ldrb	r3, [r3, #15]
 8012f42:	4619      	mov	r1, r3
 8012f44:	6878      	ldr	r0, [r7, #4]
 8012f46:	f001 ff0c 	bl	8014d62 <USBH_AllocPipe>
 8012f4a:	4603      	mov	r3, r0
 8012f4c:	461a      	mov	r2, r3
 8012f4e:	68bb      	ldr	r3, [r7, #8]
 8012f50:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8012f52:	68bb      	ldr	r3, [r7, #8]
 8012f54:	7b59      	ldrb	r1, [r3, #13]
 8012f56:	68bb      	ldr	r3, [r7, #8]
 8012f58:	7b98      	ldrb	r0, [r3, #14]
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8012f66:	68ba      	ldr	r2, [r7, #8]
 8012f68:	8b12      	ldrh	r2, [r2, #24]
 8012f6a:	9202      	str	r2, [sp, #8]
 8012f6c:	2202      	movs	r2, #2
 8012f6e:	9201      	str	r2, [sp, #4]
 8012f70:	9300      	str	r3, [sp, #0]
 8012f72:	4623      	mov	r3, r4
 8012f74:	4602      	mov	r2, r0
 8012f76:	6878      	ldr	r0, [r7, #4]
 8012f78:	f001 fec4 	bl	8014d04 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8012f7c:	68bb      	ldr	r3, [r7, #8]
 8012f7e:	7b19      	ldrb	r1, [r3, #12]
 8012f80:	68bb      	ldr	r3, [r7, #8]
 8012f82:	7bd8      	ldrb	r0, [r3, #15]
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8012f90:	68ba      	ldr	r2, [r7, #8]
 8012f92:	8b52      	ldrh	r2, [r2, #26]
 8012f94:	9202      	str	r2, [sp, #8]
 8012f96:	2202      	movs	r2, #2
 8012f98:	9201      	str	r2, [sp, #4]
 8012f9a:	9300      	str	r3, [sp, #0]
 8012f9c:	4623      	mov	r3, r4
 8012f9e:	4602      	mov	r2, r0
 8012fa0:	6878      	ldr	r0, [r7, #4]
 8012fa2:	f001 feaf 	bl	8014d04 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8012fa6:	68bb      	ldr	r3, [r7, #8]
 8012fa8:	2200      	movs	r2, #0
 8012faa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8012fae:	68bb      	ldr	r3, [r7, #8]
 8012fb0:	7b5b      	ldrb	r3, [r3, #13]
 8012fb2:	2200      	movs	r2, #0
 8012fb4:	4619      	mov	r1, r3
 8012fb6:	6878      	ldr	r0, [r7, #4]
 8012fb8:	f002 f9ba 	bl	8015330 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8012fbc:	68bb      	ldr	r3, [r7, #8]
 8012fbe:	7b1b      	ldrb	r3, [r3, #12]
 8012fc0:	2200      	movs	r2, #0
 8012fc2:	4619      	mov	r1, r3
 8012fc4:	6878      	ldr	r0, [r7, #4]
 8012fc6:	f002 f9b3 	bl	8015330 <USBH_LL_SetToggle>

  return USBH_OK;
 8012fca:	2300      	movs	r3, #0
}
 8012fcc:	4618      	mov	r0, r3
 8012fce:	3714      	adds	r7, #20
 8012fd0:	46bd      	mov	sp, r7
 8012fd2:	bd90      	pop	{r4, r7, pc}

08012fd4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8012fd4:	b580      	push	{r7, lr}
 8012fd6:	b084      	sub	sp, #16
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012fe2:	69db      	ldr	r3, [r3, #28]
 8012fe4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	781b      	ldrb	r3, [r3, #0]
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d00e      	beq.n	801300c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	781b      	ldrb	r3, [r3, #0]
 8012ff2:	4619      	mov	r1, r3
 8012ff4:	6878      	ldr	r0, [r7, #4]
 8012ff6:	f001 fea4 	bl	8014d42 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	781b      	ldrb	r3, [r3, #0]
 8012ffe:	4619      	mov	r1, r3
 8013000:	6878      	ldr	r0, [r7, #4]
 8013002:	f001 fecf 	bl	8014da4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	2200      	movs	r2, #0
 801300a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	7b1b      	ldrb	r3, [r3, #12]
 8013010:	2b00      	cmp	r3, #0
 8013012:	d00e      	beq.n	8013032 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	7b1b      	ldrb	r3, [r3, #12]
 8013018:	4619      	mov	r1, r3
 801301a:	6878      	ldr	r0, [r7, #4]
 801301c:	f001 fe91 	bl	8014d42 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	7b1b      	ldrb	r3, [r3, #12]
 8013024:	4619      	mov	r1, r3
 8013026:	6878      	ldr	r0, [r7, #4]
 8013028:	f001 febc 	bl	8014da4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	2200      	movs	r2, #0
 8013030:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	7b5b      	ldrb	r3, [r3, #13]
 8013036:	2b00      	cmp	r3, #0
 8013038:	d00e      	beq.n	8013058 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	7b5b      	ldrb	r3, [r3, #13]
 801303e:	4619      	mov	r1, r3
 8013040:	6878      	ldr	r0, [r7, #4]
 8013042:	f001 fe7e 	bl	8014d42 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	7b5b      	ldrb	r3, [r3, #13]
 801304a:	4619      	mov	r1, r3
 801304c:	6878      	ldr	r0, [r7, #4]
 801304e:	f001 fea9 	bl	8014da4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	2200      	movs	r2, #0
 8013056:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801305e:	69db      	ldr	r3, [r3, #28]
 8013060:	2b00      	cmp	r3, #0
 8013062:	d00b      	beq.n	801307c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801306a:	69db      	ldr	r3, [r3, #28]
 801306c:	4618      	mov	r0, r3
 801306e:	f002 f9ed 	bl	801544c <free>
    phost->pActiveClass->pData = 0U;
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8013078:	2200      	movs	r2, #0
 801307a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 801307c:	2300      	movs	r3, #0
}
 801307e:	4618      	mov	r0, r3
 8013080:	3710      	adds	r7, #16
 8013082:	46bd      	mov	sp, r7
 8013084:	bd80      	pop	{r7, pc}

08013086 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8013086:	b580      	push	{r7, lr}
 8013088:	b084      	sub	sp, #16
 801308a:	af00      	add	r7, sp, #0
 801308c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8013094:	69db      	ldr	r3, [r3, #28]
 8013096:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	3340      	adds	r3, #64	@ 0x40
 801309c:	4619      	mov	r1, r3
 801309e:	6878      	ldr	r0, [r7, #4]
 80130a0:	f000 f8b1 	bl	8013206 <GetLineCoding>
 80130a4:	4603      	mov	r3, r0
 80130a6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80130a8:	7afb      	ldrb	r3, [r7, #11]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d105      	bne.n	80130ba <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80130b4:	2102      	movs	r1, #2
 80130b6:	6878      	ldr	r0, [r7, #4]
 80130b8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80130ba:	7afb      	ldrb	r3, [r7, #11]
}
 80130bc:	4618      	mov	r0, r3
 80130be:	3710      	adds	r7, #16
 80130c0:	46bd      	mov	sp, r7
 80130c2:	bd80      	pop	{r7, pc}

080130c4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80130c4:	b580      	push	{r7, lr}
 80130c6:	b084      	sub	sp, #16
 80130c8:	af00      	add	r7, sp, #0
 80130ca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80130cc:	2301      	movs	r3, #1
 80130ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80130d0:	2300      	movs	r3, #0
 80130d2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80130da:	69db      	ldr	r3, [r3, #28]
 80130dc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80130de:	68bb      	ldr	r3, [r7, #8]
 80130e0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80130e4:	2b04      	cmp	r3, #4
 80130e6:	d877      	bhi.n	80131d8 <USBH_CDC_Process+0x114>
 80130e8:	a201      	add	r2, pc, #4	@ (adr r2, 80130f0 <USBH_CDC_Process+0x2c>)
 80130ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130ee:	bf00      	nop
 80130f0:	08013105 	.word	0x08013105
 80130f4:	0801310b 	.word	0x0801310b
 80130f8:	0801313b 	.word	0x0801313b
 80130fc:	080131af 	.word	0x080131af
 8013100:	080131bd 	.word	0x080131bd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8013104:	2300      	movs	r3, #0
 8013106:	73fb      	strb	r3, [r7, #15]
      break;
 8013108:	e06d      	b.n	80131e6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 801310a:	68bb      	ldr	r3, [r7, #8]
 801310c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801310e:	4619      	mov	r1, r3
 8013110:	6878      	ldr	r0, [r7, #4]
 8013112:	f000 f897 	bl	8013244 <SetLineCoding>
 8013116:	4603      	mov	r3, r0
 8013118:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 801311a:	7bbb      	ldrb	r3, [r7, #14]
 801311c:	2b00      	cmp	r3, #0
 801311e:	d104      	bne.n	801312a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8013120:	68bb      	ldr	r3, [r7, #8]
 8013122:	2202      	movs	r2, #2
 8013124:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8013128:	e058      	b.n	80131dc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 801312a:	7bbb      	ldrb	r3, [r7, #14]
 801312c:	2b01      	cmp	r3, #1
 801312e:	d055      	beq.n	80131dc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8013130:	68bb      	ldr	r3, [r7, #8]
 8013132:	2204      	movs	r2, #4
 8013134:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8013138:	e050      	b.n	80131dc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 801313a:	68bb      	ldr	r3, [r7, #8]
 801313c:	3340      	adds	r3, #64	@ 0x40
 801313e:	4619      	mov	r1, r3
 8013140:	6878      	ldr	r0, [r7, #4]
 8013142:	f000 f860 	bl	8013206 <GetLineCoding>
 8013146:	4603      	mov	r3, r0
 8013148:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 801314a:	7bbb      	ldrb	r3, [r7, #14]
 801314c:	2b00      	cmp	r3, #0
 801314e:	d126      	bne.n	801319e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8013150:	68bb      	ldr	r3, [r7, #8]
 8013152:	2200      	movs	r2, #0
 8013154:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8013158:	68bb      	ldr	r3, [r7, #8]
 801315a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 801315e:	68bb      	ldr	r3, [r7, #8]
 8013160:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013162:	791b      	ldrb	r3, [r3, #4]
 8013164:	429a      	cmp	r2, r3
 8013166:	d13b      	bne.n	80131e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8013168:	68bb      	ldr	r3, [r7, #8]
 801316a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 801316e:	68bb      	ldr	r3, [r7, #8]
 8013170:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013172:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8013174:	429a      	cmp	r2, r3
 8013176:	d133      	bne.n	80131e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8013178:	68bb      	ldr	r3, [r7, #8]
 801317a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 801317e:	68bb      	ldr	r3, [r7, #8]
 8013180:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013182:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8013184:	429a      	cmp	r2, r3
 8013186:	d12b      	bne.n	80131e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8013188:	68bb      	ldr	r3, [r7, #8]
 801318a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801318c:	68bb      	ldr	r3, [r7, #8]
 801318e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013190:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8013192:	429a      	cmp	r2, r3
 8013194:	d124      	bne.n	80131e0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8013196:	6878      	ldr	r0, [r7, #4]
 8013198:	f000 f958 	bl	801344c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 801319c:	e020      	b.n	80131e0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 801319e:	7bbb      	ldrb	r3, [r7, #14]
 80131a0:	2b01      	cmp	r3, #1
 80131a2:	d01d      	beq.n	80131e0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80131a4:	68bb      	ldr	r3, [r7, #8]
 80131a6:	2204      	movs	r2, #4
 80131a8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80131ac:	e018      	b.n	80131e0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80131ae:	6878      	ldr	r0, [r7, #4]
 80131b0:	f000 f867 	bl	8013282 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80131b4:	6878      	ldr	r0, [r7, #4]
 80131b6:	f000 f8da 	bl	801336e <CDC_ProcessReception>
      break;
 80131ba:	e014      	b.n	80131e6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80131bc:	2100      	movs	r1, #0
 80131be:	6878      	ldr	r0, [r7, #4]
 80131c0:	f001 f81a 	bl	80141f8 <USBH_ClrFeature>
 80131c4:	4603      	mov	r3, r0
 80131c6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80131c8:	7bbb      	ldrb	r3, [r7, #14]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d10a      	bne.n	80131e4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80131ce:	68bb      	ldr	r3, [r7, #8]
 80131d0:	2200      	movs	r2, #0
 80131d2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80131d6:	e005      	b.n	80131e4 <USBH_CDC_Process+0x120>

    default:
      break;
 80131d8:	bf00      	nop
 80131da:	e004      	b.n	80131e6 <USBH_CDC_Process+0x122>
      break;
 80131dc:	bf00      	nop
 80131de:	e002      	b.n	80131e6 <USBH_CDC_Process+0x122>
      break;
 80131e0:	bf00      	nop
 80131e2:	e000      	b.n	80131e6 <USBH_CDC_Process+0x122>
      break;
 80131e4:	bf00      	nop

  }

  return status;
 80131e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80131e8:	4618      	mov	r0, r3
 80131ea:	3710      	adds	r7, #16
 80131ec:	46bd      	mov	sp, r7
 80131ee:	bd80      	pop	{r7, pc}

080131f0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80131f0:	b480      	push	{r7}
 80131f2:	b083      	sub	sp, #12
 80131f4:	af00      	add	r7, sp, #0
 80131f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80131f8:	2300      	movs	r3, #0
}
 80131fa:	4618      	mov	r0, r3
 80131fc:	370c      	adds	r7, #12
 80131fe:	46bd      	mov	sp, r7
 8013200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013204:	4770      	bx	lr

08013206 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8013206:	b580      	push	{r7, lr}
 8013208:	b082      	sub	sp, #8
 801320a:	af00      	add	r7, sp, #0
 801320c:	6078      	str	r0, [r7, #4]
 801320e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	22a1      	movs	r2, #161	@ 0xa1
 8013214:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	2221      	movs	r2, #33	@ 0x21
 801321a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	2200      	movs	r2, #0
 8013220:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	2200      	movs	r2, #0
 8013226:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	2207      	movs	r2, #7
 801322c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 801322e:	683b      	ldr	r3, [r7, #0]
 8013230:	2207      	movs	r2, #7
 8013232:	4619      	mov	r1, r3
 8013234:	6878      	ldr	r0, [r7, #4]
 8013236:	f001 fb14 	bl	8014862 <USBH_CtlReq>
 801323a:	4603      	mov	r3, r0
}
 801323c:	4618      	mov	r0, r3
 801323e:	3708      	adds	r7, #8
 8013240:	46bd      	mov	sp, r7
 8013242:	bd80      	pop	{r7, pc}

08013244 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8013244:	b580      	push	{r7, lr}
 8013246:	b082      	sub	sp, #8
 8013248:	af00      	add	r7, sp, #0
 801324a:	6078      	str	r0, [r7, #4]
 801324c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	2221      	movs	r2, #33	@ 0x21
 8013252:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	2220      	movs	r2, #32
 8013258:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	2200      	movs	r2, #0
 801325e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	2200      	movs	r2, #0
 8013264:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	2207      	movs	r2, #7
 801326a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 801326c:	683b      	ldr	r3, [r7, #0]
 801326e:	2207      	movs	r2, #7
 8013270:	4619      	mov	r1, r3
 8013272:	6878      	ldr	r0, [r7, #4]
 8013274:	f001 faf5 	bl	8014862 <USBH_CtlReq>
 8013278:	4603      	mov	r3, r0
}
 801327a:	4618      	mov	r0, r3
 801327c:	3708      	adds	r7, #8
 801327e:	46bd      	mov	sp, r7
 8013280:	bd80      	pop	{r7, pc}

08013282 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8013282:	b580      	push	{r7, lr}
 8013284:	b086      	sub	sp, #24
 8013286:	af02      	add	r7, sp, #8
 8013288:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8013290:	69db      	ldr	r3, [r3, #28]
 8013292:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8013294:	2300      	movs	r3, #0
 8013296:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 801329e:	2b01      	cmp	r3, #1
 80132a0:	d002      	beq.n	80132a8 <CDC_ProcessTransmission+0x26>
 80132a2:	2b02      	cmp	r3, #2
 80132a4:	d023      	beq.n	80132ee <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80132a6:	e05e      	b.n	8013366 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80132ac:	68fa      	ldr	r2, [r7, #12]
 80132ae:	8b12      	ldrh	r2, [r2, #24]
 80132b0:	4293      	cmp	r3, r2
 80132b2:	d90b      	bls.n	80132cc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	69d9      	ldr	r1, [r3, #28]
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	8b1a      	ldrh	r2, [r3, #24]
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	7b5b      	ldrb	r3, [r3, #13]
 80132c0:	2001      	movs	r0, #1
 80132c2:	9000      	str	r0, [sp, #0]
 80132c4:	6878      	ldr	r0, [r7, #4]
 80132c6:	f001 fcda 	bl	8014c7e <USBH_BulkSendData>
 80132ca:	e00b      	b.n	80132e4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80132d4:	b29a      	uxth	r2, r3
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	7b5b      	ldrb	r3, [r3, #13]
 80132da:	2001      	movs	r0, #1
 80132dc:	9000      	str	r0, [sp, #0]
 80132de:	6878      	ldr	r0, [r7, #4]
 80132e0:	f001 fccd 	bl	8014c7e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	2202      	movs	r2, #2
 80132e8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80132ec:	e03b      	b.n	8013366 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	7b5b      	ldrb	r3, [r3, #13]
 80132f2:	4619      	mov	r1, r3
 80132f4:	6878      	ldr	r0, [r7, #4]
 80132f6:	f001 fff1 	bl	80152dc <USBH_LL_GetURBState>
 80132fa:	4603      	mov	r3, r0
 80132fc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80132fe:	7afb      	ldrb	r3, [r7, #11]
 8013300:	2b01      	cmp	r3, #1
 8013302:	d128      	bne.n	8013356 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013308:	68fa      	ldr	r2, [r7, #12]
 801330a:	8b12      	ldrh	r2, [r2, #24]
 801330c:	4293      	cmp	r3, r2
 801330e:	d90e      	bls.n	801332e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013314:	68fa      	ldr	r2, [r7, #12]
 8013316:	8b12      	ldrh	r2, [r2, #24]
 8013318:	1a9a      	subs	r2, r3, r2
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	69db      	ldr	r3, [r3, #28]
 8013322:	68fa      	ldr	r2, [r7, #12]
 8013324:	8b12      	ldrh	r2, [r2, #24]
 8013326:	441a      	add	r2, r3
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	61da      	str	r2, [r3, #28]
 801332c:	e002      	b.n	8013334 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	2200      	movs	r2, #0
 8013332:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013338:	2b00      	cmp	r3, #0
 801333a:	d004      	beq.n	8013346 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	2201      	movs	r2, #1
 8013340:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8013344:	e00e      	b.n	8013364 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	2200      	movs	r2, #0
 801334a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 801334e:	6878      	ldr	r0, [r7, #4]
 8013350:	f000 f868 	bl	8013424 <USBH_CDC_TransmitCallback>
      break;
 8013354:	e006      	b.n	8013364 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8013356:	7afb      	ldrb	r3, [r7, #11]
 8013358:	2b02      	cmp	r3, #2
 801335a:	d103      	bne.n	8013364 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	2201      	movs	r2, #1
 8013360:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8013364:	bf00      	nop
  }
}
 8013366:	bf00      	nop
 8013368:	3710      	adds	r7, #16
 801336a:	46bd      	mov	sp, r7
 801336c:	bd80      	pop	{r7, pc}

0801336e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 801336e:	b580      	push	{r7, lr}
 8013370:	b086      	sub	sp, #24
 8013372:	af00      	add	r7, sp, #0
 8013374:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801337c:	69db      	ldr	r3, [r3, #28]
 801337e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8013380:	2300      	movs	r3, #0
 8013382:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8013384:	697b      	ldr	r3, [r7, #20]
 8013386:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 801338a:	2b03      	cmp	r3, #3
 801338c:	d002      	beq.n	8013394 <CDC_ProcessReception+0x26>
 801338e:	2b04      	cmp	r3, #4
 8013390:	d00e      	beq.n	80133b0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8013392:	e043      	b.n	801341c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8013394:	697b      	ldr	r3, [r7, #20]
 8013396:	6a19      	ldr	r1, [r3, #32]
 8013398:	697b      	ldr	r3, [r7, #20]
 801339a:	8b5a      	ldrh	r2, [r3, #26]
 801339c:	697b      	ldr	r3, [r7, #20]
 801339e:	7b1b      	ldrb	r3, [r3, #12]
 80133a0:	6878      	ldr	r0, [r7, #4]
 80133a2:	f001 fc91 	bl	8014cc8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80133a6:	697b      	ldr	r3, [r7, #20]
 80133a8:	2204      	movs	r2, #4
 80133aa:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80133ae:	e035      	b.n	801341c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80133b0:	697b      	ldr	r3, [r7, #20]
 80133b2:	7b1b      	ldrb	r3, [r3, #12]
 80133b4:	4619      	mov	r1, r3
 80133b6:	6878      	ldr	r0, [r7, #4]
 80133b8:	f001 ff90 	bl	80152dc <USBH_LL_GetURBState>
 80133bc:	4603      	mov	r3, r0
 80133be:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80133c0:	7cfb      	ldrb	r3, [r7, #19]
 80133c2:	2b01      	cmp	r3, #1
 80133c4:	d129      	bne.n	801341a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80133c6:	697b      	ldr	r3, [r7, #20]
 80133c8:	7b1b      	ldrb	r3, [r3, #12]
 80133ca:	4619      	mov	r1, r3
 80133cc:	6878      	ldr	r0, [r7, #4]
 80133ce:	f001 fef3 	bl	80151b8 <USBH_LL_GetLastXferSize>
 80133d2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80133d4:	697b      	ldr	r3, [r7, #20]
 80133d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80133d8:	68fa      	ldr	r2, [r7, #12]
 80133da:	429a      	cmp	r2, r3
 80133dc:	d016      	beq.n	801340c <CDC_ProcessReception+0x9e>
 80133de:	697b      	ldr	r3, [r7, #20]
 80133e0:	8b5b      	ldrh	r3, [r3, #26]
 80133e2:	461a      	mov	r2, r3
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	4293      	cmp	r3, r2
 80133e8:	d910      	bls.n	801340c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80133ea:	697b      	ldr	r3, [r7, #20]
 80133ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	1ad2      	subs	r2, r2, r3
 80133f2:	697b      	ldr	r3, [r7, #20]
 80133f4:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80133f6:	697b      	ldr	r3, [r7, #20]
 80133f8:	6a1a      	ldr	r2, [r3, #32]
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	441a      	add	r2, r3
 80133fe:	697b      	ldr	r3, [r7, #20]
 8013400:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8013402:	697b      	ldr	r3, [r7, #20]
 8013404:	2203      	movs	r2, #3
 8013406:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 801340a:	e006      	b.n	801341a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 801340c:	697b      	ldr	r3, [r7, #20]
 801340e:	2200      	movs	r2, #0
 8013410:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8013414:	6878      	ldr	r0, [r7, #4]
 8013416:	f000 f80f 	bl	8013438 <USBH_CDC_ReceiveCallback>
      break;
 801341a:	bf00      	nop
  }
}
 801341c:	bf00      	nop
 801341e:	3718      	adds	r7, #24
 8013420:	46bd      	mov	sp, r7
 8013422:	bd80      	pop	{r7, pc}

08013424 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8013424:	b480      	push	{r7}
 8013426:	b083      	sub	sp, #12
 8013428:	af00      	add	r7, sp, #0
 801342a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 801342c:	bf00      	nop
 801342e:	370c      	adds	r7, #12
 8013430:	46bd      	mov	sp, r7
 8013432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013436:	4770      	bx	lr

08013438 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8013438:	b480      	push	{r7}
 801343a:	b083      	sub	sp, #12
 801343c:	af00      	add	r7, sp, #0
 801343e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8013440:	bf00      	nop
 8013442:	370c      	adds	r7, #12
 8013444:	46bd      	mov	sp, r7
 8013446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801344a:	4770      	bx	lr

0801344c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 801344c:	b480      	push	{r7}
 801344e:	b083      	sub	sp, #12
 8013450:	af00      	add	r7, sp, #0
 8013452:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8013454:	bf00      	nop
 8013456:	370c      	adds	r7, #12
 8013458:	46bd      	mov	sp, r7
 801345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801345e:	4770      	bx	lr

08013460 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8013460:	b580      	push	{r7, lr}
 8013462:	b084      	sub	sp, #16
 8013464:	af00      	add	r7, sp, #0
 8013466:	60f8      	str	r0, [r7, #12]
 8013468:	60b9      	str	r1, [r7, #8]
 801346a:	4613      	mov	r3, r2
 801346c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	2b00      	cmp	r3, #0
 8013472:	d101      	bne.n	8013478 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8013474:	2302      	movs	r3, #2
 8013476:	e029      	b.n	80134cc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	79fa      	ldrb	r2, [r7, #7]
 801347c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	2200      	movs	r2, #0
 8013484:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	2200      	movs	r2, #0
 801348c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8013490:	68f8      	ldr	r0, [r7, #12]
 8013492:	f000 f81f 	bl	80134d4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	2200      	movs	r2, #0
 801349a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	2200      	movs	r2, #0
 80134a2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	2200      	movs	r2, #0
 80134aa:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	2200      	movs	r2, #0
 80134b2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80134b6:	68bb      	ldr	r3, [r7, #8]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d003      	beq.n	80134c4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	68ba      	ldr	r2, [r7, #8]
 80134c0:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80134c4:	68f8      	ldr	r0, [r7, #12]
 80134c6:	f001 fdc3 	bl	8015050 <USBH_LL_Init>

  return USBH_OK;
 80134ca:	2300      	movs	r3, #0
}
 80134cc:	4618      	mov	r0, r3
 80134ce:	3710      	adds	r7, #16
 80134d0:	46bd      	mov	sp, r7
 80134d2:	bd80      	pop	{r7, pc}

080134d4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80134d4:	b580      	push	{r7, lr}
 80134d6:	b084      	sub	sp, #16
 80134d8:	af00      	add	r7, sp, #0
 80134da:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80134dc:	2300      	movs	r3, #0
 80134de:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80134e0:	2300      	movs	r3, #0
 80134e2:	60fb      	str	r3, [r7, #12]
 80134e4:	e009      	b.n	80134fa <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80134e6:	687a      	ldr	r2, [r7, #4]
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	33e0      	adds	r3, #224	@ 0xe0
 80134ec:	009b      	lsls	r3, r3, #2
 80134ee:	4413      	add	r3, r2
 80134f0:	2200      	movs	r2, #0
 80134f2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	3301      	adds	r3, #1
 80134f8:	60fb      	str	r3, [r7, #12]
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	2b0f      	cmp	r3, #15
 80134fe:	d9f2      	bls.n	80134e6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8013500:	2300      	movs	r3, #0
 8013502:	60fb      	str	r3, [r7, #12]
 8013504:	e009      	b.n	801351a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8013506:	687a      	ldr	r2, [r7, #4]
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	4413      	add	r3, r2
 801350c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8013510:	2200      	movs	r2, #0
 8013512:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	3301      	adds	r3, #1
 8013518:	60fb      	str	r3, [r7, #12]
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013520:	d3f1      	bcc.n	8013506 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	2200      	movs	r2, #0
 8013526:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	2200      	movs	r2, #0
 801352c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	2201      	movs	r2, #1
 8013532:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	2200      	movs	r2, #0
 8013538:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	2201      	movs	r2, #1
 8013540:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	2240      	movs	r2, #64	@ 0x40
 8013546:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	2200      	movs	r2, #0
 801354c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	2200      	movs	r2, #0
 8013552:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	2201      	movs	r2, #1
 801355a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	2200      	movs	r2, #0
 8013562:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	2200      	movs	r2, #0
 801356a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	331c      	adds	r3, #28
 8013572:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8013576:	2100      	movs	r1, #0
 8013578:	4618      	mov	r0, r3
 801357a:	f002 f81d 	bl	80155b8 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8013584:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013588:	2100      	movs	r1, #0
 801358a:	4618      	mov	r0, r3
 801358c:	f002 f814 	bl	80155b8 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8013596:	2212      	movs	r2, #18
 8013598:	2100      	movs	r1, #0
 801359a:	4618      	mov	r0, r3
 801359c:	f002 f80c 	bl	80155b8 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80135a6:	223e      	movs	r2, #62	@ 0x3e
 80135a8:	2100      	movs	r1, #0
 80135aa:	4618      	mov	r0, r3
 80135ac:	f002 f804 	bl	80155b8 <memset>

  return USBH_OK;
 80135b0:	2300      	movs	r3, #0
}
 80135b2:	4618      	mov	r0, r3
 80135b4:	3710      	adds	r7, #16
 80135b6:	46bd      	mov	sp, r7
 80135b8:	bd80      	pop	{r7, pc}

080135ba <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80135ba:	b480      	push	{r7}
 80135bc:	b085      	sub	sp, #20
 80135be:	af00      	add	r7, sp, #0
 80135c0:	6078      	str	r0, [r7, #4]
 80135c2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80135c4:	2300      	movs	r3, #0
 80135c6:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80135c8:	683b      	ldr	r3, [r7, #0]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d016      	beq.n	80135fc <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d10e      	bne.n	80135f6 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80135de:	1c59      	adds	r1, r3, #1
 80135e0:	687a      	ldr	r2, [r7, #4]
 80135e2:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80135e6:	687a      	ldr	r2, [r7, #4]
 80135e8:	33de      	adds	r3, #222	@ 0xde
 80135ea:	6839      	ldr	r1, [r7, #0]
 80135ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80135f0:	2300      	movs	r3, #0
 80135f2:	73fb      	strb	r3, [r7, #15]
 80135f4:	e004      	b.n	8013600 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80135f6:	2302      	movs	r3, #2
 80135f8:	73fb      	strb	r3, [r7, #15]
 80135fa:	e001      	b.n	8013600 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80135fc:	2302      	movs	r3, #2
 80135fe:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8013600:	7bfb      	ldrb	r3, [r7, #15]
}
 8013602:	4618      	mov	r0, r3
 8013604:	3714      	adds	r7, #20
 8013606:	46bd      	mov	sp, r7
 8013608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801360c:	4770      	bx	lr

0801360e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 801360e:	b480      	push	{r7}
 8013610:	b085      	sub	sp, #20
 8013612:	af00      	add	r7, sp, #0
 8013614:	6078      	str	r0, [r7, #4]
 8013616:	460b      	mov	r3, r1
 8013618:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 801361a:	2300      	movs	r3, #0
 801361c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8013624:	78fa      	ldrb	r2, [r7, #3]
 8013626:	429a      	cmp	r2, r3
 8013628:	d204      	bcs.n	8013634 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	78fa      	ldrb	r2, [r7, #3]
 801362e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8013632:	e001      	b.n	8013638 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8013634:	2302      	movs	r3, #2
 8013636:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8013638:	7bfb      	ldrb	r3, [r7, #15]
}
 801363a:	4618      	mov	r0, r3
 801363c:	3714      	adds	r7, #20
 801363e:	46bd      	mov	sp, r7
 8013640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013644:	4770      	bx	lr

08013646 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8013646:	b480      	push	{r7}
 8013648:	b087      	sub	sp, #28
 801364a:	af00      	add	r7, sp, #0
 801364c:	6078      	str	r0, [r7, #4]
 801364e:	4608      	mov	r0, r1
 8013650:	4611      	mov	r1, r2
 8013652:	461a      	mov	r2, r3
 8013654:	4603      	mov	r3, r0
 8013656:	70fb      	strb	r3, [r7, #3]
 8013658:	460b      	mov	r3, r1
 801365a:	70bb      	strb	r3, [r7, #2]
 801365c:	4613      	mov	r3, r2
 801365e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8013660:	2300      	movs	r3, #0
 8013662:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8013664:	2300      	movs	r3, #0
 8013666:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 801366e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8013670:	e025      	b.n	80136be <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8013672:	7dfb      	ldrb	r3, [r7, #23]
 8013674:	221a      	movs	r2, #26
 8013676:	fb02 f303 	mul.w	r3, r2, r3
 801367a:	3308      	adds	r3, #8
 801367c:	68fa      	ldr	r2, [r7, #12]
 801367e:	4413      	add	r3, r2
 8013680:	3302      	adds	r3, #2
 8013682:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8013684:	693b      	ldr	r3, [r7, #16]
 8013686:	795b      	ldrb	r3, [r3, #5]
 8013688:	78fa      	ldrb	r2, [r7, #3]
 801368a:	429a      	cmp	r2, r3
 801368c:	d002      	beq.n	8013694 <USBH_FindInterface+0x4e>
 801368e:	78fb      	ldrb	r3, [r7, #3]
 8013690:	2bff      	cmp	r3, #255	@ 0xff
 8013692:	d111      	bne.n	80136b8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8013694:	693b      	ldr	r3, [r7, #16]
 8013696:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8013698:	78ba      	ldrb	r2, [r7, #2]
 801369a:	429a      	cmp	r2, r3
 801369c:	d002      	beq.n	80136a4 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 801369e:	78bb      	ldrb	r3, [r7, #2]
 80136a0:	2bff      	cmp	r3, #255	@ 0xff
 80136a2:	d109      	bne.n	80136b8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80136a4:	693b      	ldr	r3, [r7, #16]
 80136a6:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80136a8:	787a      	ldrb	r2, [r7, #1]
 80136aa:	429a      	cmp	r2, r3
 80136ac:	d002      	beq.n	80136b4 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80136ae:	787b      	ldrb	r3, [r7, #1]
 80136b0:	2bff      	cmp	r3, #255	@ 0xff
 80136b2:	d101      	bne.n	80136b8 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80136b4:	7dfb      	ldrb	r3, [r7, #23]
 80136b6:	e006      	b.n	80136c6 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80136b8:	7dfb      	ldrb	r3, [r7, #23]
 80136ba:	3301      	adds	r3, #1
 80136bc:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80136be:	7dfb      	ldrb	r3, [r7, #23]
 80136c0:	2b01      	cmp	r3, #1
 80136c2:	d9d6      	bls.n	8013672 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80136c4:	23ff      	movs	r3, #255	@ 0xff
}
 80136c6:	4618      	mov	r0, r3
 80136c8:	371c      	adds	r7, #28
 80136ca:	46bd      	mov	sp, r7
 80136cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d0:	4770      	bx	lr

080136d2 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80136d2:	b580      	push	{r7, lr}
 80136d4:	b082      	sub	sp, #8
 80136d6:	af00      	add	r7, sp, #0
 80136d8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80136da:	6878      	ldr	r0, [r7, #4]
 80136dc:	f001 fcf4 	bl	80150c8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80136e0:	2101      	movs	r1, #1
 80136e2:	6878      	ldr	r0, [r7, #4]
 80136e4:	f001 fe0d 	bl	8015302 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80136e8:	2300      	movs	r3, #0
}
 80136ea:	4618      	mov	r0, r3
 80136ec:	3708      	adds	r7, #8
 80136ee:	46bd      	mov	sp, r7
 80136f0:	bd80      	pop	{r7, pc}
	...

080136f4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80136f4:	b580      	push	{r7, lr}
 80136f6:	b088      	sub	sp, #32
 80136f8:	af04      	add	r7, sp, #16
 80136fa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80136fc:	2302      	movs	r3, #2
 80136fe:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8013700:	2300      	movs	r3, #0
 8013702:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 801370a:	b2db      	uxtb	r3, r3
 801370c:	2b01      	cmp	r3, #1
 801370e:	d102      	bne.n	8013716 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	2203      	movs	r2, #3
 8013714:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	781b      	ldrb	r3, [r3, #0]
 801371a:	b2db      	uxtb	r3, r3
 801371c:	2b0b      	cmp	r3, #11
 801371e:	f200 81bb 	bhi.w	8013a98 <USBH_Process+0x3a4>
 8013722:	a201      	add	r2, pc, #4	@ (adr r2, 8013728 <USBH_Process+0x34>)
 8013724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013728:	08013759 	.word	0x08013759
 801372c:	0801378b 	.word	0x0801378b
 8013730:	080137f3 	.word	0x080137f3
 8013734:	08013a33 	.word	0x08013a33
 8013738:	08013a99 	.word	0x08013a99
 801373c:	08013893 	.word	0x08013893
 8013740:	080139d9 	.word	0x080139d9
 8013744:	080138c9 	.word	0x080138c9
 8013748:	080138e9 	.word	0x080138e9
 801374c:	08013907 	.word	0x08013907
 8013750:	0801394b 	.word	0x0801394b
 8013754:	08013a1b 	.word	0x08013a1b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 801375e:	b2db      	uxtb	r3, r3
 8013760:	2b00      	cmp	r3, #0
 8013762:	f000 819b 	beq.w	8013a9c <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	2201      	movs	r2, #1
 801376a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 801376c:	20c8      	movs	r0, #200	@ 0xc8
 801376e:	f001 fe12 	bl	8015396 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8013772:	6878      	ldr	r0, [r7, #4]
 8013774:	f001 fd05 	bl	8015182 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	2200      	movs	r2, #0
 801377c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	2200      	movs	r2, #0
 8013784:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8013788:	e188      	b.n	8013a9c <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8013790:	2b01      	cmp	r3, #1
 8013792:	d107      	bne.n	80137a4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	2200      	movs	r2, #0
 8013798:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	2202      	movs	r2, #2
 80137a0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80137a2:	e18a      	b.n	8013aba <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80137aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80137ae:	d914      	bls.n	80137da <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80137b6:	3301      	adds	r3, #1
 80137b8:	b2da      	uxtb	r2, r3
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80137c6:	2b03      	cmp	r3, #3
 80137c8:	d903      	bls.n	80137d2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	220d      	movs	r2, #13
 80137ce:	701a      	strb	r2, [r3, #0]
      break;
 80137d0:	e173      	b.n	8013aba <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	2200      	movs	r2, #0
 80137d6:	701a      	strb	r2, [r3, #0]
      break;
 80137d8:	e16f      	b.n	8013aba <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80137e0:	f103 020a 	add.w	r2, r3, #10
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80137ea:	200a      	movs	r0, #10
 80137ec:	f001 fdd3 	bl	8015396 <USBH_Delay>
      break;
 80137f0:	e163      	b.n	8013aba <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d005      	beq.n	8013808 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8013802:	2104      	movs	r1, #4
 8013804:	6878      	ldr	r0, [r7, #4]
 8013806:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8013808:	2064      	movs	r0, #100	@ 0x64
 801380a:	f001 fdc4 	bl	8015396 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 801380e:	6878      	ldr	r0, [r7, #4]
 8013810:	f001 fc90 	bl	8015134 <USBH_LL_GetSpeed>
 8013814:	4603      	mov	r3, r0
 8013816:	461a      	mov	r2, r3
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	2205      	movs	r2, #5
 8013822:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8013824:	2100      	movs	r1, #0
 8013826:	6878      	ldr	r0, [r7, #4]
 8013828:	f001 fa9b 	bl	8014d62 <USBH_AllocPipe>
 801382c:	4603      	mov	r3, r0
 801382e:	461a      	mov	r2, r3
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8013834:	2180      	movs	r1, #128	@ 0x80
 8013836:	6878      	ldr	r0, [r7, #4]
 8013838:	f001 fa93 	bl	8014d62 <USBH_AllocPipe>
 801383c:	4603      	mov	r3, r0
 801383e:	461a      	mov	r2, r3
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	7919      	ldrb	r1, [r3, #4]
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8013854:	687a      	ldr	r2, [r7, #4]
 8013856:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8013858:	9202      	str	r2, [sp, #8]
 801385a:	2200      	movs	r2, #0
 801385c:	9201      	str	r2, [sp, #4]
 801385e:	9300      	str	r3, [sp, #0]
 8013860:	4603      	mov	r3, r0
 8013862:	2280      	movs	r2, #128	@ 0x80
 8013864:	6878      	ldr	r0, [r7, #4]
 8013866:	f001 fa4d 	bl	8014d04 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	7959      	ldrb	r1, [r3, #5]
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 801387a:	687a      	ldr	r2, [r7, #4]
 801387c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 801387e:	9202      	str	r2, [sp, #8]
 8013880:	2200      	movs	r2, #0
 8013882:	9201      	str	r2, [sp, #4]
 8013884:	9300      	str	r3, [sp, #0]
 8013886:	4603      	mov	r3, r0
 8013888:	2200      	movs	r2, #0
 801388a:	6878      	ldr	r0, [r7, #4]
 801388c:	f001 fa3a 	bl	8014d04 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8013890:	e113      	b.n	8013aba <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8013892:	6878      	ldr	r0, [r7, #4]
 8013894:	f000 f916 	bl	8013ac4 <USBH_HandleEnum>
 8013898:	4603      	mov	r3, r0
 801389a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 801389c:	7bbb      	ldrb	r3, [r7, #14]
 801389e:	b2db      	uxtb	r3, r3
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	f040 80fd 	bne.w	8013aa0 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	2200      	movs	r2, #0
 80138aa:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80138b4:	2b01      	cmp	r3, #1
 80138b6:	d103      	bne.n	80138c0 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	2208      	movs	r2, #8
 80138bc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80138be:	e0ef      	b.n	8013aa0 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	2207      	movs	r2, #7
 80138c4:	701a      	strb	r2, [r3, #0]
      break;
 80138c6:	e0eb      	b.n	8013aa0 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	f000 80e8 	beq.w	8013aa4 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80138da:	2101      	movs	r1, #1
 80138dc:	6878      	ldr	r0, [r7, #4]
 80138de:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	2208      	movs	r2, #8
 80138e4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80138e6:	e0dd      	b.n	8013aa4 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80138ee:	4619      	mov	r1, r3
 80138f0:	6878      	ldr	r0, [r7, #4]
 80138f2:	f000 fc3a 	bl	801416a <USBH_SetCfg>
 80138f6:	4603      	mov	r3, r0
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	f040 80d5 	bne.w	8013aa8 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	2209      	movs	r2, #9
 8013902:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8013904:	e0d0      	b.n	8013aa8 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 801390c:	f003 0320 	and.w	r3, r3, #32
 8013910:	2b00      	cmp	r3, #0
 8013912:	d016      	beq.n	8013942 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8013914:	2101      	movs	r1, #1
 8013916:	6878      	ldr	r0, [r7, #4]
 8013918:	f000 fc4a 	bl	80141b0 <USBH_SetFeature>
 801391c:	4603      	mov	r3, r0
 801391e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8013920:	7bbb      	ldrb	r3, [r7, #14]
 8013922:	b2db      	uxtb	r3, r3
 8013924:	2b00      	cmp	r3, #0
 8013926:	d103      	bne.n	8013930 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	220a      	movs	r2, #10
 801392c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 801392e:	e0bd      	b.n	8013aac <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8013930:	7bbb      	ldrb	r3, [r7, #14]
 8013932:	b2db      	uxtb	r3, r3
 8013934:	2b03      	cmp	r3, #3
 8013936:	f040 80b9 	bne.w	8013aac <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	220a      	movs	r2, #10
 801393e:	701a      	strb	r2, [r3, #0]
      break;
 8013940:	e0b4      	b.n	8013aac <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	220a      	movs	r2, #10
 8013946:	701a      	strb	r2, [r3, #0]
      break;
 8013948:	e0b0      	b.n	8013aac <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8013950:	2b00      	cmp	r3, #0
 8013952:	f000 80ad 	beq.w	8013ab0 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	2200      	movs	r2, #0
 801395a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 801395e:	2300      	movs	r3, #0
 8013960:	73fb      	strb	r3, [r7, #15]
 8013962:	e016      	b.n	8013992 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8013964:	7bfa      	ldrb	r2, [r7, #15]
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	32de      	adds	r2, #222	@ 0xde
 801396a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801396e:	791a      	ldrb	r2, [r3, #4]
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8013976:	429a      	cmp	r2, r3
 8013978:	d108      	bne.n	801398c <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 801397a:	7bfa      	ldrb	r2, [r7, #15]
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	32de      	adds	r2, #222	@ 0xde
 8013980:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 801398a:	e005      	b.n	8013998 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 801398c:	7bfb      	ldrb	r3, [r7, #15]
 801398e:	3301      	adds	r3, #1
 8013990:	73fb      	strb	r3, [r7, #15]
 8013992:	7bfb      	ldrb	r3, [r7, #15]
 8013994:	2b00      	cmp	r3, #0
 8013996:	d0e5      	beq.n	8013964 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d016      	beq.n	80139d0 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80139a8:	689b      	ldr	r3, [r3, #8]
 80139aa:	6878      	ldr	r0, [r7, #4]
 80139ac:	4798      	blx	r3
 80139ae:	4603      	mov	r3, r0
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d109      	bne.n	80139c8 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	2206      	movs	r2, #6
 80139b8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80139c0:	2103      	movs	r1, #3
 80139c2:	6878      	ldr	r0, [r7, #4]
 80139c4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80139c6:	e073      	b.n	8013ab0 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	220d      	movs	r2, #13
 80139cc:	701a      	strb	r2, [r3, #0]
      break;
 80139ce:	e06f      	b.n	8013ab0 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	220d      	movs	r2, #13
 80139d4:	701a      	strb	r2, [r3, #0]
      break;
 80139d6:	e06b      	b.n	8013ab0 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d017      	beq.n	8013a12 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80139e8:	691b      	ldr	r3, [r3, #16]
 80139ea:	6878      	ldr	r0, [r7, #4]
 80139ec:	4798      	blx	r3
 80139ee:	4603      	mov	r3, r0
 80139f0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80139f2:	7bbb      	ldrb	r3, [r7, #14]
 80139f4:	b2db      	uxtb	r3, r3
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d103      	bne.n	8013a02 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	220b      	movs	r2, #11
 80139fe:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8013a00:	e058      	b.n	8013ab4 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8013a02:	7bbb      	ldrb	r3, [r7, #14]
 8013a04:	b2db      	uxtb	r3, r3
 8013a06:	2b02      	cmp	r3, #2
 8013a08:	d154      	bne.n	8013ab4 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	220d      	movs	r2, #13
 8013a0e:	701a      	strb	r2, [r3, #0]
      break;
 8013a10:	e050      	b.n	8013ab4 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	220d      	movs	r2, #13
 8013a16:	701a      	strb	r2, [r3, #0]
      break;
 8013a18:	e04c      	b.n	8013ab4 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d049      	beq.n	8013ab8 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8013a2a:	695b      	ldr	r3, [r3, #20]
 8013a2c:	6878      	ldr	r0, [r7, #4]
 8013a2e:	4798      	blx	r3
      }
      break;
 8013a30:	e042      	b.n	8013ab8 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	2200      	movs	r2, #0
 8013a36:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8013a3a:	6878      	ldr	r0, [r7, #4]
 8013a3c:	f7ff fd4a 	bl	80134d4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d009      	beq.n	8013a5e <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8013a50:	68db      	ldr	r3, [r3, #12]
 8013a52:	6878      	ldr	r0, [r7, #4]
 8013a54:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	2200      	movs	r2, #0
 8013a5a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d005      	beq.n	8013a74 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8013a6e:	2105      	movs	r1, #5
 8013a70:	6878      	ldr	r0, [r7, #4]
 8013a72:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8013a7a:	b2db      	uxtb	r3, r3
 8013a7c:	2b01      	cmp	r3, #1
 8013a7e:	d107      	bne.n	8013a90 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	2200      	movs	r2, #0
 8013a84:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8013a88:	6878      	ldr	r0, [r7, #4]
 8013a8a:	f7ff fe22 	bl	80136d2 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8013a8e:	e014      	b.n	8013aba <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8013a90:	6878      	ldr	r0, [r7, #4]
 8013a92:	f001 fb19 	bl	80150c8 <USBH_LL_Start>
      break;
 8013a96:	e010      	b.n	8013aba <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8013a98:	bf00      	nop
 8013a9a:	e00e      	b.n	8013aba <USBH_Process+0x3c6>
      break;
 8013a9c:	bf00      	nop
 8013a9e:	e00c      	b.n	8013aba <USBH_Process+0x3c6>
      break;
 8013aa0:	bf00      	nop
 8013aa2:	e00a      	b.n	8013aba <USBH_Process+0x3c6>
    break;
 8013aa4:	bf00      	nop
 8013aa6:	e008      	b.n	8013aba <USBH_Process+0x3c6>
      break;
 8013aa8:	bf00      	nop
 8013aaa:	e006      	b.n	8013aba <USBH_Process+0x3c6>
      break;
 8013aac:	bf00      	nop
 8013aae:	e004      	b.n	8013aba <USBH_Process+0x3c6>
      break;
 8013ab0:	bf00      	nop
 8013ab2:	e002      	b.n	8013aba <USBH_Process+0x3c6>
      break;
 8013ab4:	bf00      	nop
 8013ab6:	e000      	b.n	8013aba <USBH_Process+0x3c6>
      break;
 8013ab8:	bf00      	nop
  }
  return USBH_OK;
 8013aba:	2300      	movs	r3, #0
}
 8013abc:	4618      	mov	r0, r3
 8013abe:	3710      	adds	r7, #16
 8013ac0:	46bd      	mov	sp, r7
 8013ac2:	bd80      	pop	{r7, pc}

08013ac4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8013ac4:	b580      	push	{r7, lr}
 8013ac6:	b088      	sub	sp, #32
 8013ac8:	af04      	add	r7, sp, #16
 8013aca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8013acc:	2301      	movs	r3, #1
 8013ace:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8013ad0:	2301      	movs	r3, #1
 8013ad2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	785b      	ldrb	r3, [r3, #1]
 8013ad8:	2b07      	cmp	r3, #7
 8013ada:	f200 81bd 	bhi.w	8013e58 <USBH_HandleEnum+0x394>
 8013ade:	a201      	add	r2, pc, #4	@ (adr r2, 8013ae4 <USBH_HandleEnum+0x20>)
 8013ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ae4:	08013b05 	.word	0x08013b05
 8013ae8:	08013bbf 	.word	0x08013bbf
 8013aec:	08013c29 	.word	0x08013c29
 8013af0:	08013cb3 	.word	0x08013cb3
 8013af4:	08013d1d 	.word	0x08013d1d
 8013af8:	08013d8d 	.word	0x08013d8d
 8013afc:	08013dd3 	.word	0x08013dd3
 8013b00:	08013e19 	.word	0x08013e19
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8013b04:	2108      	movs	r1, #8
 8013b06:	6878      	ldr	r0, [r7, #4]
 8013b08:	f000 fa4c 	bl	8013fa4 <USBH_Get_DevDesc>
 8013b0c:	4603      	mov	r3, r0
 8013b0e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8013b10:	7bbb      	ldrb	r3, [r7, #14]
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d12e      	bne.n	8013b74 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	2201      	movs	r2, #1
 8013b24:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	7919      	ldrb	r1, [r3, #4]
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8013b36:	687a      	ldr	r2, [r7, #4]
 8013b38:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8013b3a:	9202      	str	r2, [sp, #8]
 8013b3c:	2200      	movs	r2, #0
 8013b3e:	9201      	str	r2, [sp, #4]
 8013b40:	9300      	str	r3, [sp, #0]
 8013b42:	4603      	mov	r3, r0
 8013b44:	2280      	movs	r2, #128	@ 0x80
 8013b46:	6878      	ldr	r0, [r7, #4]
 8013b48:	f001 f8dc 	bl	8014d04 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	7959      	ldrb	r1, [r3, #5]
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8013b5c:	687a      	ldr	r2, [r7, #4]
 8013b5e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8013b60:	9202      	str	r2, [sp, #8]
 8013b62:	2200      	movs	r2, #0
 8013b64:	9201      	str	r2, [sp, #4]
 8013b66:	9300      	str	r3, [sp, #0]
 8013b68:	4603      	mov	r3, r0
 8013b6a:	2200      	movs	r2, #0
 8013b6c:	6878      	ldr	r0, [r7, #4]
 8013b6e:	f001 f8c9 	bl	8014d04 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8013b72:	e173      	b.n	8013e5c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013b74:	7bbb      	ldrb	r3, [r7, #14]
 8013b76:	2b03      	cmp	r3, #3
 8013b78:	f040 8170 	bne.w	8013e5c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8013b82:	3301      	adds	r3, #1
 8013b84:	b2da      	uxtb	r2, r3
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8013b92:	2b03      	cmp	r3, #3
 8013b94:	d903      	bls.n	8013b9e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	220d      	movs	r2, #13
 8013b9a:	701a      	strb	r2, [r3, #0]
      break;
 8013b9c:	e15e      	b.n	8013e5c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	795b      	ldrb	r3, [r3, #5]
 8013ba2:	4619      	mov	r1, r3
 8013ba4:	6878      	ldr	r0, [r7, #4]
 8013ba6:	f001 f8fd 	bl	8014da4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	791b      	ldrb	r3, [r3, #4]
 8013bae:	4619      	mov	r1, r3
 8013bb0:	6878      	ldr	r0, [r7, #4]
 8013bb2:	f001 f8f7 	bl	8014da4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	2200      	movs	r2, #0
 8013bba:	701a      	strb	r2, [r3, #0]
      break;
 8013bbc:	e14e      	b.n	8013e5c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8013bbe:	2112      	movs	r1, #18
 8013bc0:	6878      	ldr	r0, [r7, #4]
 8013bc2:	f000 f9ef 	bl	8013fa4 <USBH_Get_DevDesc>
 8013bc6:	4603      	mov	r3, r0
 8013bc8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8013bca:	7bbb      	ldrb	r3, [r7, #14]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d103      	bne.n	8013bd8 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	2202      	movs	r2, #2
 8013bd4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8013bd6:	e143      	b.n	8013e60 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013bd8:	7bbb      	ldrb	r3, [r7, #14]
 8013bda:	2b03      	cmp	r3, #3
 8013bdc:	f040 8140 	bne.w	8013e60 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8013be6:	3301      	adds	r3, #1
 8013be8:	b2da      	uxtb	r2, r3
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8013bf6:	2b03      	cmp	r3, #3
 8013bf8:	d903      	bls.n	8013c02 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	220d      	movs	r2, #13
 8013bfe:	701a      	strb	r2, [r3, #0]
      break;
 8013c00:	e12e      	b.n	8013e60 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	795b      	ldrb	r3, [r3, #5]
 8013c06:	4619      	mov	r1, r3
 8013c08:	6878      	ldr	r0, [r7, #4]
 8013c0a:	f001 f8cb 	bl	8014da4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	791b      	ldrb	r3, [r3, #4]
 8013c12:	4619      	mov	r1, r3
 8013c14:	6878      	ldr	r0, [r7, #4]
 8013c16:	f001 f8c5 	bl	8014da4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	2200      	movs	r2, #0
 8013c1e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	2200      	movs	r2, #0
 8013c24:	701a      	strb	r2, [r3, #0]
      break;
 8013c26:	e11b      	b.n	8013e60 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8013c28:	2101      	movs	r1, #1
 8013c2a:	6878      	ldr	r0, [r7, #4]
 8013c2c:	f000 fa79 	bl	8014122 <USBH_SetAddress>
 8013c30:	4603      	mov	r3, r0
 8013c32:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8013c34:	7bbb      	ldrb	r3, [r7, #14]
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d130      	bne.n	8013c9c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8013c3a:	2002      	movs	r0, #2
 8013c3c:	f001 fbab 	bl	8015396 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	2201      	movs	r2, #1
 8013c44:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	2203      	movs	r2, #3
 8013c4c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	7919      	ldrb	r1, [r3, #4]
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8013c5e:	687a      	ldr	r2, [r7, #4]
 8013c60:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8013c62:	9202      	str	r2, [sp, #8]
 8013c64:	2200      	movs	r2, #0
 8013c66:	9201      	str	r2, [sp, #4]
 8013c68:	9300      	str	r3, [sp, #0]
 8013c6a:	4603      	mov	r3, r0
 8013c6c:	2280      	movs	r2, #128	@ 0x80
 8013c6e:	6878      	ldr	r0, [r7, #4]
 8013c70:	f001 f848 	bl	8014d04 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	7959      	ldrb	r1, [r3, #5]
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8013c84:	687a      	ldr	r2, [r7, #4]
 8013c86:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8013c88:	9202      	str	r2, [sp, #8]
 8013c8a:	2200      	movs	r2, #0
 8013c8c:	9201      	str	r2, [sp, #4]
 8013c8e:	9300      	str	r3, [sp, #0]
 8013c90:	4603      	mov	r3, r0
 8013c92:	2200      	movs	r2, #0
 8013c94:	6878      	ldr	r0, [r7, #4]
 8013c96:	f001 f835 	bl	8014d04 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8013c9a:	e0e3      	b.n	8013e64 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013c9c:	7bbb      	ldrb	r3, [r7, #14]
 8013c9e:	2b03      	cmp	r3, #3
 8013ca0:	f040 80e0 	bne.w	8013e64 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	220d      	movs	r2, #13
 8013ca8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	2200      	movs	r2, #0
 8013cae:	705a      	strb	r2, [r3, #1]
      break;
 8013cb0:	e0d8      	b.n	8013e64 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8013cb2:	2109      	movs	r1, #9
 8013cb4:	6878      	ldr	r0, [r7, #4]
 8013cb6:	f000 f9a1 	bl	8013ffc <USBH_Get_CfgDesc>
 8013cba:	4603      	mov	r3, r0
 8013cbc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8013cbe:	7bbb      	ldrb	r3, [r7, #14]
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d103      	bne.n	8013ccc <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	2204      	movs	r2, #4
 8013cc8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8013cca:	e0cd      	b.n	8013e68 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013ccc:	7bbb      	ldrb	r3, [r7, #14]
 8013cce:	2b03      	cmp	r3, #3
 8013cd0:	f040 80ca 	bne.w	8013e68 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8013cda:	3301      	adds	r3, #1
 8013cdc:	b2da      	uxtb	r2, r3
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8013cea:	2b03      	cmp	r3, #3
 8013cec:	d903      	bls.n	8013cf6 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	220d      	movs	r2, #13
 8013cf2:	701a      	strb	r2, [r3, #0]
      break;
 8013cf4:	e0b8      	b.n	8013e68 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	795b      	ldrb	r3, [r3, #5]
 8013cfa:	4619      	mov	r1, r3
 8013cfc:	6878      	ldr	r0, [r7, #4]
 8013cfe:	f001 f851 	bl	8014da4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	791b      	ldrb	r3, [r3, #4]
 8013d06:	4619      	mov	r1, r3
 8013d08:	6878      	ldr	r0, [r7, #4]
 8013d0a:	f001 f84b 	bl	8014da4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	2200      	movs	r2, #0
 8013d12:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	2200      	movs	r2, #0
 8013d18:	701a      	strb	r2, [r3, #0]
      break;
 8013d1a:	e0a5      	b.n	8013e68 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8013d22:	4619      	mov	r1, r3
 8013d24:	6878      	ldr	r0, [r7, #4]
 8013d26:	f000 f969 	bl	8013ffc <USBH_Get_CfgDesc>
 8013d2a:	4603      	mov	r3, r0
 8013d2c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8013d2e:	7bbb      	ldrb	r3, [r7, #14]
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d103      	bne.n	8013d3c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	2205      	movs	r2, #5
 8013d38:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8013d3a:	e097      	b.n	8013e6c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013d3c:	7bbb      	ldrb	r3, [r7, #14]
 8013d3e:	2b03      	cmp	r3, #3
 8013d40:	f040 8094 	bne.w	8013e6c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8013d4a:	3301      	adds	r3, #1
 8013d4c:	b2da      	uxtb	r2, r3
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8013d5a:	2b03      	cmp	r3, #3
 8013d5c:	d903      	bls.n	8013d66 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	220d      	movs	r2, #13
 8013d62:	701a      	strb	r2, [r3, #0]
      break;
 8013d64:	e082      	b.n	8013e6c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	795b      	ldrb	r3, [r3, #5]
 8013d6a:	4619      	mov	r1, r3
 8013d6c:	6878      	ldr	r0, [r7, #4]
 8013d6e:	f001 f819 	bl	8014da4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	791b      	ldrb	r3, [r3, #4]
 8013d76:	4619      	mov	r1, r3
 8013d78:	6878      	ldr	r0, [r7, #4]
 8013d7a:	f001 f813 	bl	8014da4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	2200      	movs	r2, #0
 8013d82:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	2200      	movs	r2, #0
 8013d88:	701a      	strb	r2, [r3, #0]
      break;
 8013d8a:	e06f      	b.n	8013e6c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d019      	beq.n	8013dca <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8013da2:	23ff      	movs	r3, #255	@ 0xff
 8013da4:	6878      	ldr	r0, [r7, #4]
 8013da6:	f000 f953 	bl	8014050 <USBH_Get_StringDesc>
 8013daa:	4603      	mov	r3, r0
 8013dac:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8013dae:	7bbb      	ldrb	r3, [r7, #14]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d103      	bne.n	8013dbc <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	2206      	movs	r2, #6
 8013db8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8013dba:	e059      	b.n	8013e70 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013dbc:	7bbb      	ldrb	r3, [r7, #14]
 8013dbe:	2b03      	cmp	r3, #3
 8013dc0:	d156      	bne.n	8013e70 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	2206      	movs	r2, #6
 8013dc6:	705a      	strb	r2, [r3, #1]
      break;
 8013dc8:	e052      	b.n	8013e70 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	2206      	movs	r2, #6
 8013dce:	705a      	strb	r2, [r3, #1]
      break;
 8013dd0:	e04e      	b.n	8013e70 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d019      	beq.n	8013e10 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8013de8:	23ff      	movs	r3, #255	@ 0xff
 8013dea:	6878      	ldr	r0, [r7, #4]
 8013dec:	f000 f930 	bl	8014050 <USBH_Get_StringDesc>
 8013df0:	4603      	mov	r3, r0
 8013df2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8013df4:	7bbb      	ldrb	r3, [r7, #14]
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d103      	bne.n	8013e02 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	2207      	movs	r2, #7
 8013dfe:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8013e00:	e038      	b.n	8013e74 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013e02:	7bbb      	ldrb	r3, [r7, #14]
 8013e04:	2b03      	cmp	r3, #3
 8013e06:	d135      	bne.n	8013e74 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	2207      	movs	r2, #7
 8013e0c:	705a      	strb	r2, [r3, #1]
      break;
 8013e0e:	e031      	b.n	8013e74 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	2207      	movs	r2, #7
 8013e14:	705a      	strb	r2, [r3, #1]
      break;
 8013e16:	e02d      	b.n	8013e74 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d017      	beq.n	8013e52 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8013e2e:	23ff      	movs	r3, #255	@ 0xff
 8013e30:	6878      	ldr	r0, [r7, #4]
 8013e32:	f000 f90d 	bl	8014050 <USBH_Get_StringDesc>
 8013e36:	4603      	mov	r3, r0
 8013e38:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8013e3a:	7bbb      	ldrb	r3, [r7, #14]
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d102      	bne.n	8013e46 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8013e40:	2300      	movs	r3, #0
 8013e42:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8013e44:	e018      	b.n	8013e78 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013e46:	7bbb      	ldrb	r3, [r7, #14]
 8013e48:	2b03      	cmp	r3, #3
 8013e4a:	d115      	bne.n	8013e78 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8013e4c:	2300      	movs	r3, #0
 8013e4e:	73fb      	strb	r3, [r7, #15]
      break;
 8013e50:	e012      	b.n	8013e78 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8013e52:	2300      	movs	r3, #0
 8013e54:	73fb      	strb	r3, [r7, #15]
      break;
 8013e56:	e00f      	b.n	8013e78 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8013e58:	bf00      	nop
 8013e5a:	e00e      	b.n	8013e7a <USBH_HandleEnum+0x3b6>
      break;
 8013e5c:	bf00      	nop
 8013e5e:	e00c      	b.n	8013e7a <USBH_HandleEnum+0x3b6>
      break;
 8013e60:	bf00      	nop
 8013e62:	e00a      	b.n	8013e7a <USBH_HandleEnum+0x3b6>
      break;
 8013e64:	bf00      	nop
 8013e66:	e008      	b.n	8013e7a <USBH_HandleEnum+0x3b6>
      break;
 8013e68:	bf00      	nop
 8013e6a:	e006      	b.n	8013e7a <USBH_HandleEnum+0x3b6>
      break;
 8013e6c:	bf00      	nop
 8013e6e:	e004      	b.n	8013e7a <USBH_HandleEnum+0x3b6>
      break;
 8013e70:	bf00      	nop
 8013e72:	e002      	b.n	8013e7a <USBH_HandleEnum+0x3b6>
      break;
 8013e74:	bf00      	nop
 8013e76:	e000      	b.n	8013e7a <USBH_HandleEnum+0x3b6>
      break;
 8013e78:	bf00      	nop
  }
  return Status;
 8013e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e7c:	4618      	mov	r0, r3
 8013e7e:	3710      	adds	r7, #16
 8013e80:	46bd      	mov	sp, r7
 8013e82:	bd80      	pop	{r7, pc}

08013e84 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8013e84:	b480      	push	{r7}
 8013e86:	b083      	sub	sp, #12
 8013e88:	af00      	add	r7, sp, #0
 8013e8a:	6078      	str	r0, [r7, #4]
 8013e8c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	683a      	ldr	r2, [r7, #0]
 8013e92:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8013e96:	bf00      	nop
 8013e98:	370c      	adds	r7, #12
 8013e9a:	46bd      	mov	sp, r7
 8013e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea0:	4770      	bx	lr

08013ea2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8013ea2:	b580      	push	{r7, lr}
 8013ea4:	b082      	sub	sp, #8
 8013ea6:	af00      	add	r7, sp, #0
 8013ea8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8013eb0:	1c5a      	adds	r2, r3, #1
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8013eb8:	6878      	ldr	r0, [r7, #4]
 8013eba:	f000 f804 	bl	8013ec6 <USBH_HandleSof>
}
 8013ebe:	bf00      	nop
 8013ec0:	3708      	adds	r7, #8
 8013ec2:	46bd      	mov	sp, r7
 8013ec4:	bd80      	pop	{r7, pc}

08013ec6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8013ec6:	b580      	push	{r7, lr}
 8013ec8:	b082      	sub	sp, #8
 8013eca:	af00      	add	r7, sp, #0
 8013ecc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	781b      	ldrb	r3, [r3, #0]
 8013ed2:	b2db      	uxtb	r3, r3
 8013ed4:	2b0b      	cmp	r3, #11
 8013ed6:	d10a      	bne.n	8013eee <USBH_HandleSof+0x28>
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d005      	beq.n	8013eee <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8013ee8:	699b      	ldr	r3, [r3, #24]
 8013eea:	6878      	ldr	r0, [r7, #4]
 8013eec:	4798      	blx	r3
  }
}
 8013eee:	bf00      	nop
 8013ef0:	3708      	adds	r7, #8
 8013ef2:	46bd      	mov	sp, r7
 8013ef4:	bd80      	pop	{r7, pc}

08013ef6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8013ef6:	b480      	push	{r7}
 8013ef8:	b083      	sub	sp, #12
 8013efa:	af00      	add	r7, sp, #0
 8013efc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	2201      	movs	r2, #1
 8013f02:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8013f06:	bf00      	nop
}
 8013f08:	370c      	adds	r7, #12
 8013f0a:	46bd      	mov	sp, r7
 8013f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f10:	4770      	bx	lr

08013f12 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8013f12:	b480      	push	{r7}
 8013f14:	b083      	sub	sp, #12
 8013f16:	af00      	add	r7, sp, #0
 8013f18:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	2200      	movs	r2, #0
 8013f1e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8013f22:	bf00      	nop
}
 8013f24:	370c      	adds	r7, #12
 8013f26:	46bd      	mov	sp, r7
 8013f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f2c:	4770      	bx	lr

08013f2e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8013f2e:	b480      	push	{r7}
 8013f30:	b083      	sub	sp, #12
 8013f32:	af00      	add	r7, sp, #0
 8013f34:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	2201      	movs	r2, #1
 8013f3a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	2200      	movs	r2, #0
 8013f42:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	2200      	movs	r2, #0
 8013f4a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8013f4e:	2300      	movs	r3, #0
}
 8013f50:	4618      	mov	r0, r3
 8013f52:	370c      	adds	r7, #12
 8013f54:	46bd      	mov	sp, r7
 8013f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f5a:	4770      	bx	lr

08013f5c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8013f5c:	b580      	push	{r7, lr}
 8013f5e:	b082      	sub	sp, #8
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	2201      	movs	r2, #1
 8013f68:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	2200      	movs	r2, #0
 8013f70:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	2200      	movs	r2, #0
 8013f78:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8013f7c:	6878      	ldr	r0, [r7, #4]
 8013f7e:	f001 f8be 	bl	80150fe <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	791b      	ldrb	r3, [r3, #4]
 8013f86:	4619      	mov	r1, r3
 8013f88:	6878      	ldr	r0, [r7, #4]
 8013f8a:	f000 ff0b 	bl	8014da4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	795b      	ldrb	r3, [r3, #5]
 8013f92:	4619      	mov	r1, r3
 8013f94:	6878      	ldr	r0, [r7, #4]
 8013f96:	f000 ff05 	bl	8014da4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8013f9a:	2300      	movs	r3, #0
}
 8013f9c:	4618      	mov	r0, r3
 8013f9e:	3708      	adds	r7, #8
 8013fa0:	46bd      	mov	sp, r7
 8013fa2:	bd80      	pop	{r7, pc}

08013fa4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8013fa4:	b580      	push	{r7, lr}
 8013fa6:	b086      	sub	sp, #24
 8013fa8:	af02      	add	r7, sp, #8
 8013faa:	6078      	str	r0, [r7, #4]
 8013fac:	460b      	mov	r3, r1
 8013fae:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8013fb0:	887b      	ldrh	r3, [r7, #2]
 8013fb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013fb6:	d901      	bls.n	8013fbc <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8013fb8:	2303      	movs	r3, #3
 8013fba:	e01b      	b.n	8013ff4 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8013fc2:	887b      	ldrh	r3, [r7, #2]
 8013fc4:	9300      	str	r3, [sp, #0]
 8013fc6:	4613      	mov	r3, r2
 8013fc8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8013fcc:	2100      	movs	r1, #0
 8013fce:	6878      	ldr	r0, [r7, #4]
 8013fd0:	f000 f872 	bl	80140b8 <USBH_GetDescriptor>
 8013fd4:	4603      	mov	r3, r0
 8013fd6:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8013fd8:	7bfb      	ldrb	r3, [r7, #15]
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d109      	bne.n	8013ff2 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8013fe4:	887a      	ldrh	r2, [r7, #2]
 8013fe6:	4619      	mov	r1, r3
 8013fe8:	6878      	ldr	r0, [r7, #4]
 8013fea:	f000 f929 	bl	8014240 <USBH_ParseDevDesc>
 8013fee:	4603      	mov	r3, r0
 8013ff0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8013ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ff4:	4618      	mov	r0, r3
 8013ff6:	3710      	adds	r7, #16
 8013ff8:	46bd      	mov	sp, r7
 8013ffa:	bd80      	pop	{r7, pc}

08013ffc <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8013ffc:	b580      	push	{r7, lr}
 8013ffe:	b086      	sub	sp, #24
 8014000:	af02      	add	r7, sp, #8
 8014002:	6078      	str	r0, [r7, #4]
 8014004:	460b      	mov	r3, r1
 8014006:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	331c      	adds	r3, #28
 801400c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 801400e:	887b      	ldrh	r3, [r7, #2]
 8014010:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014014:	d901      	bls.n	801401a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8014016:	2303      	movs	r3, #3
 8014018:	e016      	b.n	8014048 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 801401a:	887b      	ldrh	r3, [r7, #2]
 801401c:	9300      	str	r3, [sp, #0]
 801401e:	68bb      	ldr	r3, [r7, #8]
 8014020:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014024:	2100      	movs	r1, #0
 8014026:	6878      	ldr	r0, [r7, #4]
 8014028:	f000 f846 	bl	80140b8 <USBH_GetDescriptor>
 801402c:	4603      	mov	r3, r0
 801402e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8014030:	7bfb      	ldrb	r3, [r7, #15]
 8014032:	2b00      	cmp	r3, #0
 8014034:	d107      	bne.n	8014046 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8014036:	887b      	ldrh	r3, [r7, #2]
 8014038:	461a      	mov	r2, r3
 801403a:	68b9      	ldr	r1, [r7, #8]
 801403c:	6878      	ldr	r0, [r7, #4]
 801403e:	f000 f9af 	bl	80143a0 <USBH_ParseCfgDesc>
 8014042:	4603      	mov	r3, r0
 8014044:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8014046:	7bfb      	ldrb	r3, [r7, #15]
}
 8014048:	4618      	mov	r0, r3
 801404a:	3710      	adds	r7, #16
 801404c:	46bd      	mov	sp, r7
 801404e:	bd80      	pop	{r7, pc}

08014050 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8014050:	b580      	push	{r7, lr}
 8014052:	b088      	sub	sp, #32
 8014054:	af02      	add	r7, sp, #8
 8014056:	60f8      	str	r0, [r7, #12]
 8014058:	607a      	str	r2, [r7, #4]
 801405a:	461a      	mov	r2, r3
 801405c:	460b      	mov	r3, r1
 801405e:	72fb      	strb	r3, [r7, #11]
 8014060:	4613      	mov	r3, r2
 8014062:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8014064:	893b      	ldrh	r3, [r7, #8]
 8014066:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801406a:	d802      	bhi.n	8014072 <USBH_Get_StringDesc+0x22>
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	2b00      	cmp	r3, #0
 8014070:	d101      	bne.n	8014076 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8014072:	2303      	movs	r3, #3
 8014074:	e01c      	b.n	80140b0 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8014076:	7afb      	ldrb	r3, [r7, #11]
 8014078:	b29b      	uxth	r3, r3
 801407a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 801407e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8014080:	68fb      	ldr	r3, [r7, #12]
 8014082:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8014086:	893b      	ldrh	r3, [r7, #8]
 8014088:	9300      	str	r3, [sp, #0]
 801408a:	460b      	mov	r3, r1
 801408c:	2100      	movs	r1, #0
 801408e:	68f8      	ldr	r0, [r7, #12]
 8014090:	f000 f812 	bl	80140b8 <USBH_GetDescriptor>
 8014094:	4603      	mov	r3, r0
 8014096:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8014098:	7dfb      	ldrb	r3, [r7, #23]
 801409a:	2b00      	cmp	r3, #0
 801409c:	d107      	bne.n	80140ae <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80140a4:	893a      	ldrh	r2, [r7, #8]
 80140a6:	6879      	ldr	r1, [r7, #4]
 80140a8:	4618      	mov	r0, r3
 80140aa:	f000 fb8d 	bl	80147c8 <USBH_ParseStringDesc>
  }

  return status;
 80140ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80140b0:	4618      	mov	r0, r3
 80140b2:	3718      	adds	r7, #24
 80140b4:	46bd      	mov	sp, r7
 80140b6:	bd80      	pop	{r7, pc}

080140b8 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80140b8:	b580      	push	{r7, lr}
 80140ba:	b084      	sub	sp, #16
 80140bc:	af00      	add	r7, sp, #0
 80140be:	60f8      	str	r0, [r7, #12]
 80140c0:	607b      	str	r3, [r7, #4]
 80140c2:	460b      	mov	r3, r1
 80140c4:	72fb      	strb	r3, [r7, #11]
 80140c6:	4613      	mov	r3, r2
 80140c8:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	789b      	ldrb	r3, [r3, #2]
 80140ce:	2b01      	cmp	r3, #1
 80140d0:	d11c      	bne.n	801410c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80140d2:	7afb      	ldrb	r3, [r7, #11]
 80140d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80140d8:	b2da      	uxtb	r2, r3
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	2206      	movs	r2, #6
 80140e2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80140e4:	68fb      	ldr	r3, [r7, #12]
 80140e6:	893a      	ldrh	r2, [r7, #8]
 80140e8:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80140ea:	893b      	ldrh	r3, [r7, #8]
 80140ec:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80140f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80140f4:	d104      	bne.n	8014100 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80140f6:	68fb      	ldr	r3, [r7, #12]
 80140f8:	f240 4209 	movw	r2, #1033	@ 0x409
 80140fc:	829a      	strh	r2, [r3, #20]
 80140fe:	e002      	b.n	8014106 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	2200      	movs	r2, #0
 8014104:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8014106:	68fb      	ldr	r3, [r7, #12]
 8014108:	8b3a      	ldrh	r2, [r7, #24]
 801410a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 801410c:	8b3b      	ldrh	r3, [r7, #24]
 801410e:	461a      	mov	r2, r3
 8014110:	6879      	ldr	r1, [r7, #4]
 8014112:	68f8      	ldr	r0, [r7, #12]
 8014114:	f000 fba5 	bl	8014862 <USBH_CtlReq>
 8014118:	4603      	mov	r3, r0
}
 801411a:	4618      	mov	r0, r3
 801411c:	3710      	adds	r7, #16
 801411e:	46bd      	mov	sp, r7
 8014120:	bd80      	pop	{r7, pc}

08014122 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8014122:	b580      	push	{r7, lr}
 8014124:	b082      	sub	sp, #8
 8014126:	af00      	add	r7, sp, #0
 8014128:	6078      	str	r0, [r7, #4]
 801412a:	460b      	mov	r3, r1
 801412c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	789b      	ldrb	r3, [r3, #2]
 8014132:	2b01      	cmp	r3, #1
 8014134:	d10f      	bne.n	8014156 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	2200      	movs	r2, #0
 801413a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	2205      	movs	r2, #5
 8014140:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8014142:	78fb      	ldrb	r3, [r7, #3]
 8014144:	b29a      	uxth	r2, r3
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	2200      	movs	r2, #0
 801414e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	2200      	movs	r2, #0
 8014154:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8014156:	2200      	movs	r2, #0
 8014158:	2100      	movs	r1, #0
 801415a:	6878      	ldr	r0, [r7, #4]
 801415c:	f000 fb81 	bl	8014862 <USBH_CtlReq>
 8014160:	4603      	mov	r3, r0
}
 8014162:	4618      	mov	r0, r3
 8014164:	3708      	adds	r7, #8
 8014166:	46bd      	mov	sp, r7
 8014168:	bd80      	pop	{r7, pc}

0801416a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 801416a:	b580      	push	{r7, lr}
 801416c:	b082      	sub	sp, #8
 801416e:	af00      	add	r7, sp, #0
 8014170:	6078      	str	r0, [r7, #4]
 8014172:	460b      	mov	r3, r1
 8014174:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	789b      	ldrb	r3, [r3, #2]
 801417a:	2b01      	cmp	r3, #1
 801417c:	d10e      	bne.n	801419c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	2200      	movs	r2, #0
 8014182:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	2209      	movs	r2, #9
 8014188:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	887a      	ldrh	r2, [r7, #2]
 801418e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	2200      	movs	r2, #0
 8014194:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	2200      	movs	r2, #0
 801419a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 801419c:	2200      	movs	r2, #0
 801419e:	2100      	movs	r1, #0
 80141a0:	6878      	ldr	r0, [r7, #4]
 80141a2:	f000 fb5e 	bl	8014862 <USBH_CtlReq>
 80141a6:	4603      	mov	r3, r0
}
 80141a8:	4618      	mov	r0, r3
 80141aa:	3708      	adds	r7, #8
 80141ac:	46bd      	mov	sp, r7
 80141ae:	bd80      	pop	{r7, pc}

080141b0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80141b0:	b580      	push	{r7, lr}
 80141b2:	b082      	sub	sp, #8
 80141b4:	af00      	add	r7, sp, #0
 80141b6:	6078      	str	r0, [r7, #4]
 80141b8:	460b      	mov	r3, r1
 80141ba:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	789b      	ldrb	r3, [r3, #2]
 80141c0:	2b01      	cmp	r3, #1
 80141c2:	d10f      	bne.n	80141e4 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	2200      	movs	r2, #0
 80141c8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	2203      	movs	r2, #3
 80141ce:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80141d0:	78fb      	ldrb	r3, [r7, #3]
 80141d2:	b29a      	uxth	r2, r3
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	2200      	movs	r2, #0
 80141dc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	2200      	movs	r2, #0
 80141e2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80141e4:	2200      	movs	r2, #0
 80141e6:	2100      	movs	r1, #0
 80141e8:	6878      	ldr	r0, [r7, #4]
 80141ea:	f000 fb3a 	bl	8014862 <USBH_CtlReq>
 80141ee:	4603      	mov	r3, r0
}
 80141f0:	4618      	mov	r0, r3
 80141f2:	3708      	adds	r7, #8
 80141f4:	46bd      	mov	sp, r7
 80141f6:	bd80      	pop	{r7, pc}

080141f8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80141f8:	b580      	push	{r7, lr}
 80141fa:	b082      	sub	sp, #8
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	6078      	str	r0, [r7, #4]
 8014200:	460b      	mov	r3, r1
 8014202:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	789b      	ldrb	r3, [r3, #2]
 8014208:	2b01      	cmp	r3, #1
 801420a:	d10f      	bne.n	801422c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	2202      	movs	r2, #2
 8014210:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	2201      	movs	r2, #1
 8014216:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	2200      	movs	r2, #0
 801421c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 801421e:	78fb      	ldrb	r3, [r7, #3]
 8014220:	b29a      	uxth	r2, r3
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	2200      	movs	r2, #0
 801422a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 801422c:	2200      	movs	r2, #0
 801422e:	2100      	movs	r1, #0
 8014230:	6878      	ldr	r0, [r7, #4]
 8014232:	f000 fb16 	bl	8014862 <USBH_CtlReq>
 8014236:	4603      	mov	r3, r0
}
 8014238:	4618      	mov	r0, r3
 801423a:	3708      	adds	r7, #8
 801423c:	46bd      	mov	sp, r7
 801423e:	bd80      	pop	{r7, pc}

08014240 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8014240:	b480      	push	{r7}
 8014242:	b087      	sub	sp, #28
 8014244:	af00      	add	r7, sp, #0
 8014246:	60f8      	str	r0, [r7, #12]
 8014248:	60b9      	str	r1, [r7, #8]
 801424a:	4613      	mov	r3, r2
 801424c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8014254:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8014256:	2300      	movs	r3, #0
 8014258:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 801425a:	68bb      	ldr	r3, [r7, #8]
 801425c:	2b00      	cmp	r3, #0
 801425e:	d101      	bne.n	8014264 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8014260:	2302      	movs	r3, #2
 8014262:	e094      	b.n	801438e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8014264:	68bb      	ldr	r3, [r7, #8]
 8014266:	781a      	ldrb	r2, [r3, #0]
 8014268:	693b      	ldr	r3, [r7, #16]
 801426a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 801426c:	68bb      	ldr	r3, [r7, #8]
 801426e:	785a      	ldrb	r2, [r3, #1]
 8014270:	693b      	ldr	r3, [r7, #16]
 8014272:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8014274:	68bb      	ldr	r3, [r7, #8]
 8014276:	3302      	adds	r3, #2
 8014278:	781b      	ldrb	r3, [r3, #0]
 801427a:	461a      	mov	r2, r3
 801427c:	68bb      	ldr	r3, [r7, #8]
 801427e:	3303      	adds	r3, #3
 8014280:	781b      	ldrb	r3, [r3, #0]
 8014282:	021b      	lsls	r3, r3, #8
 8014284:	b29b      	uxth	r3, r3
 8014286:	4313      	orrs	r3, r2
 8014288:	b29a      	uxth	r2, r3
 801428a:	693b      	ldr	r3, [r7, #16]
 801428c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 801428e:	68bb      	ldr	r3, [r7, #8]
 8014290:	791a      	ldrb	r2, [r3, #4]
 8014292:	693b      	ldr	r3, [r7, #16]
 8014294:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8014296:	68bb      	ldr	r3, [r7, #8]
 8014298:	795a      	ldrb	r2, [r3, #5]
 801429a:	693b      	ldr	r3, [r7, #16]
 801429c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 801429e:	68bb      	ldr	r3, [r7, #8]
 80142a0:	799a      	ldrb	r2, [r3, #6]
 80142a2:	693b      	ldr	r3, [r7, #16]
 80142a4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80142a6:	68bb      	ldr	r3, [r7, #8]
 80142a8:	79da      	ldrb	r2, [r3, #7]
 80142aa:	693b      	ldr	r3, [r7, #16]
 80142ac:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d004      	beq.n	80142c2 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80142b8:	68fb      	ldr	r3, [r7, #12]
 80142ba:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80142be:	2b01      	cmp	r3, #1
 80142c0:	d11b      	bne.n	80142fa <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80142c2:	693b      	ldr	r3, [r7, #16]
 80142c4:	79db      	ldrb	r3, [r3, #7]
 80142c6:	2b20      	cmp	r3, #32
 80142c8:	dc0f      	bgt.n	80142ea <USBH_ParseDevDesc+0xaa>
 80142ca:	2b08      	cmp	r3, #8
 80142cc:	db0f      	blt.n	80142ee <USBH_ParseDevDesc+0xae>
 80142ce:	3b08      	subs	r3, #8
 80142d0:	4a32      	ldr	r2, [pc, #200]	@ (801439c <USBH_ParseDevDesc+0x15c>)
 80142d2:	fa22 f303 	lsr.w	r3, r2, r3
 80142d6:	f003 0301 	and.w	r3, r3, #1
 80142da:	2b00      	cmp	r3, #0
 80142dc:	bf14      	ite	ne
 80142de:	2301      	movne	r3, #1
 80142e0:	2300      	moveq	r3, #0
 80142e2:	b2db      	uxtb	r3, r3
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d106      	bne.n	80142f6 <USBH_ParseDevDesc+0xb6>
 80142e8:	e001      	b.n	80142ee <USBH_ParseDevDesc+0xae>
 80142ea:	2b40      	cmp	r3, #64	@ 0x40
 80142ec:	d003      	beq.n	80142f6 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80142ee:	693b      	ldr	r3, [r7, #16]
 80142f0:	2208      	movs	r2, #8
 80142f2:	71da      	strb	r2, [r3, #7]
        break;
 80142f4:	e000      	b.n	80142f8 <USBH_ParseDevDesc+0xb8>
        break;
 80142f6:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80142f8:	e00e      	b.n	8014318 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80142fa:	68fb      	ldr	r3, [r7, #12]
 80142fc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8014300:	2b02      	cmp	r3, #2
 8014302:	d107      	bne.n	8014314 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8014304:	693b      	ldr	r3, [r7, #16]
 8014306:	79db      	ldrb	r3, [r3, #7]
 8014308:	2b08      	cmp	r3, #8
 801430a:	d005      	beq.n	8014318 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 801430c:	693b      	ldr	r3, [r7, #16]
 801430e:	2208      	movs	r2, #8
 8014310:	71da      	strb	r2, [r3, #7]
 8014312:	e001      	b.n	8014318 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8014314:	2303      	movs	r3, #3
 8014316:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8014318:	88fb      	ldrh	r3, [r7, #6]
 801431a:	2b08      	cmp	r3, #8
 801431c:	d936      	bls.n	801438c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 801431e:	68bb      	ldr	r3, [r7, #8]
 8014320:	3308      	adds	r3, #8
 8014322:	781b      	ldrb	r3, [r3, #0]
 8014324:	461a      	mov	r2, r3
 8014326:	68bb      	ldr	r3, [r7, #8]
 8014328:	3309      	adds	r3, #9
 801432a:	781b      	ldrb	r3, [r3, #0]
 801432c:	021b      	lsls	r3, r3, #8
 801432e:	b29b      	uxth	r3, r3
 8014330:	4313      	orrs	r3, r2
 8014332:	b29a      	uxth	r2, r3
 8014334:	693b      	ldr	r3, [r7, #16]
 8014336:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8014338:	68bb      	ldr	r3, [r7, #8]
 801433a:	330a      	adds	r3, #10
 801433c:	781b      	ldrb	r3, [r3, #0]
 801433e:	461a      	mov	r2, r3
 8014340:	68bb      	ldr	r3, [r7, #8]
 8014342:	330b      	adds	r3, #11
 8014344:	781b      	ldrb	r3, [r3, #0]
 8014346:	021b      	lsls	r3, r3, #8
 8014348:	b29b      	uxth	r3, r3
 801434a:	4313      	orrs	r3, r2
 801434c:	b29a      	uxth	r2, r3
 801434e:	693b      	ldr	r3, [r7, #16]
 8014350:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8014352:	68bb      	ldr	r3, [r7, #8]
 8014354:	330c      	adds	r3, #12
 8014356:	781b      	ldrb	r3, [r3, #0]
 8014358:	461a      	mov	r2, r3
 801435a:	68bb      	ldr	r3, [r7, #8]
 801435c:	330d      	adds	r3, #13
 801435e:	781b      	ldrb	r3, [r3, #0]
 8014360:	021b      	lsls	r3, r3, #8
 8014362:	b29b      	uxth	r3, r3
 8014364:	4313      	orrs	r3, r2
 8014366:	b29a      	uxth	r2, r3
 8014368:	693b      	ldr	r3, [r7, #16]
 801436a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 801436c:	68bb      	ldr	r3, [r7, #8]
 801436e:	7b9a      	ldrb	r2, [r3, #14]
 8014370:	693b      	ldr	r3, [r7, #16]
 8014372:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8014374:	68bb      	ldr	r3, [r7, #8]
 8014376:	7bda      	ldrb	r2, [r3, #15]
 8014378:	693b      	ldr	r3, [r7, #16]
 801437a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 801437c:	68bb      	ldr	r3, [r7, #8]
 801437e:	7c1a      	ldrb	r2, [r3, #16]
 8014380:	693b      	ldr	r3, [r7, #16]
 8014382:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8014384:	68bb      	ldr	r3, [r7, #8]
 8014386:	7c5a      	ldrb	r2, [r3, #17]
 8014388:	693b      	ldr	r3, [r7, #16]
 801438a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 801438c:	7dfb      	ldrb	r3, [r7, #23]
}
 801438e:	4618      	mov	r0, r3
 8014390:	371c      	adds	r7, #28
 8014392:	46bd      	mov	sp, r7
 8014394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014398:	4770      	bx	lr
 801439a:	bf00      	nop
 801439c:	01000101 	.word	0x01000101

080143a0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80143a0:	b580      	push	{r7, lr}
 80143a2:	b08c      	sub	sp, #48	@ 0x30
 80143a4:	af00      	add	r7, sp, #0
 80143a6:	60f8      	str	r0, [r7, #12]
 80143a8:	60b9      	str	r1, [r7, #8]
 80143aa:	4613      	mov	r3, r2
 80143ac:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80143b4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80143b6:	2300      	movs	r3, #0
 80143b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80143bc:	2300      	movs	r3, #0
 80143be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80143c2:	2300      	movs	r3, #0
 80143c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80143c8:	68bb      	ldr	r3, [r7, #8]
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d101      	bne.n	80143d2 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80143ce:	2302      	movs	r3, #2
 80143d0:	e0da      	b.n	8014588 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80143d2:	68bb      	ldr	r3, [r7, #8]
 80143d4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80143d6:	68bb      	ldr	r3, [r7, #8]
 80143d8:	781a      	ldrb	r2, [r3, #0]
 80143da:	6a3b      	ldr	r3, [r7, #32]
 80143dc:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80143de:	68bb      	ldr	r3, [r7, #8]
 80143e0:	785a      	ldrb	r2, [r3, #1]
 80143e2:	6a3b      	ldr	r3, [r7, #32]
 80143e4:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80143e6:	68bb      	ldr	r3, [r7, #8]
 80143e8:	3302      	adds	r3, #2
 80143ea:	781b      	ldrb	r3, [r3, #0]
 80143ec:	461a      	mov	r2, r3
 80143ee:	68bb      	ldr	r3, [r7, #8]
 80143f0:	3303      	adds	r3, #3
 80143f2:	781b      	ldrb	r3, [r3, #0]
 80143f4:	021b      	lsls	r3, r3, #8
 80143f6:	b29b      	uxth	r3, r3
 80143f8:	4313      	orrs	r3, r2
 80143fa:	b29b      	uxth	r3, r3
 80143fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014400:	bf28      	it	cs
 8014402:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8014406:	b29a      	uxth	r2, r3
 8014408:	6a3b      	ldr	r3, [r7, #32]
 801440a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 801440c:	68bb      	ldr	r3, [r7, #8]
 801440e:	791a      	ldrb	r2, [r3, #4]
 8014410:	6a3b      	ldr	r3, [r7, #32]
 8014412:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8014414:	68bb      	ldr	r3, [r7, #8]
 8014416:	795a      	ldrb	r2, [r3, #5]
 8014418:	6a3b      	ldr	r3, [r7, #32]
 801441a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 801441c:	68bb      	ldr	r3, [r7, #8]
 801441e:	799a      	ldrb	r2, [r3, #6]
 8014420:	6a3b      	ldr	r3, [r7, #32]
 8014422:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8014424:	68bb      	ldr	r3, [r7, #8]
 8014426:	79da      	ldrb	r2, [r3, #7]
 8014428:	6a3b      	ldr	r3, [r7, #32]
 801442a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 801442c:	68bb      	ldr	r3, [r7, #8]
 801442e:	7a1a      	ldrb	r2, [r3, #8]
 8014430:	6a3b      	ldr	r3, [r7, #32]
 8014432:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8014434:	6a3b      	ldr	r3, [r7, #32]
 8014436:	781b      	ldrb	r3, [r3, #0]
 8014438:	2b09      	cmp	r3, #9
 801443a:	d002      	beq.n	8014442 <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 801443c:	6a3b      	ldr	r3, [r7, #32]
 801443e:	2209      	movs	r2, #9
 8014440:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8014442:	88fb      	ldrh	r3, [r7, #6]
 8014444:	2b09      	cmp	r3, #9
 8014446:	f240 809d 	bls.w	8014584 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 801444a:	2309      	movs	r3, #9
 801444c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 801444e:	2300      	movs	r3, #0
 8014450:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8014452:	e081      	b.n	8014558 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8014454:	f107 0316 	add.w	r3, r7, #22
 8014458:	4619      	mov	r1, r3
 801445a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801445c:	f000 f9e7 	bl	801482e <USBH_GetNextDesc>
 8014460:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8014462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014464:	785b      	ldrb	r3, [r3, #1]
 8014466:	2b04      	cmp	r3, #4
 8014468:	d176      	bne.n	8014558 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 801446a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801446c:	781b      	ldrb	r3, [r3, #0]
 801446e:	2b09      	cmp	r3, #9
 8014470:	d002      	beq.n	8014478 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8014472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014474:	2209      	movs	r2, #9
 8014476:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8014478:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801447c:	221a      	movs	r2, #26
 801447e:	fb02 f303 	mul.w	r3, r2, r3
 8014482:	3308      	adds	r3, #8
 8014484:	6a3a      	ldr	r2, [r7, #32]
 8014486:	4413      	add	r3, r2
 8014488:	3302      	adds	r3, #2
 801448a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 801448c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801448e:	69f8      	ldr	r0, [r7, #28]
 8014490:	f000 f87e 	bl	8014590 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8014494:	2300      	movs	r3, #0
 8014496:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 801449a:	2300      	movs	r3, #0
 801449c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 801449e:	e043      	b.n	8014528 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80144a0:	f107 0316 	add.w	r3, r7, #22
 80144a4:	4619      	mov	r1, r3
 80144a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80144a8:	f000 f9c1 	bl	801482e <USBH_GetNextDesc>
 80144ac:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80144ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144b0:	785b      	ldrb	r3, [r3, #1]
 80144b2:	2b05      	cmp	r3, #5
 80144b4:	d138      	bne.n	8014528 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80144b6:	69fb      	ldr	r3, [r7, #28]
 80144b8:	795b      	ldrb	r3, [r3, #5]
 80144ba:	2b01      	cmp	r3, #1
 80144bc:	d113      	bne.n	80144e6 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80144be:	69fb      	ldr	r3, [r7, #28]
 80144c0:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80144c2:	2b02      	cmp	r3, #2
 80144c4:	d003      	beq.n	80144ce <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80144c6:	69fb      	ldr	r3, [r7, #28]
 80144c8:	799b      	ldrb	r3, [r3, #6]
 80144ca:	2b03      	cmp	r3, #3
 80144cc:	d10b      	bne.n	80144e6 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80144ce:	69fb      	ldr	r3, [r7, #28]
 80144d0:	79db      	ldrb	r3, [r3, #7]
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d10b      	bne.n	80144ee <USBH_ParseCfgDesc+0x14e>
 80144d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144d8:	781b      	ldrb	r3, [r3, #0]
 80144da:	2b09      	cmp	r3, #9
 80144dc:	d007      	beq.n	80144ee <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80144de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144e0:	2209      	movs	r2, #9
 80144e2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80144e4:	e003      	b.n	80144ee <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80144e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144e8:	2207      	movs	r2, #7
 80144ea:	701a      	strb	r2, [r3, #0]
 80144ec:	e000      	b.n	80144f0 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80144ee:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80144f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80144f4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80144f8:	3201      	adds	r2, #1
 80144fa:	00d2      	lsls	r2, r2, #3
 80144fc:	211a      	movs	r1, #26
 80144fe:	fb01 f303 	mul.w	r3, r1, r3
 8014502:	4413      	add	r3, r2
 8014504:	3308      	adds	r3, #8
 8014506:	6a3a      	ldr	r2, [r7, #32]
 8014508:	4413      	add	r3, r2
 801450a:	3304      	adds	r3, #4
 801450c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 801450e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014510:	69b9      	ldr	r1, [r7, #24]
 8014512:	68f8      	ldr	r0, [r7, #12]
 8014514:	f000 f870 	bl	80145f8 <USBH_ParseEPDesc>
 8014518:	4603      	mov	r3, r0
 801451a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 801451e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014522:	3301      	adds	r3, #1
 8014524:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8014528:	69fb      	ldr	r3, [r7, #28]
 801452a:	791b      	ldrb	r3, [r3, #4]
 801452c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8014530:	429a      	cmp	r2, r3
 8014532:	d204      	bcs.n	801453e <USBH_ParseCfgDesc+0x19e>
 8014534:	6a3b      	ldr	r3, [r7, #32]
 8014536:	885a      	ldrh	r2, [r3, #2]
 8014538:	8afb      	ldrh	r3, [r7, #22]
 801453a:	429a      	cmp	r2, r3
 801453c:	d8b0      	bhi.n	80144a0 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 801453e:	69fb      	ldr	r3, [r7, #28]
 8014540:	791b      	ldrb	r3, [r3, #4]
 8014542:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8014546:	429a      	cmp	r2, r3
 8014548:	d201      	bcs.n	801454e <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 801454a:	2303      	movs	r3, #3
 801454c:	e01c      	b.n	8014588 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 801454e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014552:	3301      	adds	r3, #1
 8014554:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8014558:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801455c:	2b01      	cmp	r3, #1
 801455e:	d805      	bhi.n	801456c <USBH_ParseCfgDesc+0x1cc>
 8014560:	6a3b      	ldr	r3, [r7, #32]
 8014562:	885a      	ldrh	r2, [r3, #2]
 8014564:	8afb      	ldrh	r3, [r7, #22]
 8014566:	429a      	cmp	r2, r3
 8014568:	f63f af74 	bhi.w	8014454 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 801456c:	6a3b      	ldr	r3, [r7, #32]
 801456e:	791b      	ldrb	r3, [r3, #4]
 8014570:	2b02      	cmp	r3, #2
 8014572:	bf28      	it	cs
 8014574:	2302      	movcs	r3, #2
 8014576:	b2db      	uxtb	r3, r3
 8014578:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801457c:	429a      	cmp	r2, r3
 801457e:	d201      	bcs.n	8014584 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8014580:	2303      	movs	r3, #3
 8014582:	e001      	b.n	8014588 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8014584:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8014588:	4618      	mov	r0, r3
 801458a:	3730      	adds	r7, #48	@ 0x30
 801458c:	46bd      	mov	sp, r7
 801458e:	bd80      	pop	{r7, pc}

08014590 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8014590:	b480      	push	{r7}
 8014592:	b083      	sub	sp, #12
 8014594:	af00      	add	r7, sp, #0
 8014596:	6078      	str	r0, [r7, #4]
 8014598:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 801459a:	683b      	ldr	r3, [r7, #0]
 801459c:	781a      	ldrb	r2, [r3, #0]
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80145a2:	683b      	ldr	r3, [r7, #0]
 80145a4:	785a      	ldrb	r2, [r3, #1]
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80145aa:	683b      	ldr	r3, [r7, #0]
 80145ac:	789a      	ldrb	r2, [r3, #2]
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80145b2:	683b      	ldr	r3, [r7, #0]
 80145b4:	78da      	ldrb	r2, [r3, #3]
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80145ba:	683b      	ldr	r3, [r7, #0]
 80145bc:	3304      	adds	r3, #4
 80145be:	781b      	ldrb	r3, [r3, #0]
 80145c0:	2b02      	cmp	r3, #2
 80145c2:	bf28      	it	cs
 80145c4:	2302      	movcs	r3, #2
 80145c6:	b2da      	uxtb	r2, r3
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80145cc:	683b      	ldr	r3, [r7, #0]
 80145ce:	795a      	ldrb	r2, [r3, #5]
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80145d4:	683b      	ldr	r3, [r7, #0]
 80145d6:	799a      	ldrb	r2, [r3, #6]
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80145dc:	683b      	ldr	r3, [r7, #0]
 80145de:	79da      	ldrb	r2, [r3, #7]
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80145e4:	683b      	ldr	r3, [r7, #0]
 80145e6:	7a1a      	ldrb	r2, [r3, #8]
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	721a      	strb	r2, [r3, #8]
}
 80145ec:	bf00      	nop
 80145ee:	370c      	adds	r7, #12
 80145f0:	46bd      	mov	sp, r7
 80145f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145f6:	4770      	bx	lr

080145f8 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80145f8:	b480      	push	{r7}
 80145fa:	b087      	sub	sp, #28
 80145fc:	af00      	add	r7, sp, #0
 80145fe:	60f8      	str	r0, [r7, #12]
 8014600:	60b9      	str	r1, [r7, #8]
 8014602:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8014604:	2300      	movs	r3, #0
 8014606:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	781a      	ldrb	r2, [r3, #0]
 801460c:	68bb      	ldr	r3, [r7, #8]
 801460e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	785a      	ldrb	r2, [r3, #1]
 8014614:	68bb      	ldr	r3, [r7, #8]
 8014616:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	789a      	ldrb	r2, [r3, #2]
 801461c:	68bb      	ldr	r3, [r7, #8]
 801461e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	78da      	ldrb	r2, [r3, #3]
 8014624:	68bb      	ldr	r3, [r7, #8]
 8014626:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	3304      	adds	r3, #4
 801462c:	781b      	ldrb	r3, [r3, #0]
 801462e:	461a      	mov	r2, r3
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	3305      	adds	r3, #5
 8014634:	781b      	ldrb	r3, [r3, #0]
 8014636:	021b      	lsls	r3, r3, #8
 8014638:	b29b      	uxth	r3, r3
 801463a:	4313      	orrs	r3, r2
 801463c:	b29a      	uxth	r2, r3
 801463e:	68bb      	ldr	r3, [r7, #8]
 8014640:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	799a      	ldrb	r2, [r3, #6]
 8014646:	68bb      	ldr	r3, [r7, #8]
 8014648:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 801464a:	68bb      	ldr	r3, [r7, #8]
 801464c:	889b      	ldrh	r3, [r3, #4]
 801464e:	2b00      	cmp	r3, #0
 8014650:	d009      	beq.n	8014666 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8014652:	68bb      	ldr	r3, [r7, #8]
 8014654:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8014656:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801465a:	d804      	bhi.n	8014666 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 801465c:	68bb      	ldr	r3, [r7, #8]
 801465e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8014660:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014664:	d901      	bls.n	801466a <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8014666:	2303      	movs	r3, #3
 8014668:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 801466a:	68fb      	ldr	r3, [r7, #12]
 801466c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8014670:	2b00      	cmp	r3, #0
 8014672:	d136      	bne.n	80146e2 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8014674:	68bb      	ldr	r3, [r7, #8]
 8014676:	78db      	ldrb	r3, [r3, #3]
 8014678:	f003 0303 	and.w	r3, r3, #3
 801467c:	2b02      	cmp	r3, #2
 801467e:	d108      	bne.n	8014692 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8014680:	68bb      	ldr	r3, [r7, #8]
 8014682:	889b      	ldrh	r3, [r3, #4]
 8014684:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014688:	f240 8097 	bls.w	80147ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 801468c:	2303      	movs	r3, #3
 801468e:	75fb      	strb	r3, [r7, #23]
 8014690:	e093      	b.n	80147ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8014692:	68bb      	ldr	r3, [r7, #8]
 8014694:	78db      	ldrb	r3, [r3, #3]
 8014696:	f003 0303 	and.w	r3, r3, #3
 801469a:	2b00      	cmp	r3, #0
 801469c:	d107      	bne.n	80146ae <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 801469e:	68bb      	ldr	r3, [r7, #8]
 80146a0:	889b      	ldrh	r3, [r3, #4]
 80146a2:	2b40      	cmp	r3, #64	@ 0x40
 80146a4:	f240 8089 	bls.w	80147ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80146a8:	2303      	movs	r3, #3
 80146aa:	75fb      	strb	r3, [r7, #23]
 80146ac:	e085      	b.n	80147ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80146ae:	68bb      	ldr	r3, [r7, #8]
 80146b0:	78db      	ldrb	r3, [r3, #3]
 80146b2:	f003 0303 	and.w	r3, r3, #3
 80146b6:	2b01      	cmp	r3, #1
 80146b8:	d005      	beq.n	80146c6 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80146ba:	68bb      	ldr	r3, [r7, #8]
 80146bc:	78db      	ldrb	r3, [r3, #3]
 80146be:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80146c2:	2b03      	cmp	r3, #3
 80146c4:	d10a      	bne.n	80146dc <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80146c6:	68bb      	ldr	r3, [r7, #8]
 80146c8:	799b      	ldrb	r3, [r3, #6]
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d003      	beq.n	80146d6 <USBH_ParseEPDesc+0xde>
 80146ce:	68bb      	ldr	r3, [r7, #8]
 80146d0:	799b      	ldrb	r3, [r3, #6]
 80146d2:	2b10      	cmp	r3, #16
 80146d4:	d970      	bls.n	80147b8 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80146d6:	2303      	movs	r3, #3
 80146d8:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80146da:	e06d      	b.n	80147b8 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80146dc:	2303      	movs	r3, #3
 80146de:	75fb      	strb	r3, [r7, #23]
 80146e0:	e06b      	b.n	80147ba <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80146e8:	2b01      	cmp	r3, #1
 80146ea:	d13c      	bne.n	8014766 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80146ec:	68bb      	ldr	r3, [r7, #8]
 80146ee:	78db      	ldrb	r3, [r3, #3]
 80146f0:	f003 0303 	and.w	r3, r3, #3
 80146f4:	2b02      	cmp	r3, #2
 80146f6:	d005      	beq.n	8014704 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80146f8:	68bb      	ldr	r3, [r7, #8]
 80146fa:	78db      	ldrb	r3, [r3, #3]
 80146fc:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8014700:	2b00      	cmp	r3, #0
 8014702:	d106      	bne.n	8014712 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8014704:	68bb      	ldr	r3, [r7, #8]
 8014706:	889b      	ldrh	r3, [r3, #4]
 8014708:	2b40      	cmp	r3, #64	@ 0x40
 801470a:	d956      	bls.n	80147ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 801470c:	2303      	movs	r3, #3
 801470e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8014710:	e053      	b.n	80147ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8014712:	68bb      	ldr	r3, [r7, #8]
 8014714:	78db      	ldrb	r3, [r3, #3]
 8014716:	f003 0303 	and.w	r3, r3, #3
 801471a:	2b01      	cmp	r3, #1
 801471c:	d10e      	bne.n	801473c <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 801471e:	68bb      	ldr	r3, [r7, #8]
 8014720:	799b      	ldrb	r3, [r3, #6]
 8014722:	2b00      	cmp	r3, #0
 8014724:	d007      	beq.n	8014736 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8014726:	68bb      	ldr	r3, [r7, #8]
 8014728:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 801472a:	2b10      	cmp	r3, #16
 801472c:	d803      	bhi.n	8014736 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 801472e:	68bb      	ldr	r3, [r7, #8]
 8014730:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8014732:	2b40      	cmp	r3, #64	@ 0x40
 8014734:	d941      	bls.n	80147ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8014736:	2303      	movs	r3, #3
 8014738:	75fb      	strb	r3, [r7, #23]
 801473a:	e03e      	b.n	80147ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 801473c:	68bb      	ldr	r3, [r7, #8]
 801473e:	78db      	ldrb	r3, [r3, #3]
 8014740:	f003 0303 	and.w	r3, r3, #3
 8014744:	2b03      	cmp	r3, #3
 8014746:	d10b      	bne.n	8014760 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8014748:	68bb      	ldr	r3, [r7, #8]
 801474a:	799b      	ldrb	r3, [r3, #6]
 801474c:	2b00      	cmp	r3, #0
 801474e:	d004      	beq.n	801475a <USBH_ParseEPDesc+0x162>
 8014750:	68bb      	ldr	r3, [r7, #8]
 8014752:	889b      	ldrh	r3, [r3, #4]
 8014754:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014758:	d32f      	bcc.n	80147ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 801475a:	2303      	movs	r3, #3
 801475c:	75fb      	strb	r3, [r7, #23]
 801475e:	e02c      	b.n	80147ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8014760:	2303      	movs	r3, #3
 8014762:	75fb      	strb	r3, [r7, #23]
 8014764:	e029      	b.n	80147ba <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 801476c:	2b02      	cmp	r3, #2
 801476e:	d120      	bne.n	80147b2 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8014770:	68bb      	ldr	r3, [r7, #8]
 8014772:	78db      	ldrb	r3, [r3, #3]
 8014774:	f003 0303 	and.w	r3, r3, #3
 8014778:	2b00      	cmp	r3, #0
 801477a:	d106      	bne.n	801478a <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 801477c:	68bb      	ldr	r3, [r7, #8]
 801477e:	889b      	ldrh	r3, [r3, #4]
 8014780:	2b08      	cmp	r3, #8
 8014782:	d01a      	beq.n	80147ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8014784:	2303      	movs	r3, #3
 8014786:	75fb      	strb	r3, [r7, #23]
 8014788:	e017      	b.n	80147ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 801478a:	68bb      	ldr	r3, [r7, #8]
 801478c:	78db      	ldrb	r3, [r3, #3]
 801478e:	f003 0303 	and.w	r3, r3, #3
 8014792:	2b03      	cmp	r3, #3
 8014794:	d10a      	bne.n	80147ac <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8014796:	68bb      	ldr	r3, [r7, #8]
 8014798:	799b      	ldrb	r3, [r3, #6]
 801479a:	2b00      	cmp	r3, #0
 801479c:	d003      	beq.n	80147a6 <USBH_ParseEPDesc+0x1ae>
 801479e:	68bb      	ldr	r3, [r7, #8]
 80147a0:	889b      	ldrh	r3, [r3, #4]
 80147a2:	2b08      	cmp	r3, #8
 80147a4:	d909      	bls.n	80147ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80147a6:	2303      	movs	r3, #3
 80147a8:	75fb      	strb	r3, [r7, #23]
 80147aa:	e006      	b.n	80147ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80147ac:	2303      	movs	r3, #3
 80147ae:	75fb      	strb	r3, [r7, #23]
 80147b0:	e003      	b.n	80147ba <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80147b2:	2303      	movs	r3, #3
 80147b4:	75fb      	strb	r3, [r7, #23]
 80147b6:	e000      	b.n	80147ba <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80147b8:	bf00      	nop
  }

  return status;
 80147ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80147bc:	4618      	mov	r0, r3
 80147be:	371c      	adds	r7, #28
 80147c0:	46bd      	mov	sp, r7
 80147c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147c6:	4770      	bx	lr

080147c8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80147c8:	b480      	push	{r7}
 80147ca:	b087      	sub	sp, #28
 80147cc:	af00      	add	r7, sp, #0
 80147ce:	60f8      	str	r0, [r7, #12]
 80147d0:	60b9      	str	r1, [r7, #8]
 80147d2:	4613      	mov	r3, r2
 80147d4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	3301      	adds	r3, #1
 80147da:	781b      	ldrb	r3, [r3, #0]
 80147dc:	2b03      	cmp	r3, #3
 80147de:	d120      	bne.n	8014822 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	781b      	ldrb	r3, [r3, #0]
 80147e4:	1e9a      	subs	r2, r3, #2
 80147e6:	88fb      	ldrh	r3, [r7, #6]
 80147e8:	4293      	cmp	r3, r2
 80147ea:	bf28      	it	cs
 80147ec:	4613      	movcs	r3, r2
 80147ee:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80147f0:	68fb      	ldr	r3, [r7, #12]
 80147f2:	3302      	adds	r3, #2
 80147f4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80147f6:	2300      	movs	r3, #0
 80147f8:	82fb      	strh	r3, [r7, #22]
 80147fa:	e00b      	b.n	8014814 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80147fc:	8afb      	ldrh	r3, [r7, #22]
 80147fe:	68fa      	ldr	r2, [r7, #12]
 8014800:	4413      	add	r3, r2
 8014802:	781a      	ldrb	r2, [r3, #0]
 8014804:	68bb      	ldr	r3, [r7, #8]
 8014806:	701a      	strb	r2, [r3, #0]
      pdest++;
 8014808:	68bb      	ldr	r3, [r7, #8]
 801480a:	3301      	adds	r3, #1
 801480c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 801480e:	8afb      	ldrh	r3, [r7, #22]
 8014810:	3302      	adds	r3, #2
 8014812:	82fb      	strh	r3, [r7, #22]
 8014814:	8afa      	ldrh	r2, [r7, #22]
 8014816:	8abb      	ldrh	r3, [r7, #20]
 8014818:	429a      	cmp	r2, r3
 801481a:	d3ef      	bcc.n	80147fc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 801481c:	68bb      	ldr	r3, [r7, #8]
 801481e:	2200      	movs	r2, #0
 8014820:	701a      	strb	r2, [r3, #0]
  }
}
 8014822:	bf00      	nop
 8014824:	371c      	adds	r7, #28
 8014826:	46bd      	mov	sp, r7
 8014828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801482c:	4770      	bx	lr

0801482e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801482e:	b480      	push	{r7}
 8014830:	b085      	sub	sp, #20
 8014832:	af00      	add	r7, sp, #0
 8014834:	6078      	str	r0, [r7, #4]
 8014836:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8014838:	683b      	ldr	r3, [r7, #0]
 801483a:	881b      	ldrh	r3, [r3, #0]
 801483c:	687a      	ldr	r2, [r7, #4]
 801483e:	7812      	ldrb	r2, [r2, #0]
 8014840:	4413      	add	r3, r2
 8014842:	b29a      	uxth	r2, r3
 8014844:	683b      	ldr	r3, [r7, #0]
 8014846:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	781b      	ldrb	r3, [r3, #0]
 801484c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	4413      	add	r3, r2
 8014852:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8014854:	68fb      	ldr	r3, [r7, #12]
}
 8014856:	4618      	mov	r0, r3
 8014858:	3714      	adds	r7, #20
 801485a:	46bd      	mov	sp, r7
 801485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014860:	4770      	bx	lr

08014862 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8014862:	b580      	push	{r7, lr}
 8014864:	b086      	sub	sp, #24
 8014866:	af00      	add	r7, sp, #0
 8014868:	60f8      	str	r0, [r7, #12]
 801486a:	60b9      	str	r1, [r7, #8]
 801486c:	4613      	mov	r3, r2
 801486e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8014870:	2301      	movs	r3, #1
 8014872:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	789b      	ldrb	r3, [r3, #2]
 8014878:	2b01      	cmp	r3, #1
 801487a:	d002      	beq.n	8014882 <USBH_CtlReq+0x20>
 801487c:	2b02      	cmp	r3, #2
 801487e:	d00f      	beq.n	80148a0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8014880:	e027      	b.n	80148d2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8014882:	68fb      	ldr	r3, [r7, #12]
 8014884:	68ba      	ldr	r2, [r7, #8]
 8014886:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	88fa      	ldrh	r2, [r7, #6]
 801488c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 801488e:	68fb      	ldr	r3, [r7, #12]
 8014890:	2201      	movs	r2, #1
 8014892:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	2202      	movs	r2, #2
 8014898:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 801489a:	2301      	movs	r3, #1
 801489c:	75fb      	strb	r3, [r7, #23]
      break;
 801489e:	e018      	b.n	80148d2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80148a0:	68f8      	ldr	r0, [r7, #12]
 80148a2:	f000 f81b 	bl	80148dc <USBH_HandleControl>
 80148a6:	4603      	mov	r3, r0
 80148a8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80148aa:	7dfb      	ldrb	r3, [r7, #23]
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d002      	beq.n	80148b6 <USBH_CtlReq+0x54>
 80148b0:	7dfb      	ldrb	r3, [r7, #23]
 80148b2:	2b03      	cmp	r3, #3
 80148b4:	d106      	bne.n	80148c4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	2201      	movs	r2, #1
 80148ba:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	2200      	movs	r2, #0
 80148c0:	761a      	strb	r2, [r3, #24]
      break;
 80148c2:	e005      	b.n	80148d0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80148c4:	7dfb      	ldrb	r3, [r7, #23]
 80148c6:	2b02      	cmp	r3, #2
 80148c8:	d102      	bne.n	80148d0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	2201      	movs	r2, #1
 80148ce:	709a      	strb	r2, [r3, #2]
      break;
 80148d0:	bf00      	nop
  }
  return status;
 80148d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80148d4:	4618      	mov	r0, r3
 80148d6:	3718      	adds	r7, #24
 80148d8:	46bd      	mov	sp, r7
 80148da:	bd80      	pop	{r7, pc}

080148dc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80148dc:	b580      	push	{r7, lr}
 80148de:	b086      	sub	sp, #24
 80148e0:	af02      	add	r7, sp, #8
 80148e2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80148e4:	2301      	movs	r3, #1
 80148e6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80148e8:	2300      	movs	r3, #0
 80148ea:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	7e1b      	ldrb	r3, [r3, #24]
 80148f0:	3b01      	subs	r3, #1
 80148f2:	2b0a      	cmp	r3, #10
 80148f4:	f200 8156 	bhi.w	8014ba4 <USBH_HandleControl+0x2c8>
 80148f8:	a201      	add	r2, pc, #4	@ (adr r2, 8014900 <USBH_HandleControl+0x24>)
 80148fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148fe:	bf00      	nop
 8014900:	0801492d 	.word	0x0801492d
 8014904:	08014947 	.word	0x08014947
 8014908:	080149b1 	.word	0x080149b1
 801490c:	080149d7 	.word	0x080149d7
 8014910:	08014a0f 	.word	0x08014a0f
 8014914:	08014a39 	.word	0x08014a39
 8014918:	08014a8b 	.word	0x08014a8b
 801491c:	08014aad 	.word	0x08014aad
 8014920:	08014ae9 	.word	0x08014ae9
 8014924:	08014b0f 	.word	0x08014b0f
 8014928:	08014b4d 	.word	0x08014b4d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	f103 0110 	add.w	r1, r3, #16
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	795b      	ldrb	r3, [r3, #5]
 8014936:	461a      	mov	r2, r3
 8014938:	6878      	ldr	r0, [r7, #4]
 801493a:	f000 f943 	bl	8014bc4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	2202      	movs	r2, #2
 8014942:	761a      	strb	r2, [r3, #24]
      break;
 8014944:	e139      	b.n	8014bba <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	795b      	ldrb	r3, [r3, #5]
 801494a:	4619      	mov	r1, r3
 801494c:	6878      	ldr	r0, [r7, #4]
 801494e:	f000 fcc5 	bl	80152dc <USBH_LL_GetURBState>
 8014952:	4603      	mov	r3, r0
 8014954:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8014956:	7bbb      	ldrb	r3, [r7, #14]
 8014958:	2b01      	cmp	r3, #1
 801495a:	d11e      	bne.n	801499a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	7c1b      	ldrb	r3, [r3, #16]
 8014960:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8014964:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	8adb      	ldrh	r3, [r3, #22]
 801496a:	2b00      	cmp	r3, #0
 801496c:	d00a      	beq.n	8014984 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 801496e:	7b7b      	ldrb	r3, [r7, #13]
 8014970:	2b80      	cmp	r3, #128	@ 0x80
 8014972:	d103      	bne.n	801497c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	2203      	movs	r2, #3
 8014978:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 801497a:	e115      	b.n	8014ba8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	2205      	movs	r2, #5
 8014980:	761a      	strb	r2, [r3, #24]
      break;
 8014982:	e111      	b.n	8014ba8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8014984:	7b7b      	ldrb	r3, [r7, #13]
 8014986:	2b80      	cmp	r3, #128	@ 0x80
 8014988:	d103      	bne.n	8014992 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	2209      	movs	r2, #9
 801498e:	761a      	strb	r2, [r3, #24]
      break;
 8014990:	e10a      	b.n	8014ba8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	2207      	movs	r2, #7
 8014996:	761a      	strb	r2, [r3, #24]
      break;
 8014998:	e106      	b.n	8014ba8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 801499a:	7bbb      	ldrb	r3, [r7, #14]
 801499c:	2b04      	cmp	r3, #4
 801499e:	d003      	beq.n	80149a8 <USBH_HandleControl+0xcc>
 80149a0:	7bbb      	ldrb	r3, [r7, #14]
 80149a2:	2b02      	cmp	r3, #2
 80149a4:	f040 8100 	bne.w	8014ba8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	220b      	movs	r2, #11
 80149ac:	761a      	strb	r2, [r3, #24]
      break;
 80149ae:	e0fb      	b.n	8014ba8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80149b6:	b29a      	uxth	r2, r3
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	6899      	ldr	r1, [r3, #8]
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	899a      	ldrh	r2, [r3, #12]
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	791b      	ldrb	r3, [r3, #4]
 80149c8:	6878      	ldr	r0, [r7, #4]
 80149ca:	f000 f93a 	bl	8014c42 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	2204      	movs	r2, #4
 80149d2:	761a      	strb	r2, [r3, #24]
      break;
 80149d4:	e0f1      	b.n	8014bba <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	791b      	ldrb	r3, [r3, #4]
 80149da:	4619      	mov	r1, r3
 80149dc:	6878      	ldr	r0, [r7, #4]
 80149de:	f000 fc7d 	bl	80152dc <USBH_LL_GetURBState>
 80149e2:	4603      	mov	r3, r0
 80149e4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80149e6:	7bbb      	ldrb	r3, [r7, #14]
 80149e8:	2b01      	cmp	r3, #1
 80149ea:	d102      	bne.n	80149f2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	2209      	movs	r2, #9
 80149f0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80149f2:	7bbb      	ldrb	r3, [r7, #14]
 80149f4:	2b05      	cmp	r3, #5
 80149f6:	d102      	bne.n	80149fe <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80149f8:	2303      	movs	r3, #3
 80149fa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80149fc:	e0d6      	b.n	8014bac <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80149fe:	7bbb      	ldrb	r3, [r7, #14]
 8014a00:	2b04      	cmp	r3, #4
 8014a02:	f040 80d3 	bne.w	8014bac <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	220b      	movs	r2, #11
 8014a0a:	761a      	strb	r2, [r3, #24]
      break;
 8014a0c:	e0ce      	b.n	8014bac <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	6899      	ldr	r1, [r3, #8]
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	899a      	ldrh	r2, [r3, #12]
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	795b      	ldrb	r3, [r3, #5]
 8014a1a:	2001      	movs	r0, #1
 8014a1c:	9000      	str	r0, [sp, #0]
 8014a1e:	6878      	ldr	r0, [r7, #4]
 8014a20:	f000 f8ea 	bl	8014bf8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8014a2a:	b29a      	uxth	r2, r3
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	2206      	movs	r2, #6
 8014a34:	761a      	strb	r2, [r3, #24]
      break;
 8014a36:	e0c0      	b.n	8014bba <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	795b      	ldrb	r3, [r3, #5]
 8014a3c:	4619      	mov	r1, r3
 8014a3e:	6878      	ldr	r0, [r7, #4]
 8014a40:	f000 fc4c 	bl	80152dc <USBH_LL_GetURBState>
 8014a44:	4603      	mov	r3, r0
 8014a46:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8014a48:	7bbb      	ldrb	r3, [r7, #14]
 8014a4a:	2b01      	cmp	r3, #1
 8014a4c:	d103      	bne.n	8014a56 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	2207      	movs	r2, #7
 8014a52:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8014a54:	e0ac      	b.n	8014bb0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8014a56:	7bbb      	ldrb	r3, [r7, #14]
 8014a58:	2b05      	cmp	r3, #5
 8014a5a:	d105      	bne.n	8014a68 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	220c      	movs	r2, #12
 8014a60:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8014a62:	2303      	movs	r3, #3
 8014a64:	73fb      	strb	r3, [r7, #15]
      break;
 8014a66:	e0a3      	b.n	8014bb0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8014a68:	7bbb      	ldrb	r3, [r7, #14]
 8014a6a:	2b02      	cmp	r3, #2
 8014a6c:	d103      	bne.n	8014a76 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	2205      	movs	r2, #5
 8014a72:	761a      	strb	r2, [r3, #24]
      break;
 8014a74:	e09c      	b.n	8014bb0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8014a76:	7bbb      	ldrb	r3, [r7, #14]
 8014a78:	2b04      	cmp	r3, #4
 8014a7a:	f040 8099 	bne.w	8014bb0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	220b      	movs	r2, #11
 8014a82:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8014a84:	2302      	movs	r3, #2
 8014a86:	73fb      	strb	r3, [r7, #15]
      break;
 8014a88:	e092      	b.n	8014bb0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	791b      	ldrb	r3, [r3, #4]
 8014a8e:	2200      	movs	r2, #0
 8014a90:	2100      	movs	r1, #0
 8014a92:	6878      	ldr	r0, [r7, #4]
 8014a94:	f000 f8d5 	bl	8014c42 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8014a9e:	b29a      	uxth	r2, r3
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	2208      	movs	r2, #8
 8014aa8:	761a      	strb	r2, [r3, #24]

      break;
 8014aaa:	e086      	b.n	8014bba <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	791b      	ldrb	r3, [r3, #4]
 8014ab0:	4619      	mov	r1, r3
 8014ab2:	6878      	ldr	r0, [r7, #4]
 8014ab4:	f000 fc12 	bl	80152dc <USBH_LL_GetURBState>
 8014ab8:	4603      	mov	r3, r0
 8014aba:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8014abc:	7bbb      	ldrb	r3, [r7, #14]
 8014abe:	2b01      	cmp	r3, #1
 8014ac0:	d105      	bne.n	8014ace <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	220d      	movs	r2, #13
 8014ac6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8014ac8:	2300      	movs	r3, #0
 8014aca:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8014acc:	e072      	b.n	8014bb4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8014ace:	7bbb      	ldrb	r3, [r7, #14]
 8014ad0:	2b04      	cmp	r3, #4
 8014ad2:	d103      	bne.n	8014adc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	220b      	movs	r2, #11
 8014ad8:	761a      	strb	r2, [r3, #24]
      break;
 8014ada:	e06b      	b.n	8014bb4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8014adc:	7bbb      	ldrb	r3, [r7, #14]
 8014ade:	2b05      	cmp	r3, #5
 8014ae0:	d168      	bne.n	8014bb4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8014ae2:	2303      	movs	r3, #3
 8014ae4:	73fb      	strb	r3, [r7, #15]
      break;
 8014ae6:	e065      	b.n	8014bb4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	795b      	ldrb	r3, [r3, #5]
 8014aec:	2201      	movs	r2, #1
 8014aee:	9200      	str	r2, [sp, #0]
 8014af0:	2200      	movs	r2, #0
 8014af2:	2100      	movs	r1, #0
 8014af4:	6878      	ldr	r0, [r7, #4]
 8014af6:	f000 f87f 	bl	8014bf8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8014b00:	b29a      	uxth	r2, r3
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	220a      	movs	r2, #10
 8014b0a:	761a      	strb	r2, [r3, #24]
      break;
 8014b0c:	e055      	b.n	8014bba <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	795b      	ldrb	r3, [r3, #5]
 8014b12:	4619      	mov	r1, r3
 8014b14:	6878      	ldr	r0, [r7, #4]
 8014b16:	f000 fbe1 	bl	80152dc <USBH_LL_GetURBState>
 8014b1a:	4603      	mov	r3, r0
 8014b1c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8014b1e:	7bbb      	ldrb	r3, [r7, #14]
 8014b20:	2b01      	cmp	r3, #1
 8014b22:	d105      	bne.n	8014b30 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8014b24:	2300      	movs	r3, #0
 8014b26:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	220d      	movs	r2, #13
 8014b2c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8014b2e:	e043      	b.n	8014bb8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8014b30:	7bbb      	ldrb	r3, [r7, #14]
 8014b32:	2b02      	cmp	r3, #2
 8014b34:	d103      	bne.n	8014b3e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	2209      	movs	r2, #9
 8014b3a:	761a      	strb	r2, [r3, #24]
      break;
 8014b3c:	e03c      	b.n	8014bb8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8014b3e:	7bbb      	ldrb	r3, [r7, #14]
 8014b40:	2b04      	cmp	r3, #4
 8014b42:	d139      	bne.n	8014bb8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	220b      	movs	r2, #11
 8014b48:	761a      	strb	r2, [r3, #24]
      break;
 8014b4a:	e035      	b.n	8014bb8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	7e5b      	ldrb	r3, [r3, #25]
 8014b50:	3301      	adds	r3, #1
 8014b52:	b2da      	uxtb	r2, r3
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	765a      	strb	r2, [r3, #25]
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	7e5b      	ldrb	r3, [r3, #25]
 8014b5c:	2b02      	cmp	r3, #2
 8014b5e:	d806      	bhi.n	8014b6e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	2201      	movs	r2, #1
 8014b64:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	2201      	movs	r2, #1
 8014b6a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8014b6c:	e025      	b.n	8014bba <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8014b74:	2106      	movs	r1, #6
 8014b76:	6878      	ldr	r0, [r7, #4]
 8014b78:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	2200      	movs	r2, #0
 8014b7e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	795b      	ldrb	r3, [r3, #5]
 8014b84:	4619      	mov	r1, r3
 8014b86:	6878      	ldr	r0, [r7, #4]
 8014b88:	f000 f90c 	bl	8014da4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	791b      	ldrb	r3, [r3, #4]
 8014b90:	4619      	mov	r1, r3
 8014b92:	6878      	ldr	r0, [r7, #4]
 8014b94:	f000 f906 	bl	8014da4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	2200      	movs	r2, #0
 8014b9c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8014b9e:	2302      	movs	r3, #2
 8014ba0:	73fb      	strb	r3, [r7, #15]
      break;
 8014ba2:	e00a      	b.n	8014bba <USBH_HandleControl+0x2de>

    default:
      break;
 8014ba4:	bf00      	nop
 8014ba6:	e008      	b.n	8014bba <USBH_HandleControl+0x2de>
      break;
 8014ba8:	bf00      	nop
 8014baa:	e006      	b.n	8014bba <USBH_HandleControl+0x2de>
      break;
 8014bac:	bf00      	nop
 8014bae:	e004      	b.n	8014bba <USBH_HandleControl+0x2de>
      break;
 8014bb0:	bf00      	nop
 8014bb2:	e002      	b.n	8014bba <USBH_HandleControl+0x2de>
      break;
 8014bb4:	bf00      	nop
 8014bb6:	e000      	b.n	8014bba <USBH_HandleControl+0x2de>
      break;
 8014bb8:	bf00      	nop
  }

  return status;
 8014bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8014bbc:	4618      	mov	r0, r3
 8014bbe:	3710      	adds	r7, #16
 8014bc0:	46bd      	mov	sp, r7
 8014bc2:	bd80      	pop	{r7, pc}

08014bc4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8014bc4:	b580      	push	{r7, lr}
 8014bc6:	b088      	sub	sp, #32
 8014bc8:	af04      	add	r7, sp, #16
 8014bca:	60f8      	str	r0, [r7, #12]
 8014bcc:	60b9      	str	r1, [r7, #8]
 8014bce:	4613      	mov	r3, r2
 8014bd0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8014bd2:	79f9      	ldrb	r1, [r7, #7]
 8014bd4:	2300      	movs	r3, #0
 8014bd6:	9303      	str	r3, [sp, #12]
 8014bd8:	2308      	movs	r3, #8
 8014bda:	9302      	str	r3, [sp, #8]
 8014bdc:	68bb      	ldr	r3, [r7, #8]
 8014bde:	9301      	str	r3, [sp, #4]
 8014be0:	2300      	movs	r3, #0
 8014be2:	9300      	str	r3, [sp, #0]
 8014be4:	2300      	movs	r3, #0
 8014be6:	2200      	movs	r2, #0
 8014be8:	68f8      	ldr	r0, [r7, #12]
 8014bea:	f000 fb46 	bl	801527a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8014bee:	2300      	movs	r3, #0
}
 8014bf0:	4618      	mov	r0, r3
 8014bf2:	3710      	adds	r7, #16
 8014bf4:	46bd      	mov	sp, r7
 8014bf6:	bd80      	pop	{r7, pc}

08014bf8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8014bf8:	b580      	push	{r7, lr}
 8014bfa:	b088      	sub	sp, #32
 8014bfc:	af04      	add	r7, sp, #16
 8014bfe:	60f8      	str	r0, [r7, #12]
 8014c00:	60b9      	str	r1, [r7, #8]
 8014c02:	4611      	mov	r1, r2
 8014c04:	461a      	mov	r2, r3
 8014c06:	460b      	mov	r3, r1
 8014c08:	80fb      	strh	r3, [r7, #6]
 8014c0a:	4613      	mov	r3, r2
 8014c0c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8014c0e:	68fb      	ldr	r3, [r7, #12]
 8014c10:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d001      	beq.n	8014c1c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8014c18:	2300      	movs	r3, #0
 8014c1a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8014c1c:	7979      	ldrb	r1, [r7, #5]
 8014c1e:	7e3b      	ldrb	r3, [r7, #24]
 8014c20:	9303      	str	r3, [sp, #12]
 8014c22:	88fb      	ldrh	r3, [r7, #6]
 8014c24:	9302      	str	r3, [sp, #8]
 8014c26:	68bb      	ldr	r3, [r7, #8]
 8014c28:	9301      	str	r3, [sp, #4]
 8014c2a:	2301      	movs	r3, #1
 8014c2c:	9300      	str	r3, [sp, #0]
 8014c2e:	2300      	movs	r3, #0
 8014c30:	2200      	movs	r2, #0
 8014c32:	68f8      	ldr	r0, [r7, #12]
 8014c34:	f000 fb21 	bl	801527a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8014c38:	2300      	movs	r3, #0
}
 8014c3a:	4618      	mov	r0, r3
 8014c3c:	3710      	adds	r7, #16
 8014c3e:	46bd      	mov	sp, r7
 8014c40:	bd80      	pop	{r7, pc}

08014c42 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8014c42:	b580      	push	{r7, lr}
 8014c44:	b088      	sub	sp, #32
 8014c46:	af04      	add	r7, sp, #16
 8014c48:	60f8      	str	r0, [r7, #12]
 8014c4a:	60b9      	str	r1, [r7, #8]
 8014c4c:	4611      	mov	r1, r2
 8014c4e:	461a      	mov	r2, r3
 8014c50:	460b      	mov	r3, r1
 8014c52:	80fb      	strh	r3, [r7, #6]
 8014c54:	4613      	mov	r3, r2
 8014c56:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8014c58:	7979      	ldrb	r1, [r7, #5]
 8014c5a:	2300      	movs	r3, #0
 8014c5c:	9303      	str	r3, [sp, #12]
 8014c5e:	88fb      	ldrh	r3, [r7, #6]
 8014c60:	9302      	str	r3, [sp, #8]
 8014c62:	68bb      	ldr	r3, [r7, #8]
 8014c64:	9301      	str	r3, [sp, #4]
 8014c66:	2301      	movs	r3, #1
 8014c68:	9300      	str	r3, [sp, #0]
 8014c6a:	2300      	movs	r3, #0
 8014c6c:	2201      	movs	r2, #1
 8014c6e:	68f8      	ldr	r0, [r7, #12]
 8014c70:	f000 fb03 	bl	801527a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8014c74:	2300      	movs	r3, #0

}
 8014c76:	4618      	mov	r0, r3
 8014c78:	3710      	adds	r7, #16
 8014c7a:	46bd      	mov	sp, r7
 8014c7c:	bd80      	pop	{r7, pc}

08014c7e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8014c7e:	b580      	push	{r7, lr}
 8014c80:	b088      	sub	sp, #32
 8014c82:	af04      	add	r7, sp, #16
 8014c84:	60f8      	str	r0, [r7, #12]
 8014c86:	60b9      	str	r1, [r7, #8]
 8014c88:	4611      	mov	r1, r2
 8014c8a:	461a      	mov	r2, r3
 8014c8c:	460b      	mov	r3, r1
 8014c8e:	80fb      	strh	r3, [r7, #6]
 8014c90:	4613      	mov	r3, r2
 8014c92:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d001      	beq.n	8014ca2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8014c9e:	2300      	movs	r3, #0
 8014ca0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8014ca2:	7979      	ldrb	r1, [r7, #5]
 8014ca4:	7e3b      	ldrb	r3, [r7, #24]
 8014ca6:	9303      	str	r3, [sp, #12]
 8014ca8:	88fb      	ldrh	r3, [r7, #6]
 8014caa:	9302      	str	r3, [sp, #8]
 8014cac:	68bb      	ldr	r3, [r7, #8]
 8014cae:	9301      	str	r3, [sp, #4]
 8014cb0:	2301      	movs	r3, #1
 8014cb2:	9300      	str	r3, [sp, #0]
 8014cb4:	2302      	movs	r3, #2
 8014cb6:	2200      	movs	r2, #0
 8014cb8:	68f8      	ldr	r0, [r7, #12]
 8014cba:	f000 fade 	bl	801527a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8014cbe:	2300      	movs	r3, #0
}
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	3710      	adds	r7, #16
 8014cc4:	46bd      	mov	sp, r7
 8014cc6:	bd80      	pop	{r7, pc}

08014cc8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8014cc8:	b580      	push	{r7, lr}
 8014cca:	b088      	sub	sp, #32
 8014ccc:	af04      	add	r7, sp, #16
 8014cce:	60f8      	str	r0, [r7, #12]
 8014cd0:	60b9      	str	r1, [r7, #8]
 8014cd2:	4611      	mov	r1, r2
 8014cd4:	461a      	mov	r2, r3
 8014cd6:	460b      	mov	r3, r1
 8014cd8:	80fb      	strh	r3, [r7, #6]
 8014cda:	4613      	mov	r3, r2
 8014cdc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8014cde:	7979      	ldrb	r1, [r7, #5]
 8014ce0:	2300      	movs	r3, #0
 8014ce2:	9303      	str	r3, [sp, #12]
 8014ce4:	88fb      	ldrh	r3, [r7, #6]
 8014ce6:	9302      	str	r3, [sp, #8]
 8014ce8:	68bb      	ldr	r3, [r7, #8]
 8014cea:	9301      	str	r3, [sp, #4]
 8014cec:	2301      	movs	r3, #1
 8014cee:	9300      	str	r3, [sp, #0]
 8014cf0:	2302      	movs	r3, #2
 8014cf2:	2201      	movs	r2, #1
 8014cf4:	68f8      	ldr	r0, [r7, #12]
 8014cf6:	f000 fac0 	bl	801527a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8014cfa:	2300      	movs	r3, #0
}
 8014cfc:	4618      	mov	r0, r3
 8014cfe:	3710      	adds	r7, #16
 8014d00:	46bd      	mov	sp, r7
 8014d02:	bd80      	pop	{r7, pc}

08014d04 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8014d04:	b580      	push	{r7, lr}
 8014d06:	b086      	sub	sp, #24
 8014d08:	af04      	add	r7, sp, #16
 8014d0a:	6078      	str	r0, [r7, #4]
 8014d0c:	4608      	mov	r0, r1
 8014d0e:	4611      	mov	r1, r2
 8014d10:	461a      	mov	r2, r3
 8014d12:	4603      	mov	r3, r0
 8014d14:	70fb      	strb	r3, [r7, #3]
 8014d16:	460b      	mov	r3, r1
 8014d18:	70bb      	strb	r3, [r7, #2]
 8014d1a:	4613      	mov	r3, r2
 8014d1c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8014d1e:	7878      	ldrb	r0, [r7, #1]
 8014d20:	78ba      	ldrb	r2, [r7, #2]
 8014d22:	78f9      	ldrb	r1, [r7, #3]
 8014d24:	8b3b      	ldrh	r3, [r7, #24]
 8014d26:	9302      	str	r3, [sp, #8]
 8014d28:	7d3b      	ldrb	r3, [r7, #20]
 8014d2a:	9301      	str	r3, [sp, #4]
 8014d2c:	7c3b      	ldrb	r3, [r7, #16]
 8014d2e:	9300      	str	r3, [sp, #0]
 8014d30:	4603      	mov	r3, r0
 8014d32:	6878      	ldr	r0, [r7, #4]
 8014d34:	f000 fa53 	bl	80151de <USBH_LL_OpenPipe>

  return USBH_OK;
 8014d38:	2300      	movs	r3, #0
}
 8014d3a:	4618      	mov	r0, r3
 8014d3c:	3708      	adds	r7, #8
 8014d3e:	46bd      	mov	sp, r7
 8014d40:	bd80      	pop	{r7, pc}

08014d42 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8014d42:	b580      	push	{r7, lr}
 8014d44:	b082      	sub	sp, #8
 8014d46:	af00      	add	r7, sp, #0
 8014d48:	6078      	str	r0, [r7, #4]
 8014d4a:	460b      	mov	r3, r1
 8014d4c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8014d4e:	78fb      	ldrb	r3, [r7, #3]
 8014d50:	4619      	mov	r1, r3
 8014d52:	6878      	ldr	r0, [r7, #4]
 8014d54:	f000 fa72 	bl	801523c <USBH_LL_ClosePipe>

  return USBH_OK;
 8014d58:	2300      	movs	r3, #0
}
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	3708      	adds	r7, #8
 8014d5e:	46bd      	mov	sp, r7
 8014d60:	bd80      	pop	{r7, pc}

08014d62 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8014d62:	b580      	push	{r7, lr}
 8014d64:	b084      	sub	sp, #16
 8014d66:	af00      	add	r7, sp, #0
 8014d68:	6078      	str	r0, [r7, #4]
 8014d6a:	460b      	mov	r3, r1
 8014d6c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8014d6e:	6878      	ldr	r0, [r7, #4]
 8014d70:	f000 f836 	bl	8014de0 <USBH_GetFreePipe>
 8014d74:	4603      	mov	r3, r0
 8014d76:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8014d78:	89fb      	ldrh	r3, [r7, #14]
 8014d7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014d7e:	4293      	cmp	r3, r2
 8014d80:	d00a      	beq.n	8014d98 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8014d82:	78fa      	ldrb	r2, [r7, #3]
 8014d84:	89fb      	ldrh	r3, [r7, #14]
 8014d86:	f003 030f 	and.w	r3, r3, #15
 8014d8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8014d8e:	6879      	ldr	r1, [r7, #4]
 8014d90:	33e0      	adds	r3, #224	@ 0xe0
 8014d92:	009b      	lsls	r3, r3, #2
 8014d94:	440b      	add	r3, r1
 8014d96:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8014d98:	89fb      	ldrh	r3, [r7, #14]
 8014d9a:	b2db      	uxtb	r3, r3
}
 8014d9c:	4618      	mov	r0, r3
 8014d9e:	3710      	adds	r7, #16
 8014da0:	46bd      	mov	sp, r7
 8014da2:	bd80      	pop	{r7, pc}

08014da4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8014da4:	b480      	push	{r7}
 8014da6:	b083      	sub	sp, #12
 8014da8:	af00      	add	r7, sp, #0
 8014daa:	6078      	str	r0, [r7, #4]
 8014dac:	460b      	mov	r3, r1
 8014dae:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8014db0:	78fb      	ldrb	r3, [r7, #3]
 8014db2:	2b0f      	cmp	r3, #15
 8014db4:	d80d      	bhi.n	8014dd2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8014db6:	78fb      	ldrb	r3, [r7, #3]
 8014db8:	687a      	ldr	r2, [r7, #4]
 8014dba:	33e0      	adds	r3, #224	@ 0xe0
 8014dbc:	009b      	lsls	r3, r3, #2
 8014dbe:	4413      	add	r3, r2
 8014dc0:	685a      	ldr	r2, [r3, #4]
 8014dc2:	78fb      	ldrb	r3, [r7, #3]
 8014dc4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8014dc8:	6879      	ldr	r1, [r7, #4]
 8014dca:	33e0      	adds	r3, #224	@ 0xe0
 8014dcc:	009b      	lsls	r3, r3, #2
 8014dce:	440b      	add	r3, r1
 8014dd0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8014dd2:	2300      	movs	r3, #0
}
 8014dd4:	4618      	mov	r0, r3
 8014dd6:	370c      	adds	r7, #12
 8014dd8:	46bd      	mov	sp, r7
 8014dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dde:	4770      	bx	lr

08014de0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8014de0:	b480      	push	{r7}
 8014de2:	b085      	sub	sp, #20
 8014de4:	af00      	add	r7, sp, #0
 8014de6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8014de8:	2300      	movs	r3, #0
 8014dea:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8014dec:	2300      	movs	r3, #0
 8014dee:	73fb      	strb	r3, [r7, #15]
 8014df0:	e00f      	b.n	8014e12 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8014df2:	7bfb      	ldrb	r3, [r7, #15]
 8014df4:	687a      	ldr	r2, [r7, #4]
 8014df6:	33e0      	adds	r3, #224	@ 0xe0
 8014df8:	009b      	lsls	r3, r3, #2
 8014dfa:	4413      	add	r3, r2
 8014dfc:	685b      	ldr	r3, [r3, #4]
 8014dfe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d102      	bne.n	8014e0c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8014e06:	7bfb      	ldrb	r3, [r7, #15]
 8014e08:	b29b      	uxth	r3, r3
 8014e0a:	e007      	b.n	8014e1c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8014e0c:	7bfb      	ldrb	r3, [r7, #15]
 8014e0e:	3301      	adds	r3, #1
 8014e10:	73fb      	strb	r3, [r7, #15]
 8014e12:	7bfb      	ldrb	r3, [r7, #15]
 8014e14:	2b0f      	cmp	r3, #15
 8014e16:	d9ec      	bls.n	8014df2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8014e18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8014e1c:	4618      	mov	r0, r3
 8014e1e:	3714      	adds	r7, #20
 8014e20:	46bd      	mov	sp, r7
 8014e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e26:	4770      	bx	lr

08014e28 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8014e28:	b580      	push	{r7, lr}
 8014e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8014e2c:	2201      	movs	r2, #1
 8014e2e:	490e      	ldr	r1, [pc, #56]	@ (8014e68 <MX_USB_HOST_Init+0x40>)
 8014e30:	480e      	ldr	r0, [pc, #56]	@ (8014e6c <MX_USB_HOST_Init+0x44>)
 8014e32:	f7fe fb15 	bl	8013460 <USBH_Init>
 8014e36:	4603      	mov	r3, r0
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d001      	beq.n	8014e40 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8014e3c:	f7f2 f850 	bl	8006ee0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8014e40:	490b      	ldr	r1, [pc, #44]	@ (8014e70 <MX_USB_HOST_Init+0x48>)
 8014e42:	480a      	ldr	r0, [pc, #40]	@ (8014e6c <MX_USB_HOST_Init+0x44>)
 8014e44:	f7fe fbb9 	bl	80135ba <USBH_RegisterClass>
 8014e48:	4603      	mov	r3, r0
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d001      	beq.n	8014e52 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8014e4e:	f7f2 f847 	bl	8006ee0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8014e52:	4806      	ldr	r0, [pc, #24]	@ (8014e6c <MX_USB_HOST_Init+0x44>)
 8014e54:	f7fe fc3d 	bl	80136d2 <USBH_Start>
 8014e58:	4603      	mov	r3, r0
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d001      	beq.n	8014e62 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8014e5e:	f7f2 f83f 	bl	8006ee0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8014e62:	bf00      	nop
 8014e64:	bd80      	pop	{r7, pc}
 8014e66:	bf00      	nop
 8014e68:	08014e89 	.word	0x08014e89
 8014e6c:	20001490 	.word	0x20001490
 8014e70:	20001294 	.word	0x20001294

08014e74 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8014e74:	b580      	push	{r7, lr}
 8014e76:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8014e78:	4802      	ldr	r0, [pc, #8]	@ (8014e84 <MX_USB_HOST_Process+0x10>)
 8014e7a:	f7fe fc3b 	bl	80136f4 <USBH_Process>
}
 8014e7e:	bf00      	nop
 8014e80:	bd80      	pop	{r7, pc}
 8014e82:	bf00      	nop
 8014e84:	20001490 	.word	0x20001490

08014e88 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8014e88:	b480      	push	{r7}
 8014e8a:	b083      	sub	sp, #12
 8014e8c:	af00      	add	r7, sp, #0
 8014e8e:	6078      	str	r0, [r7, #4]
 8014e90:	460b      	mov	r3, r1
 8014e92:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8014e94:	78fb      	ldrb	r3, [r7, #3]
 8014e96:	3b01      	subs	r3, #1
 8014e98:	2b04      	cmp	r3, #4
 8014e9a:	d819      	bhi.n	8014ed0 <USBH_UserProcess+0x48>
 8014e9c:	a201      	add	r2, pc, #4	@ (adr r2, 8014ea4 <USBH_UserProcess+0x1c>)
 8014e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ea2:	bf00      	nop
 8014ea4:	08014ed1 	.word	0x08014ed1
 8014ea8:	08014ec1 	.word	0x08014ec1
 8014eac:	08014ed1 	.word	0x08014ed1
 8014eb0:	08014ec9 	.word	0x08014ec9
 8014eb4:	08014eb9 	.word	0x08014eb9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8014eb8:	4b09      	ldr	r3, [pc, #36]	@ (8014ee0 <USBH_UserProcess+0x58>)
 8014eba:	2203      	movs	r2, #3
 8014ebc:	701a      	strb	r2, [r3, #0]
  break;
 8014ebe:	e008      	b.n	8014ed2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8014ec0:	4b07      	ldr	r3, [pc, #28]	@ (8014ee0 <USBH_UserProcess+0x58>)
 8014ec2:	2202      	movs	r2, #2
 8014ec4:	701a      	strb	r2, [r3, #0]
  break;
 8014ec6:	e004      	b.n	8014ed2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8014ec8:	4b05      	ldr	r3, [pc, #20]	@ (8014ee0 <USBH_UserProcess+0x58>)
 8014eca:	2201      	movs	r2, #1
 8014ecc:	701a      	strb	r2, [r3, #0]
  break;
 8014ece:	e000      	b.n	8014ed2 <USBH_UserProcess+0x4a>

  default:
  break;
 8014ed0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8014ed2:	bf00      	nop
 8014ed4:	370c      	adds	r7, #12
 8014ed6:	46bd      	mov	sp, r7
 8014ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014edc:	4770      	bx	lr
 8014ede:	bf00      	nop
 8014ee0:	20001868 	.word	0x20001868

08014ee4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8014ee4:	b580      	push	{r7, lr}
 8014ee6:	b08a      	sub	sp, #40	@ 0x28
 8014ee8:	af00      	add	r7, sp, #0
 8014eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014eec:	f107 0314 	add.w	r3, r7, #20
 8014ef0:	2200      	movs	r2, #0
 8014ef2:	601a      	str	r2, [r3, #0]
 8014ef4:	605a      	str	r2, [r3, #4]
 8014ef6:	609a      	str	r2, [r3, #8]
 8014ef8:	60da      	str	r2, [r3, #12]
 8014efa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8014f04:	d147      	bne.n	8014f96 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014f06:	2300      	movs	r3, #0
 8014f08:	613b      	str	r3, [r7, #16]
 8014f0a:	4b25      	ldr	r3, [pc, #148]	@ (8014fa0 <HAL_HCD_MspInit+0xbc>)
 8014f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014f0e:	4a24      	ldr	r2, [pc, #144]	@ (8014fa0 <HAL_HCD_MspInit+0xbc>)
 8014f10:	f043 0301 	orr.w	r3, r3, #1
 8014f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8014f16:	4b22      	ldr	r3, [pc, #136]	@ (8014fa0 <HAL_HCD_MspInit+0xbc>)
 8014f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014f1a:	f003 0301 	and.w	r3, r3, #1
 8014f1e:	613b      	str	r3, [r7, #16]
 8014f20:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8014f22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8014f28:	2300      	movs	r3, #0
 8014f2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014f2c:	2300      	movs	r3, #0
 8014f2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8014f30:	f107 0314 	add.w	r3, r7, #20
 8014f34:	4619      	mov	r1, r3
 8014f36:	481b      	ldr	r0, [pc, #108]	@ (8014fa4 <HAL_HCD_MspInit+0xc0>)
 8014f38:	f7f8 fe86 	bl	800dc48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8014f3c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8014f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014f42:	2302      	movs	r3, #2
 8014f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014f46:	2300      	movs	r3, #0
 8014f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014f4a:	2300      	movs	r3, #0
 8014f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8014f4e:	230a      	movs	r3, #10
 8014f50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014f52:	f107 0314 	add.w	r3, r7, #20
 8014f56:	4619      	mov	r1, r3
 8014f58:	4812      	ldr	r0, [pc, #72]	@ (8014fa4 <HAL_HCD_MspInit+0xc0>)
 8014f5a:	f7f8 fe75 	bl	800dc48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8014f5e:	4b10      	ldr	r3, [pc, #64]	@ (8014fa0 <HAL_HCD_MspInit+0xbc>)
 8014f60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014f62:	4a0f      	ldr	r2, [pc, #60]	@ (8014fa0 <HAL_HCD_MspInit+0xbc>)
 8014f64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014f68:	6353      	str	r3, [r2, #52]	@ 0x34
 8014f6a:	2300      	movs	r3, #0
 8014f6c:	60fb      	str	r3, [r7, #12]
 8014f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8014fa0 <HAL_HCD_MspInit+0xbc>)
 8014f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014f72:	4a0b      	ldr	r2, [pc, #44]	@ (8014fa0 <HAL_HCD_MspInit+0xbc>)
 8014f74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8014f78:	6453      	str	r3, [r2, #68]	@ 0x44
 8014f7a:	4b09      	ldr	r3, [pc, #36]	@ (8014fa0 <HAL_HCD_MspInit+0xbc>)
 8014f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014f7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8014f82:	60fb      	str	r3, [r7, #12]
 8014f84:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8014f86:	2200      	movs	r2, #0
 8014f88:	2100      	movs	r1, #0
 8014f8a:	2043      	movs	r0, #67	@ 0x43
 8014f8c:	f7f8 fe25 	bl	800dbda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8014f90:	2043      	movs	r0, #67	@ 0x43
 8014f92:	f7f8 fe3e 	bl	800dc12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8014f96:	bf00      	nop
 8014f98:	3728      	adds	r7, #40	@ 0x28
 8014f9a:	46bd      	mov	sp, r7
 8014f9c:	bd80      	pop	{r7, pc}
 8014f9e:	bf00      	nop
 8014fa0:	40023800 	.word	0x40023800
 8014fa4:	40020000 	.word	0x40020000

08014fa8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8014fa8:	b580      	push	{r7, lr}
 8014faa:	b082      	sub	sp, #8
 8014fac:	af00      	add	r7, sp, #0
 8014fae:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8014fb6:	4618      	mov	r0, r3
 8014fb8:	f7fe ff73 	bl	8013ea2 <USBH_LL_IncTimer>
}
 8014fbc:	bf00      	nop
 8014fbe:	3708      	adds	r7, #8
 8014fc0:	46bd      	mov	sp, r7
 8014fc2:	bd80      	pop	{r7, pc}

08014fc4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8014fc4:	b580      	push	{r7, lr}
 8014fc6:	b082      	sub	sp, #8
 8014fc8:	af00      	add	r7, sp, #0
 8014fca:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8014fd2:	4618      	mov	r0, r3
 8014fd4:	f7fe ffab 	bl	8013f2e <USBH_LL_Connect>
}
 8014fd8:	bf00      	nop
 8014fda:	3708      	adds	r7, #8
 8014fdc:	46bd      	mov	sp, r7
 8014fde:	bd80      	pop	{r7, pc}

08014fe0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8014fe0:	b580      	push	{r7, lr}
 8014fe2:	b082      	sub	sp, #8
 8014fe4:	af00      	add	r7, sp, #0
 8014fe6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8014fee:	4618      	mov	r0, r3
 8014ff0:	f7fe ffb4 	bl	8013f5c <USBH_LL_Disconnect>
}
 8014ff4:	bf00      	nop
 8014ff6:	3708      	adds	r7, #8
 8014ff8:	46bd      	mov	sp, r7
 8014ffa:	bd80      	pop	{r7, pc}

08014ffc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8014ffc:	b480      	push	{r7}
 8014ffe:	b083      	sub	sp, #12
 8015000:	af00      	add	r7, sp, #0
 8015002:	6078      	str	r0, [r7, #4]
 8015004:	460b      	mov	r3, r1
 8015006:	70fb      	strb	r3, [r7, #3]
 8015008:	4613      	mov	r3, r2
 801500a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 801500c:	bf00      	nop
 801500e:	370c      	adds	r7, #12
 8015010:	46bd      	mov	sp, r7
 8015012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015016:	4770      	bx	lr

08015018 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8015018:	b580      	push	{r7, lr}
 801501a:	b082      	sub	sp, #8
 801501c:	af00      	add	r7, sp, #0
 801501e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8015026:	4618      	mov	r0, r3
 8015028:	f7fe ff65 	bl	8013ef6 <USBH_LL_PortEnabled>
}
 801502c:	bf00      	nop
 801502e:	3708      	adds	r7, #8
 8015030:	46bd      	mov	sp, r7
 8015032:	bd80      	pop	{r7, pc}

08015034 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8015034:	b580      	push	{r7, lr}
 8015036:	b082      	sub	sp, #8
 8015038:	af00      	add	r7, sp, #0
 801503a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8015042:	4618      	mov	r0, r3
 8015044:	f7fe ff65 	bl	8013f12 <USBH_LL_PortDisabled>
}
 8015048:	bf00      	nop
 801504a:	3708      	adds	r7, #8
 801504c:	46bd      	mov	sp, r7
 801504e:	bd80      	pop	{r7, pc}

08015050 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8015050:	b580      	push	{r7, lr}
 8015052:	b082      	sub	sp, #8
 8015054:	af00      	add	r7, sp, #0
 8015056:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 801505e:	2b01      	cmp	r3, #1
 8015060:	d12a      	bne.n	80150b8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8015062:	4a18      	ldr	r2, [pc, #96]	@ (80150c4 <USBH_LL_Init+0x74>)
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	4a15      	ldr	r2, [pc, #84]	@ (80150c4 <USBH_LL_Init+0x74>)
 801506e:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015072:	4b14      	ldr	r3, [pc, #80]	@ (80150c4 <USBH_LL_Init+0x74>)
 8015074:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8015078:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801507a:	4b12      	ldr	r3, [pc, #72]	@ (80150c4 <USBH_LL_Init+0x74>)
 801507c:	2208      	movs	r2, #8
 801507e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8015080:	4b10      	ldr	r3, [pc, #64]	@ (80150c4 <USBH_LL_Init+0x74>)
 8015082:	2201      	movs	r2, #1
 8015084:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015086:	4b0f      	ldr	r3, [pc, #60]	@ (80150c4 <USBH_LL_Init+0x74>)
 8015088:	2200      	movs	r2, #0
 801508a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801508c:	4b0d      	ldr	r3, [pc, #52]	@ (80150c4 <USBH_LL_Init+0x74>)
 801508e:	2202      	movs	r2, #2
 8015090:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015092:	4b0c      	ldr	r3, [pc, #48]	@ (80150c4 <USBH_LL_Init+0x74>)
 8015094:	2200      	movs	r2, #0
 8015096:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8015098:	480a      	ldr	r0, [pc, #40]	@ (80150c4 <USBH_LL_Init+0x74>)
 801509a:	f7f8 ff8a 	bl	800dfb2 <HAL_HCD_Init>
 801509e:	4603      	mov	r3, r0
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d001      	beq.n	80150a8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80150a4:	f7f1 ff1c 	bl	8006ee0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80150a8:	4806      	ldr	r0, [pc, #24]	@ (80150c4 <USBH_LL_Init+0x74>)
 80150aa:	f7f9 fbeb 	bl	800e884 <HAL_HCD_GetCurrentFrame>
 80150ae:	4603      	mov	r3, r0
 80150b0:	4619      	mov	r1, r3
 80150b2:	6878      	ldr	r0, [r7, #4]
 80150b4:	f7fe fee6 	bl	8013e84 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80150b8:	2300      	movs	r3, #0
}
 80150ba:	4618      	mov	r0, r3
 80150bc:	3708      	adds	r7, #8
 80150be:	46bd      	mov	sp, r7
 80150c0:	bd80      	pop	{r7, pc}
 80150c2:	bf00      	nop
 80150c4:	2000186c 	.word	0x2000186c

080150c8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80150c8:	b580      	push	{r7, lr}
 80150ca:	b084      	sub	sp, #16
 80150cc:	af00      	add	r7, sp, #0
 80150ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80150d0:	2300      	movs	r3, #0
 80150d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80150d4:	2300      	movs	r3, #0
 80150d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80150de:	4618      	mov	r0, r3
 80150e0:	f7f9 fb58 	bl	800e794 <HAL_HCD_Start>
 80150e4:	4603      	mov	r3, r0
 80150e6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80150e8:	7bfb      	ldrb	r3, [r7, #15]
 80150ea:	4618      	mov	r0, r3
 80150ec:	f000 f95e 	bl	80153ac <USBH_Get_USB_Status>
 80150f0:	4603      	mov	r3, r0
 80150f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80150f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80150f6:	4618      	mov	r0, r3
 80150f8:	3710      	adds	r7, #16
 80150fa:	46bd      	mov	sp, r7
 80150fc:	bd80      	pop	{r7, pc}

080150fe <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80150fe:	b580      	push	{r7, lr}
 8015100:	b084      	sub	sp, #16
 8015102:	af00      	add	r7, sp, #0
 8015104:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015106:	2300      	movs	r3, #0
 8015108:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801510a:	2300      	movs	r3, #0
 801510c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8015114:	4618      	mov	r0, r3
 8015116:	f7f9 fb60 	bl	800e7da <HAL_HCD_Stop>
 801511a:	4603      	mov	r3, r0
 801511c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801511e:	7bfb      	ldrb	r3, [r7, #15]
 8015120:	4618      	mov	r0, r3
 8015122:	f000 f943 	bl	80153ac <USBH_Get_USB_Status>
 8015126:	4603      	mov	r3, r0
 8015128:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801512a:	7bbb      	ldrb	r3, [r7, #14]
}
 801512c:	4618      	mov	r0, r3
 801512e:	3710      	adds	r7, #16
 8015130:	46bd      	mov	sp, r7
 8015132:	bd80      	pop	{r7, pc}

08015134 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8015134:	b580      	push	{r7, lr}
 8015136:	b084      	sub	sp, #16
 8015138:	af00      	add	r7, sp, #0
 801513a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 801513c:	2301      	movs	r3, #1
 801513e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8015146:	4618      	mov	r0, r3
 8015148:	f7f9 fbaa 	bl	800e8a0 <HAL_HCD_GetCurrentSpeed>
 801514c:	4603      	mov	r3, r0
 801514e:	2b02      	cmp	r3, #2
 8015150:	d00c      	beq.n	801516c <USBH_LL_GetSpeed+0x38>
 8015152:	2b02      	cmp	r3, #2
 8015154:	d80d      	bhi.n	8015172 <USBH_LL_GetSpeed+0x3e>
 8015156:	2b00      	cmp	r3, #0
 8015158:	d002      	beq.n	8015160 <USBH_LL_GetSpeed+0x2c>
 801515a:	2b01      	cmp	r3, #1
 801515c:	d003      	beq.n	8015166 <USBH_LL_GetSpeed+0x32>
 801515e:	e008      	b.n	8015172 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8015160:	2300      	movs	r3, #0
 8015162:	73fb      	strb	r3, [r7, #15]
    break;
 8015164:	e008      	b.n	8015178 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8015166:	2301      	movs	r3, #1
 8015168:	73fb      	strb	r3, [r7, #15]
    break;
 801516a:	e005      	b.n	8015178 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 801516c:	2302      	movs	r3, #2
 801516e:	73fb      	strb	r3, [r7, #15]
    break;
 8015170:	e002      	b.n	8015178 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8015172:	2301      	movs	r3, #1
 8015174:	73fb      	strb	r3, [r7, #15]
    break;
 8015176:	bf00      	nop
  }
  return  speed;
 8015178:	7bfb      	ldrb	r3, [r7, #15]
}
 801517a:	4618      	mov	r0, r3
 801517c:	3710      	adds	r7, #16
 801517e:	46bd      	mov	sp, r7
 8015180:	bd80      	pop	{r7, pc}

08015182 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8015182:	b580      	push	{r7, lr}
 8015184:	b084      	sub	sp, #16
 8015186:	af00      	add	r7, sp, #0
 8015188:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801518a:	2300      	movs	r3, #0
 801518c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801518e:	2300      	movs	r3, #0
 8015190:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8015198:	4618      	mov	r0, r3
 801519a:	f7f9 fb3b 	bl	800e814 <HAL_HCD_ResetPort>
 801519e:	4603      	mov	r3, r0
 80151a0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80151a2:	7bfb      	ldrb	r3, [r7, #15]
 80151a4:	4618      	mov	r0, r3
 80151a6:	f000 f901 	bl	80153ac <USBH_Get_USB_Status>
 80151aa:	4603      	mov	r3, r0
 80151ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80151ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80151b0:	4618      	mov	r0, r3
 80151b2:	3710      	adds	r7, #16
 80151b4:	46bd      	mov	sp, r7
 80151b6:	bd80      	pop	{r7, pc}

080151b8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80151b8:	b580      	push	{r7, lr}
 80151ba:	b082      	sub	sp, #8
 80151bc:	af00      	add	r7, sp, #0
 80151be:	6078      	str	r0, [r7, #4]
 80151c0:	460b      	mov	r3, r1
 80151c2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80151ca:	78fa      	ldrb	r2, [r7, #3]
 80151cc:	4611      	mov	r1, r2
 80151ce:	4618      	mov	r0, r3
 80151d0:	f7f9 fb43 	bl	800e85a <HAL_HCD_HC_GetXferCount>
 80151d4:	4603      	mov	r3, r0
}
 80151d6:	4618      	mov	r0, r3
 80151d8:	3708      	adds	r7, #8
 80151da:	46bd      	mov	sp, r7
 80151dc:	bd80      	pop	{r7, pc}

080151de <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80151de:	b590      	push	{r4, r7, lr}
 80151e0:	b089      	sub	sp, #36	@ 0x24
 80151e2:	af04      	add	r7, sp, #16
 80151e4:	6078      	str	r0, [r7, #4]
 80151e6:	4608      	mov	r0, r1
 80151e8:	4611      	mov	r1, r2
 80151ea:	461a      	mov	r2, r3
 80151ec:	4603      	mov	r3, r0
 80151ee:	70fb      	strb	r3, [r7, #3]
 80151f0:	460b      	mov	r3, r1
 80151f2:	70bb      	strb	r3, [r7, #2]
 80151f4:	4613      	mov	r3, r2
 80151f6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80151f8:	2300      	movs	r3, #0
 80151fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80151fc:	2300      	movs	r3, #0
 80151fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8015206:	787c      	ldrb	r4, [r7, #1]
 8015208:	78ba      	ldrb	r2, [r7, #2]
 801520a:	78f9      	ldrb	r1, [r7, #3]
 801520c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801520e:	9302      	str	r3, [sp, #8]
 8015210:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015214:	9301      	str	r3, [sp, #4]
 8015216:	f897 3020 	ldrb.w	r3, [r7, #32]
 801521a:	9300      	str	r3, [sp, #0]
 801521c:	4623      	mov	r3, r4
 801521e:	f7f8 ff2f 	bl	800e080 <HAL_HCD_HC_Init>
 8015222:	4603      	mov	r3, r0
 8015224:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8015226:	7bfb      	ldrb	r3, [r7, #15]
 8015228:	4618      	mov	r0, r3
 801522a:	f000 f8bf 	bl	80153ac <USBH_Get_USB_Status>
 801522e:	4603      	mov	r3, r0
 8015230:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015232:	7bbb      	ldrb	r3, [r7, #14]
}
 8015234:	4618      	mov	r0, r3
 8015236:	3714      	adds	r7, #20
 8015238:	46bd      	mov	sp, r7
 801523a:	bd90      	pop	{r4, r7, pc}

0801523c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801523c:	b580      	push	{r7, lr}
 801523e:	b084      	sub	sp, #16
 8015240:	af00      	add	r7, sp, #0
 8015242:	6078      	str	r0, [r7, #4]
 8015244:	460b      	mov	r3, r1
 8015246:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015248:	2300      	movs	r3, #0
 801524a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801524c:	2300      	movs	r3, #0
 801524e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8015256:	78fa      	ldrb	r2, [r7, #3]
 8015258:	4611      	mov	r1, r2
 801525a:	4618      	mov	r0, r3
 801525c:	f7f8 ffc8 	bl	800e1f0 <HAL_HCD_HC_Halt>
 8015260:	4603      	mov	r3, r0
 8015262:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015264:	7bfb      	ldrb	r3, [r7, #15]
 8015266:	4618      	mov	r0, r3
 8015268:	f000 f8a0 	bl	80153ac <USBH_Get_USB_Status>
 801526c:	4603      	mov	r3, r0
 801526e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015270:	7bbb      	ldrb	r3, [r7, #14]
}
 8015272:	4618      	mov	r0, r3
 8015274:	3710      	adds	r7, #16
 8015276:	46bd      	mov	sp, r7
 8015278:	bd80      	pop	{r7, pc}

0801527a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801527a:	b590      	push	{r4, r7, lr}
 801527c:	b089      	sub	sp, #36	@ 0x24
 801527e:	af04      	add	r7, sp, #16
 8015280:	6078      	str	r0, [r7, #4]
 8015282:	4608      	mov	r0, r1
 8015284:	4611      	mov	r1, r2
 8015286:	461a      	mov	r2, r3
 8015288:	4603      	mov	r3, r0
 801528a:	70fb      	strb	r3, [r7, #3]
 801528c:	460b      	mov	r3, r1
 801528e:	70bb      	strb	r3, [r7, #2]
 8015290:	4613      	mov	r3, r2
 8015292:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015294:	2300      	movs	r3, #0
 8015296:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015298:	2300      	movs	r3, #0
 801529a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80152a2:	787c      	ldrb	r4, [r7, #1]
 80152a4:	78ba      	ldrb	r2, [r7, #2]
 80152a6:	78f9      	ldrb	r1, [r7, #3]
 80152a8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80152ac:	9303      	str	r3, [sp, #12]
 80152ae:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80152b0:	9302      	str	r3, [sp, #8]
 80152b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152b4:	9301      	str	r3, [sp, #4]
 80152b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80152ba:	9300      	str	r3, [sp, #0]
 80152bc:	4623      	mov	r3, r4
 80152be:	f7f8 ffbb 	bl	800e238 <HAL_HCD_HC_SubmitRequest>
 80152c2:	4603      	mov	r3, r0
 80152c4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80152c6:	7bfb      	ldrb	r3, [r7, #15]
 80152c8:	4618      	mov	r0, r3
 80152ca:	f000 f86f 	bl	80153ac <USBH_Get_USB_Status>
 80152ce:	4603      	mov	r3, r0
 80152d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80152d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80152d4:	4618      	mov	r0, r3
 80152d6:	3714      	adds	r7, #20
 80152d8:	46bd      	mov	sp, r7
 80152da:	bd90      	pop	{r4, r7, pc}

080152dc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80152dc:	b580      	push	{r7, lr}
 80152de:	b082      	sub	sp, #8
 80152e0:	af00      	add	r7, sp, #0
 80152e2:	6078      	str	r0, [r7, #4]
 80152e4:	460b      	mov	r3, r1
 80152e6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80152ee:	78fa      	ldrb	r2, [r7, #3]
 80152f0:	4611      	mov	r1, r2
 80152f2:	4618      	mov	r0, r3
 80152f4:	f7f9 fa9c 	bl	800e830 <HAL_HCD_HC_GetURBState>
 80152f8:	4603      	mov	r3, r0
}
 80152fa:	4618      	mov	r0, r3
 80152fc:	3708      	adds	r7, #8
 80152fe:	46bd      	mov	sp, r7
 8015300:	bd80      	pop	{r7, pc}

08015302 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8015302:	b580      	push	{r7, lr}
 8015304:	b082      	sub	sp, #8
 8015306:	af00      	add	r7, sp, #0
 8015308:	6078      	str	r0, [r7, #4]
 801530a:	460b      	mov	r3, r1
 801530c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8015314:	2b01      	cmp	r3, #1
 8015316:	d103      	bne.n	8015320 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8015318:	78fb      	ldrb	r3, [r7, #3]
 801531a:	4618      	mov	r0, r3
 801531c:	f000 f872 	bl	8015404 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8015320:	20c8      	movs	r0, #200	@ 0xc8
 8015322:	f7f8 fb5b 	bl	800d9dc <HAL_Delay>
  return USBH_OK;
 8015326:	2300      	movs	r3, #0
}
 8015328:	4618      	mov	r0, r3
 801532a:	3708      	adds	r7, #8
 801532c:	46bd      	mov	sp, r7
 801532e:	bd80      	pop	{r7, pc}

08015330 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8015330:	b480      	push	{r7}
 8015332:	b085      	sub	sp, #20
 8015334:	af00      	add	r7, sp, #0
 8015336:	6078      	str	r0, [r7, #4]
 8015338:	460b      	mov	r3, r1
 801533a:	70fb      	strb	r3, [r7, #3]
 801533c:	4613      	mov	r3, r2
 801533e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8015346:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8015348:	78fa      	ldrb	r2, [r7, #3]
 801534a:	68f9      	ldr	r1, [r7, #12]
 801534c:	4613      	mov	r3, r2
 801534e:	011b      	lsls	r3, r3, #4
 8015350:	1a9b      	subs	r3, r3, r2
 8015352:	009b      	lsls	r3, r3, #2
 8015354:	440b      	add	r3, r1
 8015356:	3317      	adds	r3, #23
 8015358:	781b      	ldrb	r3, [r3, #0]
 801535a:	2b00      	cmp	r3, #0
 801535c:	d00a      	beq.n	8015374 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 801535e:	78fa      	ldrb	r2, [r7, #3]
 8015360:	68f9      	ldr	r1, [r7, #12]
 8015362:	4613      	mov	r3, r2
 8015364:	011b      	lsls	r3, r3, #4
 8015366:	1a9b      	subs	r3, r3, r2
 8015368:	009b      	lsls	r3, r3, #2
 801536a:	440b      	add	r3, r1
 801536c:	333c      	adds	r3, #60	@ 0x3c
 801536e:	78ba      	ldrb	r2, [r7, #2]
 8015370:	701a      	strb	r2, [r3, #0]
 8015372:	e009      	b.n	8015388 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8015374:	78fa      	ldrb	r2, [r7, #3]
 8015376:	68f9      	ldr	r1, [r7, #12]
 8015378:	4613      	mov	r3, r2
 801537a:	011b      	lsls	r3, r3, #4
 801537c:	1a9b      	subs	r3, r3, r2
 801537e:	009b      	lsls	r3, r3, #2
 8015380:	440b      	add	r3, r1
 8015382:	333d      	adds	r3, #61	@ 0x3d
 8015384:	78ba      	ldrb	r2, [r7, #2]
 8015386:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8015388:	2300      	movs	r3, #0
}
 801538a:	4618      	mov	r0, r3
 801538c:	3714      	adds	r7, #20
 801538e:	46bd      	mov	sp, r7
 8015390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015394:	4770      	bx	lr

08015396 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8015396:	b580      	push	{r7, lr}
 8015398:	b082      	sub	sp, #8
 801539a:	af00      	add	r7, sp, #0
 801539c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801539e:	6878      	ldr	r0, [r7, #4]
 80153a0:	f7f8 fb1c 	bl	800d9dc <HAL_Delay>
}
 80153a4:	bf00      	nop
 80153a6:	3708      	adds	r7, #8
 80153a8:	46bd      	mov	sp, r7
 80153aa:	bd80      	pop	{r7, pc}

080153ac <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80153ac:	b480      	push	{r7}
 80153ae:	b085      	sub	sp, #20
 80153b0:	af00      	add	r7, sp, #0
 80153b2:	4603      	mov	r3, r0
 80153b4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80153b6:	2300      	movs	r3, #0
 80153b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80153ba:	79fb      	ldrb	r3, [r7, #7]
 80153bc:	2b03      	cmp	r3, #3
 80153be:	d817      	bhi.n	80153f0 <USBH_Get_USB_Status+0x44>
 80153c0:	a201      	add	r2, pc, #4	@ (adr r2, 80153c8 <USBH_Get_USB_Status+0x1c>)
 80153c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80153c6:	bf00      	nop
 80153c8:	080153d9 	.word	0x080153d9
 80153cc:	080153df 	.word	0x080153df
 80153d0:	080153e5 	.word	0x080153e5
 80153d4:	080153eb 	.word	0x080153eb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80153d8:	2300      	movs	r3, #0
 80153da:	73fb      	strb	r3, [r7, #15]
    break;
 80153dc:	e00b      	b.n	80153f6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80153de:	2302      	movs	r3, #2
 80153e0:	73fb      	strb	r3, [r7, #15]
    break;
 80153e2:	e008      	b.n	80153f6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80153e4:	2301      	movs	r3, #1
 80153e6:	73fb      	strb	r3, [r7, #15]
    break;
 80153e8:	e005      	b.n	80153f6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80153ea:	2302      	movs	r3, #2
 80153ec:	73fb      	strb	r3, [r7, #15]
    break;
 80153ee:	e002      	b.n	80153f6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80153f0:	2302      	movs	r3, #2
 80153f2:	73fb      	strb	r3, [r7, #15]
    break;
 80153f4:	bf00      	nop
  }
  return usb_status;
 80153f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80153f8:	4618      	mov	r0, r3
 80153fa:	3714      	adds	r7, #20
 80153fc:	46bd      	mov	sp, r7
 80153fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015402:	4770      	bx	lr

08015404 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8015404:	b580      	push	{r7, lr}
 8015406:	b084      	sub	sp, #16
 8015408:	af00      	add	r7, sp, #0
 801540a:	4603      	mov	r3, r0
 801540c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801540e:	79fb      	ldrb	r3, [r7, #7]
 8015410:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8015412:	79fb      	ldrb	r3, [r7, #7]
 8015414:	2b00      	cmp	r3, #0
 8015416:	d102      	bne.n	801541e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8015418:	2300      	movs	r3, #0
 801541a:	73fb      	strb	r3, [r7, #15]
 801541c:	e001      	b.n	8015422 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 801541e:	2301      	movs	r3, #1
 8015420:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8015422:	7bfb      	ldrb	r3, [r7, #15]
 8015424:	461a      	mov	r2, r3
 8015426:	2101      	movs	r1, #1
 8015428:	4803      	ldr	r0, [pc, #12]	@ (8015438 <MX_DriverVbusFS+0x34>)
 801542a:	f7f8 fda9 	bl	800df80 <HAL_GPIO_WritePin>
}
 801542e:	bf00      	nop
 8015430:	3710      	adds	r7, #16
 8015432:	46bd      	mov	sp, r7
 8015434:	bd80      	pop	{r7, pc}
 8015436:	bf00      	nop
 8015438:	40020800 	.word	0x40020800

0801543c <malloc>:
 801543c:	4b02      	ldr	r3, [pc, #8]	@ (8015448 <malloc+0xc>)
 801543e:	4601      	mov	r1, r0
 8015440:	6818      	ldr	r0, [r3, #0]
 8015442:	f000 b82d 	b.w	80154a0 <_malloc_r>
 8015446:	bf00      	nop
 8015448:	200012b4 	.word	0x200012b4

0801544c <free>:
 801544c:	4b02      	ldr	r3, [pc, #8]	@ (8015458 <free+0xc>)
 801544e:	4601      	mov	r1, r0
 8015450:	6818      	ldr	r0, [r3, #0]
 8015452:	f000 b903 	b.w	801565c <_free_r>
 8015456:	bf00      	nop
 8015458:	200012b4 	.word	0x200012b4

0801545c <sbrk_aligned>:
 801545c:	b570      	push	{r4, r5, r6, lr}
 801545e:	4e0f      	ldr	r6, [pc, #60]	@ (801549c <sbrk_aligned+0x40>)
 8015460:	460c      	mov	r4, r1
 8015462:	6831      	ldr	r1, [r6, #0]
 8015464:	4605      	mov	r5, r0
 8015466:	b911      	cbnz	r1, 801546e <sbrk_aligned+0x12>
 8015468:	f000 f8ae 	bl	80155c8 <_sbrk_r>
 801546c:	6030      	str	r0, [r6, #0]
 801546e:	4621      	mov	r1, r4
 8015470:	4628      	mov	r0, r5
 8015472:	f000 f8a9 	bl	80155c8 <_sbrk_r>
 8015476:	1c43      	adds	r3, r0, #1
 8015478:	d103      	bne.n	8015482 <sbrk_aligned+0x26>
 801547a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801547e:	4620      	mov	r0, r4
 8015480:	bd70      	pop	{r4, r5, r6, pc}
 8015482:	1cc4      	adds	r4, r0, #3
 8015484:	f024 0403 	bic.w	r4, r4, #3
 8015488:	42a0      	cmp	r0, r4
 801548a:	d0f8      	beq.n	801547e <sbrk_aligned+0x22>
 801548c:	1a21      	subs	r1, r4, r0
 801548e:	4628      	mov	r0, r5
 8015490:	f000 f89a 	bl	80155c8 <_sbrk_r>
 8015494:	3001      	adds	r0, #1
 8015496:	d1f2      	bne.n	801547e <sbrk_aligned+0x22>
 8015498:	e7ef      	b.n	801547a <sbrk_aligned+0x1e>
 801549a:	bf00      	nop
 801549c:	20001c4c 	.word	0x20001c4c

080154a0 <_malloc_r>:
 80154a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80154a4:	1ccd      	adds	r5, r1, #3
 80154a6:	f025 0503 	bic.w	r5, r5, #3
 80154aa:	3508      	adds	r5, #8
 80154ac:	2d0c      	cmp	r5, #12
 80154ae:	bf38      	it	cc
 80154b0:	250c      	movcc	r5, #12
 80154b2:	2d00      	cmp	r5, #0
 80154b4:	4606      	mov	r6, r0
 80154b6:	db01      	blt.n	80154bc <_malloc_r+0x1c>
 80154b8:	42a9      	cmp	r1, r5
 80154ba:	d904      	bls.n	80154c6 <_malloc_r+0x26>
 80154bc:	230c      	movs	r3, #12
 80154be:	6033      	str	r3, [r6, #0]
 80154c0:	2000      	movs	r0, #0
 80154c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80154c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801559c <_malloc_r+0xfc>
 80154ca:	f000 f869 	bl	80155a0 <__malloc_lock>
 80154ce:	f8d8 3000 	ldr.w	r3, [r8]
 80154d2:	461c      	mov	r4, r3
 80154d4:	bb44      	cbnz	r4, 8015528 <_malloc_r+0x88>
 80154d6:	4629      	mov	r1, r5
 80154d8:	4630      	mov	r0, r6
 80154da:	f7ff ffbf 	bl	801545c <sbrk_aligned>
 80154de:	1c43      	adds	r3, r0, #1
 80154e0:	4604      	mov	r4, r0
 80154e2:	d158      	bne.n	8015596 <_malloc_r+0xf6>
 80154e4:	f8d8 4000 	ldr.w	r4, [r8]
 80154e8:	4627      	mov	r7, r4
 80154ea:	2f00      	cmp	r7, #0
 80154ec:	d143      	bne.n	8015576 <_malloc_r+0xd6>
 80154ee:	2c00      	cmp	r4, #0
 80154f0:	d04b      	beq.n	801558a <_malloc_r+0xea>
 80154f2:	6823      	ldr	r3, [r4, #0]
 80154f4:	4639      	mov	r1, r7
 80154f6:	4630      	mov	r0, r6
 80154f8:	eb04 0903 	add.w	r9, r4, r3
 80154fc:	f000 f864 	bl	80155c8 <_sbrk_r>
 8015500:	4581      	cmp	r9, r0
 8015502:	d142      	bne.n	801558a <_malloc_r+0xea>
 8015504:	6821      	ldr	r1, [r4, #0]
 8015506:	1a6d      	subs	r5, r5, r1
 8015508:	4629      	mov	r1, r5
 801550a:	4630      	mov	r0, r6
 801550c:	f7ff ffa6 	bl	801545c <sbrk_aligned>
 8015510:	3001      	adds	r0, #1
 8015512:	d03a      	beq.n	801558a <_malloc_r+0xea>
 8015514:	6823      	ldr	r3, [r4, #0]
 8015516:	442b      	add	r3, r5
 8015518:	6023      	str	r3, [r4, #0]
 801551a:	f8d8 3000 	ldr.w	r3, [r8]
 801551e:	685a      	ldr	r2, [r3, #4]
 8015520:	bb62      	cbnz	r2, 801557c <_malloc_r+0xdc>
 8015522:	f8c8 7000 	str.w	r7, [r8]
 8015526:	e00f      	b.n	8015548 <_malloc_r+0xa8>
 8015528:	6822      	ldr	r2, [r4, #0]
 801552a:	1b52      	subs	r2, r2, r5
 801552c:	d420      	bmi.n	8015570 <_malloc_r+0xd0>
 801552e:	2a0b      	cmp	r2, #11
 8015530:	d917      	bls.n	8015562 <_malloc_r+0xc2>
 8015532:	1961      	adds	r1, r4, r5
 8015534:	42a3      	cmp	r3, r4
 8015536:	6025      	str	r5, [r4, #0]
 8015538:	bf18      	it	ne
 801553a:	6059      	strne	r1, [r3, #4]
 801553c:	6863      	ldr	r3, [r4, #4]
 801553e:	bf08      	it	eq
 8015540:	f8c8 1000 	streq.w	r1, [r8]
 8015544:	5162      	str	r2, [r4, r5]
 8015546:	604b      	str	r3, [r1, #4]
 8015548:	4630      	mov	r0, r6
 801554a:	f000 f82f 	bl	80155ac <__malloc_unlock>
 801554e:	f104 000b 	add.w	r0, r4, #11
 8015552:	1d23      	adds	r3, r4, #4
 8015554:	f020 0007 	bic.w	r0, r0, #7
 8015558:	1ac2      	subs	r2, r0, r3
 801555a:	bf1c      	itt	ne
 801555c:	1a1b      	subne	r3, r3, r0
 801555e:	50a3      	strne	r3, [r4, r2]
 8015560:	e7af      	b.n	80154c2 <_malloc_r+0x22>
 8015562:	6862      	ldr	r2, [r4, #4]
 8015564:	42a3      	cmp	r3, r4
 8015566:	bf0c      	ite	eq
 8015568:	f8c8 2000 	streq.w	r2, [r8]
 801556c:	605a      	strne	r2, [r3, #4]
 801556e:	e7eb      	b.n	8015548 <_malloc_r+0xa8>
 8015570:	4623      	mov	r3, r4
 8015572:	6864      	ldr	r4, [r4, #4]
 8015574:	e7ae      	b.n	80154d4 <_malloc_r+0x34>
 8015576:	463c      	mov	r4, r7
 8015578:	687f      	ldr	r7, [r7, #4]
 801557a:	e7b6      	b.n	80154ea <_malloc_r+0x4a>
 801557c:	461a      	mov	r2, r3
 801557e:	685b      	ldr	r3, [r3, #4]
 8015580:	42a3      	cmp	r3, r4
 8015582:	d1fb      	bne.n	801557c <_malloc_r+0xdc>
 8015584:	2300      	movs	r3, #0
 8015586:	6053      	str	r3, [r2, #4]
 8015588:	e7de      	b.n	8015548 <_malloc_r+0xa8>
 801558a:	230c      	movs	r3, #12
 801558c:	6033      	str	r3, [r6, #0]
 801558e:	4630      	mov	r0, r6
 8015590:	f000 f80c 	bl	80155ac <__malloc_unlock>
 8015594:	e794      	b.n	80154c0 <_malloc_r+0x20>
 8015596:	6005      	str	r5, [r0, #0]
 8015598:	e7d6      	b.n	8015548 <_malloc_r+0xa8>
 801559a:	bf00      	nop
 801559c:	20001c50 	.word	0x20001c50

080155a0 <__malloc_lock>:
 80155a0:	4801      	ldr	r0, [pc, #4]	@ (80155a8 <__malloc_lock+0x8>)
 80155a2:	f000 b84b 	b.w	801563c <__retarget_lock_acquire_recursive>
 80155a6:	bf00      	nop
 80155a8:	20001d8c 	.word	0x20001d8c

080155ac <__malloc_unlock>:
 80155ac:	4801      	ldr	r0, [pc, #4]	@ (80155b4 <__malloc_unlock+0x8>)
 80155ae:	f000 b846 	b.w	801563e <__retarget_lock_release_recursive>
 80155b2:	bf00      	nop
 80155b4:	20001d8c 	.word	0x20001d8c

080155b8 <memset>:
 80155b8:	4402      	add	r2, r0
 80155ba:	4603      	mov	r3, r0
 80155bc:	4293      	cmp	r3, r2
 80155be:	d100      	bne.n	80155c2 <memset+0xa>
 80155c0:	4770      	bx	lr
 80155c2:	f803 1b01 	strb.w	r1, [r3], #1
 80155c6:	e7f9      	b.n	80155bc <memset+0x4>

080155c8 <_sbrk_r>:
 80155c8:	b538      	push	{r3, r4, r5, lr}
 80155ca:	4d06      	ldr	r5, [pc, #24]	@ (80155e4 <_sbrk_r+0x1c>)
 80155cc:	2300      	movs	r3, #0
 80155ce:	4604      	mov	r4, r0
 80155d0:	4608      	mov	r0, r1
 80155d2:	602b      	str	r3, [r5, #0]
 80155d4:	f7f8 f91e 	bl	800d814 <_sbrk>
 80155d8:	1c43      	adds	r3, r0, #1
 80155da:	d102      	bne.n	80155e2 <_sbrk_r+0x1a>
 80155dc:	682b      	ldr	r3, [r5, #0]
 80155de:	b103      	cbz	r3, 80155e2 <_sbrk_r+0x1a>
 80155e0:	6023      	str	r3, [r4, #0]
 80155e2:	bd38      	pop	{r3, r4, r5, pc}
 80155e4:	20001d90 	.word	0x20001d90

080155e8 <__errno>:
 80155e8:	4b01      	ldr	r3, [pc, #4]	@ (80155f0 <__errno+0x8>)
 80155ea:	6818      	ldr	r0, [r3, #0]
 80155ec:	4770      	bx	lr
 80155ee:	bf00      	nop
 80155f0:	200012b4 	.word	0x200012b4

080155f4 <__libc_init_array>:
 80155f4:	b570      	push	{r4, r5, r6, lr}
 80155f6:	4d0d      	ldr	r5, [pc, #52]	@ (801562c <__libc_init_array+0x38>)
 80155f8:	4c0d      	ldr	r4, [pc, #52]	@ (8015630 <__libc_init_array+0x3c>)
 80155fa:	1b64      	subs	r4, r4, r5
 80155fc:	10a4      	asrs	r4, r4, #2
 80155fe:	2600      	movs	r6, #0
 8015600:	42a6      	cmp	r6, r4
 8015602:	d109      	bne.n	8015618 <__libc_init_array+0x24>
 8015604:	4d0b      	ldr	r5, [pc, #44]	@ (8015634 <__libc_init_array+0x40>)
 8015606:	4c0c      	ldr	r4, [pc, #48]	@ (8015638 <__libc_init_array+0x44>)
 8015608:	f000 f872 	bl	80156f0 <_init>
 801560c:	1b64      	subs	r4, r4, r5
 801560e:	10a4      	asrs	r4, r4, #2
 8015610:	2600      	movs	r6, #0
 8015612:	42a6      	cmp	r6, r4
 8015614:	d105      	bne.n	8015622 <__libc_init_array+0x2e>
 8015616:	bd70      	pop	{r4, r5, r6, pc}
 8015618:	f855 3b04 	ldr.w	r3, [r5], #4
 801561c:	4798      	blx	r3
 801561e:	3601      	adds	r6, #1
 8015620:	e7ee      	b.n	8015600 <__libc_init_array+0xc>
 8015622:	f855 3b04 	ldr.w	r3, [r5], #4
 8015626:	4798      	blx	r3
 8015628:	3601      	adds	r6, #1
 801562a:	e7f2      	b.n	8015612 <__libc_init_array+0x1e>
 801562c:	08017c00 	.word	0x08017c00
 8015630:	08017c00 	.word	0x08017c00
 8015634:	08017c00 	.word	0x08017c00
 8015638:	08017c04 	.word	0x08017c04

0801563c <__retarget_lock_acquire_recursive>:
 801563c:	4770      	bx	lr

0801563e <__retarget_lock_release_recursive>:
 801563e:	4770      	bx	lr

08015640 <memcpy>:
 8015640:	440a      	add	r2, r1
 8015642:	4291      	cmp	r1, r2
 8015644:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8015648:	d100      	bne.n	801564c <memcpy+0xc>
 801564a:	4770      	bx	lr
 801564c:	b510      	push	{r4, lr}
 801564e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015652:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015656:	4291      	cmp	r1, r2
 8015658:	d1f9      	bne.n	801564e <memcpy+0xe>
 801565a:	bd10      	pop	{r4, pc}

0801565c <_free_r>:
 801565c:	b538      	push	{r3, r4, r5, lr}
 801565e:	4605      	mov	r5, r0
 8015660:	2900      	cmp	r1, #0
 8015662:	d041      	beq.n	80156e8 <_free_r+0x8c>
 8015664:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015668:	1f0c      	subs	r4, r1, #4
 801566a:	2b00      	cmp	r3, #0
 801566c:	bfb8      	it	lt
 801566e:	18e4      	addlt	r4, r4, r3
 8015670:	f7ff ff96 	bl	80155a0 <__malloc_lock>
 8015674:	4a1d      	ldr	r2, [pc, #116]	@ (80156ec <_free_r+0x90>)
 8015676:	6813      	ldr	r3, [r2, #0]
 8015678:	b933      	cbnz	r3, 8015688 <_free_r+0x2c>
 801567a:	6063      	str	r3, [r4, #4]
 801567c:	6014      	str	r4, [r2, #0]
 801567e:	4628      	mov	r0, r5
 8015680:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015684:	f7ff bf92 	b.w	80155ac <__malloc_unlock>
 8015688:	42a3      	cmp	r3, r4
 801568a:	d908      	bls.n	801569e <_free_r+0x42>
 801568c:	6820      	ldr	r0, [r4, #0]
 801568e:	1821      	adds	r1, r4, r0
 8015690:	428b      	cmp	r3, r1
 8015692:	bf01      	itttt	eq
 8015694:	6819      	ldreq	r1, [r3, #0]
 8015696:	685b      	ldreq	r3, [r3, #4]
 8015698:	1809      	addeq	r1, r1, r0
 801569a:	6021      	streq	r1, [r4, #0]
 801569c:	e7ed      	b.n	801567a <_free_r+0x1e>
 801569e:	461a      	mov	r2, r3
 80156a0:	685b      	ldr	r3, [r3, #4]
 80156a2:	b10b      	cbz	r3, 80156a8 <_free_r+0x4c>
 80156a4:	42a3      	cmp	r3, r4
 80156a6:	d9fa      	bls.n	801569e <_free_r+0x42>
 80156a8:	6811      	ldr	r1, [r2, #0]
 80156aa:	1850      	adds	r0, r2, r1
 80156ac:	42a0      	cmp	r0, r4
 80156ae:	d10b      	bne.n	80156c8 <_free_r+0x6c>
 80156b0:	6820      	ldr	r0, [r4, #0]
 80156b2:	4401      	add	r1, r0
 80156b4:	1850      	adds	r0, r2, r1
 80156b6:	4283      	cmp	r3, r0
 80156b8:	6011      	str	r1, [r2, #0]
 80156ba:	d1e0      	bne.n	801567e <_free_r+0x22>
 80156bc:	6818      	ldr	r0, [r3, #0]
 80156be:	685b      	ldr	r3, [r3, #4]
 80156c0:	6053      	str	r3, [r2, #4]
 80156c2:	4408      	add	r0, r1
 80156c4:	6010      	str	r0, [r2, #0]
 80156c6:	e7da      	b.n	801567e <_free_r+0x22>
 80156c8:	d902      	bls.n	80156d0 <_free_r+0x74>
 80156ca:	230c      	movs	r3, #12
 80156cc:	602b      	str	r3, [r5, #0]
 80156ce:	e7d6      	b.n	801567e <_free_r+0x22>
 80156d0:	6820      	ldr	r0, [r4, #0]
 80156d2:	1821      	adds	r1, r4, r0
 80156d4:	428b      	cmp	r3, r1
 80156d6:	bf04      	itt	eq
 80156d8:	6819      	ldreq	r1, [r3, #0]
 80156da:	685b      	ldreq	r3, [r3, #4]
 80156dc:	6063      	str	r3, [r4, #4]
 80156de:	bf04      	itt	eq
 80156e0:	1809      	addeq	r1, r1, r0
 80156e2:	6021      	streq	r1, [r4, #0]
 80156e4:	6054      	str	r4, [r2, #4]
 80156e6:	e7ca      	b.n	801567e <_free_r+0x22>
 80156e8:	bd38      	pop	{r3, r4, r5, pc}
 80156ea:	bf00      	nop
 80156ec:	20001c50 	.word	0x20001c50

080156f0 <_init>:
 80156f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156f2:	bf00      	nop
 80156f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80156f6:	bc08      	pop	{r3}
 80156f8:	469e      	mov	lr, r3
 80156fa:	4770      	bx	lr

080156fc <_fini>:
 80156fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156fe:	bf00      	nop
 8015700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015702:	bc08      	pop	{r3}
 8015704:	469e      	mov	lr, r3
 8015706:	4770      	bx	lr
