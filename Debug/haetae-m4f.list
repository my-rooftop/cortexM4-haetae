
haetae-m4f.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d30  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008eb8  08008eb8  00009eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ed4  08008ed4  0000a0fc  2**0
                  CONTENTS
  4 .ARM          00000008  08008ed4  08008ed4  00009ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008edc  08008edc  0000a0fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008edc  08008edc  00009edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008ee0  08008ee0  00009ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  08008ee4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a0fc  2**0
                  CONTENTS
 10 .bss          00000a90  200000fc  200000fc  0000a0fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b8c  20000b8c  0000a0fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a0fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014d6f  00000000  00000000  0000a12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039dc  00000000  00000000  0001ee9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001160  00000000  00000000  00022878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d35  00000000  00000000  000239d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022746  00000000  00000000  0002470d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000183a2  00000000  00000000  00046e53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce4a5  00000000  00000000  0005f1f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012d69a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b24  00000000  00000000  0012d6e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  00132204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008ea0 	.word	0x08008ea0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	08008ea0 	.word	0x08008ea0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	f6ad 7d48 	subw	sp, sp, #3912	@ 0xf48
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c0:	f000 fdf2 	bl	80010a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c4:	f000 f84c 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c8:	f000 f948 	bl	800075c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004cc:	f000 f8b2 	bl	8000634 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d0:	f000 f8de 	bl	8000690 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004d4:	f000 f90c 	bl	80006f0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004d8:	f008 f87e 	bl	80085d8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  uint8_t pk[CRYPTO_PUBLICKEYBYTES] = {0};
 80004dc:	f607 7348 	addw	r3, r7, #3912	@ 0xf48
 80004e0:	f5a3 7379 	sub.w	r3, r3, #996	@ 0x3e4
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	3304      	adds	r3, #4
 80004ea:	f44f 7277 	mov.w	r2, #988	@ 0x3dc
 80004ee:	2100      	movs	r1, #0
 80004f0:	4618      	mov	r0, r3
 80004f2:	f008 fc39 	bl	8008d68 <memset>
  uint8_t sk[CRYPTO_SECRETKEYBYTES] = {0};
 80004f6:	f607 7348 	addw	r3, r7, #3912	@ 0xf48
 80004fa:	f6a3 1364 	subw	r3, r3, #2404	@ 0x964
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	3304      	adds	r3, #4
 8000504:	f240 527c 	movw	r2, #1404	@ 0x57c
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f008 fc2c 	bl	8008d68 <memset>

  size_t siglen = 0;
 8000510:	2300      	movs	r3, #0
 8000512:	f8c7 3f44 	str.w	r3, [r7, #3908]	@ 0xf44
  uint8_t sig[CRYPTO_BYTES] = {0};
 8000516:	f607 7348 	addw	r3, r7, #3912	@ 0xf48
 800051a:	f6a3 7328 	subw	r3, r3, #3880	@ 0xf28
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	3304      	adds	r3, #4
 8000524:	f240 52be 	movw	r2, #1470	@ 0x5be
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f008 fc1c 	bl	8008d68 <memset>
  uint8_t msg[SEEDBYTES] = {0};
 8000530:	f607 7348 	addw	r3, r7, #3912	@ 0xf48
 8000534:	f6a3 7348 	subw	r3, r3, #3912	@ 0xf48
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	3304      	adds	r3, #4
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
 8000548:	611a      	str	r2, [r3, #16]
 800054a:	615a      	str	r2, [r3, #20]
 800054c:	619a      	str	r2, [r3, #24]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800054e:	f008 f869 	bl	8008624 <MX_USB_HOST_Process>
    
    randombytes(msg, SEEDBYTES);
 8000552:	463b      	mov	r3, r7
 8000554:	2120      	movs	r1, #32
 8000556:	4618      	mov	r0, r3
 8000558:	f000 fb98 	bl	8000c8c <randombytes>
  {
 800055c:	bf00      	nop
 800055e:	e7f6      	b.n	800054e <main+0x96>

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	@ 0x50
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0320 	add.w	r3, r7, #32
 800056a:	2230      	movs	r2, #48	@ 0x30
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f008 fbfa 	bl	8008d68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000584:	2300      	movs	r3, #0
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	4b28      	ldr	r3, [pc, #160]	@ (800062c <SystemClock_Config+0xcc>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800058c:	4a27      	ldr	r2, [pc, #156]	@ (800062c <SystemClock_Config+0xcc>)
 800058e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000592:	6413      	str	r3, [r2, #64]	@ 0x40
 8000594:	4b25      	ldr	r3, [pc, #148]	@ (800062c <SystemClock_Config+0xcc>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000598:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	4b22      	ldr	r3, [pc, #136]	@ (8000630 <SystemClock_Config+0xd0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a21      	ldr	r2, [pc, #132]	@ (8000630 <SystemClock_Config+0xd0>)
 80005aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ae:	6013      	str	r3, [r2, #0]
 80005b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000630 <SystemClock_Config+0xd0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005bc:	2301      	movs	r3, #1
 80005be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c6:	2302      	movs	r3, #2
 80005c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d0:	2308      	movs	r3, #8
 80005d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005d4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005d8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005da:	2302      	movs	r3, #2
 80005dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005de:	2307      	movs	r3, #7
 80005e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e2:	f107 0320 	add.w	r3, r7, #32
 80005e6:	4618      	mov	r0, r3
 80005e8:	f003 ffba 	bl	8004560 <HAL_RCC_OscConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005f2:	f000 f9b1 	bl	8000958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f6:	230f      	movs	r3, #15
 80005f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fa:	2302      	movs	r3, #2
 80005fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000602:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000606:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000608:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800060c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800060e:	f107 030c 	add.w	r3, r7, #12
 8000612:	2105      	movs	r1, #5
 8000614:	4618      	mov	r0, r3
 8000616:	f004 fa1b 	bl	8004a50 <HAL_RCC_ClockConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000620:	f000 f99a 	bl	8000958 <Error_Handler>
  }
}
 8000624:	bf00      	nop
 8000626:	3750      	adds	r7, #80	@ 0x50
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40023800 	.word	0x40023800
 8000630:	40007000 	.word	0x40007000

08000634 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000638:	4b12      	ldr	r3, [pc, #72]	@ (8000684 <MX_I2C1_Init+0x50>)
 800063a:	4a13      	ldr	r2, [pc, #76]	@ (8000688 <MX_I2C1_Init+0x54>)
 800063c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800063e:	4b11      	ldr	r3, [pc, #68]	@ (8000684 <MX_I2C1_Init+0x50>)
 8000640:	4a12      	ldr	r2, [pc, #72]	@ (800068c <MX_I2C1_Init+0x58>)
 8000642:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000644:	4b0f      	ldr	r3, [pc, #60]	@ (8000684 <MX_I2C1_Init+0x50>)
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800064a:	4b0e      	ldr	r3, [pc, #56]	@ (8000684 <MX_I2C1_Init+0x50>)
 800064c:	2200      	movs	r2, #0
 800064e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <MX_I2C1_Init+0x50>)
 8000652:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000656:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000658:	4b0a      	ldr	r3, [pc, #40]	@ (8000684 <MX_I2C1_Init+0x50>)
 800065a:	2200      	movs	r2, #0
 800065c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800065e:	4b09      	ldr	r3, [pc, #36]	@ (8000684 <MX_I2C1_Init+0x50>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000664:	4b07      	ldr	r3, [pc, #28]	@ (8000684 <MX_I2C1_Init+0x50>)
 8000666:	2200      	movs	r2, #0
 8000668:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800066a:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <MX_I2C1_Init+0x50>)
 800066c:	2200      	movs	r2, #0
 800066e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000670:	4804      	ldr	r0, [pc, #16]	@ (8000684 <MX_I2C1_Init+0x50>)
 8000672:	f003 f991 	bl	8003998 <HAL_I2C_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800067c:	f000 f96c 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000118 	.word	0x20000118
 8000688:	40005400 	.word	0x40005400
 800068c:	000186a0 	.word	0x000186a0

08000690 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000694:	4b13      	ldr	r3, [pc, #76]	@ (80006e4 <MX_I2S3_Init+0x54>)
 8000696:	4a14      	ldr	r2, [pc, #80]	@ (80006e8 <MX_I2S3_Init+0x58>)
 8000698:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800069a:	4b12      	ldr	r3, [pc, #72]	@ (80006e4 <MX_I2S3_Init+0x54>)
 800069c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006a0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006a2:	4b10      	ldr	r3, [pc, #64]	@ (80006e4 <MX_I2S3_Init+0x54>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006a8:	4b0e      	ldr	r3, [pc, #56]	@ (80006e4 <MX_I2S3_Init+0x54>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006ae:	4b0d      	ldr	r3, [pc, #52]	@ (80006e4 <MX_I2S3_Init+0x54>)
 80006b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006b4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006b6:	4b0b      	ldr	r3, [pc, #44]	@ (80006e4 <MX_I2S3_Init+0x54>)
 80006b8:	4a0c      	ldr	r2, [pc, #48]	@ (80006ec <MX_I2S3_Init+0x5c>)
 80006ba:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006bc:	4b09      	ldr	r3, [pc, #36]	@ (80006e4 <MX_I2S3_Init+0x54>)
 80006be:	2200      	movs	r2, #0
 80006c0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006c2:	4b08      	ldr	r3, [pc, #32]	@ (80006e4 <MX_I2S3_Init+0x54>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006c8:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <MX_I2S3_Init+0x54>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006ce:	4805      	ldr	r0, [pc, #20]	@ (80006e4 <MX_I2S3_Init+0x54>)
 80006d0:	f003 faa6 	bl	8003c20 <HAL_I2S_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006da:	f000 f93d 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	2000016c 	.word	0x2000016c
 80006e8:	40003c00 	.word	0x40003c00
 80006ec:	00017700 	.word	0x00017700

080006f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006f4:	4b17      	ldr	r3, [pc, #92]	@ (8000754 <MX_SPI1_Init+0x64>)
 80006f6:	4a18      	ldr	r2, [pc, #96]	@ (8000758 <MX_SPI1_Init+0x68>)
 80006f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006fa:	4b16      	ldr	r3, [pc, #88]	@ (8000754 <MX_SPI1_Init+0x64>)
 80006fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000700:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000702:	4b14      	ldr	r3, [pc, #80]	@ (8000754 <MX_SPI1_Init+0x64>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000708:	4b12      	ldr	r3, [pc, #72]	@ (8000754 <MX_SPI1_Init+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800070e:	4b11      	ldr	r3, [pc, #68]	@ (8000754 <MX_SPI1_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000714:	4b0f      	ldr	r3, [pc, #60]	@ (8000754 <MX_SPI1_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800071a:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <MX_SPI1_Init+0x64>)
 800071c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000720:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000722:	4b0c      	ldr	r3, [pc, #48]	@ (8000754 <MX_SPI1_Init+0x64>)
 8000724:	2200      	movs	r2, #0
 8000726:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000728:	4b0a      	ldr	r3, [pc, #40]	@ (8000754 <MX_SPI1_Init+0x64>)
 800072a:	2200      	movs	r2, #0
 800072c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800072e:	4b09      	ldr	r3, [pc, #36]	@ (8000754 <MX_SPI1_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000734:	4b07      	ldr	r3, [pc, #28]	@ (8000754 <MX_SPI1_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800073a:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <MX_SPI1_Init+0x64>)
 800073c:	220a      	movs	r2, #10
 800073e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000740:	4804      	ldr	r0, [pc, #16]	@ (8000754 <MX_SPI1_Init+0x64>)
 8000742:	f004 fcd3 	bl	80050ec <HAL_SPI_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800074c:	f000 f904 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	200001b4 	.word	0x200001b4
 8000758:	40013000 	.word	0x40013000

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08c      	sub	sp, #48	@ 0x30
 8000760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	61bb      	str	r3, [r7, #24]
 8000776:	4b72      	ldr	r3, [pc, #456]	@ (8000940 <MX_GPIO_Init+0x1e4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a71      	ldr	r2, [pc, #452]	@ (8000940 <MX_GPIO_Init+0x1e4>)
 800077c:	f043 0310 	orr.w	r3, r3, #16
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b6f      	ldr	r3, [pc, #444]	@ (8000940 <MX_GPIO_Init+0x1e4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0310 	and.w	r3, r3, #16
 800078a:	61bb      	str	r3, [r7, #24]
 800078c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
 8000792:	4b6b      	ldr	r3, [pc, #428]	@ (8000940 <MX_GPIO_Init+0x1e4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	4a6a      	ldr	r2, [pc, #424]	@ (8000940 <MX_GPIO_Init+0x1e4>)
 8000798:	f043 0304 	orr.w	r3, r3, #4
 800079c:	6313      	str	r3, [r2, #48]	@ 0x30
 800079e:	4b68      	ldr	r3, [pc, #416]	@ (8000940 <MX_GPIO_Init+0x1e4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	f003 0304 	and.w	r3, r3, #4
 80007a6:	617b      	str	r3, [r7, #20]
 80007a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	613b      	str	r3, [r7, #16]
 80007ae:	4b64      	ldr	r3, [pc, #400]	@ (8000940 <MX_GPIO_Init+0x1e4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	4a63      	ldr	r2, [pc, #396]	@ (8000940 <MX_GPIO_Init+0x1e4>)
 80007b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ba:	4b61      	ldr	r3, [pc, #388]	@ (8000940 <MX_GPIO_Init+0x1e4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007c2:	613b      	str	r3, [r7, #16]
 80007c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	4b5d      	ldr	r3, [pc, #372]	@ (8000940 <MX_GPIO_Init+0x1e4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	4a5c      	ldr	r2, [pc, #368]	@ (8000940 <MX_GPIO_Init+0x1e4>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d6:	4b5a      	ldr	r3, [pc, #360]	@ (8000940 <MX_GPIO_Init+0x1e4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	4b56      	ldr	r3, [pc, #344]	@ (8000940 <MX_GPIO_Init+0x1e4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	4a55      	ldr	r2, [pc, #340]	@ (8000940 <MX_GPIO_Init+0x1e4>)
 80007ec:	f043 0302 	orr.w	r3, r3, #2
 80007f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f2:	4b53      	ldr	r3, [pc, #332]	@ (8000940 <MX_GPIO_Init+0x1e4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	4b4f      	ldr	r3, [pc, #316]	@ (8000940 <MX_GPIO_Init+0x1e4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	4a4e      	ldr	r2, [pc, #312]	@ (8000940 <MX_GPIO_Init+0x1e4>)
 8000808:	f043 0308 	orr.w	r3, r3, #8
 800080c:	6313      	str	r3, [r2, #48]	@ 0x30
 800080e:	4b4c      	ldr	r3, [pc, #304]	@ (8000940 <MX_GPIO_Init+0x1e4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	f003 0308 	and.w	r3, r3, #8
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	2108      	movs	r1, #8
 800081e:	4849      	ldr	r0, [pc, #292]	@ (8000944 <MX_GPIO_Init+0x1e8>)
 8000820:	f000 ff86 	bl	8001730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000824:	2201      	movs	r2, #1
 8000826:	2101      	movs	r1, #1
 8000828:	4847      	ldr	r0, [pc, #284]	@ (8000948 <MX_GPIO_Init+0x1ec>)
 800082a:	f000 ff81 	bl	8001730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800082e:	2200      	movs	r2, #0
 8000830:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000834:	4845      	ldr	r0, [pc, #276]	@ (800094c <MX_GPIO_Init+0x1f0>)
 8000836:	f000 ff7b 	bl	8001730 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800083a:	2308      	movs	r3, #8
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	483c      	ldr	r0, [pc, #240]	@ (8000944 <MX_GPIO_Init+0x1e8>)
 8000852:	f000 fdd1 	bl	80013f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000856:	2301      	movs	r3, #1
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	2301      	movs	r3, #1
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	4836      	ldr	r0, [pc, #216]	@ (8000948 <MX_GPIO_Init+0x1ec>)
 800086e:	f000 fdc3 	bl	80013f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000872:	2308      	movs	r3, #8
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000876:	2302      	movs	r3, #2
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000882:	2305      	movs	r3, #5
 8000884:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	4619      	mov	r1, r3
 800088c:	482e      	ldr	r0, [pc, #184]	@ (8000948 <MX_GPIO_Init+0x1ec>)
 800088e:	f000 fdb3 	bl	80013f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000892:	2301      	movs	r3, #1
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000896:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	4619      	mov	r1, r3
 80008a6:	482a      	ldr	r0, [pc, #168]	@ (8000950 <MX_GPIO_Init+0x1f4>)
 80008a8:	f000 fda6 	bl	80013f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008ac:	2304      	movs	r3, #4
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b0:	2300      	movs	r3, #0
 80008b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	4825      	ldr	r0, [pc, #148]	@ (8000954 <MX_GPIO_Init+0x1f8>)
 80008c0:	f000 fd9a 	bl	80013f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008d6:	2305      	movs	r3, #5
 80008d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	481c      	ldr	r0, [pc, #112]	@ (8000954 <MX_GPIO_Init+0x1f8>)
 80008e2:	f000 fd89 	bl	80013f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008e6:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80008ea:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ec:	2301      	movs	r3, #1
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	4813      	ldr	r0, [pc, #76]	@ (800094c <MX_GPIO_Init+0x1f0>)
 8000900:	f000 fd7a 	bl	80013f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000904:	2320      	movs	r3, #32
 8000906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000908:	2300      	movs	r3, #0
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	480d      	ldr	r0, [pc, #52]	@ (800094c <MX_GPIO_Init+0x1f0>)
 8000918:	f000 fd6e 	bl	80013f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800091c:	2302      	movs	r3, #2
 800091e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000920:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	4804      	ldr	r0, [pc, #16]	@ (8000944 <MX_GPIO_Init+0x1e8>)
 8000932:	f000 fd61 	bl	80013f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000936:	bf00      	nop
 8000938:	3730      	adds	r7, #48	@ 0x30
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800
 8000944:	40021000 	.word	0x40021000
 8000948:	40020800 	.word	0x40020800
 800094c:	40020c00 	.word	0x40020c00
 8000950:	40020000 	.word	0x40020000
 8000954:	40020400 	.word	0x40020400

08000958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800095c:	b672      	cpsid	i
}
 800095e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <Error_Handler+0x8>

08000964 <surf>:

#define ROTATE(x, b) (((x) << (b)) | ((x) >> (32 - (b))))
#define MUSH(i, b) x = t[i] += (((x ^ seed[i]) + sum) ^ ROTATE(x, b));

static void surf(uint32_t out[8])
{
 8000964:	b480      	push	{r7}
 8000966:	b095      	sub	sp, #84	@ 0x54
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  uint32_t t[12];
  uint32_t x;
  uint32_t sum = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	64bb      	str	r3, [r7, #72]	@ 0x48
  int32_t r;
  int32_t i;
  int32_t loop;

  for (i = 0; i < 12; ++i) {
 8000970:	2300      	movs	r3, #0
 8000972:	643b      	str	r3, [r7, #64]	@ 0x40
 8000974:	e012      	b.n	800099c <surf+0x38>
    t[i] = in[i] ^ seed[12 + i];
 8000976:	4a8d      	ldr	r2, [pc, #564]	@ (8000bac <surf+0x248>)
 8000978:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800097a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800097e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000980:	330c      	adds	r3, #12
 8000982:	498b      	ldr	r1, [pc, #556]	@ (8000bb0 <surf+0x24c>)
 8000984:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000988:	405a      	eors	r2, r3
 800098a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	3350      	adds	r3, #80	@ 0x50
 8000990:	443b      	add	r3, r7
 8000992:	f843 2c44 	str.w	r2, [r3, #-68]
  for (i = 0; i < 12; ++i) {
 8000996:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000998:	3301      	adds	r3, #1
 800099a:	643b      	str	r3, [r7, #64]	@ 0x40
 800099c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800099e:	2b0b      	cmp	r3, #11
 80009a0:	dde9      	ble.n	8000976 <surf+0x12>
  }
  for (i = 0; i < 8; ++i) {
 80009a2:	2300      	movs	r3, #0
 80009a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80009a6:	e00d      	b.n	80009c4 <surf+0x60>
    out[i] = seed[24 + i];
 80009a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80009aa:	f103 0218 	add.w	r2, r3, #24
 80009ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	6879      	ldr	r1, [r7, #4]
 80009b4:	440b      	add	r3, r1
 80009b6:	497e      	ldr	r1, [pc, #504]	@ (8000bb0 <surf+0x24c>)
 80009b8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80009bc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 8; ++i) {
 80009be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80009c0:	3301      	adds	r3, #1
 80009c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80009c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80009c6:	2b07      	cmp	r3, #7
 80009c8:	ddee      	ble.n	80009a8 <surf+0x44>
  }
  x = t[11];
 80009ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80009cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  for (loop = 0; loop < 2; ++loop) {
 80009ce:	2300      	movs	r3, #0
 80009d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80009d2:	e0df      	b.n	8000b94 <surf+0x230>
    for (r = 0; r < 16; ++r) {
 80009d4:	2300      	movs	r3, #0
 80009d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80009d8:	e0ba      	b.n	8000b50 <surf+0x1ec>
      sum += 0x9e3779b9;
 80009da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80009dc:	4b75      	ldr	r3, [pc, #468]	@ (8000bb4 <surf+0x250>)
 80009de:	4413      	add	r3, r2
 80009e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      MUSH(0, 5)
 80009e2:	68fa      	ldr	r2, [r7, #12]
 80009e4:	4b72      	ldr	r3, [pc, #456]	@ (8000bb0 <surf+0x24c>)
 80009e6:	6819      	ldr	r1, [r3, #0]
 80009e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80009ea:	4059      	eors	r1, r3
 80009ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80009ee:	4419      	add	r1, r3
 80009f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80009f2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80009f6:	404b      	eors	r3, r1
 80009f8:	4413      	add	r3, r2
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      MUSH(1, 7)
 8000a00:	693a      	ldr	r2, [r7, #16]
 8000a02:	4b6b      	ldr	r3, [pc, #428]	@ (8000bb0 <surf+0x24c>)
 8000a04:	6859      	ldr	r1, [r3, #4]
 8000a06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000a08:	4059      	eors	r1, r3
 8000a0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000a0c:	4419      	add	r1, r3
 8000a0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000a10:	ea4f 6373 	mov.w	r3, r3, ror #25
 8000a14:	404b      	eors	r3, r1
 8000a16:	4413      	add	r3, r2
 8000a18:	613b      	str	r3, [r7, #16]
 8000a1a:	693b      	ldr	r3, [r7, #16]
 8000a1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
      MUSH(2, 9)
 8000a1e:	697a      	ldr	r2, [r7, #20]
 8000a20:	4b63      	ldr	r3, [pc, #396]	@ (8000bb0 <surf+0x24c>)
 8000a22:	6899      	ldr	r1, [r3, #8]
 8000a24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000a26:	4059      	eors	r1, r3
 8000a28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000a2a:	4419      	add	r1, r3
 8000a2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000a2e:	ea4f 53f3 	mov.w	r3, r3, ror #23
 8000a32:	404b      	eors	r3, r1
 8000a34:	4413      	add	r3, r2
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      MUSH(3, 13)
 8000a3c:	69ba      	ldr	r2, [r7, #24]
 8000a3e:	4b5c      	ldr	r3, [pc, #368]	@ (8000bb0 <surf+0x24c>)
 8000a40:	68d9      	ldr	r1, [r3, #12]
 8000a42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000a44:	4059      	eors	r1, r3
 8000a46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000a48:	4419      	add	r1, r3
 8000a4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000a4c:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8000a50:	404b      	eors	r3, r1
 8000a52:	4413      	add	r3, r2
 8000a54:	61bb      	str	r3, [r7, #24]
 8000a56:	69bb      	ldr	r3, [r7, #24]
 8000a58:	64fb      	str	r3, [r7, #76]	@ 0x4c
      MUSH(4, 5)
 8000a5a:	69fa      	ldr	r2, [r7, #28]
 8000a5c:	4b54      	ldr	r3, [pc, #336]	@ (8000bb0 <surf+0x24c>)
 8000a5e:	6919      	ldr	r1, [r3, #16]
 8000a60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000a62:	4059      	eors	r1, r3
 8000a64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000a66:	4419      	add	r1, r3
 8000a68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000a6a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8000a6e:	404b      	eors	r3, r1
 8000a70:	4413      	add	r3, r2
 8000a72:	61fb      	str	r3, [r7, #28]
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	64fb      	str	r3, [r7, #76]	@ 0x4c
      MUSH(5, 7)
 8000a78:	6a3a      	ldr	r2, [r7, #32]
 8000a7a:	4b4d      	ldr	r3, [pc, #308]	@ (8000bb0 <surf+0x24c>)
 8000a7c:	6959      	ldr	r1, [r3, #20]
 8000a7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000a80:	4059      	eors	r1, r3
 8000a82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000a84:	4419      	add	r1, r3
 8000a86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000a88:	ea4f 6373 	mov.w	r3, r3, ror #25
 8000a8c:	404b      	eors	r3, r1
 8000a8e:	4413      	add	r3, r2
 8000a90:	623b      	str	r3, [r7, #32]
 8000a92:	6a3b      	ldr	r3, [r7, #32]
 8000a94:	64fb      	str	r3, [r7, #76]	@ 0x4c
      MUSH(6, 9)
 8000a96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a98:	4b45      	ldr	r3, [pc, #276]	@ (8000bb0 <surf+0x24c>)
 8000a9a:	6999      	ldr	r1, [r3, #24]
 8000a9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000a9e:	4059      	eors	r1, r3
 8000aa0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000aa2:	4419      	add	r1, r3
 8000aa4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000aa6:	ea4f 53f3 	mov.w	r3, r3, ror #23
 8000aaa:	404b      	eors	r3, r1
 8000aac:	4413      	add	r3, r2
 8000aae:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      MUSH(7, 13)
 8000ab4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000ab6:	4b3e      	ldr	r3, [pc, #248]	@ (8000bb0 <surf+0x24c>)
 8000ab8:	69d9      	ldr	r1, [r3, #28]
 8000aba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000abc:	4059      	eors	r1, r3
 8000abe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000ac0:	4419      	add	r1, r3
 8000ac2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ac4:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8000ac8:	404b      	eors	r3, r1
 8000aca:	4413      	add	r3, r2
 8000acc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ad0:	64fb      	str	r3, [r7, #76]	@ 0x4c
      MUSH(8, 5)
 8000ad2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ad4:	4b36      	ldr	r3, [pc, #216]	@ (8000bb0 <surf+0x24c>)
 8000ad6:	6a19      	ldr	r1, [r3, #32]
 8000ad8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ada:	4059      	eors	r1, r3
 8000adc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000ade:	4419      	add	r1, r3
 8000ae0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ae2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8000ae6:	404b      	eors	r3, r1
 8000ae8:	4413      	add	r3, r2
 8000aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000aee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      MUSH(9, 7)
 8000af0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000af2:	4b2f      	ldr	r3, [pc, #188]	@ (8000bb0 <surf+0x24c>)
 8000af4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000af6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000af8:	4059      	eors	r1, r3
 8000afa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000afc:	4419      	add	r1, r3
 8000afe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000b00:	ea4f 6373 	mov.w	r3, r3, ror #25
 8000b04:	404b      	eors	r3, r1
 8000b06:	4413      	add	r3, r2
 8000b08:	633b      	str	r3, [r7, #48]	@ 0x30
 8000b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
      MUSH(10, 9)
 8000b0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000b10:	4b27      	ldr	r3, [pc, #156]	@ (8000bb0 <surf+0x24c>)
 8000b12:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8000b14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000b16:	4059      	eors	r1, r3
 8000b18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000b1a:	4419      	add	r1, r3
 8000b1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000b1e:	ea4f 53f3 	mov.w	r3, r3, ror #23
 8000b22:	404b      	eors	r3, r1
 8000b24:	4413      	add	r3, r2
 8000b26:	637b      	str	r3, [r7, #52]	@ 0x34
 8000b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      MUSH(11, 13)
 8000b2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000b2e:	4b20      	ldr	r3, [pc, #128]	@ (8000bb0 <surf+0x24c>)
 8000b30:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000b32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000b34:	4059      	eors	r1, r3
 8000b36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000b38:	4419      	add	r1, r3
 8000b3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000b3c:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8000b40:	404b      	eors	r3, r1
 8000b42:	4413      	add	r3, r2
 8000b44:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000b48:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (r = 0; r < 16; ++r) {
 8000b4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8000b50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b52:	2b0f      	cmp	r3, #15
 8000b54:	f77f af41 	ble.w	80009da <surf+0x76>
    }
    for (i = 0; i < 8; ++i) {
 8000b58:	2300      	movs	r3, #0
 8000b5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8000b5c:	e014      	b.n	8000b88 <surf+0x224>
      out[i] ^= t[i + 4];
 8000b5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	4413      	add	r3, r2
 8000b66:	6819      	ldr	r1, [r3, #0]
 8000b68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b6a:	3304      	adds	r3, #4
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	3350      	adds	r3, #80	@ 0x50
 8000b70:	443b      	add	r3, r7
 8000b72:	f853 2c44 	ldr.w	r2, [r3, #-68]
 8000b76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	4403      	add	r3, r0
 8000b7e:	404a      	eors	r2, r1
 8000b80:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 8; ++i) {
 8000b82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b84:	3301      	adds	r3, #1
 8000b86:	643b      	str	r3, [r7, #64]	@ 0x40
 8000b88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b8a:	2b07      	cmp	r3, #7
 8000b8c:	dde7      	ble.n	8000b5e <surf+0x1fa>
  for (loop = 0; loop < 2; ++loop) {
 8000b8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b90:	3301      	adds	r3, #1
 8000b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	f77f af1c 	ble.w	80009d4 <surf+0x70>
    }
  }
}
 8000b9c:	bf00      	nop
 8000b9e:	bf00      	nop
 8000ba0:	3754      	adds	r7, #84	@ 0x54
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	2000020c 	.word	0x2000020c
 8000bb0:	20000000 	.word	0x20000000
 8000bb4:	9e3779b9 	.word	0x9e3779b9

08000bb8 <randombytes_regen>:

void randombytes_regen(void);
void randombytes_regen(void)
{
 8000bb8:	b5b0      	push	{r4, r5, r7, lr}
 8000bba:	b088      	sub	sp, #32
 8000bbc:	af00      	add	r7, sp, #0
  uint32_t out[8];
  if (!++in[0]) {
 8000bbe:	4b2f      	ldr	r3, [pc, #188]	@ (8000c7c <randombytes_regen+0xc4>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	4a2d      	ldr	r2, [pc, #180]	@ (8000c7c <randombytes_regen+0xc4>)
 8000bc6:	6013      	str	r3, [r2, #0]
 8000bc8:	4b2c      	ldr	r3, [pc, #176]	@ (8000c7c <randombytes_regen+0xc4>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d116      	bne.n	8000bfe <randombytes_regen+0x46>
    if (!++in[1]) {
 8000bd0:	4b2a      	ldr	r3, [pc, #168]	@ (8000c7c <randombytes_regen+0xc4>)
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	4a29      	ldr	r2, [pc, #164]	@ (8000c7c <randombytes_regen+0xc4>)
 8000bd8:	6053      	str	r3, [r2, #4]
 8000bda:	4b28      	ldr	r3, [pc, #160]	@ (8000c7c <randombytes_regen+0xc4>)
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d10d      	bne.n	8000bfe <randombytes_regen+0x46>
      if (!++in[2]) {
 8000be2:	4b26      	ldr	r3, [pc, #152]	@ (8000c7c <randombytes_regen+0xc4>)
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	3301      	adds	r3, #1
 8000be8:	4a24      	ldr	r2, [pc, #144]	@ (8000c7c <randombytes_regen+0xc4>)
 8000bea:	6093      	str	r3, [r2, #8]
 8000bec:	4b23      	ldr	r3, [pc, #140]	@ (8000c7c <randombytes_regen+0xc4>)
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d104      	bne.n	8000bfe <randombytes_regen+0x46>
        ++in[3];
 8000bf4:	4b21      	ldr	r3, [pc, #132]	@ (8000c7c <randombytes_regen+0xc4>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	4a20      	ldr	r2, [pc, #128]	@ (8000c7c <randombytes_regen+0xc4>)
 8000bfc:	60d3      	str	r3, [r2, #12]
      }
    }
  }
  surf(out);
 8000bfe:	463b      	mov	r3, r7
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff feaf 	bl	8000964 <surf>
  memcpy(out_buf, out, sizeof(out));
 8000c06:	4b1e      	ldr	r3, [pc, #120]	@ (8000c80 <randombytes_regen+0xc8>)
 8000c08:	461d      	mov	r5, r3
 8000c0a:	463c      	mov	r4, r7
 8000c0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c10:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c14:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  if (!++in[0]) {
 8000c18:	4b18      	ldr	r3, [pc, #96]	@ (8000c7c <randombytes_regen+0xc4>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	4a17      	ldr	r2, [pc, #92]	@ (8000c7c <randombytes_regen+0xc4>)
 8000c20:	6013      	str	r3, [r2, #0]
 8000c22:	4b16      	ldr	r3, [pc, #88]	@ (8000c7c <randombytes_regen+0xc4>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d116      	bne.n	8000c58 <randombytes_regen+0xa0>
    if (!++in[1]) {
 8000c2a:	4b14      	ldr	r3, [pc, #80]	@ (8000c7c <randombytes_regen+0xc4>)
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	4a12      	ldr	r2, [pc, #72]	@ (8000c7c <randombytes_regen+0xc4>)
 8000c32:	6053      	str	r3, [r2, #4]
 8000c34:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <randombytes_regen+0xc4>)
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d10d      	bne.n	8000c58 <randombytes_regen+0xa0>
      if (!++in[2]) {
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c7c <randombytes_regen+0xc4>)
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	3301      	adds	r3, #1
 8000c42:	4a0e      	ldr	r2, [pc, #56]	@ (8000c7c <randombytes_regen+0xc4>)
 8000c44:	6093      	str	r3, [r2, #8]
 8000c46:	4b0d      	ldr	r3, [pc, #52]	@ (8000c7c <randombytes_regen+0xc4>)
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d104      	bne.n	8000c58 <randombytes_regen+0xa0>
        ++in[3];
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c7c <randombytes_regen+0xc4>)
 8000c50:	68db      	ldr	r3, [r3, #12]
 8000c52:	3301      	adds	r3, #1
 8000c54:	4a09      	ldr	r2, [pc, #36]	@ (8000c7c <randombytes_regen+0xc4>)
 8000c56:	60d3      	str	r3, [r2, #12]
      }
    }
  }
  surf(out);
 8000c58:	463b      	mov	r3, r7
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff fe82 	bl	8000964 <surf>
  memcpy(out_buf + sizeof(out), out, sizeof(out));
 8000c60:	4808      	ldr	r0, [pc, #32]	@ (8000c84 <randombytes_regen+0xcc>)
 8000c62:	463b      	mov	r3, r7
 8000c64:	2220      	movs	r2, #32
 8000c66:	4619      	mov	r1, r3
 8000c68:	f008 f8c2 	bl	8008df0 <memcpy>
  outleft = sizeof(out_buf);
 8000c6c:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <randombytes_regen+0xd0>)
 8000c6e:	2240      	movs	r2, #64	@ 0x40
 8000c70:	601a      	str	r2, [r3, #0]
}
 8000c72:	bf00      	nop
 8000c74:	3720      	adds	r7, #32
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bdb0      	pop	{r4, r5, r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	2000020c 	.word	0x2000020c
 8000c80:	2000023c 	.word	0x2000023c
 8000c84:	2000025c 	.word	0x2000025c
 8000c88:	2000027c 	.word	0x2000027c

08000c8c <randombytes>:

int randombytes(uint8_t* buf, size_t xlen)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
  while (xlen > 0) {
 8000c96:	e016      	b.n	8000cc6 <randombytes+0x3a>
    if (!outleft) {
 8000c98:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd8 <randombytes+0x4c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d101      	bne.n	8000ca4 <randombytes+0x18>
      randombytes_regen();
 8000ca0:	f7ff ff8a 	bl	8000bb8 <randombytes_regen>
    }
    *buf = out_buf[--outleft];
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd8 <randombytes+0x4c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	3b01      	subs	r3, #1
 8000caa:	4a0b      	ldr	r2, [pc, #44]	@ (8000cd8 <randombytes+0x4c>)
 8000cac:	6013      	str	r3, [r2, #0]
 8000cae:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd8 <randombytes+0x4c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cdc <randombytes+0x50>)
 8000cb4:	5cd2      	ldrb	r2, [r2, r3]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	701a      	strb	r2, [r3, #0]
    ++buf;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	607b      	str	r3, [r7, #4]
    --xlen;
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	603b      	str	r3, [r7, #0]
  while (xlen > 0) {
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d1e5      	bne.n	8000c98 <randombytes+0xc>
  }
  return 0;
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	2000027c 	.word	0x2000027c
 8000cdc:	2000023c 	.word	0x2000023c

08000ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	4b10      	ldr	r3, [pc, #64]	@ (8000d2c <HAL_MspInit+0x4c>)
 8000cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cee:	4a0f      	ldr	r2, [pc, #60]	@ (8000d2c <HAL_MspInit+0x4c>)
 8000cf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8000d2c <HAL_MspInit+0x4c>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	603b      	str	r3, [r7, #0]
 8000d06:	4b09      	ldr	r3, [pc, #36]	@ (8000d2c <HAL_MspInit+0x4c>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0a:	4a08      	ldr	r2, [pc, #32]	@ (8000d2c <HAL_MspInit+0x4c>)
 8000d0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d12:	4b06      	ldr	r3, [pc, #24]	@ (8000d2c <HAL_MspInit+0x4c>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d1a:	603b      	str	r3, [r7, #0]
 8000d1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d1e:	2007      	movs	r0, #7
 8000d20:	f000 fb28 	bl	8001374 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40023800 	.word	0x40023800

08000d30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	@ 0x28
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a19      	ldr	r2, [pc, #100]	@ (8000db4 <HAL_I2C_MspInit+0x84>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d12c      	bne.n	8000dac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	4b18      	ldr	r3, [pc, #96]	@ (8000db8 <HAL_I2C_MspInit+0x88>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	4a17      	ldr	r2, [pc, #92]	@ (8000db8 <HAL_I2C_MspInit+0x88>)
 8000d5c:	f043 0302 	orr.w	r3, r3, #2
 8000d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d62:	4b15      	ldr	r3, [pc, #84]	@ (8000db8 <HAL_I2C_MspInit+0x88>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	f003 0302 	and.w	r3, r3, #2
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d6e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d74:	2312      	movs	r3, #18
 8000d76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d80:	2304      	movs	r3, #4
 8000d82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	4619      	mov	r1, r3
 8000d8a:	480c      	ldr	r0, [pc, #48]	@ (8000dbc <HAL_I2C_MspInit+0x8c>)
 8000d8c:	f000 fb34 	bl	80013f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	4b08      	ldr	r3, [pc, #32]	@ (8000db8 <HAL_I2C_MspInit+0x88>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d98:	4a07      	ldr	r2, [pc, #28]	@ (8000db8 <HAL_I2C_MspInit+0x88>)
 8000d9a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000da0:	4b05      	ldr	r3, [pc, #20]	@ (8000db8 <HAL_I2C_MspInit+0x88>)
 8000da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dac:	bf00      	nop
 8000dae:	3728      	adds	r7, #40	@ 0x28
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40005400 	.word	0x40005400
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40020400 	.word	0x40020400

08000dc0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08e      	sub	sp, #56	@ 0x38
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a31      	ldr	r2, [pc, #196]	@ (8000eb0 <HAL_I2S_MspInit+0xf0>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d15a      	bne.n	8000ea6 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000df0:	2301      	movs	r3, #1
 8000df2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000df4:	23c0      	movs	r3, #192	@ 0xc0
 8000df6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	4618      	mov	r0, r3
 8000e02:	f004 f831 	bl	8004e68 <HAL_RCCEx_PeriphCLKConfig>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000e0c:	f7ff fda4 	bl	8000958 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e10:	2300      	movs	r3, #0
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	4b27      	ldr	r3, [pc, #156]	@ (8000eb4 <HAL_I2S_MspInit+0xf4>)
 8000e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e18:	4a26      	ldr	r2, [pc, #152]	@ (8000eb4 <HAL_I2S_MspInit+0xf4>)
 8000e1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e20:	4b24      	ldr	r3, [pc, #144]	@ (8000eb4 <HAL_I2S_MspInit+0xf4>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	4b20      	ldr	r3, [pc, #128]	@ (8000eb4 <HAL_I2S_MspInit+0xf4>)
 8000e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e34:	4a1f      	ldr	r2, [pc, #124]	@ (8000eb4 <HAL_I2S_MspInit+0xf4>)
 8000e36:	f043 0301 	orr.w	r3, r3, #1
 8000e3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb4 <HAL_I2S_MspInit+0xf4>)
 8000e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	4b19      	ldr	r3, [pc, #100]	@ (8000eb4 <HAL_I2S_MspInit+0xf4>)
 8000e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e50:	4a18      	ldr	r2, [pc, #96]	@ (8000eb4 <HAL_I2S_MspInit+0xf4>)
 8000e52:	f043 0304 	orr.w	r3, r3, #4
 8000e56:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e58:	4b16      	ldr	r3, [pc, #88]	@ (8000eb4 <HAL_I2S_MspInit+0xf4>)
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5c:	f003 0304 	and.w	r3, r3, #4
 8000e60:	60bb      	str	r3, [r7, #8]
 8000e62:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000e64:	2310      	movs	r3, #16
 8000e66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e70:	2300      	movs	r3, #0
 8000e72:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e74:	2306      	movs	r3, #6
 8000e76:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000e78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	480e      	ldr	r0, [pc, #56]	@ (8000eb8 <HAL_I2S_MspInit+0xf8>)
 8000e80:	f000 faba 	bl	80013f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e84:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000e88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e96:	2306      	movs	r3, #6
 8000e98:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4806      	ldr	r0, [pc, #24]	@ (8000ebc <HAL_I2S_MspInit+0xfc>)
 8000ea2:	f000 faa9 	bl	80013f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ea6:	bf00      	nop
 8000ea8:	3738      	adds	r7, #56	@ 0x38
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40003c00 	.word	0x40003c00
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40020000 	.word	0x40020000
 8000ebc:	40020800 	.word	0x40020800

08000ec0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08a      	sub	sp, #40	@ 0x28
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a19      	ldr	r2, [pc, #100]	@ (8000f44 <HAL_SPI_MspInit+0x84>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d12b      	bne.n	8000f3a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	4b18      	ldr	r3, [pc, #96]	@ (8000f48 <HAL_SPI_MspInit+0x88>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eea:	4a17      	ldr	r2, [pc, #92]	@ (8000f48 <HAL_SPI_MspInit+0x88>)
 8000eec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ef0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ef2:	4b15      	ldr	r3, [pc, #84]	@ (8000f48 <HAL_SPI_MspInit+0x88>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	4b11      	ldr	r3, [pc, #68]	@ (8000f48 <HAL_SPI_MspInit+0x88>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f06:	4a10      	ldr	r2, [pc, #64]	@ (8000f48 <HAL_SPI_MspInit+0x88>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f48 <HAL_SPI_MspInit+0x88>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f1a:	23e0      	movs	r3, #224	@ 0xe0
 8000f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2300      	movs	r3, #0
 8000f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f2a:	2305      	movs	r3, #5
 8000f2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	4619      	mov	r1, r3
 8000f34:	4805      	ldr	r0, [pc, #20]	@ (8000f4c <HAL_SPI_MspInit+0x8c>)
 8000f36:	f000 fa5f 	bl	80013f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f3a:	bf00      	nop
 8000f3c:	3728      	adds	r7, #40	@ 0x28
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40013000 	.word	0x40013000
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	40020000 	.word	0x40020000

08000f50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <NMI_Handler+0x4>

08000f58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <HardFault_Handler+0x4>

08000f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f64:	bf00      	nop
 8000f66:	e7fd      	b.n	8000f64 <MemManage_Handler+0x4>

08000f68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <BusFault_Handler+0x4>

08000f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f74:	bf00      	nop
 8000f76:	e7fd      	b.n	8000f74 <UsageFault_Handler+0x4>

08000f78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa6:	f000 f8d1 	bl	800114c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000fb4:	4802      	ldr	r0, [pc, #8]	@ (8000fc0 <OTG_FS_IRQHandler+0x10>)
 8000fb6:	f000 feb5 	bl	8001d24 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000664 	.word	0x20000664

08000fc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fcc:	4a14      	ldr	r2, [pc, #80]	@ (8001020 <_sbrk+0x5c>)
 8000fce:	4b15      	ldr	r3, [pc, #84]	@ (8001024 <_sbrk+0x60>)
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fd8:	4b13      	ldr	r3, [pc, #76]	@ (8001028 <_sbrk+0x64>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d102      	bne.n	8000fe6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fe0:	4b11      	ldr	r3, [pc, #68]	@ (8001028 <_sbrk+0x64>)
 8000fe2:	4a12      	ldr	r2, [pc, #72]	@ (800102c <_sbrk+0x68>)
 8000fe4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fe6:	4b10      	ldr	r3, [pc, #64]	@ (8001028 <_sbrk+0x64>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d207      	bcs.n	8001004 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ff4:	f007 fed0 	bl	8008d98 <__errno>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	220c      	movs	r2, #12
 8000ffc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001002:	e009      	b.n	8001018 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001004:	4b08      	ldr	r3, [pc, #32]	@ (8001028 <_sbrk+0x64>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800100a:	4b07      	ldr	r3, [pc, #28]	@ (8001028 <_sbrk+0x64>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	4a05      	ldr	r2, [pc, #20]	@ (8001028 <_sbrk+0x64>)
 8001014:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001016:	68fb      	ldr	r3, [r7, #12]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20020000 	.word	0x20020000
 8001024:	00000400 	.word	0x00000400
 8001028:	20000280 	.word	0x20000280
 800102c:	20000b90 	.word	0x20000b90

08001030 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001034:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <SystemInit+0x20>)
 8001036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800103a:	4a05      	ldr	r2, [pc, #20]	@ (8001050 <SystemInit+0x20>)
 800103c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001040:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001054:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800108c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001058:	f7ff ffea 	bl	8001030 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800105c:	480c      	ldr	r0, [pc, #48]	@ (8001090 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800105e:	490d      	ldr	r1, [pc, #52]	@ (8001094 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001060:	4a0d      	ldr	r2, [pc, #52]	@ (8001098 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001062:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001064:	e002      	b.n	800106c <LoopCopyDataInit>

08001066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800106a:	3304      	adds	r3, #4

0800106c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800106c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800106e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001070:	d3f9      	bcc.n	8001066 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001072:	4a0a      	ldr	r2, [pc, #40]	@ (800109c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001074:	4c0a      	ldr	r4, [pc, #40]	@ (80010a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001078:	e001      	b.n	800107e <LoopFillZerobss>

0800107a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800107a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800107c:	3204      	adds	r2, #4

0800107e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800107e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001080:	d3fb      	bcc.n	800107a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001082:	f007 fe8f 	bl	8008da4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001086:	f7ff fa17 	bl	80004b8 <main>
  bx  lr    
 800108a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800108c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001090:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001094:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8001098:	08008ee4 	.word	0x08008ee4
  ldr r2, =_sbss
 800109c:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80010a0:	20000b8c 	.word	0x20000b8c

080010a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010a4:	e7fe      	b.n	80010a4 <ADC_IRQHandler>
	...

080010a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010ac:	4b0e      	ldr	r3, [pc, #56]	@ (80010e8 <HAL_Init+0x40>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a0d      	ldr	r2, [pc, #52]	@ (80010e8 <HAL_Init+0x40>)
 80010b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010b8:	4b0b      	ldr	r3, [pc, #44]	@ (80010e8 <HAL_Init+0x40>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a0a      	ldr	r2, [pc, #40]	@ (80010e8 <HAL_Init+0x40>)
 80010be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c4:	4b08      	ldr	r3, [pc, #32]	@ (80010e8 <HAL_Init+0x40>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a07      	ldr	r2, [pc, #28]	@ (80010e8 <HAL_Init+0x40>)
 80010ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d0:	2003      	movs	r0, #3
 80010d2:	f000 f94f 	bl	8001374 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010d6:	2000      	movs	r0, #0
 80010d8:	f000 f808 	bl	80010ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010dc:	f7ff fe00 	bl	8000ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40023c00 	.word	0x40023c00

080010ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f4:	4b12      	ldr	r3, [pc, #72]	@ (8001140 <HAL_InitTick+0x54>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b12      	ldr	r3, [pc, #72]	@ (8001144 <HAL_InitTick+0x58>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	4619      	mov	r1, r3
 80010fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001102:	fbb3 f3f1 	udiv	r3, r3, r1
 8001106:	fbb2 f3f3 	udiv	r3, r2, r3
 800110a:	4618      	mov	r0, r3
 800110c:	f000 f967 	bl	80013de <HAL_SYSTICK_Config>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e00e      	b.n	8001138 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b0f      	cmp	r3, #15
 800111e:	d80a      	bhi.n	8001136 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001120:	2200      	movs	r2, #0
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001128:	f000 f92f 	bl	800138a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800112c:	4a06      	ldr	r2, [pc, #24]	@ (8001148 <HAL_InitTick+0x5c>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001132:	2300      	movs	r3, #0
 8001134:	e000      	b.n	8001138 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
}
 8001138:	4618      	mov	r0, r3
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000080 	.word	0x20000080
 8001144:	20000088 	.word	0x20000088
 8001148:	20000084 	.word	0x20000084

0800114c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001150:	4b06      	ldr	r3, [pc, #24]	@ (800116c <HAL_IncTick+0x20>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	461a      	mov	r2, r3
 8001156:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <HAL_IncTick+0x24>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4413      	add	r3, r2
 800115c:	4a04      	ldr	r2, [pc, #16]	@ (8001170 <HAL_IncTick+0x24>)
 800115e:	6013      	str	r3, [r2, #0]
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	20000088 	.word	0x20000088
 8001170:	20000284 	.word	0x20000284

08001174 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  return uwTick;
 8001178:	4b03      	ldr	r3, [pc, #12]	@ (8001188 <HAL_GetTick+0x14>)
 800117a:	681b      	ldr	r3, [r3, #0]
}
 800117c:	4618      	mov	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	20000284 	.word	0x20000284

0800118c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001194:	f7ff ffee 	bl	8001174 <HAL_GetTick>
 8001198:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80011a4:	d005      	beq.n	80011b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011a6:	4b0a      	ldr	r3, [pc, #40]	@ (80011d0 <HAL_Delay+0x44>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	461a      	mov	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4413      	add	r3, r2
 80011b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011b2:	bf00      	nop
 80011b4:	f7ff ffde 	bl	8001174 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d8f7      	bhi.n	80011b4 <HAL_Delay+0x28>
  {
  }
}
 80011c4:	bf00      	nop
 80011c6:	bf00      	nop
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000088 	.word	0x20000088

080011d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001218 <__NVIC_SetPriorityGrouping+0x44>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011f0:	4013      	ands	r3, r2
 80011f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001200:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001206:	4a04      	ldr	r2, [pc, #16]	@ (8001218 <__NVIC_SetPriorityGrouping+0x44>)
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	60d3      	str	r3, [r2, #12]
}
 800120c:	bf00      	nop
 800120e:	3714      	adds	r7, #20
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001220:	4b04      	ldr	r3, [pc, #16]	@ (8001234 <__NVIC_GetPriorityGrouping+0x18>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	0a1b      	lsrs	r3, r3, #8
 8001226:	f003 0307 	and.w	r3, r3, #7
}
 800122a:	4618      	mov	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	2b00      	cmp	r3, #0
 8001248:	db0b      	blt.n	8001262 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	f003 021f 	and.w	r2, r3, #31
 8001250:	4907      	ldr	r1, [pc, #28]	@ (8001270 <__NVIC_EnableIRQ+0x38>)
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	095b      	lsrs	r3, r3, #5
 8001258:	2001      	movs	r0, #1
 800125a:	fa00 f202 	lsl.w	r2, r0, r2
 800125e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	e000e100 	.word	0xe000e100

08001274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	6039      	str	r1, [r7, #0]
 800127e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001284:	2b00      	cmp	r3, #0
 8001286:	db0a      	blt.n	800129e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	b2da      	uxtb	r2, r3
 800128c:	490c      	ldr	r1, [pc, #48]	@ (80012c0 <__NVIC_SetPriority+0x4c>)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	0112      	lsls	r2, r2, #4
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	440b      	add	r3, r1
 8001298:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800129c:	e00a      	b.n	80012b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4908      	ldr	r1, [pc, #32]	@ (80012c4 <__NVIC_SetPriority+0x50>)
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	f003 030f 	and.w	r3, r3, #15
 80012aa:	3b04      	subs	r3, #4
 80012ac:	0112      	lsls	r2, r2, #4
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	440b      	add	r3, r1
 80012b2:	761a      	strb	r2, [r3, #24]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000e100 	.word	0xe000e100
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b089      	sub	sp, #36	@ 0x24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	f1c3 0307 	rsb	r3, r3, #7
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	bf28      	it	cs
 80012e6:	2304      	movcs	r3, #4
 80012e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3304      	adds	r3, #4
 80012ee:	2b06      	cmp	r3, #6
 80012f0:	d902      	bls.n	80012f8 <NVIC_EncodePriority+0x30>
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3b03      	subs	r3, #3
 80012f6:	e000      	b.n	80012fa <NVIC_EncodePriority+0x32>
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43da      	mvns	r2, r3
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	401a      	ands	r2, r3
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001310:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	fa01 f303 	lsl.w	r3, r1, r3
 800131a:	43d9      	mvns	r1, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001320:	4313      	orrs	r3, r2
         );
}
 8001322:	4618      	mov	r0, r3
 8001324:	3724      	adds	r7, #36	@ 0x24
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3b01      	subs	r3, #1
 800133c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001340:	d301      	bcc.n	8001346 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001342:	2301      	movs	r3, #1
 8001344:	e00f      	b.n	8001366 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001346:	4a0a      	ldr	r2, [pc, #40]	@ (8001370 <SysTick_Config+0x40>)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3b01      	subs	r3, #1
 800134c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800134e:	210f      	movs	r1, #15
 8001350:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001354:	f7ff ff8e 	bl	8001274 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001358:	4b05      	ldr	r3, [pc, #20]	@ (8001370 <SysTick_Config+0x40>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800135e:	4b04      	ldr	r3, [pc, #16]	@ (8001370 <SysTick_Config+0x40>)
 8001360:	2207      	movs	r2, #7
 8001362:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	e000e010 	.word	0xe000e010

08001374 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff ff29 	bl	80011d4 <__NVIC_SetPriorityGrouping>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800138a:	b580      	push	{r7, lr}
 800138c:	b086      	sub	sp, #24
 800138e:	af00      	add	r7, sp, #0
 8001390:	4603      	mov	r3, r0
 8001392:	60b9      	str	r1, [r7, #8]
 8001394:	607a      	str	r2, [r7, #4]
 8001396:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800139c:	f7ff ff3e 	bl	800121c <__NVIC_GetPriorityGrouping>
 80013a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	68b9      	ldr	r1, [r7, #8]
 80013a6:	6978      	ldr	r0, [r7, #20]
 80013a8:	f7ff ff8e 	bl	80012c8 <NVIC_EncodePriority>
 80013ac:	4602      	mov	r2, r0
 80013ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b2:	4611      	mov	r1, r2
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff ff5d 	bl	8001274 <__NVIC_SetPriority>
}
 80013ba:	bf00      	nop
 80013bc:	3718      	adds	r7, #24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	4603      	mov	r3, r0
 80013ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ff31 	bl	8001238 <__NVIC_EnableIRQ>
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff ffa2 	bl	8001330 <SysTick_Config>
 80013ec:	4603      	mov	r3, r0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b089      	sub	sp, #36	@ 0x24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800140a:	2300      	movs	r3, #0
 800140c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
 8001412:	e16b      	b.n	80016ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001414:	2201      	movs	r2, #1
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	4013      	ands	r3, r2
 8001426:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	429a      	cmp	r2, r3
 800142e:	f040 815a 	bne.w	80016e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f003 0303 	and.w	r3, r3, #3
 800143a:	2b01      	cmp	r3, #1
 800143c:	d005      	beq.n	800144a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001446:	2b02      	cmp	r3, #2
 8001448:	d130      	bne.n	80014ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	2203      	movs	r2, #3
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43db      	mvns	r3, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4013      	ands	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	68da      	ldr	r2, [r3, #12]
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4313      	orrs	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001480:	2201      	movs	r2, #1
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	091b      	lsrs	r3, r3, #4
 8001496:	f003 0201 	and.w	r2, r3, #1
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f003 0303 	and.w	r3, r3, #3
 80014b4:	2b03      	cmp	r3, #3
 80014b6:	d017      	beq.n	80014e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	2203      	movs	r2, #3
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4013      	ands	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	689a      	ldr	r2, [r3, #8]
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4313      	orrs	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 0303 	and.w	r3, r3, #3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d123      	bne.n	800153c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	08da      	lsrs	r2, r3, #3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3208      	adds	r2, #8
 80014fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001500:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	f003 0307 	and.w	r3, r3, #7
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	220f      	movs	r2, #15
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4013      	ands	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	691a      	ldr	r2, [r3, #16]
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4313      	orrs	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	08da      	lsrs	r2, r3, #3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3208      	adds	r2, #8
 8001536:	69b9      	ldr	r1, [r7, #24]
 8001538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	2203      	movs	r2, #3
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4013      	ands	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f003 0203 	and.w	r2, r3, #3
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001578:	2b00      	cmp	r3, #0
 800157a:	f000 80b4 	beq.w	80016e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	4b60      	ldr	r3, [pc, #384]	@ (8001704 <HAL_GPIO_Init+0x30c>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001586:	4a5f      	ldr	r2, [pc, #380]	@ (8001704 <HAL_GPIO_Init+0x30c>)
 8001588:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800158c:	6453      	str	r3, [r2, #68]	@ 0x44
 800158e:	4b5d      	ldr	r3, [pc, #372]	@ (8001704 <HAL_GPIO_Init+0x30c>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001592:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800159a:	4a5b      	ldr	r2, [pc, #364]	@ (8001708 <HAL_GPIO_Init+0x310>)
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	089b      	lsrs	r3, r3, #2
 80015a0:	3302      	adds	r3, #2
 80015a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	f003 0303 	and.w	r3, r3, #3
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	220f      	movs	r2, #15
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43db      	mvns	r3, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4013      	ands	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a52      	ldr	r2, [pc, #328]	@ (800170c <HAL_GPIO_Init+0x314>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d02b      	beq.n	800161e <HAL_GPIO_Init+0x226>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a51      	ldr	r2, [pc, #324]	@ (8001710 <HAL_GPIO_Init+0x318>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d025      	beq.n	800161a <HAL_GPIO_Init+0x222>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a50      	ldr	r2, [pc, #320]	@ (8001714 <HAL_GPIO_Init+0x31c>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d01f      	beq.n	8001616 <HAL_GPIO_Init+0x21e>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a4f      	ldr	r2, [pc, #316]	@ (8001718 <HAL_GPIO_Init+0x320>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d019      	beq.n	8001612 <HAL_GPIO_Init+0x21a>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a4e      	ldr	r2, [pc, #312]	@ (800171c <HAL_GPIO_Init+0x324>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d013      	beq.n	800160e <HAL_GPIO_Init+0x216>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a4d      	ldr	r2, [pc, #308]	@ (8001720 <HAL_GPIO_Init+0x328>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d00d      	beq.n	800160a <HAL_GPIO_Init+0x212>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a4c      	ldr	r2, [pc, #304]	@ (8001724 <HAL_GPIO_Init+0x32c>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d007      	beq.n	8001606 <HAL_GPIO_Init+0x20e>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a4b      	ldr	r2, [pc, #300]	@ (8001728 <HAL_GPIO_Init+0x330>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d101      	bne.n	8001602 <HAL_GPIO_Init+0x20a>
 80015fe:	2307      	movs	r3, #7
 8001600:	e00e      	b.n	8001620 <HAL_GPIO_Init+0x228>
 8001602:	2308      	movs	r3, #8
 8001604:	e00c      	b.n	8001620 <HAL_GPIO_Init+0x228>
 8001606:	2306      	movs	r3, #6
 8001608:	e00a      	b.n	8001620 <HAL_GPIO_Init+0x228>
 800160a:	2305      	movs	r3, #5
 800160c:	e008      	b.n	8001620 <HAL_GPIO_Init+0x228>
 800160e:	2304      	movs	r3, #4
 8001610:	e006      	b.n	8001620 <HAL_GPIO_Init+0x228>
 8001612:	2303      	movs	r3, #3
 8001614:	e004      	b.n	8001620 <HAL_GPIO_Init+0x228>
 8001616:	2302      	movs	r3, #2
 8001618:	e002      	b.n	8001620 <HAL_GPIO_Init+0x228>
 800161a:	2301      	movs	r3, #1
 800161c:	e000      	b.n	8001620 <HAL_GPIO_Init+0x228>
 800161e:	2300      	movs	r3, #0
 8001620:	69fa      	ldr	r2, [r7, #28]
 8001622:	f002 0203 	and.w	r2, r2, #3
 8001626:	0092      	lsls	r2, r2, #2
 8001628:	4093      	lsls	r3, r2
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4313      	orrs	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001630:	4935      	ldr	r1, [pc, #212]	@ (8001708 <HAL_GPIO_Init+0x310>)
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	089b      	lsrs	r3, r3, #2
 8001636:	3302      	adds	r3, #2
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800163e:	4b3b      	ldr	r3, [pc, #236]	@ (800172c <HAL_GPIO_Init+0x334>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	43db      	mvns	r3, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4013      	ands	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	4313      	orrs	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001662:	4a32      	ldr	r2, [pc, #200]	@ (800172c <HAL_GPIO_Init+0x334>)
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001668:	4b30      	ldr	r3, [pc, #192]	@ (800172c <HAL_GPIO_Init+0x334>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	43db      	mvns	r3, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4013      	ands	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	4313      	orrs	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800168c:	4a27      	ldr	r2, [pc, #156]	@ (800172c <HAL_GPIO_Init+0x334>)
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001692:	4b26      	ldr	r3, [pc, #152]	@ (800172c <HAL_GPIO_Init+0x334>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	43db      	mvns	r3, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4013      	ands	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016b6:	4a1d      	ldr	r2, [pc, #116]	@ (800172c <HAL_GPIO_Init+0x334>)
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016bc:	4b1b      	ldr	r3, [pc, #108]	@ (800172c <HAL_GPIO_Init+0x334>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	43db      	mvns	r3, r3
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4013      	ands	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	4313      	orrs	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016e0:	4a12      	ldr	r2, [pc, #72]	@ (800172c <HAL_GPIO_Init+0x334>)
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3301      	adds	r3, #1
 80016ea:	61fb      	str	r3, [r7, #28]
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	2b0f      	cmp	r3, #15
 80016f0:	f67f ae90 	bls.w	8001414 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016f4:	bf00      	nop
 80016f6:	bf00      	nop
 80016f8:	3724      	adds	r7, #36	@ 0x24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	40023800 	.word	0x40023800
 8001708:	40013800 	.word	0x40013800
 800170c:	40020000 	.word	0x40020000
 8001710:	40020400 	.word	0x40020400
 8001714:	40020800 	.word	0x40020800
 8001718:	40020c00 	.word	0x40020c00
 800171c:	40021000 	.word	0x40021000
 8001720:	40021400 	.word	0x40021400
 8001724:	40021800 	.word	0x40021800
 8001728:	40021c00 	.word	0x40021c00
 800172c:	40013c00 	.word	0x40013c00

08001730 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	460b      	mov	r3, r1
 800173a:	807b      	strh	r3, [r7, #2]
 800173c:	4613      	mov	r3, r2
 800173e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001740:	787b      	ldrb	r3, [r7, #1]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001746:	887a      	ldrh	r2, [r7, #2]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800174c:	e003      	b.n	8001756 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800174e:	887b      	ldrh	r3, [r7, #2]
 8001750:	041a      	lsls	r2, r3, #16
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	619a      	str	r2, [r3, #24]
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b086      	sub	sp, #24
 8001766:	af02      	add	r7, sp, #8
 8001768:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d101      	bne.n	8001774 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e059      	b.n	8001828 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d106      	bne.n	8001794 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f006 ff80 	bl	8008694 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2203      	movs	r2, #3
 8001798:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017a2:	d102      	bne.n	80017aa <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f003 fd9a 	bl	80052e8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6818      	ldr	r0, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	7c1a      	ldrb	r2, [r3, #16]
 80017bc:	f88d 2000 	strb.w	r2, [sp]
 80017c0:	3304      	adds	r3, #4
 80017c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017c4:	f003 fd1b 	bl	80051fe <USB_CoreInit>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d005      	beq.n	80017da <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2202      	movs	r2, #2
 80017d2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e026      	b.n	8001828 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2101      	movs	r1, #1
 80017e0:	4618      	mov	r0, r3
 80017e2:	f003 fd92 	bl	800530a <USB_SetCurrentMode>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d005      	beq.n	80017f8 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2202      	movs	r2, #2
 80017f0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e017      	b.n	8001828 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6818      	ldr	r0, [r3, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	7c1a      	ldrb	r2, [r3, #16]
 8001800:	f88d 2000 	strb.w	r2, [sp]
 8001804:	3304      	adds	r3, #4
 8001806:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001808:	f003 ff34 	bl	8005674 <USB_HostInit>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d005      	beq.n	800181e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2202      	movs	r2, #2
 8001816:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e004      	b.n	8001828 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2201      	movs	r2, #1
 8001822:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001830:	b590      	push	{r4, r7, lr}
 8001832:	b08b      	sub	sp, #44	@ 0x2c
 8001834:	af04      	add	r7, sp, #16
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	4608      	mov	r0, r1
 800183a:	4611      	mov	r1, r2
 800183c:	461a      	mov	r2, r3
 800183e:	4603      	mov	r3, r0
 8001840:	70fb      	strb	r3, [r7, #3]
 8001842:	460b      	mov	r3, r1
 8001844:	70bb      	strb	r3, [r7, #2]
 8001846:	4613      	mov	r3, r2
 8001848:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800184a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800184c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001854:	2b01      	cmp	r3, #1
 8001856:	d101      	bne.n	800185c <HAL_HCD_HC_Init+0x2c>
 8001858:	2302      	movs	r3, #2
 800185a:	e09d      	b.n	8001998 <HAL_HCD_HC_Init+0x168>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2201      	movs	r2, #1
 8001860:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001864:	78fa      	ldrb	r2, [r7, #3]
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	4613      	mov	r3, r2
 800186a:	011b      	lsls	r3, r3, #4
 800186c:	1a9b      	subs	r3, r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	440b      	add	r3, r1
 8001872:	3319      	adds	r3, #25
 8001874:	2200      	movs	r2, #0
 8001876:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001878:	78fa      	ldrb	r2, [r7, #3]
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	4613      	mov	r3, r2
 800187e:	011b      	lsls	r3, r3, #4
 8001880:	1a9b      	subs	r3, r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	440b      	add	r3, r1
 8001886:	3314      	adds	r3, #20
 8001888:	787a      	ldrb	r2, [r7, #1]
 800188a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800188c:	78fa      	ldrb	r2, [r7, #3]
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	4613      	mov	r3, r2
 8001892:	011b      	lsls	r3, r3, #4
 8001894:	1a9b      	subs	r3, r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	440b      	add	r3, r1
 800189a:	3315      	adds	r3, #21
 800189c:	78fa      	ldrb	r2, [r7, #3]
 800189e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80018a0:	78fa      	ldrb	r2, [r7, #3]
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	4613      	mov	r3, r2
 80018a6:	011b      	lsls	r3, r3, #4
 80018a8:	1a9b      	subs	r3, r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	440b      	add	r3, r1
 80018ae:	3326      	adds	r3, #38	@ 0x26
 80018b0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80018b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80018b6:	78fa      	ldrb	r2, [r7, #3]
 80018b8:	78bb      	ldrb	r3, [r7, #2]
 80018ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80018be:	b2d8      	uxtb	r0, r3
 80018c0:	6879      	ldr	r1, [r7, #4]
 80018c2:	4613      	mov	r3, r2
 80018c4:	011b      	lsls	r3, r3, #4
 80018c6:	1a9b      	subs	r3, r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	440b      	add	r3, r1
 80018cc:	3316      	adds	r3, #22
 80018ce:	4602      	mov	r2, r0
 80018d0:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80018d2:	78fb      	ldrb	r3, [r7, #3]
 80018d4:	4619      	mov	r1, r3
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f000 fbc8 	bl	800206c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80018dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	da0a      	bge.n	80018fa <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80018e4:	78fa      	ldrb	r2, [r7, #3]
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	4613      	mov	r3, r2
 80018ea:	011b      	lsls	r3, r3, #4
 80018ec:	1a9b      	subs	r3, r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	440b      	add	r3, r1
 80018f2:	3317      	adds	r3, #23
 80018f4:	2201      	movs	r2, #1
 80018f6:	701a      	strb	r2, [r3, #0]
 80018f8:	e009      	b.n	800190e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80018fa:	78fa      	ldrb	r2, [r7, #3]
 80018fc:	6879      	ldr	r1, [r7, #4]
 80018fe:	4613      	mov	r3, r2
 8001900:	011b      	lsls	r3, r3, #4
 8001902:	1a9b      	subs	r3, r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	440b      	add	r3, r1
 8001908:	3317      	adds	r3, #23
 800190a:	2200      	movs	r2, #0
 800190c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f004 f812 	bl	800593c <USB_GetHostSpeed>
 8001918:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800191a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800191e:	2b01      	cmp	r3, #1
 8001920:	d10b      	bne.n	800193a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001922:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001926:	2b01      	cmp	r3, #1
 8001928:	d107      	bne.n	800193a <HAL_HCD_HC_Init+0x10a>
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d104      	bne.n	800193a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	2bbc      	cmp	r3, #188	@ 0xbc
 8001934:	d901      	bls.n	800193a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001936:	23bc      	movs	r3, #188	@ 0xbc
 8001938:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800193a:	78fa      	ldrb	r2, [r7, #3]
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	4613      	mov	r3, r2
 8001940:	011b      	lsls	r3, r3, #4
 8001942:	1a9b      	subs	r3, r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	440b      	add	r3, r1
 8001948:	3318      	adds	r3, #24
 800194a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800194e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001950:	78fa      	ldrb	r2, [r7, #3]
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	b298      	uxth	r0, r3
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	4613      	mov	r3, r2
 800195a:	011b      	lsls	r3, r3, #4
 800195c:	1a9b      	subs	r3, r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	440b      	add	r3, r1
 8001962:	3328      	adds	r3, #40	@ 0x28
 8001964:	4602      	mov	r2, r0
 8001966:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6818      	ldr	r0, [r3, #0]
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	b29b      	uxth	r3, r3
 8001970:	787c      	ldrb	r4, [r7, #1]
 8001972:	78ba      	ldrb	r2, [r7, #2]
 8001974:	78f9      	ldrb	r1, [r7, #3]
 8001976:	9302      	str	r3, [sp, #8]
 8001978:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800197c:	9301      	str	r3, [sp, #4]
 800197e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	4623      	mov	r3, r4
 8001986:	f004 f801 	bl	800598c <USB_HC_Init>
 800198a:	4603      	mov	r3, r0
 800198c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001996:	7bfb      	ldrb	r3, [r7, #15]
}
 8001998:	4618      	mov	r0, r3
 800199a:	371c      	adds	r7, #28
 800199c:	46bd      	mov	sp, r7
 800199e:	bd90      	pop	{r4, r7, pc}

080019a0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	460b      	mov	r3, r1
 80019aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80019ac:	2300      	movs	r3, #0
 80019ae:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d101      	bne.n	80019be <HAL_HCD_HC_Halt+0x1e>
 80019ba:	2302      	movs	r3, #2
 80019bc:	e00f      	b.n	80019de <HAL_HCD_HC_Halt+0x3e>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2201      	movs	r2, #1
 80019c2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	78fa      	ldrb	r2, [r7, #3]
 80019cc:	4611      	mov	r1, r2
 80019ce:	4618      	mov	r0, r3
 80019d0:	f004 fb93 	bl	80060fa <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
	...

080019e8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	4608      	mov	r0, r1
 80019f2:	4611      	mov	r1, r2
 80019f4:	461a      	mov	r2, r3
 80019f6:	4603      	mov	r3, r0
 80019f8:	70fb      	strb	r3, [r7, #3]
 80019fa:	460b      	mov	r3, r1
 80019fc:	70bb      	strb	r3, [r7, #2]
 80019fe:	4613      	mov	r3, r2
 8001a00:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001a02:	78fa      	ldrb	r2, [r7, #3]
 8001a04:	6879      	ldr	r1, [r7, #4]
 8001a06:	4613      	mov	r3, r2
 8001a08:	011b      	lsls	r3, r3, #4
 8001a0a:	1a9b      	subs	r3, r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	440b      	add	r3, r1
 8001a10:	3317      	adds	r3, #23
 8001a12:	78ba      	ldrb	r2, [r7, #2]
 8001a14:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001a16:	78fa      	ldrb	r2, [r7, #3]
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	011b      	lsls	r3, r3, #4
 8001a1e:	1a9b      	subs	r3, r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	440b      	add	r3, r1
 8001a24:	3326      	adds	r3, #38	@ 0x26
 8001a26:	787a      	ldrb	r2, [r7, #1]
 8001a28:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001a2a:	7c3b      	ldrb	r3, [r7, #16]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d114      	bne.n	8001a5a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001a30:	78fa      	ldrb	r2, [r7, #3]
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	4613      	mov	r3, r2
 8001a36:	011b      	lsls	r3, r3, #4
 8001a38:	1a9b      	subs	r3, r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	332a      	adds	r3, #42	@ 0x2a
 8001a40:	2203      	movs	r2, #3
 8001a42:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001a44:	78fa      	ldrb	r2, [r7, #3]
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	011b      	lsls	r3, r3, #4
 8001a4c:	1a9b      	subs	r3, r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	440b      	add	r3, r1
 8001a52:	3319      	adds	r3, #25
 8001a54:	7f3a      	ldrb	r2, [r7, #28]
 8001a56:	701a      	strb	r2, [r3, #0]
 8001a58:	e009      	b.n	8001a6e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a5a:	78fa      	ldrb	r2, [r7, #3]
 8001a5c:	6879      	ldr	r1, [r7, #4]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	011b      	lsls	r3, r3, #4
 8001a62:	1a9b      	subs	r3, r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	440b      	add	r3, r1
 8001a68:	332a      	adds	r3, #42	@ 0x2a
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001a6e:	787b      	ldrb	r3, [r7, #1]
 8001a70:	2b03      	cmp	r3, #3
 8001a72:	f200 8102 	bhi.w	8001c7a <HAL_HCD_HC_SubmitRequest+0x292>
 8001a76:	a201      	add	r2, pc, #4	@ (adr r2, 8001a7c <HAL_HCD_HC_SubmitRequest+0x94>)
 8001a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a7c:	08001a8d 	.word	0x08001a8d
 8001a80:	08001c65 	.word	0x08001c65
 8001a84:	08001b51 	.word	0x08001b51
 8001a88:	08001bdb 	.word	0x08001bdb
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001a8c:	7c3b      	ldrb	r3, [r7, #16]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	f040 80f5 	bne.w	8001c7e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001a94:	78bb      	ldrb	r3, [r7, #2]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d12d      	bne.n	8001af6 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001a9a:	8b3b      	ldrh	r3, [r7, #24]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d109      	bne.n	8001ab4 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001aa0:	78fa      	ldrb	r2, [r7, #3]
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	011b      	lsls	r3, r3, #4
 8001aa8:	1a9b      	subs	r3, r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	440b      	add	r3, r1
 8001aae:	333d      	adds	r3, #61	@ 0x3d
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ab4:	78fa      	ldrb	r2, [r7, #3]
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	011b      	lsls	r3, r3, #4
 8001abc:	1a9b      	subs	r3, r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	333d      	adds	r3, #61	@ 0x3d
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10a      	bne.n	8001ae0 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001aca:	78fa      	ldrb	r2, [r7, #3]
 8001acc:	6879      	ldr	r1, [r7, #4]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	011b      	lsls	r3, r3, #4
 8001ad2:	1a9b      	subs	r3, r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	440b      	add	r3, r1
 8001ad8:	332a      	adds	r3, #42	@ 0x2a
 8001ada:	2200      	movs	r2, #0
 8001adc:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001ade:	e0ce      	b.n	8001c7e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ae0:	78fa      	ldrb	r2, [r7, #3]
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	011b      	lsls	r3, r3, #4
 8001ae8:	1a9b      	subs	r3, r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	440b      	add	r3, r1
 8001aee:	332a      	adds	r3, #42	@ 0x2a
 8001af0:	2202      	movs	r2, #2
 8001af2:	701a      	strb	r2, [r3, #0]
      break;
 8001af4:	e0c3      	b.n	8001c7e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001af6:	78fa      	ldrb	r2, [r7, #3]
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	4613      	mov	r3, r2
 8001afc:	011b      	lsls	r3, r3, #4
 8001afe:	1a9b      	subs	r3, r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	440b      	add	r3, r1
 8001b04:	331a      	adds	r3, #26
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	f040 80b8 	bne.w	8001c7e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b0e:	78fa      	ldrb	r2, [r7, #3]
 8001b10:	6879      	ldr	r1, [r7, #4]
 8001b12:	4613      	mov	r3, r2
 8001b14:	011b      	lsls	r3, r3, #4
 8001b16:	1a9b      	subs	r3, r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	440b      	add	r3, r1
 8001b1c:	333c      	adds	r3, #60	@ 0x3c
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d10a      	bne.n	8001b3a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b24:	78fa      	ldrb	r2, [r7, #3]
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	011b      	lsls	r3, r3, #4
 8001b2c:	1a9b      	subs	r3, r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	440b      	add	r3, r1
 8001b32:	332a      	adds	r3, #42	@ 0x2a
 8001b34:	2200      	movs	r2, #0
 8001b36:	701a      	strb	r2, [r3, #0]
      break;
 8001b38:	e0a1      	b.n	8001c7e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b3a:	78fa      	ldrb	r2, [r7, #3]
 8001b3c:	6879      	ldr	r1, [r7, #4]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	011b      	lsls	r3, r3, #4
 8001b42:	1a9b      	subs	r3, r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	440b      	add	r3, r1
 8001b48:	332a      	adds	r3, #42	@ 0x2a
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	701a      	strb	r2, [r3, #0]
      break;
 8001b4e:	e096      	b.n	8001c7e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001b50:	78bb      	ldrb	r3, [r7, #2]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d120      	bne.n	8001b98 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b56:	78fa      	ldrb	r2, [r7, #3]
 8001b58:	6879      	ldr	r1, [r7, #4]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	011b      	lsls	r3, r3, #4
 8001b5e:	1a9b      	subs	r3, r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	440b      	add	r3, r1
 8001b64:	333d      	adds	r3, #61	@ 0x3d
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d10a      	bne.n	8001b82 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b6c:	78fa      	ldrb	r2, [r7, #3]
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	4613      	mov	r3, r2
 8001b72:	011b      	lsls	r3, r3, #4
 8001b74:	1a9b      	subs	r3, r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	440b      	add	r3, r1
 8001b7a:	332a      	adds	r3, #42	@ 0x2a
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001b80:	e07e      	b.n	8001c80 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b82:	78fa      	ldrb	r2, [r7, #3]
 8001b84:	6879      	ldr	r1, [r7, #4]
 8001b86:	4613      	mov	r3, r2
 8001b88:	011b      	lsls	r3, r3, #4
 8001b8a:	1a9b      	subs	r3, r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	440b      	add	r3, r1
 8001b90:	332a      	adds	r3, #42	@ 0x2a
 8001b92:	2202      	movs	r2, #2
 8001b94:	701a      	strb	r2, [r3, #0]
      break;
 8001b96:	e073      	b.n	8001c80 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b98:	78fa      	ldrb	r2, [r7, #3]
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	011b      	lsls	r3, r3, #4
 8001ba0:	1a9b      	subs	r3, r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	333c      	adds	r3, #60	@ 0x3c
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d10a      	bne.n	8001bc4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bae:	78fa      	ldrb	r2, [r7, #3]
 8001bb0:	6879      	ldr	r1, [r7, #4]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	011b      	lsls	r3, r3, #4
 8001bb6:	1a9b      	subs	r3, r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	440b      	add	r3, r1
 8001bbc:	332a      	adds	r3, #42	@ 0x2a
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	701a      	strb	r2, [r3, #0]
      break;
 8001bc2:	e05d      	b.n	8001c80 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bc4:	78fa      	ldrb	r2, [r7, #3]
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	011b      	lsls	r3, r3, #4
 8001bcc:	1a9b      	subs	r3, r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	332a      	adds	r3, #42	@ 0x2a
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	701a      	strb	r2, [r3, #0]
      break;
 8001bd8:	e052      	b.n	8001c80 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001bda:	78bb      	ldrb	r3, [r7, #2]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d120      	bne.n	8001c22 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001be0:	78fa      	ldrb	r2, [r7, #3]
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	4613      	mov	r3, r2
 8001be6:	011b      	lsls	r3, r3, #4
 8001be8:	1a9b      	subs	r3, r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	440b      	add	r3, r1
 8001bee:	333d      	adds	r3, #61	@ 0x3d
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d10a      	bne.n	8001c0c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bf6:	78fa      	ldrb	r2, [r7, #3]
 8001bf8:	6879      	ldr	r1, [r7, #4]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	011b      	lsls	r3, r3, #4
 8001bfe:	1a9b      	subs	r3, r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	440b      	add	r3, r1
 8001c04:	332a      	adds	r3, #42	@ 0x2a
 8001c06:	2200      	movs	r2, #0
 8001c08:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c0a:	e039      	b.n	8001c80 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c0c:	78fa      	ldrb	r2, [r7, #3]
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	4613      	mov	r3, r2
 8001c12:	011b      	lsls	r3, r3, #4
 8001c14:	1a9b      	subs	r3, r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	440b      	add	r3, r1
 8001c1a:	332a      	adds	r3, #42	@ 0x2a
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	701a      	strb	r2, [r3, #0]
      break;
 8001c20:	e02e      	b.n	8001c80 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c22:	78fa      	ldrb	r2, [r7, #3]
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	4613      	mov	r3, r2
 8001c28:	011b      	lsls	r3, r3, #4
 8001c2a:	1a9b      	subs	r3, r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	440b      	add	r3, r1
 8001c30:	333c      	adds	r3, #60	@ 0x3c
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d10a      	bne.n	8001c4e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c38:	78fa      	ldrb	r2, [r7, #3]
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	011b      	lsls	r3, r3, #4
 8001c40:	1a9b      	subs	r3, r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	440b      	add	r3, r1
 8001c46:	332a      	adds	r3, #42	@ 0x2a
 8001c48:	2200      	movs	r2, #0
 8001c4a:	701a      	strb	r2, [r3, #0]
      break;
 8001c4c:	e018      	b.n	8001c80 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c4e:	78fa      	ldrb	r2, [r7, #3]
 8001c50:	6879      	ldr	r1, [r7, #4]
 8001c52:	4613      	mov	r3, r2
 8001c54:	011b      	lsls	r3, r3, #4
 8001c56:	1a9b      	subs	r3, r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	440b      	add	r3, r1
 8001c5c:	332a      	adds	r3, #42	@ 0x2a
 8001c5e:	2202      	movs	r2, #2
 8001c60:	701a      	strb	r2, [r3, #0]
      break;
 8001c62:	e00d      	b.n	8001c80 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c64:	78fa      	ldrb	r2, [r7, #3]
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	011b      	lsls	r3, r3, #4
 8001c6c:	1a9b      	subs	r3, r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	440b      	add	r3, r1
 8001c72:	332a      	adds	r3, #42	@ 0x2a
 8001c74:	2200      	movs	r2, #0
 8001c76:	701a      	strb	r2, [r3, #0]
      break;
 8001c78:	e002      	b.n	8001c80 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001c7a:	bf00      	nop
 8001c7c:	e000      	b.n	8001c80 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001c7e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001c80:	78fa      	ldrb	r2, [r7, #3]
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	4613      	mov	r3, r2
 8001c86:	011b      	lsls	r3, r3, #4
 8001c88:	1a9b      	subs	r3, r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	332c      	adds	r3, #44	@ 0x2c
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001c94:	78fa      	ldrb	r2, [r7, #3]
 8001c96:	8b39      	ldrh	r1, [r7, #24]
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	011b      	lsls	r3, r3, #4
 8001c9e:	1a9b      	subs	r3, r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	4403      	add	r3, r0
 8001ca4:	3334      	adds	r3, #52	@ 0x34
 8001ca6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001ca8:	78fa      	ldrb	r2, [r7, #3]
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	4613      	mov	r3, r2
 8001cae:	011b      	lsls	r3, r3, #4
 8001cb0:	1a9b      	subs	r3, r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	440b      	add	r3, r1
 8001cb6:	334c      	adds	r3, #76	@ 0x4c
 8001cb8:	2200      	movs	r2, #0
 8001cba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001cbc:	78fa      	ldrb	r2, [r7, #3]
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	011b      	lsls	r3, r3, #4
 8001cc4:	1a9b      	subs	r3, r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	440b      	add	r3, r1
 8001cca:	3338      	adds	r3, #56	@ 0x38
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001cd0:	78fa      	ldrb	r2, [r7, #3]
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	011b      	lsls	r3, r3, #4
 8001cd8:	1a9b      	subs	r3, r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	440b      	add	r3, r1
 8001cde:	3315      	adds	r3, #21
 8001ce0:	78fa      	ldrb	r2, [r7, #3]
 8001ce2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001ce4:	78fa      	ldrb	r2, [r7, #3]
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	011b      	lsls	r3, r3, #4
 8001cec:	1a9b      	subs	r3, r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	334d      	adds	r3, #77	@ 0x4d
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6818      	ldr	r0, [r3, #0]
 8001cfc:	78fa      	ldrb	r2, [r7, #3]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	011b      	lsls	r3, r3, #4
 8001d02:	1a9b      	subs	r3, r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	3310      	adds	r3, #16
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	1d19      	adds	r1, r3, #4
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	799b      	ldrb	r3, [r3, #6]
 8001d12:	461a      	mov	r2, r3
 8001d14:	f003 ff66 	bl	8005be4 <USB_HC_StartXfer>
 8001d18:	4603      	mov	r3, r0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop

08001d24 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f003 fc5b 	bl	80055f6 <USB_GetMode>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	f040 80fb 	bne.w	8001f3e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f003 fc1e 	bl	800558e <USB_ReadInterrupts>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 80f1 	beq.w	8001f3c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f003 fc15 	bl	800558e <USB_ReadInterrupts>
 8001d64:	4603      	mov	r3, r0
 8001d66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001d6e:	d104      	bne.n	8001d7a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001d78:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f003 fc05 	bl	800558e <USB_ReadInterrupts>
 8001d84:	4603      	mov	r3, r0
 8001d86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001d8e:	d104      	bne.n	8001d9a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001d98:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f003 fbf5 	bl	800558e <USB_ReadInterrupts>
 8001da4:	4603      	mov	r3, r0
 8001da6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001daa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001dae:	d104      	bne.n	8001dba <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001db8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f003 fbe5 	bl	800558e <USB_ReadInterrupts>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d103      	bne.n	8001dd6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f003 fbd7 	bl	800558e <USB_ReadInterrupts>
 8001de0:	4603      	mov	r3, r0
 8001de2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001de6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001dea:	d120      	bne.n	8001e2e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001df4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d113      	bne.n	8001e2e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001e06:	2110      	movs	r1, #16
 8001e08:	6938      	ldr	r0, [r7, #16]
 8001e0a:	f003 faca 	bl	80053a2 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001e0e:	6938      	ldr	r0, [r7, #16]
 8001e10:	f003 faf9 	bl	8005406 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	7a5b      	ldrb	r3, [r3, #9]
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d105      	bne.n	8001e28 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2101      	movs	r1, #1
 8001e22:	4618      	mov	r0, r3
 8001e24:	f003 fcea 	bl	80057fc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f006 fcb1 	bl	8008790 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f003 fbab 	bl	800558e <USB_ReadInterrupts>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e42:	d102      	bne.n	8001e4a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f001 fd33 	bl	80038b0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f003 fb9d 	bl	800558e <USB_ReadInterrupts>
 8001e54:	4603      	mov	r3, r0
 8001e56:	f003 0308 	and.w	r3, r3, #8
 8001e5a:	2b08      	cmp	r3, #8
 8001e5c:	d106      	bne.n	8001e6c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f006 fc7a 	bl	8008758 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2208      	movs	r2, #8
 8001e6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f003 fb8c 	bl	800558e <USB_ReadInterrupts>
 8001e76:	4603      	mov	r3, r0
 8001e78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e80:	d139      	bne.n	8001ef6 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f004 f926 	bl	80060d8 <USB_HC_ReadInterrupt>
 8001e8c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	e025      	b.n	8001ee0 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d018      	beq.n	8001eda <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	015a      	lsls	r2, r3, #5
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4413      	add	r3, r2
 8001eb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001eba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ebe:	d106      	bne.n	8001ece <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f905 	bl	80020d6 <HCD_HC_IN_IRQHandler>
 8001ecc:	e005      	b.n	8001eda <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 ff67 	bl	8002da8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	3301      	adds	r3, #1
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	795b      	ldrb	r3, [r3, #5]
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d3d3      	bcc.n	8001e94 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ef4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f003 fb47 	bl	800558e <USB_ReadInterrupts>
 8001f00:	4603      	mov	r3, r0
 8001f02:	f003 0310 	and.w	r3, r3, #16
 8001f06:	2b10      	cmp	r3, #16
 8001f08:	d101      	bne.n	8001f0e <HAL_HCD_IRQHandler+0x1ea>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e000      	b.n	8001f10 <HAL_HCD_IRQHandler+0x1ec>
 8001f0e:	2300      	movs	r3, #0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d014      	beq.n	8001f3e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	699a      	ldr	r2, [r3, #24]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 0210 	bic.w	r2, r2, #16
 8001f22:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f001 fbe4 	bl	80036f2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	699a      	ldr	r2, [r3, #24]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f042 0210 	orr.w	r2, r2, #16
 8001f38:	619a      	str	r2, [r3, #24]
 8001f3a:	e000      	b.n	8001f3e <HAL_HCD_IRQHandler+0x21a>
      return;
 8001f3c:	bf00      	nop
    }
  }
}
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d101      	bne.n	8001f5a <HAL_HCD_Start+0x16>
 8001f56:	2302      	movs	r3, #2
 8001f58:	e013      	b.n	8001f82 <HAL_HCD_Start+0x3e>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2101      	movs	r1, #1
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f003 fcae 	bl	80058ca <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f003 f9a7 	bl	80052c6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d101      	bne.n	8001fa0 <HAL_HCD_Stop+0x16>
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	e00d      	b.n	8001fbc <HAL_HCD_Stop+0x32>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f004 fa01 	bl	80063b4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f003 fc50 	bl	8005876 <USB_ResetPort>
 8001fd6:	4603      	mov	r3, r0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001fec:	78fa      	ldrb	r2, [r7, #3]
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	011b      	lsls	r3, r3, #4
 8001ff4:	1a9b      	subs	r3, r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	334c      	adds	r3, #76	@ 0x4c
 8001ffc:	781b      	ldrb	r3, [r3, #0]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800200a:	b480      	push	{r7}
 800200c:	b083      	sub	sp, #12
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
 8002012:	460b      	mov	r3, r1
 8002014:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002016:	78fa      	ldrb	r2, [r7, #3]
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	4613      	mov	r3, r2
 800201c:	011b      	lsls	r3, r3, #4
 800201e:	1a9b      	subs	r3, r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	440b      	add	r3, r1
 8002024:	3338      	adds	r3, #56	@ 0x38
 8002026:	681b      	ldr	r3, [r3, #0]
}
 8002028:	4618      	mov	r0, r3
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4618      	mov	r0, r3
 8002042:	f003 fc92 	bl	800596a <USB_GetCurrentFrame>
 8002046:	4603      	mov	r3, r0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f003 fc6d 	bl	800593c <USB_GetHostSpeed>
 8002062:	4603      	mov	r3, r0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002078:	78fa      	ldrb	r2, [r7, #3]
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	4613      	mov	r3, r2
 800207e:	011b      	lsls	r3, r3, #4
 8002080:	1a9b      	subs	r3, r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	331a      	adds	r3, #26
 8002088:	2200      	movs	r2, #0
 800208a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 800208c:	78fa      	ldrb	r2, [r7, #3]
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	4613      	mov	r3, r2
 8002092:	011b      	lsls	r3, r3, #4
 8002094:	1a9b      	subs	r3, r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	440b      	add	r3, r1
 800209a:	331b      	adds	r3, #27
 800209c:	2200      	movs	r2, #0
 800209e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80020a0:	78fa      	ldrb	r2, [r7, #3]
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	011b      	lsls	r3, r3, #4
 80020a8:	1a9b      	subs	r3, r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	3325      	adds	r3, #37	@ 0x25
 80020b0:	2200      	movs	r2, #0
 80020b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80020b4:	78fa      	ldrb	r2, [r7, #3]
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	4613      	mov	r3, r2
 80020ba:	011b      	lsls	r3, r3, #4
 80020bc:	1a9b      	subs	r3, r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	440b      	add	r3, r1
 80020c2:	3324      	adds	r3, #36	@ 0x24
 80020c4:	2200      	movs	r2, #0
 80020c6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b086      	sub	sp, #24
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	460b      	mov	r3, r1
 80020e0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	78fa      	ldrb	r2, [r7, #3]
 80020f2:	4611      	mov	r1, r2
 80020f4:	4618      	mov	r0, r3
 80020f6:	f003 fa5d 	bl	80055b4 <USB_ReadChInterrupts>
 80020fa:	4603      	mov	r3, r0
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b04      	cmp	r3, #4
 8002102:	d11a      	bne.n	800213a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002104:	78fb      	ldrb	r3, [r7, #3]
 8002106:	015a      	lsls	r2, r3, #5
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	4413      	add	r3, r2
 800210c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002110:	461a      	mov	r2, r3
 8002112:	2304      	movs	r3, #4
 8002114:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002116:	78fa      	ldrb	r2, [r7, #3]
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	4613      	mov	r3, r2
 800211c:	011b      	lsls	r3, r3, #4
 800211e:	1a9b      	subs	r3, r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	440b      	add	r3, r1
 8002124:	334d      	adds	r3, #77	@ 0x4d
 8002126:	2207      	movs	r2, #7
 8002128:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	78fa      	ldrb	r2, [r7, #3]
 8002130:	4611      	mov	r1, r2
 8002132:	4618      	mov	r0, r3
 8002134:	f003 ffe1 	bl	80060fa <USB_HC_Halt>
 8002138:	e09e      	b.n	8002278 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	78fa      	ldrb	r2, [r7, #3]
 8002140:	4611      	mov	r1, r2
 8002142:	4618      	mov	r0, r3
 8002144:	f003 fa36 	bl	80055b4 <USB_ReadChInterrupts>
 8002148:	4603      	mov	r3, r0
 800214a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800214e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002152:	d11b      	bne.n	800218c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002154:	78fb      	ldrb	r3, [r7, #3]
 8002156:	015a      	lsls	r2, r3, #5
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	4413      	add	r3, r2
 800215c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002160:	461a      	mov	r2, r3
 8002162:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002166:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002168:	78fa      	ldrb	r2, [r7, #3]
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	4613      	mov	r3, r2
 800216e:	011b      	lsls	r3, r3, #4
 8002170:	1a9b      	subs	r3, r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	334d      	adds	r3, #77	@ 0x4d
 8002178:	2208      	movs	r2, #8
 800217a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	78fa      	ldrb	r2, [r7, #3]
 8002182:	4611      	mov	r1, r2
 8002184:	4618      	mov	r0, r3
 8002186:	f003 ffb8 	bl	80060fa <USB_HC_Halt>
 800218a:	e075      	b.n	8002278 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	78fa      	ldrb	r2, [r7, #3]
 8002192:	4611      	mov	r1, r2
 8002194:	4618      	mov	r0, r3
 8002196:	f003 fa0d 	bl	80055b4 <USB_ReadChInterrupts>
 800219a:	4603      	mov	r3, r0
 800219c:	f003 0308 	and.w	r3, r3, #8
 80021a0:	2b08      	cmp	r3, #8
 80021a2:	d11a      	bne.n	80021da <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80021a4:	78fb      	ldrb	r3, [r7, #3]
 80021a6:	015a      	lsls	r2, r3, #5
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	4413      	add	r3, r2
 80021ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021b0:	461a      	mov	r2, r3
 80021b2:	2308      	movs	r3, #8
 80021b4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80021b6:	78fa      	ldrb	r2, [r7, #3]
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	011b      	lsls	r3, r3, #4
 80021be:	1a9b      	subs	r3, r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	440b      	add	r3, r1
 80021c4:	334d      	adds	r3, #77	@ 0x4d
 80021c6:	2206      	movs	r2, #6
 80021c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	78fa      	ldrb	r2, [r7, #3]
 80021d0:	4611      	mov	r1, r2
 80021d2:	4618      	mov	r0, r3
 80021d4:	f003 ff91 	bl	80060fa <USB_HC_Halt>
 80021d8:	e04e      	b.n	8002278 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	78fa      	ldrb	r2, [r7, #3]
 80021e0:	4611      	mov	r1, r2
 80021e2:	4618      	mov	r0, r3
 80021e4:	f003 f9e6 	bl	80055b4 <USB_ReadChInterrupts>
 80021e8:	4603      	mov	r3, r0
 80021ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021f2:	d11b      	bne.n	800222c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80021f4:	78fb      	ldrb	r3, [r7, #3]
 80021f6:	015a      	lsls	r2, r3, #5
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	4413      	add	r3, r2
 80021fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002200:	461a      	mov	r2, r3
 8002202:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002206:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002208:	78fa      	ldrb	r2, [r7, #3]
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	4613      	mov	r3, r2
 800220e:	011b      	lsls	r3, r3, #4
 8002210:	1a9b      	subs	r3, r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	440b      	add	r3, r1
 8002216:	334d      	adds	r3, #77	@ 0x4d
 8002218:	2209      	movs	r2, #9
 800221a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	78fa      	ldrb	r2, [r7, #3]
 8002222:	4611      	mov	r1, r2
 8002224:	4618      	mov	r0, r3
 8002226:	f003 ff68 	bl	80060fa <USB_HC_Halt>
 800222a:	e025      	b.n	8002278 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	78fa      	ldrb	r2, [r7, #3]
 8002232:	4611      	mov	r1, r2
 8002234:	4618      	mov	r0, r3
 8002236:	f003 f9bd 	bl	80055b4 <USB_ReadChInterrupts>
 800223a:	4603      	mov	r3, r0
 800223c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002240:	2b80      	cmp	r3, #128	@ 0x80
 8002242:	d119      	bne.n	8002278 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002244:	78fb      	ldrb	r3, [r7, #3]
 8002246:	015a      	lsls	r2, r3, #5
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	4413      	add	r3, r2
 800224c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002250:	461a      	mov	r2, r3
 8002252:	2380      	movs	r3, #128	@ 0x80
 8002254:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002256:	78fa      	ldrb	r2, [r7, #3]
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	011b      	lsls	r3, r3, #4
 800225e:	1a9b      	subs	r3, r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	440b      	add	r3, r1
 8002264:	334d      	adds	r3, #77	@ 0x4d
 8002266:	2207      	movs	r2, #7
 8002268:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	78fa      	ldrb	r2, [r7, #3]
 8002270:	4611      	mov	r1, r2
 8002272:	4618      	mov	r0, r3
 8002274:	f003 ff41 	bl	80060fa <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	78fa      	ldrb	r2, [r7, #3]
 800227e:	4611      	mov	r1, r2
 8002280:	4618      	mov	r0, r3
 8002282:	f003 f997 	bl	80055b4 <USB_ReadChInterrupts>
 8002286:	4603      	mov	r3, r0
 8002288:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800228c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002290:	d112      	bne.n	80022b8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	78fa      	ldrb	r2, [r7, #3]
 8002298:	4611      	mov	r1, r2
 800229a:	4618      	mov	r0, r3
 800229c:	f003 ff2d 	bl	80060fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80022a0:	78fb      	ldrb	r3, [r7, #3]
 80022a2:	015a      	lsls	r2, r3, #5
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	4413      	add	r3, r2
 80022a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022ac:	461a      	mov	r2, r3
 80022ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022b2:	6093      	str	r3, [r2, #8]
 80022b4:	f000 bd75 	b.w	8002da2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	78fa      	ldrb	r2, [r7, #3]
 80022be:	4611      	mov	r1, r2
 80022c0:	4618      	mov	r0, r3
 80022c2:	f003 f977 	bl	80055b4 <USB_ReadChInterrupts>
 80022c6:	4603      	mov	r3, r0
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	f040 8128 	bne.w	8002522 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80022d2:	78fb      	ldrb	r3, [r7, #3]
 80022d4:	015a      	lsls	r2, r3, #5
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	4413      	add	r3, r2
 80022da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022de:	461a      	mov	r2, r3
 80022e0:	2320      	movs	r3, #32
 80022e2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80022e4:	78fa      	ldrb	r2, [r7, #3]
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	011b      	lsls	r3, r3, #4
 80022ec:	1a9b      	subs	r3, r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	331b      	adds	r3, #27
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d119      	bne.n	800232e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80022fa:	78fa      	ldrb	r2, [r7, #3]
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	4613      	mov	r3, r2
 8002300:	011b      	lsls	r3, r3, #4
 8002302:	1a9b      	subs	r3, r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	440b      	add	r3, r1
 8002308:	331b      	adds	r3, #27
 800230a:	2200      	movs	r2, #0
 800230c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800230e:	78fb      	ldrb	r3, [r7, #3]
 8002310:	015a      	lsls	r2, r3, #5
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4413      	add	r3, r2
 8002316:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	78fa      	ldrb	r2, [r7, #3]
 800231e:	0151      	lsls	r1, r2, #5
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	440a      	add	r2, r1
 8002324:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002328:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800232c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	799b      	ldrb	r3, [r3, #6]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d01b      	beq.n	800236e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002336:	78fa      	ldrb	r2, [r7, #3]
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	4613      	mov	r3, r2
 800233c:	011b      	lsls	r3, r3, #4
 800233e:	1a9b      	subs	r3, r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	440b      	add	r3, r1
 8002344:	3330      	adds	r3, #48	@ 0x30
 8002346:	6819      	ldr	r1, [r3, #0]
 8002348:	78fb      	ldrb	r3, [r7, #3]
 800234a:	015a      	lsls	r2, r3, #5
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	4413      	add	r3, r2
 8002350:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800235a:	78fa      	ldrb	r2, [r7, #3]
 800235c:	1ac9      	subs	r1, r1, r3
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	011b      	lsls	r3, r3, #4
 8002364:	1a9b      	subs	r3, r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4403      	add	r3, r0
 800236a:	3338      	adds	r3, #56	@ 0x38
 800236c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800236e:	78fa      	ldrb	r2, [r7, #3]
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	011b      	lsls	r3, r3, #4
 8002376:	1a9b      	subs	r3, r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	440b      	add	r3, r1
 800237c:	334d      	adds	r3, #77	@ 0x4d
 800237e:	2201      	movs	r2, #1
 8002380:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002382:	78fa      	ldrb	r2, [r7, #3]
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	4613      	mov	r3, r2
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	1a9b      	subs	r3, r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	440b      	add	r3, r1
 8002390:	3344      	adds	r3, #68	@ 0x44
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002396:	78fb      	ldrb	r3, [r7, #3]
 8002398:	015a      	lsls	r2, r3, #5
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	4413      	add	r3, r2
 800239e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023a2:	461a      	mov	r2, r3
 80023a4:	2301      	movs	r3, #1
 80023a6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80023a8:	78fa      	ldrb	r2, [r7, #3]
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	4613      	mov	r3, r2
 80023ae:	011b      	lsls	r3, r3, #4
 80023b0:	1a9b      	subs	r3, r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	3326      	adds	r3, #38	@ 0x26
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00a      	beq.n	80023d4 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80023be:	78fa      	ldrb	r2, [r7, #3]
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	4613      	mov	r3, r2
 80023c4:	011b      	lsls	r3, r3, #4
 80023c6:	1a9b      	subs	r3, r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	440b      	add	r3, r1
 80023cc:	3326      	adds	r3, #38	@ 0x26
 80023ce:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d110      	bne.n	80023f6 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	78fa      	ldrb	r2, [r7, #3]
 80023da:	4611      	mov	r1, r2
 80023dc:	4618      	mov	r0, r3
 80023de:	f003 fe8c 	bl	80060fa <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80023e2:	78fb      	ldrb	r3, [r7, #3]
 80023e4:	015a      	lsls	r2, r3, #5
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	4413      	add	r3, r2
 80023ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023ee:	461a      	mov	r2, r3
 80023f0:	2310      	movs	r3, #16
 80023f2:	6093      	str	r3, [r2, #8]
 80023f4:	e03d      	b.n	8002472 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80023f6:	78fa      	ldrb	r2, [r7, #3]
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	011b      	lsls	r3, r3, #4
 80023fe:	1a9b      	subs	r3, r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	440b      	add	r3, r1
 8002404:	3326      	adds	r3, #38	@ 0x26
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b03      	cmp	r3, #3
 800240a:	d00a      	beq.n	8002422 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800240c:	78fa      	ldrb	r2, [r7, #3]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	011b      	lsls	r3, r3, #4
 8002414:	1a9b      	subs	r3, r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	3326      	adds	r3, #38	@ 0x26
 800241c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800241e:	2b01      	cmp	r3, #1
 8002420:	d127      	bne.n	8002472 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002422:	78fb      	ldrb	r3, [r7, #3]
 8002424:	015a      	lsls	r2, r3, #5
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	4413      	add	r3, r2
 800242a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	78fa      	ldrb	r2, [r7, #3]
 8002432:	0151      	lsls	r1, r2, #5
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	440a      	add	r2, r1
 8002438:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800243c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002440:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002442:	78fa      	ldrb	r2, [r7, #3]
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	4613      	mov	r3, r2
 8002448:	011b      	lsls	r3, r3, #4
 800244a:	1a9b      	subs	r3, r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	440b      	add	r3, r1
 8002450:	334c      	adds	r3, #76	@ 0x4c
 8002452:	2201      	movs	r2, #1
 8002454:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002456:	78fa      	ldrb	r2, [r7, #3]
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	4613      	mov	r3, r2
 800245c:	011b      	lsls	r3, r3, #4
 800245e:	1a9b      	subs	r3, r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	440b      	add	r3, r1
 8002464:	334c      	adds	r3, #76	@ 0x4c
 8002466:	781a      	ldrb	r2, [r3, #0]
 8002468:	78fb      	ldrb	r3, [r7, #3]
 800246a:	4619      	mov	r1, r3
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f006 f99d 	bl	80087ac <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	799b      	ldrb	r3, [r3, #6]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d13b      	bne.n	80024f2 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800247a:	78fa      	ldrb	r2, [r7, #3]
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	4613      	mov	r3, r2
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	1a9b      	subs	r3, r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	440b      	add	r3, r1
 8002488:	3338      	adds	r3, #56	@ 0x38
 800248a:	6819      	ldr	r1, [r3, #0]
 800248c:	78fa      	ldrb	r2, [r7, #3]
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	4613      	mov	r3, r2
 8002492:	011b      	lsls	r3, r3, #4
 8002494:	1a9b      	subs	r3, r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4403      	add	r3, r0
 800249a:	3328      	adds	r3, #40	@ 0x28
 800249c:	881b      	ldrh	r3, [r3, #0]
 800249e:	440b      	add	r3, r1
 80024a0:	1e59      	subs	r1, r3, #1
 80024a2:	78fa      	ldrb	r2, [r7, #3]
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	4613      	mov	r3, r2
 80024a8:	011b      	lsls	r3, r3, #4
 80024aa:	1a9b      	subs	r3, r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4403      	add	r3, r0
 80024b0:	3328      	adds	r3, #40	@ 0x28
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 8470 	beq.w	8002da2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80024c2:	78fa      	ldrb	r2, [r7, #3]
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	4613      	mov	r3, r2
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	1a9b      	subs	r3, r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	440b      	add	r3, r1
 80024d0:	333c      	adds	r3, #60	@ 0x3c
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	78fa      	ldrb	r2, [r7, #3]
 80024d6:	f083 0301 	eor.w	r3, r3, #1
 80024da:	b2d8      	uxtb	r0, r3
 80024dc:	6879      	ldr	r1, [r7, #4]
 80024de:	4613      	mov	r3, r2
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	1a9b      	subs	r3, r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	440b      	add	r3, r1
 80024e8:	333c      	adds	r3, #60	@ 0x3c
 80024ea:	4602      	mov	r2, r0
 80024ec:	701a      	strb	r2, [r3, #0]
 80024ee:	f000 bc58 	b.w	8002da2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80024f2:	78fa      	ldrb	r2, [r7, #3]
 80024f4:	6879      	ldr	r1, [r7, #4]
 80024f6:	4613      	mov	r3, r2
 80024f8:	011b      	lsls	r3, r3, #4
 80024fa:	1a9b      	subs	r3, r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	440b      	add	r3, r1
 8002500:	333c      	adds	r3, #60	@ 0x3c
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	78fa      	ldrb	r2, [r7, #3]
 8002506:	f083 0301 	eor.w	r3, r3, #1
 800250a:	b2d8      	uxtb	r0, r3
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	4613      	mov	r3, r2
 8002510:	011b      	lsls	r3, r3, #4
 8002512:	1a9b      	subs	r3, r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	440b      	add	r3, r1
 8002518:	333c      	adds	r3, #60	@ 0x3c
 800251a:	4602      	mov	r2, r0
 800251c:	701a      	strb	r2, [r3, #0]
 800251e:	f000 bc40 	b.w	8002da2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	78fa      	ldrb	r2, [r7, #3]
 8002528:	4611      	mov	r1, r2
 800252a:	4618      	mov	r0, r3
 800252c:	f003 f842 	bl	80055b4 <USB_ReadChInterrupts>
 8002530:	4603      	mov	r3, r0
 8002532:	f003 0320 	and.w	r3, r3, #32
 8002536:	2b20      	cmp	r3, #32
 8002538:	d131      	bne.n	800259e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800253a:	78fb      	ldrb	r3, [r7, #3]
 800253c:	015a      	lsls	r2, r3, #5
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	4413      	add	r3, r2
 8002542:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002546:	461a      	mov	r2, r3
 8002548:	2320      	movs	r3, #32
 800254a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800254c:	78fa      	ldrb	r2, [r7, #3]
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	011b      	lsls	r3, r3, #4
 8002554:	1a9b      	subs	r3, r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	331a      	adds	r3, #26
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b01      	cmp	r3, #1
 8002560:	f040 841f 	bne.w	8002da2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002564:	78fa      	ldrb	r2, [r7, #3]
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	4613      	mov	r3, r2
 800256a:	011b      	lsls	r3, r3, #4
 800256c:	1a9b      	subs	r3, r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	440b      	add	r3, r1
 8002572:	331b      	adds	r3, #27
 8002574:	2201      	movs	r2, #1
 8002576:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002578:	78fa      	ldrb	r2, [r7, #3]
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	4613      	mov	r3, r2
 800257e:	011b      	lsls	r3, r3, #4
 8002580:	1a9b      	subs	r3, r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	334d      	adds	r3, #77	@ 0x4d
 8002588:	2203      	movs	r2, #3
 800258a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	78fa      	ldrb	r2, [r7, #3]
 8002592:	4611      	mov	r1, r2
 8002594:	4618      	mov	r0, r3
 8002596:	f003 fdb0 	bl	80060fa <USB_HC_Halt>
 800259a:	f000 bc02 	b.w	8002da2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	78fa      	ldrb	r2, [r7, #3]
 80025a4:	4611      	mov	r1, r2
 80025a6:	4618      	mov	r0, r3
 80025a8:	f003 f804 	bl	80055b4 <USB_ReadChInterrupts>
 80025ac:	4603      	mov	r3, r0
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	f040 8305 	bne.w	8002bc2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80025b8:	78fb      	ldrb	r3, [r7, #3]
 80025ba:	015a      	lsls	r2, r3, #5
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	4413      	add	r3, r2
 80025c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025c4:	461a      	mov	r2, r3
 80025c6:	2302      	movs	r3, #2
 80025c8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80025ca:	78fa      	ldrb	r2, [r7, #3]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	1a9b      	subs	r3, r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	334d      	adds	r3, #77	@ 0x4d
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d114      	bne.n	800260a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80025e0:	78fa      	ldrb	r2, [r7, #3]
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	011b      	lsls	r3, r3, #4
 80025e8:	1a9b      	subs	r3, r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	334d      	adds	r3, #77	@ 0x4d
 80025f0:	2202      	movs	r2, #2
 80025f2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80025f4:	78fa      	ldrb	r2, [r7, #3]
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	4613      	mov	r3, r2
 80025fa:	011b      	lsls	r3, r3, #4
 80025fc:	1a9b      	subs	r3, r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	440b      	add	r3, r1
 8002602:	334c      	adds	r3, #76	@ 0x4c
 8002604:	2201      	movs	r2, #1
 8002606:	701a      	strb	r2, [r3, #0]
 8002608:	e2cc      	b.n	8002ba4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800260a:	78fa      	ldrb	r2, [r7, #3]
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	4613      	mov	r3, r2
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	1a9b      	subs	r3, r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	440b      	add	r3, r1
 8002618:	334d      	adds	r3, #77	@ 0x4d
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b06      	cmp	r3, #6
 800261e:	d114      	bne.n	800264a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002620:	78fa      	ldrb	r2, [r7, #3]
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	4613      	mov	r3, r2
 8002626:	011b      	lsls	r3, r3, #4
 8002628:	1a9b      	subs	r3, r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	334d      	adds	r3, #77	@ 0x4d
 8002630:	2202      	movs	r2, #2
 8002632:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002634:	78fa      	ldrb	r2, [r7, #3]
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	1a9b      	subs	r3, r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	334c      	adds	r3, #76	@ 0x4c
 8002644:	2205      	movs	r2, #5
 8002646:	701a      	strb	r2, [r3, #0]
 8002648:	e2ac      	b.n	8002ba4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800264a:	78fa      	ldrb	r2, [r7, #3]
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	4613      	mov	r3, r2
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	1a9b      	subs	r3, r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	440b      	add	r3, r1
 8002658:	334d      	adds	r3, #77	@ 0x4d
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b07      	cmp	r3, #7
 800265e:	d00b      	beq.n	8002678 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002660:	78fa      	ldrb	r2, [r7, #3]
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	1a9b      	subs	r3, r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	334d      	adds	r3, #77	@ 0x4d
 8002670:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002672:	2b09      	cmp	r3, #9
 8002674:	f040 80a6 	bne.w	80027c4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002678:	78fa      	ldrb	r2, [r7, #3]
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	4613      	mov	r3, r2
 800267e:	011b      	lsls	r3, r3, #4
 8002680:	1a9b      	subs	r3, r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	440b      	add	r3, r1
 8002686:	334d      	adds	r3, #77	@ 0x4d
 8002688:	2202      	movs	r2, #2
 800268a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800268c:	78fa      	ldrb	r2, [r7, #3]
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	4613      	mov	r3, r2
 8002692:	011b      	lsls	r3, r3, #4
 8002694:	1a9b      	subs	r3, r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	440b      	add	r3, r1
 800269a:	3344      	adds	r3, #68	@ 0x44
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	1c59      	adds	r1, r3, #1
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	4613      	mov	r3, r2
 80026a4:	011b      	lsls	r3, r3, #4
 80026a6:	1a9b      	subs	r3, r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4403      	add	r3, r0
 80026ac:	3344      	adds	r3, #68	@ 0x44
 80026ae:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80026b0:	78fa      	ldrb	r2, [r7, #3]
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	4613      	mov	r3, r2
 80026b6:	011b      	lsls	r3, r3, #4
 80026b8:	1a9b      	subs	r3, r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	3344      	adds	r3, #68	@ 0x44
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d943      	bls.n	800274e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80026c6:	78fa      	ldrb	r2, [r7, #3]
 80026c8:	6879      	ldr	r1, [r7, #4]
 80026ca:	4613      	mov	r3, r2
 80026cc:	011b      	lsls	r3, r3, #4
 80026ce:	1a9b      	subs	r3, r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	440b      	add	r3, r1
 80026d4:	3344      	adds	r3, #68	@ 0x44
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80026da:	78fa      	ldrb	r2, [r7, #3]
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	4613      	mov	r3, r2
 80026e0:	011b      	lsls	r3, r3, #4
 80026e2:	1a9b      	subs	r3, r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	440b      	add	r3, r1
 80026e8:	331a      	adds	r3, #26
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d123      	bne.n	8002738 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80026f0:	78fa      	ldrb	r2, [r7, #3]
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	4613      	mov	r3, r2
 80026f6:	011b      	lsls	r3, r3, #4
 80026f8:	1a9b      	subs	r3, r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	440b      	add	r3, r1
 80026fe:	331b      	adds	r3, #27
 8002700:	2200      	movs	r2, #0
 8002702:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002704:	78fa      	ldrb	r2, [r7, #3]
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	4613      	mov	r3, r2
 800270a:	011b      	lsls	r3, r3, #4
 800270c:	1a9b      	subs	r3, r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	331c      	adds	r3, #28
 8002714:	2200      	movs	r2, #0
 8002716:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002718:	78fb      	ldrb	r3, [r7, #3]
 800271a:	015a      	lsls	r2, r3, #5
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	4413      	add	r3, r2
 8002720:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	78fa      	ldrb	r2, [r7, #3]
 8002728:	0151      	lsls	r1, r2, #5
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	440a      	add	r2, r1
 800272e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002732:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002736:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002738:	78fa      	ldrb	r2, [r7, #3]
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	011b      	lsls	r3, r3, #4
 8002740:	1a9b      	subs	r3, r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	334c      	adds	r3, #76	@ 0x4c
 8002748:	2204      	movs	r2, #4
 800274a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800274c:	e229      	b.n	8002ba2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800274e:	78fa      	ldrb	r2, [r7, #3]
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	4613      	mov	r3, r2
 8002754:	011b      	lsls	r3, r3, #4
 8002756:	1a9b      	subs	r3, r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	440b      	add	r3, r1
 800275c:	334c      	adds	r3, #76	@ 0x4c
 800275e:	2202      	movs	r2, #2
 8002760:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002762:	78fa      	ldrb	r2, [r7, #3]
 8002764:	6879      	ldr	r1, [r7, #4]
 8002766:	4613      	mov	r3, r2
 8002768:	011b      	lsls	r3, r3, #4
 800276a:	1a9b      	subs	r3, r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	440b      	add	r3, r1
 8002770:	3326      	adds	r3, #38	@ 0x26
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00b      	beq.n	8002790 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002778:	78fa      	ldrb	r2, [r7, #3]
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	4613      	mov	r3, r2
 800277e:	011b      	lsls	r3, r3, #4
 8002780:	1a9b      	subs	r3, r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	3326      	adds	r3, #38	@ 0x26
 8002788:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800278a:	2b02      	cmp	r3, #2
 800278c:	f040 8209 	bne.w	8002ba2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002790:	78fb      	ldrb	r3, [r7, #3]
 8002792:	015a      	lsls	r2, r3, #5
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4413      	add	r3, r2
 8002798:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80027a6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80027ae:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80027b0:	78fb      	ldrb	r3, [r7, #3]
 80027b2:	015a      	lsls	r2, r3, #5
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	4413      	add	r3, r2
 80027b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027bc:	461a      	mov	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80027c2:	e1ee      	b.n	8002ba2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80027c4:	78fa      	ldrb	r2, [r7, #3]
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	4613      	mov	r3, r2
 80027ca:	011b      	lsls	r3, r3, #4
 80027cc:	1a9b      	subs	r3, r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	440b      	add	r3, r1
 80027d2:	334d      	adds	r3, #77	@ 0x4d
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b05      	cmp	r3, #5
 80027d8:	f040 80c8 	bne.w	800296c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80027dc:	78fa      	ldrb	r2, [r7, #3]
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	011b      	lsls	r3, r3, #4
 80027e4:	1a9b      	subs	r3, r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	334d      	adds	r3, #77	@ 0x4d
 80027ec:	2202      	movs	r2, #2
 80027ee:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80027f0:	78fa      	ldrb	r2, [r7, #3]
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	1a9b      	subs	r3, r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	331b      	adds	r3, #27
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b01      	cmp	r3, #1
 8002804:	f040 81ce 	bne.w	8002ba4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002808:	78fa      	ldrb	r2, [r7, #3]
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	4613      	mov	r3, r2
 800280e:	011b      	lsls	r3, r3, #4
 8002810:	1a9b      	subs	r3, r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	440b      	add	r3, r1
 8002816:	3326      	adds	r3, #38	@ 0x26
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	2b03      	cmp	r3, #3
 800281c:	d16b      	bne.n	80028f6 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800281e:	78fa      	ldrb	r2, [r7, #3]
 8002820:	6879      	ldr	r1, [r7, #4]
 8002822:	4613      	mov	r3, r2
 8002824:	011b      	lsls	r3, r3, #4
 8002826:	1a9b      	subs	r3, r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	440b      	add	r3, r1
 800282c:	3348      	adds	r3, #72	@ 0x48
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	1c59      	adds	r1, r3, #1
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	4613      	mov	r3, r2
 8002836:	011b      	lsls	r3, r3, #4
 8002838:	1a9b      	subs	r3, r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4403      	add	r3, r0
 800283e:	3348      	adds	r3, #72	@ 0x48
 8002840:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002842:	78fa      	ldrb	r2, [r7, #3]
 8002844:	6879      	ldr	r1, [r7, #4]
 8002846:	4613      	mov	r3, r2
 8002848:	011b      	lsls	r3, r3, #4
 800284a:	1a9b      	subs	r3, r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	440b      	add	r3, r1
 8002850:	3348      	adds	r3, #72	@ 0x48
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2b02      	cmp	r3, #2
 8002856:	d943      	bls.n	80028e0 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002858:	78fa      	ldrb	r2, [r7, #3]
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	4613      	mov	r3, r2
 800285e:	011b      	lsls	r3, r3, #4
 8002860:	1a9b      	subs	r3, r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	3348      	adds	r3, #72	@ 0x48
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800286c:	78fa      	ldrb	r2, [r7, #3]
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	4613      	mov	r3, r2
 8002872:	011b      	lsls	r3, r3, #4
 8002874:	1a9b      	subs	r3, r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	440b      	add	r3, r1
 800287a:	331b      	adds	r3, #27
 800287c:	2200      	movs	r2, #0
 800287e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002880:	78fa      	ldrb	r2, [r7, #3]
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	4613      	mov	r3, r2
 8002886:	011b      	lsls	r3, r3, #4
 8002888:	1a9b      	subs	r3, r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	440b      	add	r3, r1
 800288e:	3344      	adds	r3, #68	@ 0x44
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2b02      	cmp	r3, #2
 8002894:	d809      	bhi.n	80028aa <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002896:	78fa      	ldrb	r2, [r7, #3]
 8002898:	6879      	ldr	r1, [r7, #4]
 800289a:	4613      	mov	r3, r2
 800289c:	011b      	lsls	r3, r3, #4
 800289e:	1a9b      	subs	r3, r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	440b      	add	r3, r1
 80028a4:	331c      	adds	r3, #28
 80028a6:	2201      	movs	r2, #1
 80028a8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80028aa:	78fb      	ldrb	r3, [r7, #3]
 80028ac:	015a      	lsls	r2, r3, #5
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	4413      	add	r3, r2
 80028b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	78fa      	ldrb	r2, [r7, #3]
 80028ba:	0151      	lsls	r1, r2, #5
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	440a      	add	r2, r1
 80028c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80028c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028c8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80028ca:	78fa      	ldrb	r2, [r7, #3]
 80028cc:	6879      	ldr	r1, [r7, #4]
 80028ce:	4613      	mov	r3, r2
 80028d0:	011b      	lsls	r3, r3, #4
 80028d2:	1a9b      	subs	r3, r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	440b      	add	r3, r1
 80028d8:	334c      	adds	r3, #76	@ 0x4c
 80028da:	2204      	movs	r2, #4
 80028dc:	701a      	strb	r2, [r3, #0]
 80028de:	e014      	b.n	800290a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80028e0:	78fa      	ldrb	r2, [r7, #3]
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	4613      	mov	r3, r2
 80028e6:	011b      	lsls	r3, r3, #4
 80028e8:	1a9b      	subs	r3, r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	440b      	add	r3, r1
 80028ee:	334c      	adds	r3, #76	@ 0x4c
 80028f0:	2202      	movs	r2, #2
 80028f2:	701a      	strb	r2, [r3, #0]
 80028f4:	e009      	b.n	800290a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80028f6:	78fa      	ldrb	r2, [r7, #3]
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	4613      	mov	r3, r2
 80028fc:	011b      	lsls	r3, r3, #4
 80028fe:	1a9b      	subs	r3, r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	440b      	add	r3, r1
 8002904:	334c      	adds	r3, #76	@ 0x4c
 8002906:	2202      	movs	r2, #2
 8002908:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800290a:	78fa      	ldrb	r2, [r7, #3]
 800290c:	6879      	ldr	r1, [r7, #4]
 800290e:	4613      	mov	r3, r2
 8002910:	011b      	lsls	r3, r3, #4
 8002912:	1a9b      	subs	r3, r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	440b      	add	r3, r1
 8002918:	3326      	adds	r3, #38	@ 0x26
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00b      	beq.n	8002938 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002920:	78fa      	ldrb	r2, [r7, #3]
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	4613      	mov	r3, r2
 8002926:	011b      	lsls	r3, r3, #4
 8002928:	1a9b      	subs	r3, r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	440b      	add	r3, r1
 800292e:	3326      	adds	r3, #38	@ 0x26
 8002930:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002932:	2b02      	cmp	r3, #2
 8002934:	f040 8136 	bne.w	8002ba4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002938:	78fb      	ldrb	r3, [r7, #3]
 800293a:	015a      	lsls	r2, r3, #5
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	4413      	add	r3, r2
 8002940:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800294e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002956:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002958:	78fb      	ldrb	r3, [r7, #3]
 800295a:	015a      	lsls	r2, r3, #5
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	4413      	add	r3, r2
 8002960:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002964:	461a      	mov	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6013      	str	r3, [r2, #0]
 800296a:	e11b      	b.n	8002ba4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800296c:	78fa      	ldrb	r2, [r7, #3]
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	4613      	mov	r3, r2
 8002972:	011b      	lsls	r3, r3, #4
 8002974:	1a9b      	subs	r3, r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	334d      	adds	r3, #77	@ 0x4d
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	2b03      	cmp	r3, #3
 8002980:	f040 8081 	bne.w	8002a86 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002984:	78fa      	ldrb	r2, [r7, #3]
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	4613      	mov	r3, r2
 800298a:	011b      	lsls	r3, r3, #4
 800298c:	1a9b      	subs	r3, r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	334d      	adds	r3, #77	@ 0x4d
 8002994:	2202      	movs	r2, #2
 8002996:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002998:	78fa      	ldrb	r2, [r7, #3]
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	011b      	lsls	r3, r3, #4
 80029a0:	1a9b      	subs	r3, r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	331b      	adds	r3, #27
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	f040 80fa 	bne.w	8002ba4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80029b0:	78fa      	ldrb	r2, [r7, #3]
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	4613      	mov	r3, r2
 80029b6:	011b      	lsls	r3, r3, #4
 80029b8:	1a9b      	subs	r3, r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	334c      	adds	r3, #76	@ 0x4c
 80029c0:	2202      	movs	r2, #2
 80029c2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80029c4:	78fb      	ldrb	r3, [r7, #3]
 80029c6:	015a      	lsls	r2, r3, #5
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	4413      	add	r3, r2
 80029cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	78fa      	ldrb	r2, [r7, #3]
 80029d4:	0151      	lsls	r1, r2, #5
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	440a      	add	r2, r1
 80029da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80029de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029e2:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80029e4:	78fb      	ldrb	r3, [r7, #3]
 80029e6:	015a      	lsls	r2, r3, #5
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	4413      	add	r3, r2
 80029ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	78fa      	ldrb	r2, [r7, #3]
 80029f4:	0151      	lsls	r1, r2, #5
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	440a      	add	r2, r1
 80029fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80029fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a02:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002a04:	78fb      	ldrb	r3, [r7, #3]
 8002a06:	015a      	lsls	r2, r3, #5
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	78fa      	ldrb	r2, [r7, #3]
 8002a14:	0151      	lsls	r1, r2, #5
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	440a      	add	r2, r1
 8002a1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a1e:	f023 0320 	bic.w	r3, r3, #32
 8002a22:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a24:	78fa      	ldrb	r2, [r7, #3]
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	011b      	lsls	r3, r3, #4
 8002a2c:	1a9b      	subs	r3, r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	3326      	adds	r3, #38	@ 0x26
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00b      	beq.n	8002a52 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a3a:	78fa      	ldrb	r2, [r7, #3]
 8002a3c:	6879      	ldr	r1, [r7, #4]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	011b      	lsls	r3, r3, #4
 8002a42:	1a9b      	subs	r3, r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	440b      	add	r3, r1
 8002a48:	3326      	adds	r3, #38	@ 0x26
 8002a4a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	f040 80a9 	bne.w	8002ba4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002a52:	78fb      	ldrb	r3, [r7, #3]
 8002a54:	015a      	lsls	r2, r3, #5
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	4413      	add	r3, r2
 8002a5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002a68:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002a70:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002a72:	78fb      	ldrb	r3, [r7, #3]
 8002a74:	015a      	lsls	r2, r3, #5
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	4413      	add	r3, r2
 8002a7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a7e:	461a      	mov	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6013      	str	r3, [r2, #0]
 8002a84:	e08e      	b.n	8002ba4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002a86:	78fa      	ldrb	r2, [r7, #3]
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	011b      	lsls	r3, r3, #4
 8002a8e:	1a9b      	subs	r3, r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	440b      	add	r3, r1
 8002a94:	334d      	adds	r3, #77	@ 0x4d
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b04      	cmp	r3, #4
 8002a9a:	d143      	bne.n	8002b24 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a9c:	78fa      	ldrb	r2, [r7, #3]
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	1a9b      	subs	r3, r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	334d      	adds	r3, #77	@ 0x4d
 8002aac:	2202      	movs	r2, #2
 8002aae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ab0:	78fa      	ldrb	r2, [r7, #3]
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	011b      	lsls	r3, r3, #4
 8002ab8:	1a9b      	subs	r3, r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	440b      	add	r3, r1
 8002abe:	334c      	adds	r3, #76	@ 0x4c
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ac4:	78fa      	ldrb	r2, [r7, #3]
 8002ac6:	6879      	ldr	r1, [r7, #4]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	011b      	lsls	r3, r3, #4
 8002acc:	1a9b      	subs	r3, r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	3326      	adds	r3, #38	@ 0x26
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00a      	beq.n	8002af0 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002ada:	78fa      	ldrb	r2, [r7, #3]
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	011b      	lsls	r3, r3, #4
 8002ae2:	1a9b      	subs	r3, r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	440b      	add	r3, r1
 8002ae8:	3326      	adds	r3, #38	@ 0x26
 8002aea:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d159      	bne.n	8002ba4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002af0:	78fb      	ldrb	r3, [r7, #3]
 8002af2:	015a      	lsls	r2, r3, #5
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	4413      	add	r3, r2
 8002af8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002b06:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002b0e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002b10:	78fb      	ldrb	r3, [r7, #3]
 8002b12:	015a      	lsls	r2, r3, #5
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	4413      	add	r3, r2
 8002b18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	e03f      	b.n	8002ba4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002b24:	78fa      	ldrb	r2, [r7, #3]
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	011b      	lsls	r3, r3, #4
 8002b2c:	1a9b      	subs	r3, r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	334d      	adds	r3, #77	@ 0x4d
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	2b08      	cmp	r3, #8
 8002b38:	d126      	bne.n	8002b88 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b3a:	78fa      	ldrb	r2, [r7, #3]
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	011b      	lsls	r3, r3, #4
 8002b42:	1a9b      	subs	r3, r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	440b      	add	r3, r1
 8002b48:	334d      	adds	r3, #77	@ 0x4d
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002b4e:	78fa      	ldrb	r2, [r7, #3]
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	4613      	mov	r3, r2
 8002b54:	011b      	lsls	r3, r3, #4
 8002b56:	1a9b      	subs	r3, r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	440b      	add	r3, r1
 8002b5c:	3344      	adds	r3, #68	@ 0x44
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	1c59      	adds	r1, r3, #1
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	4613      	mov	r3, r2
 8002b66:	011b      	lsls	r3, r3, #4
 8002b68:	1a9b      	subs	r3, r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4403      	add	r3, r0
 8002b6e:	3344      	adds	r3, #68	@ 0x44
 8002b70:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002b72:	78fa      	ldrb	r2, [r7, #3]
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	011b      	lsls	r3, r3, #4
 8002b7a:	1a9b      	subs	r3, r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	440b      	add	r3, r1
 8002b80:	334c      	adds	r3, #76	@ 0x4c
 8002b82:	2204      	movs	r2, #4
 8002b84:	701a      	strb	r2, [r3, #0]
 8002b86:	e00d      	b.n	8002ba4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002b88:	78fa      	ldrb	r2, [r7, #3]
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	011b      	lsls	r3, r3, #4
 8002b90:	1a9b      	subs	r3, r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	440b      	add	r3, r1
 8002b96:	334d      	adds	r3, #77	@ 0x4d
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	f000 8100 	beq.w	8002da0 <HCD_HC_IN_IRQHandler+0xcca>
 8002ba0:	e000      	b.n	8002ba4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002ba2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002ba4:	78fa      	ldrb	r2, [r7, #3]
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	011b      	lsls	r3, r3, #4
 8002bac:	1a9b      	subs	r3, r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	334c      	adds	r3, #76	@ 0x4c
 8002bb4:	781a      	ldrb	r2, [r3, #0]
 8002bb6:	78fb      	ldrb	r3, [r7, #3]
 8002bb8:	4619      	mov	r1, r3
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f005 fdf6 	bl	80087ac <HAL_HCD_HC_NotifyURBChange_Callback>
 8002bc0:	e0ef      	b.n	8002da2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	78fa      	ldrb	r2, [r7, #3]
 8002bc8:	4611      	mov	r1, r2
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f002 fcf2 	bl	80055b4 <USB_ReadChInterrupts>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bd6:	2b40      	cmp	r3, #64	@ 0x40
 8002bd8:	d12f      	bne.n	8002c3a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002bda:	78fb      	ldrb	r3, [r7, #3]
 8002bdc:	015a      	lsls	r2, r3, #5
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	4413      	add	r3, r2
 8002be2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002be6:	461a      	mov	r2, r3
 8002be8:	2340      	movs	r3, #64	@ 0x40
 8002bea:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002bec:	78fa      	ldrb	r2, [r7, #3]
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	011b      	lsls	r3, r3, #4
 8002bf4:	1a9b      	subs	r3, r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	334d      	adds	r3, #77	@ 0x4d
 8002bfc:	2205      	movs	r2, #5
 8002bfe:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002c00:	78fa      	ldrb	r2, [r7, #3]
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	4613      	mov	r3, r2
 8002c06:	011b      	lsls	r3, r3, #4
 8002c08:	1a9b      	subs	r3, r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	331a      	adds	r3, #26
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d109      	bne.n	8002c2a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002c16:	78fa      	ldrb	r2, [r7, #3]
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	011b      	lsls	r3, r3, #4
 8002c1e:	1a9b      	subs	r3, r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	440b      	add	r3, r1
 8002c24:	3344      	adds	r3, #68	@ 0x44
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	78fa      	ldrb	r2, [r7, #3]
 8002c30:	4611      	mov	r1, r2
 8002c32:	4618      	mov	r0, r3
 8002c34:	f003 fa61 	bl	80060fa <USB_HC_Halt>
 8002c38:	e0b3      	b.n	8002da2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	78fa      	ldrb	r2, [r7, #3]
 8002c40:	4611      	mov	r1, r2
 8002c42:	4618      	mov	r0, r3
 8002c44:	f002 fcb6 	bl	80055b4 <USB_ReadChInterrupts>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	f003 0310 	and.w	r3, r3, #16
 8002c4e:	2b10      	cmp	r3, #16
 8002c50:	f040 80a7 	bne.w	8002da2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002c54:	78fa      	ldrb	r2, [r7, #3]
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	011b      	lsls	r3, r3, #4
 8002c5c:	1a9b      	subs	r3, r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	3326      	adds	r3, #38	@ 0x26
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b03      	cmp	r3, #3
 8002c68:	d11b      	bne.n	8002ca2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002c6a:	78fa      	ldrb	r2, [r7, #3]
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	011b      	lsls	r3, r3, #4
 8002c72:	1a9b      	subs	r3, r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	440b      	add	r3, r1
 8002c78:	3344      	adds	r3, #68	@ 0x44
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002c7e:	78fa      	ldrb	r2, [r7, #3]
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	4613      	mov	r3, r2
 8002c84:	011b      	lsls	r3, r3, #4
 8002c86:	1a9b      	subs	r3, r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	334d      	adds	r3, #77	@ 0x4d
 8002c8e:	2204      	movs	r2, #4
 8002c90:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	78fa      	ldrb	r2, [r7, #3]
 8002c98:	4611      	mov	r1, r2
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f003 fa2d 	bl	80060fa <USB_HC_Halt>
 8002ca0:	e03f      	b.n	8002d22 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ca2:	78fa      	ldrb	r2, [r7, #3]
 8002ca4:	6879      	ldr	r1, [r7, #4]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	011b      	lsls	r3, r3, #4
 8002caa:	1a9b      	subs	r3, r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	440b      	add	r3, r1
 8002cb0:	3326      	adds	r3, #38	@ 0x26
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00a      	beq.n	8002cce <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002cb8:	78fa      	ldrb	r2, [r7, #3]
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	011b      	lsls	r3, r3, #4
 8002cc0:	1a9b      	subs	r3, r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	440b      	add	r3, r1
 8002cc6:	3326      	adds	r3, #38	@ 0x26
 8002cc8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d129      	bne.n	8002d22 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002cce:	78fa      	ldrb	r2, [r7, #3]
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	011b      	lsls	r3, r3, #4
 8002cd6:	1a9b      	subs	r3, r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	440b      	add	r3, r1
 8002cdc:	3344      	adds	r3, #68	@ 0x44
 8002cde:	2200      	movs	r2, #0
 8002ce0:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	799b      	ldrb	r3, [r3, #6]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00a      	beq.n	8002d00 <HCD_HC_IN_IRQHandler+0xc2a>
 8002cea:	78fa      	ldrb	r2, [r7, #3]
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	011b      	lsls	r3, r3, #4
 8002cf2:	1a9b      	subs	r3, r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	331b      	adds	r3, #27
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d110      	bne.n	8002d22 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002d00:	78fa      	ldrb	r2, [r7, #3]
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	011b      	lsls	r3, r3, #4
 8002d08:	1a9b      	subs	r3, r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	334d      	adds	r3, #77	@ 0x4d
 8002d10:	2204      	movs	r2, #4
 8002d12:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	78fa      	ldrb	r2, [r7, #3]
 8002d1a:	4611      	mov	r1, r2
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f003 f9ec 	bl	80060fa <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002d22:	78fa      	ldrb	r2, [r7, #3]
 8002d24:	6879      	ldr	r1, [r7, #4]
 8002d26:	4613      	mov	r3, r2
 8002d28:	011b      	lsls	r3, r3, #4
 8002d2a:	1a9b      	subs	r3, r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	440b      	add	r3, r1
 8002d30:	331b      	adds	r3, #27
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d129      	bne.n	8002d8c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002d38:	78fa      	ldrb	r2, [r7, #3]
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	011b      	lsls	r3, r3, #4
 8002d40:	1a9b      	subs	r3, r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	331b      	adds	r3, #27
 8002d48:	2200      	movs	r2, #0
 8002d4a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002d4c:	78fb      	ldrb	r3, [r7, #3]
 8002d4e:	015a      	lsls	r2, r3, #5
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	4413      	add	r3, r2
 8002d54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	78fa      	ldrb	r2, [r7, #3]
 8002d5c:	0151      	lsls	r1, r2, #5
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	440a      	add	r2, r1
 8002d62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d6a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002d6c:	78fb      	ldrb	r3, [r7, #3]
 8002d6e:	015a      	lsls	r2, r3, #5
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	4413      	add	r3, r2
 8002d74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	78fa      	ldrb	r2, [r7, #3]
 8002d7c:	0151      	lsls	r1, r2, #5
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	440a      	add	r2, r1
 8002d82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d86:	f043 0320 	orr.w	r3, r3, #32
 8002d8a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002d8c:	78fb      	ldrb	r3, [r7, #3]
 8002d8e:	015a      	lsls	r2, r3, #5
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	4413      	add	r3, r2
 8002d94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d98:	461a      	mov	r2, r3
 8002d9a:	2310      	movs	r3, #16
 8002d9c:	6093      	str	r3, [r2, #8]
 8002d9e:	e000      	b.n	8002da2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002da0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002da2:	3718      	adds	r7, #24
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	460b      	mov	r3, r1
 8002db2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	78fa      	ldrb	r2, [r7, #3]
 8002dc4:	4611      	mov	r1, r2
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f002 fbf4 	bl	80055b4 <USB_ReadChInterrupts>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	f003 0304 	and.w	r3, r3, #4
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d11b      	bne.n	8002e0e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002dd6:	78fb      	ldrb	r3, [r7, #3]
 8002dd8:	015a      	lsls	r2, r3, #5
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	4413      	add	r3, r2
 8002dde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002de2:	461a      	mov	r2, r3
 8002de4:	2304      	movs	r3, #4
 8002de6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002de8:	78fa      	ldrb	r2, [r7, #3]
 8002dea:	6879      	ldr	r1, [r7, #4]
 8002dec:	4613      	mov	r3, r2
 8002dee:	011b      	lsls	r3, r3, #4
 8002df0:	1a9b      	subs	r3, r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	334d      	adds	r3, #77	@ 0x4d
 8002df8:	2207      	movs	r2, #7
 8002dfa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	78fa      	ldrb	r2, [r7, #3]
 8002e02:	4611      	mov	r1, r2
 8002e04:	4618      	mov	r0, r3
 8002e06:	f003 f978 	bl	80060fa <USB_HC_Halt>
 8002e0a:	f000 bc6f 	b.w	80036ec <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	78fa      	ldrb	r2, [r7, #3]
 8002e14:	4611      	mov	r1, r2
 8002e16:	4618      	mov	r0, r3
 8002e18:	f002 fbcc 	bl	80055b4 <USB_ReadChInterrupts>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	f003 0320 	and.w	r3, r3, #32
 8002e22:	2b20      	cmp	r3, #32
 8002e24:	f040 8082 	bne.w	8002f2c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002e28:	78fb      	ldrb	r3, [r7, #3]
 8002e2a:	015a      	lsls	r2, r3, #5
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	4413      	add	r3, r2
 8002e30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e34:	461a      	mov	r2, r3
 8002e36:	2320      	movs	r3, #32
 8002e38:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002e3a:	78fa      	ldrb	r2, [r7, #3]
 8002e3c:	6879      	ldr	r1, [r7, #4]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	1a9b      	subs	r3, r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	440b      	add	r3, r1
 8002e48:	3319      	adds	r3, #25
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d124      	bne.n	8002e9a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002e50:	78fa      	ldrb	r2, [r7, #3]
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	4613      	mov	r3, r2
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	1a9b      	subs	r3, r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	3319      	adds	r3, #25
 8002e60:	2200      	movs	r2, #0
 8002e62:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002e64:	78fa      	ldrb	r2, [r7, #3]
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	011b      	lsls	r3, r3, #4
 8002e6c:	1a9b      	subs	r3, r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	440b      	add	r3, r1
 8002e72:	334c      	adds	r3, #76	@ 0x4c
 8002e74:	2202      	movs	r2, #2
 8002e76:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002e78:	78fa      	ldrb	r2, [r7, #3]
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	1a9b      	subs	r3, r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	334d      	adds	r3, #77	@ 0x4d
 8002e88:	2203      	movs	r2, #3
 8002e8a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	78fa      	ldrb	r2, [r7, #3]
 8002e92:	4611      	mov	r1, r2
 8002e94:	4618      	mov	r0, r3
 8002e96:	f003 f930 	bl	80060fa <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002e9a:	78fa      	ldrb	r2, [r7, #3]
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	1a9b      	subs	r3, r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	331a      	adds	r3, #26
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	f040 841d 	bne.w	80036ec <HCD_HC_OUT_IRQHandler+0x944>
 8002eb2:	78fa      	ldrb	r2, [r7, #3]
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	1a9b      	subs	r3, r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	331b      	adds	r3, #27
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f040 8411 	bne.w	80036ec <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002eca:	78fa      	ldrb	r2, [r7, #3]
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	011b      	lsls	r3, r3, #4
 8002ed2:	1a9b      	subs	r3, r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	3326      	adds	r3, #38	@ 0x26
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d009      	beq.n	8002ef4 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002ee0:	78fa      	ldrb	r2, [r7, #3]
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	011b      	lsls	r3, r3, #4
 8002ee8:	1a9b      	subs	r3, r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	331b      	adds	r3, #27
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002ef4:	78fa      	ldrb	r2, [r7, #3]
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	011b      	lsls	r3, r3, #4
 8002efc:	1a9b      	subs	r3, r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	440b      	add	r3, r1
 8002f02:	334d      	adds	r3, #77	@ 0x4d
 8002f04:	2203      	movs	r2, #3
 8002f06:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	78fa      	ldrb	r2, [r7, #3]
 8002f0e:	4611      	mov	r1, r2
 8002f10:	4618      	mov	r0, r3
 8002f12:	f003 f8f2 	bl	80060fa <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002f16:	78fa      	ldrb	r2, [r7, #3]
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	011b      	lsls	r3, r3, #4
 8002f1e:	1a9b      	subs	r3, r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	440b      	add	r3, r1
 8002f24:	3344      	adds	r3, #68	@ 0x44
 8002f26:	2200      	movs	r2, #0
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	e3df      	b.n	80036ec <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	78fa      	ldrb	r2, [r7, #3]
 8002f32:	4611      	mov	r1, r2
 8002f34:	4618      	mov	r0, r3
 8002f36:	f002 fb3d 	bl	80055b4 <USB_ReadChInterrupts>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f44:	d111      	bne.n	8002f6a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002f46:	78fb      	ldrb	r3, [r7, #3]
 8002f48:	015a      	lsls	r2, r3, #5
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f52:	461a      	mov	r2, r3
 8002f54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f58:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	78fa      	ldrb	r2, [r7, #3]
 8002f60:	4611      	mov	r1, r2
 8002f62:	4618      	mov	r0, r3
 8002f64:	f003 f8c9 	bl	80060fa <USB_HC_Halt>
 8002f68:	e3c0      	b.n	80036ec <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	78fa      	ldrb	r2, [r7, #3]
 8002f70:	4611      	mov	r1, r2
 8002f72:	4618      	mov	r0, r3
 8002f74:	f002 fb1e 	bl	80055b4 <USB_ReadChInterrupts>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d168      	bne.n	8003054 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002f82:	78fa      	ldrb	r2, [r7, #3]
 8002f84:	6879      	ldr	r1, [r7, #4]
 8002f86:	4613      	mov	r3, r2
 8002f88:	011b      	lsls	r3, r3, #4
 8002f8a:	1a9b      	subs	r3, r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	440b      	add	r3, r1
 8002f90:	3344      	adds	r3, #68	@ 0x44
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	78fa      	ldrb	r2, [r7, #3]
 8002f9c:	4611      	mov	r1, r2
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f002 fb08 	bl	80055b4 <USB_ReadChInterrupts>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002faa:	2b40      	cmp	r3, #64	@ 0x40
 8002fac:	d112      	bne.n	8002fd4 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002fae:	78fa      	ldrb	r2, [r7, #3]
 8002fb0:	6879      	ldr	r1, [r7, #4]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	011b      	lsls	r3, r3, #4
 8002fb6:	1a9b      	subs	r3, r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	440b      	add	r3, r1
 8002fbc:	3319      	adds	r3, #25
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002fc2:	78fb      	ldrb	r3, [r7, #3]
 8002fc4:	015a      	lsls	r2, r3, #5
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	4413      	add	r3, r2
 8002fca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fce:	461a      	mov	r2, r3
 8002fd0:	2340      	movs	r3, #64	@ 0x40
 8002fd2:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002fd4:	78fa      	ldrb	r2, [r7, #3]
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	1a9b      	subs	r3, r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	331b      	adds	r3, #27
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d019      	beq.n	800301e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002fea:	78fa      	ldrb	r2, [r7, #3]
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	011b      	lsls	r3, r3, #4
 8002ff2:	1a9b      	subs	r3, r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	440b      	add	r3, r1
 8002ff8:	331b      	adds	r3, #27
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002ffe:	78fb      	ldrb	r3, [r7, #3]
 8003000:	015a      	lsls	r2, r3, #5
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	4413      	add	r3, r2
 8003006:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	78fa      	ldrb	r2, [r7, #3]
 800300e:	0151      	lsls	r1, r2, #5
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	440a      	add	r2, r1
 8003014:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003018:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800301c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800301e:	78fb      	ldrb	r3, [r7, #3]
 8003020:	015a      	lsls	r2, r3, #5
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	4413      	add	r3, r2
 8003026:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800302a:	461a      	mov	r2, r3
 800302c:	2301      	movs	r3, #1
 800302e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003030:	78fa      	ldrb	r2, [r7, #3]
 8003032:	6879      	ldr	r1, [r7, #4]
 8003034:	4613      	mov	r3, r2
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	1a9b      	subs	r3, r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	440b      	add	r3, r1
 800303e:	334d      	adds	r3, #77	@ 0x4d
 8003040:	2201      	movs	r2, #1
 8003042:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	78fa      	ldrb	r2, [r7, #3]
 800304a:	4611      	mov	r1, r2
 800304c:	4618      	mov	r0, r3
 800304e:	f003 f854 	bl	80060fa <USB_HC_Halt>
 8003052:	e34b      	b.n	80036ec <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	78fa      	ldrb	r2, [r7, #3]
 800305a:	4611      	mov	r1, r2
 800305c:	4618      	mov	r0, r3
 800305e:	f002 faa9 	bl	80055b4 <USB_ReadChInterrupts>
 8003062:	4603      	mov	r3, r0
 8003064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003068:	2b40      	cmp	r3, #64	@ 0x40
 800306a:	d139      	bne.n	80030e0 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800306c:	78fa      	ldrb	r2, [r7, #3]
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	4613      	mov	r3, r2
 8003072:	011b      	lsls	r3, r3, #4
 8003074:	1a9b      	subs	r3, r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	334d      	adds	r3, #77	@ 0x4d
 800307c:	2205      	movs	r2, #5
 800307e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003080:	78fa      	ldrb	r2, [r7, #3]
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	1a9b      	subs	r3, r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	331a      	adds	r3, #26
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d109      	bne.n	80030aa <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003096:	78fa      	ldrb	r2, [r7, #3]
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	4613      	mov	r3, r2
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	1a9b      	subs	r3, r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	440b      	add	r3, r1
 80030a4:	3319      	adds	r3, #25
 80030a6:	2201      	movs	r2, #1
 80030a8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80030aa:	78fa      	ldrb	r2, [r7, #3]
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	4613      	mov	r3, r2
 80030b0:	011b      	lsls	r3, r3, #4
 80030b2:	1a9b      	subs	r3, r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	440b      	add	r3, r1
 80030b8:	3344      	adds	r3, #68	@ 0x44
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	78fa      	ldrb	r2, [r7, #3]
 80030c4:	4611      	mov	r1, r2
 80030c6:	4618      	mov	r0, r3
 80030c8:	f003 f817 	bl	80060fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80030cc:	78fb      	ldrb	r3, [r7, #3]
 80030ce:	015a      	lsls	r2, r3, #5
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	4413      	add	r3, r2
 80030d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030d8:	461a      	mov	r2, r3
 80030da:	2340      	movs	r3, #64	@ 0x40
 80030dc:	6093      	str	r3, [r2, #8]
 80030de:	e305      	b.n	80036ec <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	78fa      	ldrb	r2, [r7, #3]
 80030e6:	4611      	mov	r1, r2
 80030e8:	4618      	mov	r0, r3
 80030ea:	f002 fa63 	bl	80055b4 <USB_ReadChInterrupts>
 80030ee:	4603      	mov	r3, r0
 80030f0:	f003 0308 	and.w	r3, r3, #8
 80030f4:	2b08      	cmp	r3, #8
 80030f6:	d11a      	bne.n	800312e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80030f8:	78fb      	ldrb	r3, [r7, #3]
 80030fa:	015a      	lsls	r2, r3, #5
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	4413      	add	r3, r2
 8003100:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003104:	461a      	mov	r2, r3
 8003106:	2308      	movs	r3, #8
 8003108:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800310a:	78fa      	ldrb	r2, [r7, #3]
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	1a9b      	subs	r3, r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	440b      	add	r3, r1
 8003118:	334d      	adds	r3, #77	@ 0x4d
 800311a:	2206      	movs	r2, #6
 800311c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	78fa      	ldrb	r2, [r7, #3]
 8003124:	4611      	mov	r1, r2
 8003126:	4618      	mov	r0, r3
 8003128:	f002 ffe7 	bl	80060fa <USB_HC_Halt>
 800312c:	e2de      	b.n	80036ec <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	78fa      	ldrb	r2, [r7, #3]
 8003134:	4611      	mov	r1, r2
 8003136:	4618      	mov	r0, r3
 8003138:	f002 fa3c 	bl	80055b4 <USB_ReadChInterrupts>
 800313c:	4603      	mov	r3, r0
 800313e:	f003 0310 	and.w	r3, r3, #16
 8003142:	2b10      	cmp	r3, #16
 8003144:	d144      	bne.n	80031d0 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003146:	78fa      	ldrb	r2, [r7, #3]
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	011b      	lsls	r3, r3, #4
 800314e:	1a9b      	subs	r3, r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	440b      	add	r3, r1
 8003154:	3344      	adds	r3, #68	@ 0x44
 8003156:	2200      	movs	r2, #0
 8003158:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800315a:	78fa      	ldrb	r2, [r7, #3]
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	4613      	mov	r3, r2
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	1a9b      	subs	r3, r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	440b      	add	r3, r1
 8003168:	334d      	adds	r3, #77	@ 0x4d
 800316a:	2204      	movs	r2, #4
 800316c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800316e:	78fa      	ldrb	r2, [r7, #3]
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	4613      	mov	r3, r2
 8003174:	011b      	lsls	r3, r3, #4
 8003176:	1a9b      	subs	r3, r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	440b      	add	r3, r1
 800317c:	3319      	adds	r3, #25
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d114      	bne.n	80031ae <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003184:	78fa      	ldrb	r2, [r7, #3]
 8003186:	6879      	ldr	r1, [r7, #4]
 8003188:	4613      	mov	r3, r2
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	1a9b      	subs	r3, r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	3318      	adds	r3, #24
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d109      	bne.n	80031ae <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800319a:	78fa      	ldrb	r2, [r7, #3]
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	4613      	mov	r3, r2
 80031a0:	011b      	lsls	r3, r3, #4
 80031a2:	1a9b      	subs	r3, r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	440b      	add	r3, r1
 80031a8:	3319      	adds	r3, #25
 80031aa:	2201      	movs	r2, #1
 80031ac:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	78fa      	ldrb	r2, [r7, #3]
 80031b4:	4611      	mov	r1, r2
 80031b6:	4618      	mov	r0, r3
 80031b8:	f002 ff9f 	bl	80060fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80031bc:	78fb      	ldrb	r3, [r7, #3]
 80031be:	015a      	lsls	r2, r3, #5
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	4413      	add	r3, r2
 80031c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031c8:	461a      	mov	r2, r3
 80031ca:	2310      	movs	r3, #16
 80031cc:	6093      	str	r3, [r2, #8]
 80031ce:	e28d      	b.n	80036ec <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	78fa      	ldrb	r2, [r7, #3]
 80031d6:	4611      	mov	r1, r2
 80031d8:	4618      	mov	r0, r3
 80031da:	f002 f9eb 	bl	80055b4 <USB_ReadChInterrupts>
 80031de:	4603      	mov	r3, r0
 80031e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031e4:	2b80      	cmp	r3, #128	@ 0x80
 80031e6:	d169      	bne.n	80032bc <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	799b      	ldrb	r3, [r3, #6]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d111      	bne.n	8003214 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80031f0:	78fa      	ldrb	r2, [r7, #3]
 80031f2:	6879      	ldr	r1, [r7, #4]
 80031f4:	4613      	mov	r3, r2
 80031f6:	011b      	lsls	r3, r3, #4
 80031f8:	1a9b      	subs	r3, r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	440b      	add	r3, r1
 80031fe:	334d      	adds	r3, #77	@ 0x4d
 8003200:	2207      	movs	r2, #7
 8003202:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	78fa      	ldrb	r2, [r7, #3]
 800320a:	4611      	mov	r1, r2
 800320c:	4618      	mov	r0, r3
 800320e:	f002 ff74 	bl	80060fa <USB_HC_Halt>
 8003212:	e049      	b.n	80032a8 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003214:	78fa      	ldrb	r2, [r7, #3]
 8003216:	6879      	ldr	r1, [r7, #4]
 8003218:	4613      	mov	r3, r2
 800321a:	011b      	lsls	r3, r3, #4
 800321c:	1a9b      	subs	r3, r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	3344      	adds	r3, #68	@ 0x44
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	1c59      	adds	r1, r3, #1
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	4613      	mov	r3, r2
 800322c:	011b      	lsls	r3, r3, #4
 800322e:	1a9b      	subs	r3, r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4403      	add	r3, r0
 8003234:	3344      	adds	r3, #68	@ 0x44
 8003236:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003238:	78fa      	ldrb	r2, [r7, #3]
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	4613      	mov	r3, r2
 800323e:	011b      	lsls	r3, r3, #4
 8003240:	1a9b      	subs	r3, r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	3344      	adds	r3, #68	@ 0x44
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2b02      	cmp	r3, #2
 800324c:	d922      	bls.n	8003294 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800324e:	78fa      	ldrb	r2, [r7, #3]
 8003250:	6879      	ldr	r1, [r7, #4]
 8003252:	4613      	mov	r3, r2
 8003254:	011b      	lsls	r3, r3, #4
 8003256:	1a9b      	subs	r3, r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	440b      	add	r3, r1
 800325c:	3344      	adds	r3, #68	@ 0x44
 800325e:	2200      	movs	r2, #0
 8003260:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003262:	78fa      	ldrb	r2, [r7, #3]
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	4613      	mov	r3, r2
 8003268:	011b      	lsls	r3, r3, #4
 800326a:	1a9b      	subs	r3, r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	440b      	add	r3, r1
 8003270:	334c      	adds	r3, #76	@ 0x4c
 8003272:	2204      	movs	r2, #4
 8003274:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003276:	78fa      	ldrb	r2, [r7, #3]
 8003278:	6879      	ldr	r1, [r7, #4]
 800327a:	4613      	mov	r3, r2
 800327c:	011b      	lsls	r3, r3, #4
 800327e:	1a9b      	subs	r3, r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	440b      	add	r3, r1
 8003284:	334c      	adds	r3, #76	@ 0x4c
 8003286:	781a      	ldrb	r2, [r3, #0]
 8003288:	78fb      	ldrb	r3, [r7, #3]
 800328a:	4619      	mov	r1, r3
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f005 fa8d 	bl	80087ac <HAL_HCD_HC_NotifyURBChange_Callback>
 8003292:	e009      	b.n	80032a8 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003294:	78fa      	ldrb	r2, [r7, #3]
 8003296:	6879      	ldr	r1, [r7, #4]
 8003298:	4613      	mov	r3, r2
 800329a:	011b      	lsls	r3, r3, #4
 800329c:	1a9b      	subs	r3, r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	440b      	add	r3, r1
 80032a2:	334c      	adds	r3, #76	@ 0x4c
 80032a4:	2202      	movs	r2, #2
 80032a6:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80032a8:	78fb      	ldrb	r3, [r7, #3]
 80032aa:	015a      	lsls	r2, r3, #5
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	4413      	add	r3, r2
 80032b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032b4:	461a      	mov	r2, r3
 80032b6:	2380      	movs	r3, #128	@ 0x80
 80032b8:	6093      	str	r3, [r2, #8]
 80032ba:	e217      	b.n	80036ec <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	78fa      	ldrb	r2, [r7, #3]
 80032c2:	4611      	mov	r1, r2
 80032c4:	4618      	mov	r0, r3
 80032c6:	f002 f975 	bl	80055b4 <USB_ReadChInterrupts>
 80032ca:	4603      	mov	r3, r0
 80032cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032d4:	d11b      	bne.n	800330e <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80032d6:	78fa      	ldrb	r2, [r7, #3]
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	1a9b      	subs	r3, r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	440b      	add	r3, r1
 80032e4:	334d      	adds	r3, #77	@ 0x4d
 80032e6:	2209      	movs	r2, #9
 80032e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	78fa      	ldrb	r2, [r7, #3]
 80032f0:	4611      	mov	r1, r2
 80032f2:	4618      	mov	r0, r3
 80032f4:	f002 ff01 	bl	80060fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80032f8:	78fb      	ldrb	r3, [r7, #3]
 80032fa:	015a      	lsls	r2, r3, #5
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	4413      	add	r3, r2
 8003300:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003304:	461a      	mov	r2, r3
 8003306:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800330a:	6093      	str	r3, [r2, #8]
 800330c:	e1ee      	b.n	80036ec <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	78fa      	ldrb	r2, [r7, #3]
 8003314:	4611      	mov	r1, r2
 8003316:	4618      	mov	r0, r3
 8003318:	f002 f94c 	bl	80055b4 <USB_ReadChInterrupts>
 800331c:	4603      	mov	r3, r0
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b02      	cmp	r3, #2
 8003324:	f040 81df 	bne.w	80036e6 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003328:	78fb      	ldrb	r3, [r7, #3]
 800332a:	015a      	lsls	r2, r3, #5
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	4413      	add	r3, r2
 8003330:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003334:	461a      	mov	r2, r3
 8003336:	2302      	movs	r3, #2
 8003338:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800333a:	78fa      	ldrb	r2, [r7, #3]
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	4613      	mov	r3, r2
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	1a9b      	subs	r3, r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	440b      	add	r3, r1
 8003348:	334d      	adds	r3, #77	@ 0x4d
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b01      	cmp	r3, #1
 800334e:	f040 8093 	bne.w	8003478 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003352:	78fa      	ldrb	r2, [r7, #3]
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	4613      	mov	r3, r2
 8003358:	011b      	lsls	r3, r3, #4
 800335a:	1a9b      	subs	r3, r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	440b      	add	r3, r1
 8003360:	334d      	adds	r3, #77	@ 0x4d
 8003362:	2202      	movs	r2, #2
 8003364:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003366:	78fa      	ldrb	r2, [r7, #3]
 8003368:	6879      	ldr	r1, [r7, #4]
 800336a:	4613      	mov	r3, r2
 800336c:	011b      	lsls	r3, r3, #4
 800336e:	1a9b      	subs	r3, r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	440b      	add	r3, r1
 8003374:	334c      	adds	r3, #76	@ 0x4c
 8003376:	2201      	movs	r2, #1
 8003378:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800337a:	78fa      	ldrb	r2, [r7, #3]
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	4613      	mov	r3, r2
 8003380:	011b      	lsls	r3, r3, #4
 8003382:	1a9b      	subs	r3, r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	440b      	add	r3, r1
 8003388:	3326      	adds	r3, #38	@ 0x26
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	2b02      	cmp	r3, #2
 800338e:	d00b      	beq.n	80033a8 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003390:	78fa      	ldrb	r2, [r7, #3]
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	4613      	mov	r3, r2
 8003396:	011b      	lsls	r3, r3, #4
 8003398:	1a9b      	subs	r3, r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	3326      	adds	r3, #38	@ 0x26
 80033a0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80033a2:	2b03      	cmp	r3, #3
 80033a4:	f040 8190 	bne.w	80036c8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	799b      	ldrb	r3, [r3, #6]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d115      	bne.n	80033dc <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80033b0:	78fa      	ldrb	r2, [r7, #3]
 80033b2:	6879      	ldr	r1, [r7, #4]
 80033b4:	4613      	mov	r3, r2
 80033b6:	011b      	lsls	r3, r3, #4
 80033b8:	1a9b      	subs	r3, r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	440b      	add	r3, r1
 80033be:	333d      	adds	r3, #61	@ 0x3d
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	78fa      	ldrb	r2, [r7, #3]
 80033c4:	f083 0301 	eor.w	r3, r3, #1
 80033c8:	b2d8      	uxtb	r0, r3
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	4613      	mov	r3, r2
 80033ce:	011b      	lsls	r3, r3, #4
 80033d0:	1a9b      	subs	r3, r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	333d      	adds	r3, #61	@ 0x3d
 80033d8:	4602      	mov	r2, r0
 80033da:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	799b      	ldrb	r3, [r3, #6]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	f040 8171 	bne.w	80036c8 <HCD_HC_OUT_IRQHandler+0x920>
 80033e6:	78fa      	ldrb	r2, [r7, #3]
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	4613      	mov	r3, r2
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	1a9b      	subs	r3, r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	440b      	add	r3, r1
 80033f4:	3334      	adds	r3, #52	@ 0x34
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 8165 	beq.w	80036c8 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80033fe:	78fa      	ldrb	r2, [r7, #3]
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	4613      	mov	r3, r2
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	1a9b      	subs	r3, r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	440b      	add	r3, r1
 800340c:	3334      	adds	r3, #52	@ 0x34
 800340e:	6819      	ldr	r1, [r3, #0]
 8003410:	78fa      	ldrb	r2, [r7, #3]
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	4613      	mov	r3, r2
 8003416:	011b      	lsls	r3, r3, #4
 8003418:	1a9b      	subs	r3, r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4403      	add	r3, r0
 800341e:	3328      	adds	r3, #40	@ 0x28
 8003420:	881b      	ldrh	r3, [r3, #0]
 8003422:	440b      	add	r3, r1
 8003424:	1e59      	subs	r1, r3, #1
 8003426:	78fa      	ldrb	r2, [r7, #3]
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	4613      	mov	r3, r2
 800342c:	011b      	lsls	r3, r3, #4
 800342e:	1a9b      	subs	r3, r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4403      	add	r3, r0
 8003434:	3328      	adds	r3, #40	@ 0x28
 8003436:	881b      	ldrh	r3, [r3, #0]
 8003438:	fbb1 f3f3 	udiv	r3, r1, r3
 800343c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 813f 	beq.w	80036c8 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800344a:	78fa      	ldrb	r2, [r7, #3]
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	4613      	mov	r3, r2
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	1a9b      	subs	r3, r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	440b      	add	r3, r1
 8003458:	333d      	adds	r3, #61	@ 0x3d
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	78fa      	ldrb	r2, [r7, #3]
 800345e:	f083 0301 	eor.w	r3, r3, #1
 8003462:	b2d8      	uxtb	r0, r3
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	4613      	mov	r3, r2
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	1a9b      	subs	r3, r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	440b      	add	r3, r1
 8003470:	333d      	adds	r3, #61	@ 0x3d
 8003472:	4602      	mov	r2, r0
 8003474:	701a      	strb	r2, [r3, #0]
 8003476:	e127      	b.n	80036c8 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003478:	78fa      	ldrb	r2, [r7, #3]
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	4613      	mov	r3, r2
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	1a9b      	subs	r3, r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	440b      	add	r3, r1
 8003486:	334d      	adds	r3, #77	@ 0x4d
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2b03      	cmp	r3, #3
 800348c:	d120      	bne.n	80034d0 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800348e:	78fa      	ldrb	r2, [r7, #3]
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	4613      	mov	r3, r2
 8003494:	011b      	lsls	r3, r3, #4
 8003496:	1a9b      	subs	r3, r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	440b      	add	r3, r1
 800349c:	334d      	adds	r3, #77	@ 0x4d
 800349e:	2202      	movs	r2, #2
 80034a0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80034a2:	78fa      	ldrb	r2, [r7, #3]
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	4613      	mov	r3, r2
 80034a8:	011b      	lsls	r3, r3, #4
 80034aa:	1a9b      	subs	r3, r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	440b      	add	r3, r1
 80034b0:	331b      	adds	r3, #27
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	f040 8107 	bne.w	80036c8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80034ba:	78fa      	ldrb	r2, [r7, #3]
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	1a9b      	subs	r3, r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	334c      	adds	r3, #76	@ 0x4c
 80034ca:	2202      	movs	r2, #2
 80034cc:	701a      	strb	r2, [r3, #0]
 80034ce:	e0fb      	b.n	80036c8 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80034d0:	78fa      	ldrb	r2, [r7, #3]
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	4613      	mov	r3, r2
 80034d6:	011b      	lsls	r3, r3, #4
 80034d8:	1a9b      	subs	r3, r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	334d      	adds	r3, #77	@ 0x4d
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	d13a      	bne.n	800355c <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034e6:	78fa      	ldrb	r2, [r7, #3]
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	4613      	mov	r3, r2
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	1a9b      	subs	r3, r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	440b      	add	r3, r1
 80034f4:	334d      	adds	r3, #77	@ 0x4d
 80034f6:	2202      	movs	r2, #2
 80034f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80034fa:	78fa      	ldrb	r2, [r7, #3]
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	4613      	mov	r3, r2
 8003500:	011b      	lsls	r3, r3, #4
 8003502:	1a9b      	subs	r3, r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	440b      	add	r3, r1
 8003508:	334c      	adds	r3, #76	@ 0x4c
 800350a:	2202      	movs	r2, #2
 800350c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800350e:	78fa      	ldrb	r2, [r7, #3]
 8003510:	6879      	ldr	r1, [r7, #4]
 8003512:	4613      	mov	r3, r2
 8003514:	011b      	lsls	r3, r3, #4
 8003516:	1a9b      	subs	r3, r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	440b      	add	r3, r1
 800351c:	331b      	adds	r3, #27
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	2b01      	cmp	r3, #1
 8003522:	f040 80d1 	bne.w	80036c8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003526:	78fa      	ldrb	r2, [r7, #3]
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	4613      	mov	r3, r2
 800352c:	011b      	lsls	r3, r3, #4
 800352e:	1a9b      	subs	r3, r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	440b      	add	r3, r1
 8003534:	331b      	adds	r3, #27
 8003536:	2200      	movs	r2, #0
 8003538:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800353a:	78fb      	ldrb	r3, [r7, #3]
 800353c:	015a      	lsls	r2, r3, #5
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	4413      	add	r3, r2
 8003542:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	78fa      	ldrb	r2, [r7, #3]
 800354a:	0151      	lsls	r1, r2, #5
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	440a      	add	r2, r1
 8003550:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003554:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003558:	6053      	str	r3, [r2, #4]
 800355a:	e0b5      	b.n	80036c8 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800355c:	78fa      	ldrb	r2, [r7, #3]
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	4613      	mov	r3, r2
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	1a9b      	subs	r3, r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	334d      	adds	r3, #77	@ 0x4d
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	2b05      	cmp	r3, #5
 8003570:	d114      	bne.n	800359c <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003572:	78fa      	ldrb	r2, [r7, #3]
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	4613      	mov	r3, r2
 8003578:	011b      	lsls	r3, r3, #4
 800357a:	1a9b      	subs	r3, r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	440b      	add	r3, r1
 8003580:	334d      	adds	r3, #77	@ 0x4d
 8003582:	2202      	movs	r2, #2
 8003584:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003586:	78fa      	ldrb	r2, [r7, #3]
 8003588:	6879      	ldr	r1, [r7, #4]
 800358a:	4613      	mov	r3, r2
 800358c:	011b      	lsls	r3, r3, #4
 800358e:	1a9b      	subs	r3, r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	440b      	add	r3, r1
 8003594:	334c      	adds	r3, #76	@ 0x4c
 8003596:	2202      	movs	r2, #2
 8003598:	701a      	strb	r2, [r3, #0]
 800359a:	e095      	b.n	80036c8 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800359c:	78fa      	ldrb	r2, [r7, #3]
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	4613      	mov	r3, r2
 80035a2:	011b      	lsls	r3, r3, #4
 80035a4:	1a9b      	subs	r3, r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	334d      	adds	r3, #77	@ 0x4d
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b06      	cmp	r3, #6
 80035b0:	d114      	bne.n	80035dc <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035b2:	78fa      	ldrb	r2, [r7, #3]
 80035b4:	6879      	ldr	r1, [r7, #4]
 80035b6:	4613      	mov	r3, r2
 80035b8:	011b      	lsls	r3, r3, #4
 80035ba:	1a9b      	subs	r3, r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	440b      	add	r3, r1
 80035c0:	334d      	adds	r3, #77	@ 0x4d
 80035c2:	2202      	movs	r2, #2
 80035c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80035c6:	78fa      	ldrb	r2, [r7, #3]
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	4613      	mov	r3, r2
 80035cc:	011b      	lsls	r3, r3, #4
 80035ce:	1a9b      	subs	r3, r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	440b      	add	r3, r1
 80035d4:	334c      	adds	r3, #76	@ 0x4c
 80035d6:	2205      	movs	r2, #5
 80035d8:	701a      	strb	r2, [r3, #0]
 80035da:	e075      	b.n	80036c8 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80035dc:	78fa      	ldrb	r2, [r7, #3]
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	4613      	mov	r3, r2
 80035e2:	011b      	lsls	r3, r3, #4
 80035e4:	1a9b      	subs	r3, r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	440b      	add	r3, r1
 80035ea:	334d      	adds	r3, #77	@ 0x4d
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	2b07      	cmp	r3, #7
 80035f0:	d00a      	beq.n	8003608 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80035f2:	78fa      	ldrb	r2, [r7, #3]
 80035f4:	6879      	ldr	r1, [r7, #4]
 80035f6:	4613      	mov	r3, r2
 80035f8:	011b      	lsls	r3, r3, #4
 80035fa:	1a9b      	subs	r3, r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	440b      	add	r3, r1
 8003600:	334d      	adds	r3, #77	@ 0x4d
 8003602:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003604:	2b09      	cmp	r3, #9
 8003606:	d170      	bne.n	80036ea <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003608:	78fa      	ldrb	r2, [r7, #3]
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	4613      	mov	r3, r2
 800360e:	011b      	lsls	r3, r3, #4
 8003610:	1a9b      	subs	r3, r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	334d      	adds	r3, #77	@ 0x4d
 8003618:	2202      	movs	r2, #2
 800361a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800361c:	78fa      	ldrb	r2, [r7, #3]
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	4613      	mov	r3, r2
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	1a9b      	subs	r3, r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	3344      	adds	r3, #68	@ 0x44
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	1c59      	adds	r1, r3, #1
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	1a9b      	subs	r3, r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4403      	add	r3, r0
 800363c:	3344      	adds	r3, #68	@ 0x44
 800363e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003640:	78fa      	ldrb	r2, [r7, #3]
 8003642:	6879      	ldr	r1, [r7, #4]
 8003644:	4613      	mov	r3, r2
 8003646:	011b      	lsls	r3, r3, #4
 8003648:	1a9b      	subs	r3, r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	440b      	add	r3, r1
 800364e:	3344      	adds	r3, #68	@ 0x44
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2b02      	cmp	r3, #2
 8003654:	d914      	bls.n	8003680 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003656:	78fa      	ldrb	r2, [r7, #3]
 8003658:	6879      	ldr	r1, [r7, #4]
 800365a:	4613      	mov	r3, r2
 800365c:	011b      	lsls	r3, r3, #4
 800365e:	1a9b      	subs	r3, r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	440b      	add	r3, r1
 8003664:	3344      	adds	r3, #68	@ 0x44
 8003666:	2200      	movs	r2, #0
 8003668:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800366a:	78fa      	ldrb	r2, [r7, #3]
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	4613      	mov	r3, r2
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	1a9b      	subs	r3, r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	440b      	add	r3, r1
 8003678:	334c      	adds	r3, #76	@ 0x4c
 800367a:	2204      	movs	r2, #4
 800367c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800367e:	e022      	b.n	80036c6 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003680:	78fa      	ldrb	r2, [r7, #3]
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	4613      	mov	r3, r2
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	1a9b      	subs	r3, r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	334c      	adds	r3, #76	@ 0x4c
 8003690:	2202      	movs	r2, #2
 8003692:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003694:	78fb      	ldrb	r3, [r7, #3]
 8003696:	015a      	lsls	r2, r3, #5
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	4413      	add	r3, r2
 800369c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80036aa:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80036b2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80036b4:	78fb      	ldrb	r3, [r7, #3]
 80036b6:	015a      	lsls	r2, r3, #5
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	4413      	add	r3, r2
 80036bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036c0:	461a      	mov	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80036c6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80036c8:	78fa      	ldrb	r2, [r7, #3]
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	4613      	mov	r3, r2
 80036ce:	011b      	lsls	r3, r3, #4
 80036d0:	1a9b      	subs	r3, r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	440b      	add	r3, r1
 80036d6:	334c      	adds	r3, #76	@ 0x4c
 80036d8:	781a      	ldrb	r2, [r3, #0]
 80036da:	78fb      	ldrb	r3, [r7, #3]
 80036dc:	4619      	mov	r1, r3
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f005 f864 	bl	80087ac <HAL_HCD_HC_NotifyURBChange_Callback>
 80036e4:	e002      	b.n	80036ec <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80036e6:	bf00      	nop
 80036e8:	e000      	b.n	80036ec <HCD_HC_OUT_IRQHandler+0x944>
      return;
 80036ea:	bf00      	nop
  }
}
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b08a      	sub	sp, #40	@ 0x28
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003702:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	f003 030f 	and.w	r3, r3, #15
 8003712:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	0c5b      	lsrs	r3, r3, #17
 8003718:	f003 030f 	and.w	r3, r3, #15
 800371c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	091b      	lsrs	r3, r3, #4
 8003722:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003726:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	2b02      	cmp	r3, #2
 800372c:	d004      	beq.n	8003738 <HCD_RXQLVL_IRQHandler+0x46>
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	2b05      	cmp	r3, #5
 8003732:	f000 80b6 	beq.w	80038a2 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003736:	e0b7      	b.n	80038a8 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	2b00      	cmp	r3, #0
 800373c:	f000 80b3 	beq.w	80038a6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	4613      	mov	r3, r2
 8003746:	011b      	lsls	r3, r3, #4
 8003748:	1a9b      	subs	r3, r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	440b      	add	r3, r1
 800374e:	332c      	adds	r3, #44	@ 0x2c
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	f000 80a7 	beq.w	80038a6 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003758:	6879      	ldr	r1, [r7, #4]
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	4613      	mov	r3, r2
 800375e:	011b      	lsls	r3, r3, #4
 8003760:	1a9b      	subs	r3, r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	440b      	add	r3, r1
 8003766:	3338      	adds	r3, #56	@ 0x38
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	18d1      	adds	r1, r2, r3
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	4613      	mov	r3, r2
 8003774:	011b      	lsls	r3, r3, #4
 8003776:	1a9b      	subs	r3, r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4403      	add	r3, r0
 800377c:	3334      	adds	r3, #52	@ 0x34
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4299      	cmp	r1, r3
 8003782:	f200 8083 	bhi.w	800388c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6818      	ldr	r0, [r3, #0]
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	4613      	mov	r3, r2
 8003790:	011b      	lsls	r3, r3, #4
 8003792:	1a9b      	subs	r3, r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	440b      	add	r3, r1
 8003798:	332c      	adds	r3, #44	@ 0x2c
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	b292      	uxth	r2, r2
 80037a0:	4619      	mov	r1, r3
 80037a2:	f001 fe9c 	bl	80054de <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80037a6:	6879      	ldr	r1, [r7, #4]
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	4613      	mov	r3, r2
 80037ac:	011b      	lsls	r3, r3, #4
 80037ae:	1a9b      	subs	r3, r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	440b      	add	r3, r1
 80037b4:	332c      	adds	r3, #44	@ 0x2c
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	18d1      	adds	r1, r2, r3
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	4613      	mov	r3, r2
 80037c2:	011b      	lsls	r3, r3, #4
 80037c4:	1a9b      	subs	r3, r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4403      	add	r3, r0
 80037ca:	332c      	adds	r3, #44	@ 0x2c
 80037cc:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80037ce:	6879      	ldr	r1, [r7, #4]
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	4613      	mov	r3, r2
 80037d4:	011b      	lsls	r3, r3, #4
 80037d6:	1a9b      	subs	r3, r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	440b      	add	r3, r1
 80037dc:	3338      	adds	r3, #56	@ 0x38
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	18d1      	adds	r1, r2, r3
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	4613      	mov	r3, r2
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	1a9b      	subs	r3, r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4403      	add	r3, r0
 80037f2:	3338      	adds	r3, #56	@ 0x38
 80037f4:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	015a      	lsls	r2, r3, #5
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	4413      	add	r3, r2
 80037fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	0cdb      	lsrs	r3, r3, #19
 8003806:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800380a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	4613      	mov	r3, r2
 8003812:	011b      	lsls	r3, r3, #4
 8003814:	1a9b      	subs	r3, r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	440b      	add	r3, r1
 800381a:	3328      	adds	r3, #40	@ 0x28
 800381c:	881b      	ldrh	r3, [r3, #0]
 800381e:	461a      	mov	r2, r3
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	4293      	cmp	r3, r2
 8003824:	d13f      	bne.n	80038a6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d03c      	beq.n	80038a6 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	015a      	lsls	r2, r3, #5
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	4413      	add	r3, r2
 8003834:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003842:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800384a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	015a      	lsls	r2, r3, #5
 8003850:	6a3b      	ldr	r3, [r7, #32]
 8003852:	4413      	add	r3, r2
 8003854:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003858:	461a      	mov	r2, r3
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800385e:	6879      	ldr	r1, [r7, #4]
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	4613      	mov	r3, r2
 8003864:	011b      	lsls	r3, r3, #4
 8003866:	1a9b      	subs	r3, r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	440b      	add	r3, r1
 800386c:	333c      	adds	r3, #60	@ 0x3c
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	f083 0301 	eor.w	r3, r3, #1
 8003874:	b2d8      	uxtb	r0, r3
 8003876:	6879      	ldr	r1, [r7, #4]
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	4613      	mov	r3, r2
 800387c:	011b      	lsls	r3, r3, #4
 800387e:	1a9b      	subs	r3, r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	440b      	add	r3, r1
 8003884:	333c      	adds	r3, #60	@ 0x3c
 8003886:	4602      	mov	r2, r0
 8003888:	701a      	strb	r2, [r3, #0]
      break;
 800388a:	e00c      	b.n	80038a6 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800388c:	6879      	ldr	r1, [r7, #4]
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	4613      	mov	r3, r2
 8003892:	011b      	lsls	r3, r3, #4
 8003894:	1a9b      	subs	r3, r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	440b      	add	r3, r1
 800389a:	334c      	adds	r3, #76	@ 0x4c
 800389c:	2204      	movs	r2, #4
 800389e:	701a      	strb	r2, [r3, #0]
      break;
 80038a0:	e001      	b.n	80038a6 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80038a2:	bf00      	nop
 80038a4:	e000      	b.n	80038a8 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80038a6:	bf00      	nop
  }
}
 80038a8:	bf00      	nop
 80038aa:	3728      	adds	r7, #40	@ 0x28
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80038dc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d10b      	bne.n	8003900 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d102      	bne.n	80038f8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f004 ff3e 	bl	8008774 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	f043 0302 	orr.w	r3, r3, #2
 80038fe:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f003 0308 	and.w	r3, r3, #8
 8003906:	2b08      	cmp	r3, #8
 8003908:	d132      	bne.n	8003970 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	f043 0308 	orr.w	r3, r3, #8
 8003910:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b04      	cmp	r3, #4
 800391a:	d126      	bne.n	800396a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	7a5b      	ldrb	r3, [r3, #9]
 8003920:	2b02      	cmp	r3, #2
 8003922:	d113      	bne.n	800394c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800392a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800392e:	d106      	bne.n	800393e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2102      	movs	r1, #2
 8003936:	4618      	mov	r0, r3
 8003938:	f001 ff60 	bl	80057fc <USB_InitFSLSPClkSel>
 800393c:	e011      	b.n	8003962 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2101      	movs	r1, #1
 8003944:	4618      	mov	r0, r3
 8003946:	f001 ff59 	bl	80057fc <USB_InitFSLSPClkSel>
 800394a:	e00a      	b.n	8003962 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	79db      	ldrb	r3, [r3, #7]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d106      	bne.n	8003962 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800395a:	461a      	mov	r2, r3
 800395c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003960:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f004 ff30 	bl	80087c8 <HAL_HCD_PortEnabled_Callback>
 8003968:	e002      	b.n	8003970 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f004 ff3a 	bl	80087e4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f003 0320 	and.w	r3, r3, #32
 8003976:	2b20      	cmp	r3, #32
 8003978:	d103      	bne.n	8003982 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	f043 0320 	orr.w	r3, r3, #32
 8003980:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003988:	461a      	mov	r2, r3
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	6013      	str	r3, [r2, #0]
}
 800398e:	bf00      	nop
 8003990:	3718      	adds	r7, #24
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
	...

08003998 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e12b      	b.n	8003c02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d106      	bne.n	80039c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7fd f9b6 	bl	8000d30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2224      	movs	r2, #36	@ 0x24
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0201 	bic.w	r2, r2, #1
 80039da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80039ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80039fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039fc:	f001 fa20 	bl	8004e40 <HAL_RCC_GetPCLK1Freq>
 8003a00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	4a81      	ldr	r2, [pc, #516]	@ (8003c0c <HAL_I2C_Init+0x274>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d807      	bhi.n	8003a1c <HAL_I2C_Init+0x84>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	4a80      	ldr	r2, [pc, #512]	@ (8003c10 <HAL_I2C_Init+0x278>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	bf94      	ite	ls
 8003a14:	2301      	movls	r3, #1
 8003a16:	2300      	movhi	r3, #0
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	e006      	b.n	8003a2a <HAL_I2C_Init+0x92>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4a7d      	ldr	r2, [pc, #500]	@ (8003c14 <HAL_I2C_Init+0x27c>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	bf94      	ite	ls
 8003a24:	2301      	movls	r3, #1
 8003a26:	2300      	movhi	r3, #0
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e0e7      	b.n	8003c02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4a78      	ldr	r2, [pc, #480]	@ (8003c18 <HAL_I2C_Init+0x280>)
 8003a36:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3a:	0c9b      	lsrs	r3, r3, #18
 8003a3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	4a6a      	ldr	r2, [pc, #424]	@ (8003c0c <HAL_I2C_Init+0x274>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d802      	bhi.n	8003a6c <HAL_I2C_Init+0xd4>
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	e009      	b.n	8003a80 <HAL_I2C_Init+0xe8>
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003a72:	fb02 f303 	mul.w	r3, r2, r3
 8003a76:	4a69      	ldr	r2, [pc, #420]	@ (8003c1c <HAL_I2C_Init+0x284>)
 8003a78:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7c:	099b      	lsrs	r3, r3, #6
 8003a7e:	3301      	adds	r3, #1
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6812      	ldr	r2, [r2, #0]
 8003a84:	430b      	orrs	r3, r1
 8003a86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003a92:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	495c      	ldr	r1, [pc, #368]	@ (8003c0c <HAL_I2C_Init+0x274>)
 8003a9c:	428b      	cmp	r3, r1
 8003a9e:	d819      	bhi.n	8003ad4 <HAL_I2C_Init+0x13c>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	1e59      	subs	r1, r3, #1
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	fbb1 f3f3 	udiv	r3, r1, r3
 8003aae:	1c59      	adds	r1, r3, #1
 8003ab0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003ab4:	400b      	ands	r3, r1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00a      	beq.n	8003ad0 <HAL_I2C_Init+0x138>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	1e59      	subs	r1, r3, #1
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ac8:	3301      	adds	r3, #1
 8003aca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ace:	e051      	b.n	8003b74 <HAL_I2C_Init+0x1dc>
 8003ad0:	2304      	movs	r3, #4
 8003ad2:	e04f      	b.n	8003b74 <HAL_I2C_Init+0x1dc>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d111      	bne.n	8003b00 <HAL_I2C_Init+0x168>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	1e58      	subs	r0, r3, #1
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6859      	ldr	r1, [r3, #4]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	440b      	add	r3, r1
 8003aea:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aee:	3301      	adds	r3, #1
 8003af0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	bf0c      	ite	eq
 8003af8:	2301      	moveq	r3, #1
 8003afa:	2300      	movne	r3, #0
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	e012      	b.n	8003b26 <HAL_I2C_Init+0x18e>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	1e58      	subs	r0, r3, #1
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6859      	ldr	r1, [r3, #4]
 8003b08:	460b      	mov	r3, r1
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	0099      	lsls	r1, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b16:	3301      	adds	r3, #1
 8003b18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	bf0c      	ite	eq
 8003b20:	2301      	moveq	r3, #1
 8003b22:	2300      	movne	r3, #0
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <HAL_I2C_Init+0x196>
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e022      	b.n	8003b74 <HAL_I2C_Init+0x1dc>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10e      	bne.n	8003b54 <HAL_I2C_Init+0x1bc>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	1e58      	subs	r0, r3, #1
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6859      	ldr	r1, [r3, #4]
 8003b3e:	460b      	mov	r3, r1
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	440b      	add	r3, r1
 8003b44:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b48:	3301      	adds	r3, #1
 8003b4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b52:	e00f      	b.n	8003b74 <HAL_I2C_Init+0x1dc>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	1e58      	subs	r0, r3, #1
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6859      	ldr	r1, [r3, #4]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	440b      	add	r3, r1
 8003b62:	0099      	lsls	r1, r3, #2
 8003b64:	440b      	add	r3, r1
 8003b66:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b70:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b74:	6879      	ldr	r1, [r7, #4]
 8003b76:	6809      	ldr	r1, [r1, #0]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	69da      	ldr	r2, [r3, #28]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003ba2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	6911      	ldr	r1, [r2, #16]
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	68d2      	ldr	r2, [r2, #12]
 8003bae:	4311      	orrs	r1, r2
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6812      	ldr	r2, [r2, #0]
 8003bb4:	430b      	orrs	r3, r1
 8003bb6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	695a      	ldr	r2, [r3, #20]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f042 0201 	orr.w	r2, r2, #1
 8003be2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2220      	movs	r2, #32
 8003bee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	000186a0 	.word	0x000186a0
 8003c10:	001e847f 	.word	0x001e847f
 8003c14:	003d08ff 	.word	0x003d08ff
 8003c18:	431bde83 	.word	0x431bde83
 8003c1c:	10624dd3 	.word	0x10624dd3

08003c20 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b088      	sub	sp, #32
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e128      	b.n	8003e84 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d109      	bne.n	8003c52 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a90      	ldr	r2, [pc, #576]	@ (8003e8c <HAL_I2S_Init+0x26c>)
 8003c4a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7fd f8b7 	bl	8000dc0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2202      	movs	r2, #2
 8003c56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6812      	ldr	r2, [r2, #0]
 8003c64:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003c68:	f023 030f 	bic.w	r3, r3, #15
 8003c6c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2202      	movs	r2, #2
 8003c74:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d060      	beq.n	8003d40 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d102      	bne.n	8003c8c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003c86:	2310      	movs	r3, #16
 8003c88:	617b      	str	r3, [r7, #20]
 8003c8a:	e001      	b.n	8003c90 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003c8c:	2320      	movs	r3, #32
 8003c8e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	2b20      	cmp	r3, #32
 8003c96:	d802      	bhi.n	8003c9e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003c9e:	2001      	movs	r0, #1
 8003ca0:	f001 f9c4 	bl	800502c <HAL_RCCEx_GetPeriphCLKFreq>
 8003ca4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cae:	d125      	bne.n	8003cfc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d010      	beq.n	8003cda <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	4413      	add	r3, r2
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	461a      	mov	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd4:	3305      	adds	r3, #5
 8003cd6:	613b      	str	r3, [r7, #16]
 8003cd8:	e01f      	b.n	8003d1a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	461a      	mov	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf6:	3305      	adds	r3, #5
 8003cf8:	613b      	str	r3, [r7, #16]
 8003cfa:	e00e      	b.n	8003d1a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d04:	4613      	mov	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d16:	3305      	adds	r3, #5
 8003d18:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	4a5c      	ldr	r2, [pc, #368]	@ (8003e90 <HAL_I2S_Init+0x270>)
 8003d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d22:	08db      	lsrs	r3, r3, #3
 8003d24:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	085b      	lsrs	r3, r3, #1
 8003d36:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	021b      	lsls	r3, r3, #8
 8003d3c:	61bb      	str	r3, [r7, #24]
 8003d3e:	e003      	b.n	8003d48 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003d40:	2302      	movs	r3, #2
 8003d42:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003d44:	2300      	movs	r3, #0
 8003d46:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d902      	bls.n	8003d54 <HAL_I2S_Init+0x134>
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	2bff      	cmp	r3, #255	@ 0xff
 8003d52:	d907      	bls.n	8003d64 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d58:	f043 0210 	orr.w	r2, r3, #16
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e08f      	b.n	8003e84 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	691a      	ldr	r2, [r3, #16]
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	ea42 0103 	orr.w	r1, r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	69fa      	ldr	r2, [r7, #28]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003d82:	f023 030f 	bic.w	r3, r3, #15
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6851      	ldr	r1, [r2, #4]
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	6892      	ldr	r2, [r2, #8]
 8003d8e:	4311      	orrs	r1, r2
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	68d2      	ldr	r2, [r2, #12]
 8003d94:	4311      	orrs	r1, r2
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	6992      	ldr	r2, [r2, #24]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	431a      	orrs	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003da6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d161      	bne.n	8003e74 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a38      	ldr	r2, [pc, #224]	@ (8003e94 <HAL_I2S_Init+0x274>)
 8003db4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a37      	ldr	r2, [pc, #220]	@ (8003e98 <HAL_I2S_Init+0x278>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d101      	bne.n	8003dc4 <HAL_I2S_Init+0x1a4>
 8003dc0:	4b36      	ldr	r3, [pc, #216]	@ (8003e9c <HAL_I2S_Init+0x27c>)
 8003dc2:	e001      	b.n	8003dc8 <HAL_I2S_Init+0x1a8>
 8003dc4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	6812      	ldr	r2, [r2, #0]
 8003dce:	4932      	ldr	r1, [pc, #200]	@ (8003e98 <HAL_I2S_Init+0x278>)
 8003dd0:	428a      	cmp	r2, r1
 8003dd2:	d101      	bne.n	8003dd8 <HAL_I2S_Init+0x1b8>
 8003dd4:	4a31      	ldr	r2, [pc, #196]	@ (8003e9c <HAL_I2S_Init+0x27c>)
 8003dd6:	e001      	b.n	8003ddc <HAL_I2S_Init+0x1bc>
 8003dd8:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003ddc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003de0:	f023 030f 	bic.w	r3, r3, #15
 8003de4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a2b      	ldr	r2, [pc, #172]	@ (8003e98 <HAL_I2S_Init+0x278>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d101      	bne.n	8003df4 <HAL_I2S_Init+0x1d4>
 8003df0:	4b2a      	ldr	r3, [pc, #168]	@ (8003e9c <HAL_I2S_Init+0x27c>)
 8003df2:	e001      	b.n	8003df8 <HAL_I2S_Init+0x1d8>
 8003df4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003df8:	2202      	movs	r2, #2
 8003dfa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a25      	ldr	r2, [pc, #148]	@ (8003e98 <HAL_I2S_Init+0x278>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d101      	bne.n	8003e0a <HAL_I2S_Init+0x1ea>
 8003e06:	4b25      	ldr	r3, [pc, #148]	@ (8003e9c <HAL_I2S_Init+0x27c>)
 8003e08:	e001      	b.n	8003e0e <HAL_I2S_Init+0x1ee>
 8003e0a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e0e:	69db      	ldr	r3, [r3, #28]
 8003e10:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e1a:	d003      	beq.n	8003e24 <HAL_I2S_Init+0x204>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d103      	bne.n	8003e2c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003e24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e28:	613b      	str	r3, [r7, #16]
 8003e2a:	e001      	b.n	8003e30 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003e44:	4313      	orrs	r3, r2
 8003e46:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	897b      	ldrh	r3, [r7, #10]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003e5c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a0d      	ldr	r2, [pc, #52]	@ (8003e98 <HAL_I2S_Init+0x278>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d101      	bne.n	8003e6c <HAL_I2S_Init+0x24c>
 8003e68:	4b0c      	ldr	r3, [pc, #48]	@ (8003e9c <HAL_I2S_Init+0x27c>)
 8003e6a:	e001      	b.n	8003e70 <HAL_I2S_Init+0x250>
 8003e6c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e70:	897a      	ldrh	r2, [r7, #10]
 8003e72:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3720      	adds	r7, #32
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	08003f97 	.word	0x08003f97
 8003e90:	cccccccd 	.word	0xcccccccd
 8003e94:	080040ad 	.word	0x080040ad
 8003e98:	40003800 	.word	0x40003800
 8003e9c:	40003400 	.word	0x40003400

08003ea0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee8:	881a      	ldrh	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef4:	1c9a      	adds	r2, r3, #2
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	3b01      	subs	r3, #1
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10e      	bne.n	8003f30 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f20:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7ff ffb8 	bl	8003ea0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003f30:	bf00      	nop
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68da      	ldr	r2, [r3, #12]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f4a:	b292      	uxth	r2, r2
 8003f4c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f52:	1c9a      	adds	r2, r3, #2
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d10e      	bne.n	8003f8e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f7e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f7ff ff93 	bl	8003eb4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003f8e:	bf00      	nop
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b086      	sub	sp, #24
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	d13a      	bne.n	8004028 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d109      	bne.n	8003fd0 <I2S_IRQHandler+0x3a>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fc6:	2b40      	cmp	r3, #64	@ 0x40
 8003fc8:	d102      	bne.n	8003fd0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7ff ffb4 	bl	8003f38 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fd6:	2b40      	cmp	r3, #64	@ 0x40
 8003fd8:	d126      	bne.n	8004028 <I2S_IRQHandler+0x92>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f003 0320 	and.w	r3, r3, #32
 8003fe4:	2b20      	cmp	r3, #32
 8003fe6:	d11f      	bne.n	8004028 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003ff6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	613b      	str	r3, [r7, #16]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	613b      	str	r3, [r7, #16]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	613b      	str	r3, [r7, #16]
 800400c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800401a:	f043 0202 	orr.w	r2, r3, #2
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7ff ff50 	bl	8003ec8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b03      	cmp	r3, #3
 8004032:	d136      	bne.n	80040a2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b02      	cmp	r3, #2
 800403c:	d109      	bne.n	8004052 <I2S_IRQHandler+0xbc>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004048:	2b80      	cmp	r3, #128	@ 0x80
 800404a:	d102      	bne.n	8004052 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f7ff ff45 	bl	8003edc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f003 0308 	and.w	r3, r3, #8
 8004058:	2b08      	cmp	r3, #8
 800405a:	d122      	bne.n	80040a2 <I2S_IRQHandler+0x10c>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f003 0320 	and.w	r3, r3, #32
 8004066:	2b20      	cmp	r3, #32
 8004068:	d11b      	bne.n	80040a2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004078:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800407a:	2300      	movs	r3, #0
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	60fb      	str	r3, [r7, #12]
 8004086:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004094:	f043 0204 	orr.w	r2, r3, #4
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f7ff ff13 	bl	8003ec8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040a2:	bf00      	nop
 80040a4:	3718      	adds	r7, #24
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
	...

080040ac <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b088      	sub	sp, #32
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a92      	ldr	r2, [pc, #584]	@ (800430c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d101      	bne.n	80040ca <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80040c6:	4b92      	ldr	r3, [pc, #584]	@ (8004310 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040c8:	e001      	b.n	80040ce <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80040ca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a8b      	ldr	r2, [pc, #556]	@ (800430c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d101      	bne.n	80040e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80040e4:	4b8a      	ldr	r3, [pc, #552]	@ (8004310 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040e6:	e001      	b.n	80040ec <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80040e8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040f8:	d004      	beq.n	8004104 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f040 8099 	bne.w	8004236 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b02      	cmp	r3, #2
 800410c:	d107      	bne.n	800411e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004114:	2b00      	cmp	r3, #0
 8004116:	d002      	beq.n	800411e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 f925 	bl	8004368 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b01      	cmp	r3, #1
 8004126:	d107      	bne.n	8004138 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800412e:	2b00      	cmp	r3, #0
 8004130:	d002      	beq.n	8004138 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f9c8 	bl	80044c8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800413e:	2b40      	cmp	r3, #64	@ 0x40
 8004140:	d13a      	bne.n	80041b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	f003 0320 	and.w	r3, r3, #32
 8004148:	2b00      	cmp	r3, #0
 800414a:	d035      	beq.n	80041b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a6e      	ldr	r2, [pc, #440]	@ (800430c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d101      	bne.n	800415a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004156:	4b6e      	ldr	r3, [pc, #440]	@ (8004310 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004158:	e001      	b.n	800415e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800415a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4969      	ldr	r1, [pc, #420]	@ (800430c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004166:	428b      	cmp	r3, r1
 8004168:	d101      	bne.n	800416e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800416a:	4b69      	ldr	r3, [pc, #420]	@ (8004310 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800416c:	e001      	b.n	8004172 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800416e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004172:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004176:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685a      	ldr	r2, [r3, #4]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004186:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004188:	2300      	movs	r3, #0
 800418a:	60fb      	str	r3, [r7, #12]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041aa:	f043 0202 	orr.w	r2, r3, #2
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7ff fe88 	bl	8003ec8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	f003 0308 	and.w	r3, r3, #8
 80041be:	2b08      	cmp	r3, #8
 80041c0:	f040 80c3 	bne.w	800434a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f003 0320 	and.w	r3, r3, #32
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f000 80bd 	beq.w	800434a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	685a      	ldr	r2, [r3, #4]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80041de:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a49      	ldr	r2, [pc, #292]	@ (800430c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d101      	bne.n	80041ee <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80041ea:	4b49      	ldr	r3, [pc, #292]	@ (8004310 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041ec:	e001      	b.n	80041f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80041ee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041f2:	685a      	ldr	r2, [r3, #4]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4944      	ldr	r1, [pc, #272]	@ (800430c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041fa:	428b      	cmp	r3, r1
 80041fc:	d101      	bne.n	8004202 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80041fe:	4b44      	ldr	r3, [pc, #272]	@ (8004310 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004200:	e001      	b.n	8004206 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004202:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004206:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800420a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800420c:	2300      	movs	r3, #0
 800420e:	60bb      	str	r3, [r7, #8]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	60bb      	str	r3, [r7, #8]
 8004218:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004226:	f043 0204 	orr.w	r2, r3, #4
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7ff fe4a 	bl	8003ec8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004234:	e089      	b.n	800434a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b02      	cmp	r3, #2
 800423e:	d107      	bne.n	8004250 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004246:	2b00      	cmp	r3, #0
 8004248:	d002      	beq.n	8004250 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f8be 	bl	80043cc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b01      	cmp	r3, #1
 8004258:	d107      	bne.n	800426a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004260:	2b00      	cmp	r3, #0
 8004262:	d002      	beq.n	800426a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f8fd 	bl	8004464 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004270:	2b40      	cmp	r3, #64	@ 0x40
 8004272:	d12f      	bne.n	80042d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f003 0320 	and.w	r3, r3, #32
 800427a:	2b00      	cmp	r3, #0
 800427c:	d02a      	beq.n	80042d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800428c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a1e      	ldr	r2, [pc, #120]	@ (800430c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d101      	bne.n	800429c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004298:	4b1d      	ldr	r3, [pc, #116]	@ (8004310 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800429a:	e001      	b.n	80042a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800429c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042a0:	685a      	ldr	r2, [r3, #4]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4919      	ldr	r1, [pc, #100]	@ (800430c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042a8:	428b      	cmp	r3, r1
 80042aa:	d101      	bne.n	80042b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80042ac:	4b18      	ldr	r3, [pc, #96]	@ (8004310 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042ae:	e001      	b.n	80042b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80042b0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042b4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80042b8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c6:	f043 0202 	orr.w	r2, r3, #2
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7ff fdfa 	bl	8003ec8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	f003 0308 	and.w	r3, r3, #8
 80042da:	2b08      	cmp	r3, #8
 80042dc:	d136      	bne.n	800434c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	f003 0320 	and.w	r3, r3, #32
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d031      	beq.n	800434c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a07      	ldr	r2, [pc, #28]	@ (800430c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d101      	bne.n	80042f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80042f2:	4b07      	ldr	r3, [pc, #28]	@ (8004310 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042f4:	e001      	b.n	80042fa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80042f6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042fa:	685a      	ldr	r2, [r3, #4]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4902      	ldr	r1, [pc, #8]	@ (800430c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004302:	428b      	cmp	r3, r1
 8004304:	d106      	bne.n	8004314 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004306:	4b02      	ldr	r3, [pc, #8]	@ (8004310 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004308:	e006      	b.n	8004318 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800430a:	bf00      	nop
 800430c:	40003800 	.word	0x40003800
 8004310:	40003400 	.word	0x40003400
 8004314:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004318:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800431c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800432c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800433a:	f043 0204 	orr.w	r2, r3, #4
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7ff fdc0 	bl	8003ec8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004348:	e000      	b.n	800434c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800434a:	bf00      	nop
}
 800434c:	bf00      	nop
 800434e:	3720      	adds	r7, #32
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004374:	1c99      	adds	r1, r3, #2
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6251      	str	r1, [r2, #36]	@ 0x24
 800437a:	881a      	ldrh	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004386:	b29b      	uxth	r3, r3
 8004388:	3b01      	subs	r3, #1
 800438a:	b29a      	uxth	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004394:	b29b      	uxth	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d113      	bne.n	80043c2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80043a8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d106      	bne.n	80043c2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7ff ffc9 	bl	8004354 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043c2:	bf00      	nop
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
	...

080043cc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d8:	1c99      	adds	r1, r3, #2
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6251      	str	r1, [r2, #36]	@ 0x24
 80043de:	8819      	ldrh	r1, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a1d      	ldr	r2, [pc, #116]	@ (800445c <I2SEx_TxISR_I2SExt+0x90>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d101      	bne.n	80043ee <I2SEx_TxISR_I2SExt+0x22>
 80043ea:	4b1d      	ldr	r3, [pc, #116]	@ (8004460 <I2SEx_TxISR_I2SExt+0x94>)
 80043ec:	e001      	b.n	80043f2 <I2SEx_TxISR_I2SExt+0x26>
 80043ee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043f2:	460a      	mov	r2, r1
 80043f4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	3b01      	subs	r3, #1
 80043fe:	b29a      	uxth	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004408:	b29b      	uxth	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d121      	bne.n	8004452 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a12      	ldr	r2, [pc, #72]	@ (800445c <I2SEx_TxISR_I2SExt+0x90>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d101      	bne.n	800441c <I2SEx_TxISR_I2SExt+0x50>
 8004418:	4b11      	ldr	r3, [pc, #68]	@ (8004460 <I2SEx_TxISR_I2SExt+0x94>)
 800441a:	e001      	b.n	8004420 <I2SEx_TxISR_I2SExt+0x54>
 800441c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	490d      	ldr	r1, [pc, #52]	@ (800445c <I2SEx_TxISR_I2SExt+0x90>)
 8004428:	428b      	cmp	r3, r1
 800442a:	d101      	bne.n	8004430 <I2SEx_TxISR_I2SExt+0x64>
 800442c:	4b0c      	ldr	r3, [pc, #48]	@ (8004460 <I2SEx_TxISR_I2SExt+0x94>)
 800442e:	e001      	b.n	8004434 <I2SEx_TxISR_I2SExt+0x68>
 8004430:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004434:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004438:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800443e:	b29b      	uxth	r3, r3
 8004440:	2b00      	cmp	r3, #0
 8004442:	d106      	bne.n	8004452 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7ff ff81 	bl	8004354 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004452:	bf00      	nop
 8004454:	3708      	adds	r7, #8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	40003800 	.word	0x40003800
 8004460:	40003400 	.word	0x40003400

08004464 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68d8      	ldr	r0, [r3, #12]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004476:	1c99      	adds	r1, r3, #2
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800447c:	b282      	uxth	r2, r0
 800447e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004484:	b29b      	uxth	r3, r3
 8004486:	3b01      	subs	r3, #1
 8004488:	b29a      	uxth	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004492:	b29b      	uxth	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	d113      	bne.n	80044c0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80044a6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d106      	bne.n	80044c0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7ff ff4a 	bl	8004354 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044c0:	bf00      	nop
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a20      	ldr	r2, [pc, #128]	@ (8004558 <I2SEx_RxISR_I2SExt+0x90>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d101      	bne.n	80044de <I2SEx_RxISR_I2SExt+0x16>
 80044da:	4b20      	ldr	r3, [pc, #128]	@ (800455c <I2SEx_RxISR_I2SExt+0x94>)
 80044dc:	e001      	b.n	80044e2 <I2SEx_RxISR_I2SExt+0x1a>
 80044de:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044e2:	68d8      	ldr	r0, [r3, #12]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e8:	1c99      	adds	r1, r3, #2
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80044ee:	b282      	uxth	r2, r0
 80044f0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	3b01      	subs	r3, #1
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004504:	b29b      	uxth	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d121      	bne.n	800454e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a12      	ldr	r2, [pc, #72]	@ (8004558 <I2SEx_RxISR_I2SExt+0x90>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d101      	bne.n	8004518 <I2SEx_RxISR_I2SExt+0x50>
 8004514:	4b11      	ldr	r3, [pc, #68]	@ (800455c <I2SEx_RxISR_I2SExt+0x94>)
 8004516:	e001      	b.n	800451c <I2SEx_RxISR_I2SExt+0x54>
 8004518:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	490d      	ldr	r1, [pc, #52]	@ (8004558 <I2SEx_RxISR_I2SExt+0x90>)
 8004524:	428b      	cmp	r3, r1
 8004526:	d101      	bne.n	800452c <I2SEx_RxISR_I2SExt+0x64>
 8004528:	4b0c      	ldr	r3, [pc, #48]	@ (800455c <I2SEx_RxISR_I2SExt+0x94>)
 800452a:	e001      	b.n	8004530 <I2SEx_RxISR_I2SExt+0x68>
 800452c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004530:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004534:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800453a:	b29b      	uxth	r3, r3
 800453c:	2b00      	cmp	r3, #0
 800453e:	d106      	bne.n	800454e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f7ff ff03 	bl	8004354 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800454e:	bf00      	nop
 8004550:	3708      	adds	r7, #8
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	40003800 	.word	0x40003800
 800455c:	40003400 	.word	0x40003400

08004560 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e267      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d075      	beq.n	800466a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800457e:	4b88      	ldr	r3, [pc, #544]	@ (80047a0 <HAL_RCC_OscConfig+0x240>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f003 030c 	and.w	r3, r3, #12
 8004586:	2b04      	cmp	r3, #4
 8004588:	d00c      	beq.n	80045a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800458a:	4b85      	ldr	r3, [pc, #532]	@ (80047a0 <HAL_RCC_OscConfig+0x240>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004592:	2b08      	cmp	r3, #8
 8004594:	d112      	bne.n	80045bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004596:	4b82      	ldr	r3, [pc, #520]	@ (80047a0 <HAL_RCC_OscConfig+0x240>)
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800459e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045a2:	d10b      	bne.n	80045bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a4:	4b7e      	ldr	r3, [pc, #504]	@ (80047a0 <HAL_RCC_OscConfig+0x240>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d05b      	beq.n	8004668 <HAL_RCC_OscConfig+0x108>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d157      	bne.n	8004668 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e242      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045c4:	d106      	bne.n	80045d4 <HAL_RCC_OscConfig+0x74>
 80045c6:	4b76      	ldr	r3, [pc, #472]	@ (80047a0 <HAL_RCC_OscConfig+0x240>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a75      	ldr	r2, [pc, #468]	@ (80047a0 <HAL_RCC_OscConfig+0x240>)
 80045cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045d0:	6013      	str	r3, [r2, #0]
 80045d2:	e01d      	b.n	8004610 <HAL_RCC_OscConfig+0xb0>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045dc:	d10c      	bne.n	80045f8 <HAL_RCC_OscConfig+0x98>
 80045de:	4b70      	ldr	r3, [pc, #448]	@ (80047a0 <HAL_RCC_OscConfig+0x240>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a6f      	ldr	r2, [pc, #444]	@ (80047a0 <HAL_RCC_OscConfig+0x240>)
 80045e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045e8:	6013      	str	r3, [r2, #0]
 80045ea:	4b6d      	ldr	r3, [pc, #436]	@ (80047a0 <HAL_RCC_OscConfig+0x240>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a6c      	ldr	r2, [pc, #432]	@ (80047a0 <HAL_RCC_OscConfig+0x240>)
 80045f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045f4:	6013      	str	r3, [r2, #0]
 80045f6:	e00b      	b.n	8004610 <HAL_RCC_OscConfig+0xb0>
 80045f8:	4b69      	ldr	r3, [pc, #420]	@ (80047a0 <HAL_RCC_OscConfig+0x240>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a68      	ldr	r2, [pc, #416]	@ (80047a0 <HAL_RCC_OscConfig+0x240>)
 80045fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004602:	6013      	str	r3, [r2, #0]
 8004604:	4b66      	ldr	r3, [pc, #408]	@ (80047a0 <HAL_RCC_OscConfig+0x240>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a65      	ldr	r2, [pc, #404]	@ (80047a0 <HAL_RCC_OscConfig+0x240>)
 800460a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800460e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d013      	beq.n	8004640 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004618:	f7fc fdac 	bl	8001174 <HAL_GetTick>
 800461c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800461e:	e008      	b.n	8004632 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004620:	f7fc fda8 	bl	8001174 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b64      	cmp	r3, #100	@ 0x64
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e207      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004632:	4b5b      	ldr	r3, [pc, #364]	@ (80047a0 <HAL_RCC_OscConfig+0x240>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d0f0      	beq.n	8004620 <HAL_RCC_OscConfig+0xc0>
 800463e:	e014      	b.n	800466a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004640:	f7fc fd98 	bl	8001174 <HAL_GetTick>
 8004644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004646:	e008      	b.n	800465a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004648:	f7fc fd94 	bl	8001174 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b64      	cmp	r3, #100	@ 0x64
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e1f3      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800465a:	4b51      	ldr	r3, [pc, #324]	@ (80047a0 <HAL_RCC_OscConfig+0x240>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1f0      	bne.n	8004648 <HAL_RCC_OscConfig+0xe8>
 8004666:	e000      	b.n	800466a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004668:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d063      	beq.n	800473e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004676:	4b4a      	ldr	r3, [pc, #296]	@ (80047a0 <HAL_RCC_OscConfig+0x240>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 030c 	and.w	r3, r3, #12
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00b      	beq.n	800469a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004682:	4b47      	ldr	r3, [pc, #284]	@ (80047a0 <HAL_RCC_OscConfig+0x240>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800468a:	2b08      	cmp	r3, #8
 800468c:	d11c      	bne.n	80046c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800468e:	4b44      	ldr	r3, [pc, #272]	@ (80047a0 <HAL_RCC_OscConfig+0x240>)
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d116      	bne.n	80046c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800469a:	4b41      	ldr	r3, [pc, #260]	@ (80047a0 <HAL_RCC_OscConfig+0x240>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d005      	beq.n	80046b2 <HAL_RCC_OscConfig+0x152>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d001      	beq.n	80046b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e1c7      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b2:	4b3b      	ldr	r3, [pc, #236]	@ (80047a0 <HAL_RCC_OscConfig+0x240>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	4937      	ldr	r1, [pc, #220]	@ (80047a0 <HAL_RCC_OscConfig+0x240>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046c6:	e03a      	b.n	800473e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d020      	beq.n	8004712 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046d0:	4b34      	ldr	r3, [pc, #208]	@ (80047a4 <HAL_RCC_OscConfig+0x244>)
 80046d2:	2201      	movs	r2, #1
 80046d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d6:	f7fc fd4d 	bl	8001174 <HAL_GetTick>
 80046da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046dc:	e008      	b.n	80046f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046de:	f7fc fd49 	bl	8001174 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e1a8      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046f0:	4b2b      	ldr	r3, [pc, #172]	@ (80047a0 <HAL_RCC_OscConfig+0x240>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d0f0      	beq.n	80046de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046fc:	4b28      	ldr	r3, [pc, #160]	@ (80047a0 <HAL_RCC_OscConfig+0x240>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	00db      	lsls	r3, r3, #3
 800470a:	4925      	ldr	r1, [pc, #148]	@ (80047a0 <HAL_RCC_OscConfig+0x240>)
 800470c:	4313      	orrs	r3, r2
 800470e:	600b      	str	r3, [r1, #0]
 8004710:	e015      	b.n	800473e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004712:	4b24      	ldr	r3, [pc, #144]	@ (80047a4 <HAL_RCC_OscConfig+0x244>)
 8004714:	2200      	movs	r2, #0
 8004716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004718:	f7fc fd2c 	bl	8001174 <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800471e:	e008      	b.n	8004732 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004720:	f7fc fd28 	bl	8001174 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e187      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004732:	4b1b      	ldr	r3, [pc, #108]	@ (80047a0 <HAL_RCC_OscConfig+0x240>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1f0      	bne.n	8004720 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0308 	and.w	r3, r3, #8
 8004746:	2b00      	cmp	r3, #0
 8004748:	d036      	beq.n	80047b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d016      	beq.n	8004780 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004752:	4b15      	ldr	r3, [pc, #84]	@ (80047a8 <HAL_RCC_OscConfig+0x248>)
 8004754:	2201      	movs	r2, #1
 8004756:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004758:	f7fc fd0c 	bl	8001174 <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800475e:	e008      	b.n	8004772 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004760:	f7fc fd08 	bl	8001174 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e167      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004772:	4b0b      	ldr	r3, [pc, #44]	@ (80047a0 <HAL_RCC_OscConfig+0x240>)
 8004774:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d0f0      	beq.n	8004760 <HAL_RCC_OscConfig+0x200>
 800477e:	e01b      	b.n	80047b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004780:	4b09      	ldr	r3, [pc, #36]	@ (80047a8 <HAL_RCC_OscConfig+0x248>)
 8004782:	2200      	movs	r2, #0
 8004784:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004786:	f7fc fcf5 	bl	8001174 <HAL_GetTick>
 800478a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800478c:	e00e      	b.n	80047ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800478e:	f7fc fcf1 	bl	8001174 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d907      	bls.n	80047ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e150      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
 80047a0:	40023800 	.word	0x40023800
 80047a4:	42470000 	.word	0x42470000
 80047a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047ac:	4b88      	ldr	r3, [pc, #544]	@ (80049d0 <HAL_RCC_OscConfig+0x470>)
 80047ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1ea      	bne.n	800478e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0304 	and.w	r3, r3, #4
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f000 8097 	beq.w	80048f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047c6:	2300      	movs	r3, #0
 80047c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ca:	4b81      	ldr	r3, [pc, #516]	@ (80049d0 <HAL_RCC_OscConfig+0x470>)
 80047cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10f      	bne.n	80047f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047d6:	2300      	movs	r3, #0
 80047d8:	60bb      	str	r3, [r7, #8]
 80047da:	4b7d      	ldr	r3, [pc, #500]	@ (80049d0 <HAL_RCC_OscConfig+0x470>)
 80047dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047de:	4a7c      	ldr	r2, [pc, #496]	@ (80049d0 <HAL_RCC_OscConfig+0x470>)
 80047e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80047e6:	4b7a      	ldr	r3, [pc, #488]	@ (80049d0 <HAL_RCC_OscConfig+0x470>)
 80047e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047ee:	60bb      	str	r3, [r7, #8]
 80047f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047f2:	2301      	movs	r3, #1
 80047f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f6:	4b77      	ldr	r3, [pc, #476]	@ (80049d4 <HAL_RCC_OscConfig+0x474>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d118      	bne.n	8004834 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004802:	4b74      	ldr	r3, [pc, #464]	@ (80049d4 <HAL_RCC_OscConfig+0x474>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a73      	ldr	r2, [pc, #460]	@ (80049d4 <HAL_RCC_OscConfig+0x474>)
 8004808:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800480c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800480e:	f7fc fcb1 	bl	8001174 <HAL_GetTick>
 8004812:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004814:	e008      	b.n	8004828 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004816:	f7fc fcad 	bl	8001174 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e10c      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004828:	4b6a      	ldr	r3, [pc, #424]	@ (80049d4 <HAL_RCC_OscConfig+0x474>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0f0      	beq.n	8004816 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d106      	bne.n	800484a <HAL_RCC_OscConfig+0x2ea>
 800483c:	4b64      	ldr	r3, [pc, #400]	@ (80049d0 <HAL_RCC_OscConfig+0x470>)
 800483e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004840:	4a63      	ldr	r2, [pc, #396]	@ (80049d0 <HAL_RCC_OscConfig+0x470>)
 8004842:	f043 0301 	orr.w	r3, r3, #1
 8004846:	6713      	str	r3, [r2, #112]	@ 0x70
 8004848:	e01c      	b.n	8004884 <HAL_RCC_OscConfig+0x324>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	2b05      	cmp	r3, #5
 8004850:	d10c      	bne.n	800486c <HAL_RCC_OscConfig+0x30c>
 8004852:	4b5f      	ldr	r3, [pc, #380]	@ (80049d0 <HAL_RCC_OscConfig+0x470>)
 8004854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004856:	4a5e      	ldr	r2, [pc, #376]	@ (80049d0 <HAL_RCC_OscConfig+0x470>)
 8004858:	f043 0304 	orr.w	r3, r3, #4
 800485c:	6713      	str	r3, [r2, #112]	@ 0x70
 800485e:	4b5c      	ldr	r3, [pc, #368]	@ (80049d0 <HAL_RCC_OscConfig+0x470>)
 8004860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004862:	4a5b      	ldr	r2, [pc, #364]	@ (80049d0 <HAL_RCC_OscConfig+0x470>)
 8004864:	f043 0301 	orr.w	r3, r3, #1
 8004868:	6713      	str	r3, [r2, #112]	@ 0x70
 800486a:	e00b      	b.n	8004884 <HAL_RCC_OscConfig+0x324>
 800486c:	4b58      	ldr	r3, [pc, #352]	@ (80049d0 <HAL_RCC_OscConfig+0x470>)
 800486e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004870:	4a57      	ldr	r2, [pc, #348]	@ (80049d0 <HAL_RCC_OscConfig+0x470>)
 8004872:	f023 0301 	bic.w	r3, r3, #1
 8004876:	6713      	str	r3, [r2, #112]	@ 0x70
 8004878:	4b55      	ldr	r3, [pc, #340]	@ (80049d0 <HAL_RCC_OscConfig+0x470>)
 800487a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800487c:	4a54      	ldr	r2, [pc, #336]	@ (80049d0 <HAL_RCC_OscConfig+0x470>)
 800487e:	f023 0304 	bic.w	r3, r3, #4
 8004882:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d015      	beq.n	80048b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800488c:	f7fc fc72 	bl	8001174 <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004892:	e00a      	b.n	80048aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004894:	f7fc fc6e 	bl	8001174 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e0cb      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048aa:	4b49      	ldr	r3, [pc, #292]	@ (80049d0 <HAL_RCC_OscConfig+0x470>)
 80048ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d0ee      	beq.n	8004894 <HAL_RCC_OscConfig+0x334>
 80048b6:	e014      	b.n	80048e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048b8:	f7fc fc5c 	bl	8001174 <HAL_GetTick>
 80048bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048be:	e00a      	b.n	80048d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048c0:	f7fc fc58 	bl	8001174 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e0b5      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048d6:	4b3e      	ldr	r3, [pc, #248]	@ (80049d0 <HAL_RCC_OscConfig+0x470>)
 80048d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1ee      	bne.n	80048c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048e2:	7dfb      	ldrb	r3, [r7, #23]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d105      	bne.n	80048f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048e8:	4b39      	ldr	r3, [pc, #228]	@ (80049d0 <HAL_RCC_OscConfig+0x470>)
 80048ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ec:	4a38      	ldr	r2, [pc, #224]	@ (80049d0 <HAL_RCC_OscConfig+0x470>)
 80048ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 80a1 	beq.w	8004a40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048fe:	4b34      	ldr	r3, [pc, #208]	@ (80049d0 <HAL_RCC_OscConfig+0x470>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f003 030c 	and.w	r3, r3, #12
 8004906:	2b08      	cmp	r3, #8
 8004908:	d05c      	beq.n	80049c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	2b02      	cmp	r3, #2
 8004910:	d141      	bne.n	8004996 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004912:	4b31      	ldr	r3, [pc, #196]	@ (80049d8 <HAL_RCC_OscConfig+0x478>)
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004918:	f7fc fc2c 	bl	8001174 <HAL_GetTick>
 800491c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800491e:	e008      	b.n	8004932 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004920:	f7fc fc28 	bl	8001174 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e087      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004932:	4b27      	ldr	r3, [pc, #156]	@ (80049d0 <HAL_RCC_OscConfig+0x470>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1f0      	bne.n	8004920 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	69da      	ldr	r2, [r3, #28]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	431a      	orrs	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800494c:	019b      	lsls	r3, r3, #6
 800494e:	431a      	orrs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004954:	085b      	lsrs	r3, r3, #1
 8004956:	3b01      	subs	r3, #1
 8004958:	041b      	lsls	r3, r3, #16
 800495a:	431a      	orrs	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004960:	061b      	lsls	r3, r3, #24
 8004962:	491b      	ldr	r1, [pc, #108]	@ (80049d0 <HAL_RCC_OscConfig+0x470>)
 8004964:	4313      	orrs	r3, r2
 8004966:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004968:	4b1b      	ldr	r3, [pc, #108]	@ (80049d8 <HAL_RCC_OscConfig+0x478>)
 800496a:	2201      	movs	r2, #1
 800496c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800496e:	f7fc fc01 	bl	8001174 <HAL_GetTick>
 8004972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004974:	e008      	b.n	8004988 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004976:	f7fc fbfd 	bl	8001174 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	2b02      	cmp	r3, #2
 8004982:	d901      	bls.n	8004988 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e05c      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004988:	4b11      	ldr	r3, [pc, #68]	@ (80049d0 <HAL_RCC_OscConfig+0x470>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d0f0      	beq.n	8004976 <HAL_RCC_OscConfig+0x416>
 8004994:	e054      	b.n	8004a40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004996:	4b10      	ldr	r3, [pc, #64]	@ (80049d8 <HAL_RCC_OscConfig+0x478>)
 8004998:	2200      	movs	r2, #0
 800499a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800499c:	f7fc fbea 	bl	8001174 <HAL_GetTick>
 80049a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049a2:	e008      	b.n	80049b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049a4:	f7fc fbe6 	bl	8001174 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e045      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049b6:	4b06      	ldr	r3, [pc, #24]	@ (80049d0 <HAL_RCC_OscConfig+0x470>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1f0      	bne.n	80049a4 <HAL_RCC_OscConfig+0x444>
 80049c2:	e03d      	b.n	8004a40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d107      	bne.n	80049dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e038      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
 80049d0:	40023800 	.word	0x40023800
 80049d4:	40007000 	.word	0x40007000
 80049d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049dc:	4b1b      	ldr	r3, [pc, #108]	@ (8004a4c <HAL_RCC_OscConfig+0x4ec>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d028      	beq.n	8004a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d121      	bne.n	8004a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d11a      	bne.n	8004a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d111      	bne.n	8004a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a22:	085b      	lsrs	r3, r3, #1
 8004a24:	3b01      	subs	r3, #1
 8004a26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d107      	bne.n	8004a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d001      	beq.n	8004a40 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e000      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3718      	adds	r7, #24
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	40023800 	.word	0x40023800

08004a50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d101      	bne.n	8004a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e0cc      	b.n	8004bfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a64:	4b68      	ldr	r3, [pc, #416]	@ (8004c08 <HAL_RCC_ClockConfig+0x1b8>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0307 	and.w	r3, r3, #7
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d90c      	bls.n	8004a8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a72:	4b65      	ldr	r3, [pc, #404]	@ (8004c08 <HAL_RCC_ClockConfig+0x1b8>)
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	b2d2      	uxtb	r2, r2
 8004a78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a7a:	4b63      	ldr	r3, [pc, #396]	@ (8004c08 <HAL_RCC_ClockConfig+0x1b8>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0307 	and.w	r3, r3, #7
 8004a82:	683a      	ldr	r2, [r7, #0]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d001      	beq.n	8004a8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e0b8      	b.n	8004bfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d020      	beq.n	8004ada <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d005      	beq.n	8004ab0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004aa4:	4b59      	ldr	r3, [pc, #356]	@ (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	4a58      	ldr	r2, [pc, #352]	@ (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004aaa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004aae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0308 	and.w	r3, r3, #8
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d005      	beq.n	8004ac8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004abc:	4b53      	ldr	r3, [pc, #332]	@ (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	4a52      	ldr	r2, [pc, #328]	@ (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004ac2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004ac6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ac8:	4b50      	ldr	r3, [pc, #320]	@ (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	494d      	ldr	r1, [pc, #308]	@ (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d044      	beq.n	8004b70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d107      	bne.n	8004afe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aee:	4b47      	ldr	r3, [pc, #284]	@ (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d119      	bne.n	8004b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e07f      	b.n	8004bfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d003      	beq.n	8004b0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b0a:	2b03      	cmp	r3, #3
 8004b0c:	d107      	bne.n	8004b1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b0e:	4b3f      	ldr	r3, [pc, #252]	@ (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d109      	bne.n	8004b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e06f      	b.n	8004bfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b1e:	4b3b      	ldr	r3, [pc, #236]	@ (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e067      	b.n	8004bfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b2e:	4b37      	ldr	r3, [pc, #220]	@ (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f023 0203 	bic.w	r2, r3, #3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	4934      	ldr	r1, [pc, #208]	@ (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b40:	f7fc fb18 	bl	8001174 <HAL_GetTick>
 8004b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b46:	e00a      	b.n	8004b5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b48:	f7fc fb14 	bl	8001174 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e04f      	b.n	8004bfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b5e:	4b2b      	ldr	r3, [pc, #172]	@ (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f003 020c 	and.w	r2, r3, #12
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d1eb      	bne.n	8004b48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b70:	4b25      	ldr	r3, [pc, #148]	@ (8004c08 <HAL_RCC_ClockConfig+0x1b8>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0307 	and.w	r3, r3, #7
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d20c      	bcs.n	8004b98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b7e:	4b22      	ldr	r3, [pc, #136]	@ (8004c08 <HAL_RCC_ClockConfig+0x1b8>)
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	b2d2      	uxtb	r2, r2
 8004b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b86:	4b20      	ldr	r3, [pc, #128]	@ (8004c08 <HAL_RCC_ClockConfig+0x1b8>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0307 	and.w	r3, r3, #7
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d001      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e032      	b.n	8004bfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0304 	and.w	r3, r3, #4
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d008      	beq.n	8004bb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ba4:	4b19      	ldr	r3, [pc, #100]	@ (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	4916      	ldr	r1, [pc, #88]	@ (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0308 	and.w	r3, r3, #8
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d009      	beq.n	8004bd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bc2:	4b12      	ldr	r3, [pc, #72]	@ (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	00db      	lsls	r3, r3, #3
 8004bd0:	490e      	ldr	r1, [pc, #56]	@ (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bd6:	f000 f821 	bl	8004c1c <HAL_RCC_GetSysClockFreq>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	091b      	lsrs	r3, r3, #4
 8004be2:	f003 030f 	and.w	r3, r3, #15
 8004be6:	490a      	ldr	r1, [pc, #40]	@ (8004c10 <HAL_RCC_ClockConfig+0x1c0>)
 8004be8:	5ccb      	ldrb	r3, [r1, r3]
 8004bea:	fa22 f303 	lsr.w	r3, r2, r3
 8004bee:	4a09      	ldr	r2, [pc, #36]	@ (8004c14 <HAL_RCC_ClockConfig+0x1c4>)
 8004bf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004bf2:	4b09      	ldr	r3, [pc, #36]	@ (8004c18 <HAL_RCC_ClockConfig+0x1c8>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7fc fa78 	bl	80010ec <HAL_InitTick>

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	40023c00 	.word	0x40023c00
 8004c0c:	40023800 	.word	0x40023800
 8004c10:	08008ebc 	.word	0x08008ebc
 8004c14:	20000080 	.word	0x20000080
 8004c18:	20000084 	.word	0x20000084

08004c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c20:	b094      	sub	sp, #80	@ 0x50
 8004c22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c24:	2300      	movs	r3, #0
 8004c26:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c28:	2300      	movs	r3, #0
 8004c2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c34:	4b79      	ldr	r3, [pc, #484]	@ (8004e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f003 030c 	and.w	r3, r3, #12
 8004c3c:	2b08      	cmp	r3, #8
 8004c3e:	d00d      	beq.n	8004c5c <HAL_RCC_GetSysClockFreq+0x40>
 8004c40:	2b08      	cmp	r3, #8
 8004c42:	f200 80e1 	bhi.w	8004e08 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d002      	beq.n	8004c50 <HAL_RCC_GetSysClockFreq+0x34>
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	d003      	beq.n	8004c56 <HAL_RCC_GetSysClockFreq+0x3a>
 8004c4e:	e0db      	b.n	8004e08 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c50:	4b73      	ldr	r3, [pc, #460]	@ (8004e20 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c52:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004c54:	e0db      	b.n	8004e0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c56:	4b73      	ldr	r3, [pc, #460]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x208>)
 8004c58:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c5a:	e0d8      	b.n	8004e0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c5c:	4b6f      	ldr	r3, [pc, #444]	@ (8004e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c64:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c66:	4b6d      	ldr	r3, [pc, #436]	@ (8004e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d063      	beq.n	8004d3a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c72:	4b6a      	ldr	r3, [pc, #424]	@ (8004e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	099b      	lsrs	r3, r3, #6
 8004c78:	2200      	movs	r2, #0
 8004c7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c7c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c84:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c86:	2300      	movs	r3, #0
 8004c88:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c8a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004c8e:	4622      	mov	r2, r4
 8004c90:	462b      	mov	r3, r5
 8004c92:	f04f 0000 	mov.w	r0, #0
 8004c96:	f04f 0100 	mov.w	r1, #0
 8004c9a:	0159      	lsls	r1, r3, #5
 8004c9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ca0:	0150      	lsls	r0, r2, #5
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	4621      	mov	r1, r4
 8004ca8:	1a51      	subs	r1, r2, r1
 8004caa:	6139      	str	r1, [r7, #16]
 8004cac:	4629      	mov	r1, r5
 8004cae:	eb63 0301 	sbc.w	r3, r3, r1
 8004cb2:	617b      	str	r3, [r7, #20]
 8004cb4:	f04f 0200 	mov.w	r2, #0
 8004cb8:	f04f 0300 	mov.w	r3, #0
 8004cbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cc0:	4659      	mov	r1, fp
 8004cc2:	018b      	lsls	r3, r1, #6
 8004cc4:	4651      	mov	r1, sl
 8004cc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cca:	4651      	mov	r1, sl
 8004ccc:	018a      	lsls	r2, r1, #6
 8004cce:	4651      	mov	r1, sl
 8004cd0:	ebb2 0801 	subs.w	r8, r2, r1
 8004cd4:	4659      	mov	r1, fp
 8004cd6:	eb63 0901 	sbc.w	r9, r3, r1
 8004cda:	f04f 0200 	mov.w	r2, #0
 8004cde:	f04f 0300 	mov.w	r3, #0
 8004ce2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ce6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cee:	4690      	mov	r8, r2
 8004cf0:	4699      	mov	r9, r3
 8004cf2:	4623      	mov	r3, r4
 8004cf4:	eb18 0303 	adds.w	r3, r8, r3
 8004cf8:	60bb      	str	r3, [r7, #8]
 8004cfa:	462b      	mov	r3, r5
 8004cfc:	eb49 0303 	adc.w	r3, r9, r3
 8004d00:	60fb      	str	r3, [r7, #12]
 8004d02:	f04f 0200 	mov.w	r2, #0
 8004d06:	f04f 0300 	mov.w	r3, #0
 8004d0a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d0e:	4629      	mov	r1, r5
 8004d10:	024b      	lsls	r3, r1, #9
 8004d12:	4621      	mov	r1, r4
 8004d14:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d18:	4621      	mov	r1, r4
 8004d1a:	024a      	lsls	r2, r1, #9
 8004d1c:	4610      	mov	r0, r2
 8004d1e:	4619      	mov	r1, r3
 8004d20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d22:	2200      	movs	r2, #0
 8004d24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d2c:	f7fb fa4c 	bl	80001c8 <__aeabi_uldivmod>
 8004d30:	4602      	mov	r2, r0
 8004d32:	460b      	mov	r3, r1
 8004d34:	4613      	mov	r3, r2
 8004d36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d38:	e058      	b.n	8004dec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d3a:	4b38      	ldr	r3, [pc, #224]	@ (8004e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	099b      	lsrs	r3, r3, #6
 8004d40:	2200      	movs	r2, #0
 8004d42:	4618      	mov	r0, r3
 8004d44:	4611      	mov	r1, r2
 8004d46:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d4a:	623b      	str	r3, [r7, #32]
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d54:	4642      	mov	r2, r8
 8004d56:	464b      	mov	r3, r9
 8004d58:	f04f 0000 	mov.w	r0, #0
 8004d5c:	f04f 0100 	mov.w	r1, #0
 8004d60:	0159      	lsls	r1, r3, #5
 8004d62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d66:	0150      	lsls	r0, r2, #5
 8004d68:	4602      	mov	r2, r0
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	4641      	mov	r1, r8
 8004d6e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d72:	4649      	mov	r1, r9
 8004d74:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d78:	f04f 0200 	mov.w	r2, #0
 8004d7c:	f04f 0300 	mov.w	r3, #0
 8004d80:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d84:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d88:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d8c:	ebb2 040a 	subs.w	r4, r2, sl
 8004d90:	eb63 050b 	sbc.w	r5, r3, fp
 8004d94:	f04f 0200 	mov.w	r2, #0
 8004d98:	f04f 0300 	mov.w	r3, #0
 8004d9c:	00eb      	lsls	r3, r5, #3
 8004d9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004da2:	00e2      	lsls	r2, r4, #3
 8004da4:	4614      	mov	r4, r2
 8004da6:	461d      	mov	r5, r3
 8004da8:	4643      	mov	r3, r8
 8004daa:	18e3      	adds	r3, r4, r3
 8004dac:	603b      	str	r3, [r7, #0]
 8004dae:	464b      	mov	r3, r9
 8004db0:	eb45 0303 	adc.w	r3, r5, r3
 8004db4:	607b      	str	r3, [r7, #4]
 8004db6:	f04f 0200 	mov.w	r2, #0
 8004dba:	f04f 0300 	mov.w	r3, #0
 8004dbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004dc2:	4629      	mov	r1, r5
 8004dc4:	028b      	lsls	r3, r1, #10
 8004dc6:	4621      	mov	r1, r4
 8004dc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004dcc:	4621      	mov	r1, r4
 8004dce:	028a      	lsls	r2, r1, #10
 8004dd0:	4610      	mov	r0, r2
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	61bb      	str	r3, [r7, #24]
 8004dda:	61fa      	str	r2, [r7, #28]
 8004ddc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004de0:	f7fb f9f2 	bl	80001c8 <__aeabi_uldivmod>
 8004de4:	4602      	mov	r2, r0
 8004de6:	460b      	mov	r3, r1
 8004de8:	4613      	mov	r3, r2
 8004dea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004dec:	4b0b      	ldr	r3, [pc, #44]	@ (8004e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	0c1b      	lsrs	r3, r3, #16
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	3301      	adds	r3, #1
 8004df8:	005b      	lsls	r3, r3, #1
 8004dfa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004dfc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004dfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e04:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e06:	e002      	b.n	8004e0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e08:	4b05      	ldr	r3, [pc, #20]	@ (8004e20 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e0a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3750      	adds	r7, #80	@ 0x50
 8004e14:	46bd      	mov	sp, r7
 8004e16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e1a:	bf00      	nop
 8004e1c:	40023800 	.word	0x40023800
 8004e20:	00f42400 	.word	0x00f42400
 8004e24:	007a1200 	.word	0x007a1200

08004e28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e2c:	4b03      	ldr	r3, [pc, #12]	@ (8004e3c <HAL_RCC_GetHCLKFreq+0x14>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	20000080 	.word	0x20000080

08004e40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e44:	f7ff fff0 	bl	8004e28 <HAL_RCC_GetHCLKFreq>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	4b05      	ldr	r3, [pc, #20]	@ (8004e60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	0a9b      	lsrs	r3, r3, #10
 8004e50:	f003 0307 	and.w	r3, r3, #7
 8004e54:	4903      	ldr	r1, [pc, #12]	@ (8004e64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e56:	5ccb      	ldrb	r3, [r1, r3]
 8004e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	40023800 	.word	0x40023800
 8004e64:	08008ecc 	.word	0x08008ecc

08004e68 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e70:	2300      	movs	r3, #0
 8004e72:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004e74:	2300      	movs	r3, #0
 8004e76:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d105      	bne.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d035      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e90:	4b62      	ldr	r3, [pc, #392]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004e92:	2200      	movs	r2, #0
 8004e94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e96:	f7fc f96d 	bl	8001174 <HAL_GetTick>
 8004e9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e9c:	e008      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e9e:	f7fc f969 	bl	8001174 <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d901      	bls.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e0b0      	b.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004eb0:	4b5b      	ldr	r3, [pc, #364]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1f0      	bne.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	019a      	lsls	r2, r3, #6
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	071b      	lsls	r3, r3, #28
 8004ec8:	4955      	ldr	r1, [pc, #340]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ed0:	4b52      	ldr	r3, [pc, #328]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ed6:	f7fc f94d 	bl	8001174 <HAL_GetTick>
 8004eda:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004edc:	e008      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ede:	f7fc f949 	bl	8001174 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d901      	bls.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e090      	b.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ef0:	4b4b      	ldr	r3, [pc, #300]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d0f0      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f000 8083 	beq.w	8005010 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	60fb      	str	r3, [r7, #12]
 8004f0e:	4b44      	ldr	r3, [pc, #272]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f12:	4a43      	ldr	r2, [pc, #268]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f18:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f1a:	4b41      	ldr	r3, [pc, #260]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f22:	60fb      	str	r3, [r7, #12]
 8004f24:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004f26:	4b3f      	ldr	r3, [pc, #252]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a3e      	ldr	r2, [pc, #248]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f30:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f32:	f7fc f91f 	bl	8001174 <HAL_GetTick>
 8004f36:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f38:	e008      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004f3a:	f7fc f91b 	bl	8001174 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d901      	bls.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e062      	b.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f4c:	4b35      	ldr	r3, [pc, #212]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d0f0      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f58:	4b31      	ldr	r3, [pc, #196]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f60:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d02f      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d028      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f76:	4b2a      	ldr	r3, [pc, #168]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f7e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f80:	4b29      	ldr	r3, [pc, #164]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004f82:	2201      	movs	r2, #1
 8004f84:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f86:	4b28      	ldr	r3, [pc, #160]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004f8c:	4a24      	ldr	r2, [pc, #144]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f92:	4b23      	ldr	r3, [pc, #140]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d114      	bne.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004f9e:	f7fc f8e9 	bl	8001174 <HAL_GetTick>
 8004fa2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fa4:	e00a      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fa6:	f7fc f8e5 	bl	8001174 <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d901      	bls.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e02a      	b.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fbc:	4b18      	ldr	r3, [pc, #96]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d0ee      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fd0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fd4:	d10d      	bne.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004fd6:	4b12      	ldr	r3, [pc, #72]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004fe6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fea:	490d      	ldr	r1, [pc, #52]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	608b      	str	r3, [r1, #8]
 8004ff0:	e005      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	4a0a      	ldr	r2, [pc, #40]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ff8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004ffc:	6093      	str	r3, [r2, #8]
 8004ffe:	4b08      	ldr	r3, [pc, #32]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005000:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800500a:	4905      	ldr	r1, [pc, #20]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800500c:	4313      	orrs	r3, r2
 800500e:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3718      	adds	r7, #24
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	42470068 	.word	0x42470068
 8005020:	40023800 	.word	0x40023800
 8005024:	40007000 	.word	0x40007000
 8005028:	42470e40 	.word	0x42470e40

0800502c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800502c:	b480      	push	{r7}
 800502e:	b087      	sub	sp, #28
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005034:	2300      	movs	r3, #0
 8005036:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800503c:	2300      	movs	r3, #0
 800503e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005040:	2300      	movs	r3, #0
 8005042:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d13f      	bne.n	80050ca <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800504a:	4b24      	ldr	r3, [pc, #144]	@ (80050dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005052:	60fb      	str	r3, [r7, #12]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d006      	beq.n	8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005060:	d12f      	bne.n	80050c2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005062:	4b1f      	ldr	r3, [pc, #124]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005064:	617b      	str	r3, [r7, #20]
          break;
 8005066:	e02f      	b.n	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005068:	4b1c      	ldr	r3, [pc, #112]	@ (80050dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005070:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005074:	d108      	bne.n	8005088 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005076:	4b19      	ldr	r3, [pc, #100]	@ (80050dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800507e:	4a19      	ldr	r2, [pc, #100]	@ (80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005080:	fbb2 f3f3 	udiv	r3, r2, r3
 8005084:	613b      	str	r3, [r7, #16]
 8005086:	e007      	b.n	8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005088:	4b14      	ldr	r3, [pc, #80]	@ (80050dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005090:	4a15      	ldr	r2, [pc, #84]	@ (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005092:	fbb2 f3f3 	udiv	r3, r2, r3
 8005096:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005098:	4b10      	ldr	r3, [pc, #64]	@ (80050dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800509a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800509e:	099b      	lsrs	r3, r3, #6
 80050a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	fb02 f303 	mul.w	r3, r2, r3
 80050aa:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80050ac:	4b0b      	ldr	r3, [pc, #44]	@ (80050dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80050ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050b2:	0f1b      	lsrs	r3, r3, #28
 80050b4:	f003 0307 	and.w	r3, r3, #7
 80050b8:	68ba      	ldr	r2, [r7, #8]
 80050ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80050be:	617b      	str	r3, [r7, #20]
          break;
 80050c0:	e002      	b.n	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80050c2:	2300      	movs	r3, #0
 80050c4:	617b      	str	r3, [r7, #20]
          break;
 80050c6:	bf00      	nop
        }
      }
      break;
 80050c8:	e000      	b.n	80050cc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 80050ca:	bf00      	nop
    }
  }
  return frequency;
 80050cc:	697b      	ldr	r3, [r7, #20]
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	371c      	adds	r7, #28
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	40023800 	.word	0x40023800
 80050e0:	00bb8000 	.word	0x00bb8000
 80050e4:	007a1200 	.word	0x007a1200
 80050e8:	00f42400 	.word	0x00f42400

080050ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e07b      	b.n	80051f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005102:	2b00      	cmp	r3, #0
 8005104:	d108      	bne.n	8005118 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800510e:	d009      	beq.n	8005124 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	61da      	str	r2, [r3, #28]
 8005116:	e005      	b.n	8005124 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d106      	bne.n	8005144 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7fb febe 	bl	8000ec0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2202      	movs	r2, #2
 8005148:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800515a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800516c:	431a      	orrs	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005176:	431a      	orrs	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	431a      	orrs	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	431a      	orrs	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005194:	431a      	orrs	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	69db      	ldr	r3, [r3, #28]
 800519a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800519e:	431a      	orrs	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051a8:	ea42 0103 	orr.w	r1, r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	430a      	orrs	r2, r1
 80051ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	0c1b      	lsrs	r3, r3, #16
 80051c2:	f003 0104 	and.w	r1, r3, #4
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ca:	f003 0210 	and.w	r2, r3, #16
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	69da      	ldr	r2, [r3, #28]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051fe:	b084      	sub	sp, #16
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	f107 001c 	add.w	r0, r7, #28
 800520c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005210:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005214:	2b01      	cmp	r3, #1
 8005216:	d123      	bne.n	8005260 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800521c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800522c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005240:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005244:	2b01      	cmp	r3, #1
 8005246:	d105      	bne.n	8005254 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 f9dc 	bl	8005612 <USB_CoreReset>
 800525a:	4603      	mov	r3, r0
 800525c:	73fb      	strb	r3, [r7, #15]
 800525e:	e01b      	b.n	8005298 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 f9d0 	bl	8005612 <USB_CoreReset>
 8005272:	4603      	mov	r3, r0
 8005274:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005276:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800527a:	2b00      	cmp	r3, #0
 800527c:	d106      	bne.n	800528c <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005282:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	639a      	str	r2, [r3, #56]	@ 0x38
 800528a:	e005      	b.n	8005298 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005290:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005298:	7fbb      	ldrb	r3, [r7, #30]
 800529a:	2b01      	cmp	r3, #1
 800529c:	d10b      	bne.n	80052b6 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f043 0206 	orr.w	r2, r3, #6
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f043 0220 	orr.w	r2, r3, #32
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80052b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052c2:	b004      	add	sp, #16
 80052c4:	4770      	bx	lr

080052c6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052c6:	b480      	push	{r7}
 80052c8:	b083      	sub	sp, #12
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f043 0201 	orr.w	r2, r3, #1
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f023 0201 	bic.w	r2, r3, #1
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	370c      	adds	r7, #12
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b084      	sub	sp, #16
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
 8005312:	460b      	mov	r3, r1
 8005314:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005316:	2300      	movs	r3, #0
 8005318:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005326:	78fb      	ldrb	r3, [r7, #3]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d115      	bne.n	8005358 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005338:	200a      	movs	r0, #10
 800533a:	f7fb ff27 	bl	800118c <HAL_Delay>
      ms += 10U;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	330a      	adds	r3, #10
 8005342:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 f956 	bl	80055f6 <USB_GetMode>
 800534a:	4603      	mov	r3, r0
 800534c:	2b01      	cmp	r3, #1
 800534e:	d01e      	beq.n	800538e <USB_SetCurrentMode+0x84>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2bc7      	cmp	r3, #199	@ 0xc7
 8005354:	d9f0      	bls.n	8005338 <USB_SetCurrentMode+0x2e>
 8005356:	e01a      	b.n	800538e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005358:	78fb      	ldrb	r3, [r7, #3]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d115      	bne.n	800538a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800536a:	200a      	movs	r0, #10
 800536c:	f7fb ff0e 	bl	800118c <HAL_Delay>
      ms += 10U;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	330a      	adds	r3, #10
 8005374:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f93d 	bl	80055f6 <USB_GetMode>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d005      	beq.n	800538e <USB_SetCurrentMode+0x84>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2bc7      	cmp	r3, #199	@ 0xc7
 8005386:	d9f0      	bls.n	800536a <USB_SetCurrentMode+0x60>
 8005388:	e001      	b.n	800538e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e005      	b.n	800539a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2bc8      	cmp	r3, #200	@ 0xc8
 8005392:	d101      	bne.n	8005398 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e000      	b.n	800539a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b085      	sub	sp, #20
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
 80053aa:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80053ac:	2300      	movs	r3, #0
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	3301      	adds	r3, #1
 80053b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053bc:	d901      	bls.n	80053c2 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e01b      	b.n	80053fa <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	daf2      	bge.n	80053b0 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80053ca:	2300      	movs	r3, #0
 80053cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	019b      	lsls	r3, r3, #6
 80053d2:	f043 0220 	orr.w	r2, r3, #32
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	3301      	adds	r3, #1
 80053de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053e6:	d901      	bls.n	80053ec <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e006      	b.n	80053fa <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	f003 0320 	and.w	r3, r3, #32
 80053f4:	2b20      	cmp	r3, #32
 80053f6:	d0f0      	beq.n	80053da <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3714      	adds	r7, #20
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005406:	b480      	push	{r7}
 8005408:	b085      	sub	sp, #20
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800540e:	2300      	movs	r3, #0
 8005410:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	3301      	adds	r3, #1
 8005416:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800541e:	d901      	bls.n	8005424 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e018      	b.n	8005456 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	2b00      	cmp	r3, #0
 800542a:	daf2      	bge.n	8005412 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800542c:	2300      	movs	r3, #0
 800542e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2210      	movs	r2, #16
 8005434:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	3301      	adds	r3, #1
 800543a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005442:	d901      	bls.n	8005448 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e006      	b.n	8005456 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	f003 0310 	and.w	r3, r3, #16
 8005450:	2b10      	cmp	r3, #16
 8005452:	d0f0      	beq.n	8005436 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3714      	adds	r7, #20
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005462:	b480      	push	{r7}
 8005464:	b089      	sub	sp, #36	@ 0x24
 8005466:	af00      	add	r7, sp, #0
 8005468:	60f8      	str	r0, [r7, #12]
 800546a:	60b9      	str	r1, [r7, #8]
 800546c:	4611      	mov	r1, r2
 800546e:	461a      	mov	r2, r3
 8005470:	460b      	mov	r3, r1
 8005472:	71fb      	strb	r3, [r7, #7]
 8005474:	4613      	mov	r3, r2
 8005476:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005480:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005484:	2b00      	cmp	r3, #0
 8005486:	d123      	bne.n	80054d0 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005488:	88bb      	ldrh	r3, [r7, #4]
 800548a:	3303      	adds	r3, #3
 800548c:	089b      	lsrs	r3, r3, #2
 800548e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005490:	2300      	movs	r3, #0
 8005492:	61bb      	str	r3, [r7, #24]
 8005494:	e018      	b.n	80054c8 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005496:	79fb      	ldrb	r3, [r7, #7]
 8005498:	031a      	lsls	r2, r3, #12
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	4413      	add	r3, r2
 800549e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054a2:	461a      	mov	r2, r3
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6013      	str	r3, [r2, #0]
      pSrc++;
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	3301      	adds	r3, #1
 80054ae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	3301      	adds	r3, #1
 80054b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	3301      	adds	r3, #1
 80054ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	3301      	adds	r3, #1
 80054c0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	3301      	adds	r3, #1
 80054c6:	61bb      	str	r3, [r7, #24]
 80054c8:	69ba      	ldr	r2, [r7, #24]
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d3e2      	bcc.n	8005496 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3724      	adds	r7, #36	@ 0x24
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80054de:	b480      	push	{r7}
 80054e0:	b08b      	sub	sp, #44	@ 0x2c
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	60f8      	str	r0, [r7, #12]
 80054e6:	60b9      	str	r1, [r7, #8]
 80054e8:	4613      	mov	r3, r2
 80054ea:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80054f4:	88fb      	ldrh	r3, [r7, #6]
 80054f6:	089b      	lsrs	r3, r3, #2
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80054fc:	88fb      	ldrh	r3, [r7, #6]
 80054fe:	f003 0303 	and.w	r3, r3, #3
 8005502:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005504:	2300      	movs	r3, #0
 8005506:	623b      	str	r3, [r7, #32]
 8005508:	e014      	b.n	8005534 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005514:	601a      	str	r2, [r3, #0]
    pDest++;
 8005516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005518:	3301      	adds	r3, #1
 800551a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800551c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551e:	3301      	adds	r3, #1
 8005520:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005524:	3301      	adds	r3, #1
 8005526:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800552a:	3301      	adds	r3, #1
 800552c:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800552e:	6a3b      	ldr	r3, [r7, #32]
 8005530:	3301      	adds	r3, #1
 8005532:	623b      	str	r3, [r7, #32]
 8005534:	6a3a      	ldr	r2, [r7, #32]
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	429a      	cmp	r2, r3
 800553a:	d3e6      	bcc.n	800550a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800553c:	8bfb      	ldrh	r3, [r7, #30]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d01e      	beq.n	8005580 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005542:	2300      	movs	r3, #0
 8005544:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800554c:	461a      	mov	r2, r3
 800554e:	f107 0310 	add.w	r3, r7, #16
 8005552:	6812      	ldr	r2, [r2, #0]
 8005554:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	b2db      	uxtb	r3, r3
 800555c:	00db      	lsls	r3, r3, #3
 800555e:	fa22 f303 	lsr.w	r3, r2, r3
 8005562:	b2da      	uxtb	r2, r3
 8005564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005566:	701a      	strb	r2, [r3, #0]
      i++;
 8005568:	6a3b      	ldr	r3, [r7, #32]
 800556a:	3301      	adds	r3, #1
 800556c:	623b      	str	r3, [r7, #32]
      pDest++;
 800556e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005570:	3301      	adds	r3, #1
 8005572:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005574:	8bfb      	ldrh	r3, [r7, #30]
 8005576:	3b01      	subs	r3, #1
 8005578:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800557a:	8bfb      	ldrh	r3, [r7, #30]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1ea      	bne.n	8005556 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005582:	4618      	mov	r0, r3
 8005584:	372c      	adds	r7, #44	@ 0x2c
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr

0800558e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800558e:	b480      	push	{r7}
 8005590:	b085      	sub	sp, #20
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	4013      	ands	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80055a6:	68fb      	ldr	r3, [r7, #12]
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3714      	adds	r7, #20
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	460b      	mov	r3, r1
 80055be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80055c4:	78fb      	ldrb	r3, [r7, #3]
 80055c6:	015a      	lsls	r2, r3, #5
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80055d4:	78fb      	ldrb	r3, [r7, #3]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	4013      	ands	r3, r2
 80055e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80055e8:	68bb      	ldr	r3, [r7, #8]
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b083      	sub	sp, #12
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	f003 0301 	and.w	r3, r3, #1
}
 8005606:	4618      	mov	r0, r3
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr

08005612 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005612:	b480      	push	{r7}
 8005614:	b085      	sub	sp, #20
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800561a:	2300      	movs	r3, #0
 800561c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	3301      	adds	r3, #1
 8005622:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800562a:	d901      	bls.n	8005630 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e01b      	b.n	8005668 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	2b00      	cmp	r3, #0
 8005636:	daf2      	bge.n	800561e <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005638:	2300      	movs	r3, #0
 800563a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	f043 0201 	orr.w	r2, r3, #1
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	3301      	adds	r3, #1
 800564c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005654:	d901      	bls.n	800565a <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e006      	b.n	8005668 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	f003 0301 	and.w	r3, r3, #1
 8005662:	2b01      	cmp	r3, #1
 8005664:	d0f0      	beq.n	8005648 <USB_CoreReset+0x36>

  return HAL_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3714      	adds	r7, #20
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005674:	b084      	sub	sp, #16
 8005676:	b580      	push	{r7, lr}
 8005678:	b086      	sub	sp, #24
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
 800567e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005682:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005686:	2300      	movs	r3, #0
 8005688:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005694:	461a      	mov	r2, r3
 8005696:	2300      	movs	r3, #0
 8005698:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800569e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056aa:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056b6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d119      	bne.n	80056fe <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80056ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d10a      	bne.n	80056e8 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80056e0:	f043 0304 	orr.w	r3, r3, #4
 80056e4:	6013      	str	r3, [r2, #0]
 80056e6:	e014      	b.n	8005712 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80056f6:	f023 0304 	bic.w	r3, r3, #4
 80056fa:	6013      	str	r3, [r2, #0]
 80056fc:	e009      	b.n	8005712 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800570c:	f023 0304 	bic.w	r3, r3, #4
 8005710:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005712:	2110      	movs	r1, #16
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f7ff fe44 	bl	80053a2 <USB_FlushTxFifo>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d001      	beq.n	8005724 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f7ff fe6e 	bl	8005406 <USB_FlushRxFifo>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d001      	beq.n	8005734 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005734:	2300      	movs	r3, #0
 8005736:	613b      	str	r3, [r7, #16]
 8005738:	e015      	b.n	8005766 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	4413      	add	r3, r2
 8005742:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005746:	461a      	mov	r2, r3
 8005748:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800574c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	015a      	lsls	r2, r3, #5
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	4413      	add	r3, r2
 8005756:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800575a:	461a      	mov	r2, r3
 800575c:	2300      	movs	r3, #0
 800575e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	3301      	adds	r3, #1
 8005764:	613b      	str	r3, [r7, #16]
 8005766:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800576a:	461a      	mov	r2, r3
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	4293      	cmp	r3, r2
 8005770:	d3e3      	bcc.n	800573a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800577e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a18      	ldr	r2, [pc, #96]	@ (80057e4 <USB_HostInit+0x170>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d10b      	bne.n	80057a0 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800578e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a15      	ldr	r2, [pc, #84]	@ (80057e8 <USB_HostInit+0x174>)
 8005794:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a14      	ldr	r2, [pc, #80]	@ (80057ec <USB_HostInit+0x178>)
 800579a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800579e:	e009      	b.n	80057b4 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2280      	movs	r2, #128	@ 0x80
 80057a4:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a11      	ldr	r2, [pc, #68]	@ (80057f0 <USB_HostInit+0x17c>)
 80057aa:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a11      	ldr	r2, [pc, #68]	@ (80057f4 <USB_HostInit+0x180>)
 80057b0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80057b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d105      	bne.n	80057c8 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	f043 0210 	orr.w	r2, r3, #16
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	699a      	ldr	r2, [r3, #24]
 80057cc:	4b0a      	ldr	r3, [pc, #40]	@ (80057f8 <USB_HostInit+0x184>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80057d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3718      	adds	r7, #24
 80057da:	46bd      	mov	sp, r7
 80057dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057e0:	b004      	add	sp, #16
 80057e2:	4770      	bx	lr
 80057e4:	40040000 	.word	0x40040000
 80057e8:	01000200 	.word	0x01000200
 80057ec:	00e00300 	.word	0x00e00300
 80057f0:	00600080 	.word	0x00600080
 80057f4:	004000e0 	.word	0x004000e0
 80057f8:	a3200008 	.word	0xa3200008

080057fc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	460b      	mov	r3, r1
 8005806:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800581a:	f023 0303 	bic.w	r3, r3, #3
 800581e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	78fb      	ldrb	r3, [r7, #3]
 800582a:	f003 0303 	and.w	r3, r3, #3
 800582e:	68f9      	ldr	r1, [r7, #12]
 8005830:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005834:	4313      	orrs	r3, r2
 8005836:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005838:	78fb      	ldrb	r3, [r7, #3]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d107      	bne.n	800584e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005844:	461a      	mov	r2, r3
 8005846:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800584a:	6053      	str	r3, [r2, #4]
 800584c:	e00c      	b.n	8005868 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800584e:	78fb      	ldrb	r3, [r7, #3]
 8005850:	2b02      	cmp	r3, #2
 8005852:	d107      	bne.n	8005864 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800585a:	461a      	mov	r2, r3
 800585c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005860:	6053      	str	r3, [r2, #4]
 8005862:	e001      	b.n	8005868 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e000      	b.n	800586a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3714      	adds	r7, #20
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr

08005876 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005876:	b580      	push	{r7, lr}
 8005878:	b084      	sub	sp, #16
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005882:	2300      	movs	r3, #0
 8005884:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005896:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80058a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058a4:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80058a6:	2064      	movs	r0, #100	@ 0x64
 80058a8:	f7fb fc70 	bl	800118c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80058b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058b8:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80058ba:	200a      	movs	r0, #10
 80058bc:	f7fb fc66 	bl	800118c <HAL_Delay>

  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80058ca:	b480      	push	{r7}
 80058cc:	b085      	sub	sp, #20
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
 80058d2:	460b      	mov	r3, r1
 80058d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80058da:	2300      	movs	r3, #0
 80058dc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80058ee:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d109      	bne.n	800590e <USB_DriveVbus+0x44>
 80058fa:	78fb      	ldrb	r3, [r7, #3]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d106      	bne.n	800590e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005908:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800590c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005914:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005918:	d109      	bne.n	800592e <USB_DriveVbus+0x64>
 800591a:	78fb      	ldrb	r3, [r7, #3]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d106      	bne.n	800592e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005928:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800592c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	3714      	adds	r7, #20
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800593c:	b480      	push	{r7}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005948:	2300      	movs	r3, #0
 800594a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	0c5b      	lsrs	r3, r3, #17
 800595a:	f003 0303 	and.w	r3, r3, #3
}
 800595e:	4618      	mov	r0, r3
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800596a:	b480      	push	{r7}
 800596c:	b085      	sub	sp, #20
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	b29b      	uxth	r3, r3
}
 8005980:	4618      	mov	r0, r3
 8005982:	3714      	adds	r7, #20
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b088      	sub	sp, #32
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	4608      	mov	r0, r1
 8005996:	4611      	mov	r1, r2
 8005998:	461a      	mov	r2, r3
 800599a:	4603      	mov	r3, r0
 800599c:	70fb      	strb	r3, [r7, #3]
 800599e:	460b      	mov	r3, r1
 80059a0:	70bb      	strb	r3, [r7, #2]
 80059a2:	4613      	mov	r3, r2
 80059a4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80059a6:	2300      	movs	r3, #0
 80059a8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80059ae:	78fb      	ldrb	r3, [r7, #3]
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059ba:	461a      	mov	r2, r3
 80059bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80059c0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80059c2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80059c6:	2b03      	cmp	r3, #3
 80059c8:	d87c      	bhi.n	8005ac4 <USB_HC_Init+0x138>
 80059ca:	a201      	add	r2, pc, #4	@ (adr r2, 80059d0 <USB_HC_Init+0x44>)
 80059cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d0:	080059e1 	.word	0x080059e1
 80059d4:	08005a87 	.word	0x08005a87
 80059d8:	080059e1 	.word	0x080059e1
 80059dc:	08005a49 	.word	0x08005a49
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80059e0:	78fb      	ldrb	r3, [r7, #3]
 80059e2:	015a      	lsls	r2, r3, #5
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	4413      	add	r3, r2
 80059e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059ec:	461a      	mov	r2, r3
 80059ee:	f240 439d 	movw	r3, #1181	@ 0x49d
 80059f2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80059f4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	da10      	bge.n	8005a1e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80059fc:	78fb      	ldrb	r3, [r7, #3]
 80059fe:	015a      	lsls	r2, r3, #5
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	78fa      	ldrb	r2, [r7, #3]
 8005a0c:	0151      	lsls	r1, r2, #5
 8005a0e:	693a      	ldr	r2, [r7, #16]
 8005a10:	440a      	add	r2, r1
 8005a12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a1a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005a1c:	e055      	b.n	8005aca <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a6f      	ldr	r2, [pc, #444]	@ (8005be0 <USB_HC_Init+0x254>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d151      	bne.n	8005aca <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005a26:	78fb      	ldrb	r3, [r7, #3]
 8005a28:	015a      	lsls	r2, r3, #5
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	78fa      	ldrb	r2, [r7, #3]
 8005a36:	0151      	lsls	r1, r2, #5
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	440a      	add	r2, r1
 8005a3c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a40:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005a44:	60d3      	str	r3, [r2, #12]
      break;
 8005a46:	e040      	b.n	8005aca <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005a48:	78fb      	ldrb	r3, [r7, #3]
 8005a4a:	015a      	lsls	r2, r3, #5
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	4413      	add	r3, r2
 8005a50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a54:	461a      	mov	r2, r3
 8005a56:	f240 639d 	movw	r3, #1693	@ 0x69d
 8005a5a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005a5c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	da34      	bge.n	8005ace <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005a64:	78fb      	ldrb	r3, [r7, #3]
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	78fa      	ldrb	r2, [r7, #3]
 8005a74:	0151      	lsls	r1, r2, #5
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	440a      	add	r2, r1
 8005a7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a82:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005a84:	e023      	b.n	8005ace <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005a86:	78fb      	ldrb	r3, [r7, #3]
 8005a88:	015a      	lsls	r2, r3, #5
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a92:	461a      	mov	r2, r3
 8005a94:	f240 2325 	movw	r3, #549	@ 0x225
 8005a98:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005a9a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	da17      	bge.n	8005ad2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005aa2:	78fb      	ldrb	r3, [r7, #3]
 8005aa4:	015a      	lsls	r2, r3, #5
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	78fa      	ldrb	r2, [r7, #3]
 8005ab2:	0151      	lsls	r1, r2, #5
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	440a      	add	r2, r1
 8005ab8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005abc:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8005ac0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005ac2:	e006      	b.n	8005ad2 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	77fb      	strb	r3, [r7, #31]
      break;
 8005ac8:	e004      	b.n	8005ad4 <USB_HC_Init+0x148>
      break;
 8005aca:	bf00      	nop
 8005acc:	e002      	b.n	8005ad4 <USB_HC_Init+0x148>
      break;
 8005ace:	bf00      	nop
 8005ad0:	e000      	b.n	8005ad4 <USB_HC_Init+0x148>
      break;
 8005ad2:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005ad4:	78fb      	ldrb	r3, [r7, #3]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005ae6:	78fb      	ldrb	r3, [r7, #3]
 8005ae8:	015a      	lsls	r2, r3, #5
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	4413      	add	r3, r2
 8005aee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	78fa      	ldrb	r2, [r7, #3]
 8005af6:	0151      	lsls	r1, r2, #5
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	440a      	add	r2, r1
 8005afc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b00:	f043 0302 	orr.w	r3, r3, #2
 8005b04:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b0c:	699a      	ldr	r2, [r3, #24]
 8005b0e:	78fb      	ldrb	r3, [r7, #3]
 8005b10:	f003 030f 	and.w	r3, r3, #15
 8005b14:	2101      	movs	r1, #1
 8005b16:	fa01 f303 	lsl.w	r3, r1, r3
 8005b1a:	6939      	ldr	r1, [r7, #16]
 8005b1c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005b20:	4313      	orrs	r3, r2
 8005b22:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005b30:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	da03      	bge.n	8005b40 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005b38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b3c:	61bb      	str	r3, [r7, #24]
 8005b3e:	e001      	b.n	8005b44 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8005b40:	2300      	movs	r3, #0
 8005b42:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f7ff fef9 	bl	800593c <USB_GetHostSpeed>
 8005b4a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005b4c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d106      	bne.n	8005b62 <USB_HC_Init+0x1d6>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d003      	beq.n	8005b62 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005b5a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005b5e:	617b      	str	r3, [r7, #20]
 8005b60:	e001      	b.n	8005b66 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005b62:	2300      	movs	r3, #0
 8005b64:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005b66:	787b      	ldrb	r3, [r7, #1]
 8005b68:	059b      	lsls	r3, r3, #22
 8005b6a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005b6e:	78bb      	ldrb	r3, [r7, #2]
 8005b70:	02db      	lsls	r3, r3, #11
 8005b72:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005b76:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005b78:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005b7c:	049b      	lsls	r3, r3, #18
 8005b7e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005b82:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8005b84:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005b86:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005b8a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	431a      	orrs	r2, r3
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005b94:	78fa      	ldrb	r2, [r7, #3]
 8005b96:	0151      	lsls	r1, r2, #5
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	440a      	add	r2, r1
 8005b9c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005ba0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005ba4:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005ba6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005baa:	2b03      	cmp	r3, #3
 8005bac:	d003      	beq.n	8005bb6 <USB_HC_Init+0x22a>
 8005bae:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d10f      	bne.n	8005bd6 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005bb6:	78fb      	ldrb	r3, [r7, #3]
 8005bb8:	015a      	lsls	r2, r3, #5
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	78fa      	ldrb	r2, [r7, #3]
 8005bc6:	0151      	lsls	r1, r2, #5
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	440a      	add	r2, r1
 8005bcc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bd0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005bd4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005bd6:	7ffb      	ldrb	r3, [r7, #31]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3720      	adds	r7, #32
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	40040000 	.word	0x40040000

08005be4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b08c      	sub	sp, #48	@ 0x30
 8005be8:	af02      	add	r7, sp, #8
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	785b      	ldrb	r3, [r3, #1]
 8005bfa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005bfc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005c00:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	4a5d      	ldr	r2, [pc, #372]	@ (8005d7c <USB_HC_StartXfer+0x198>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d12f      	bne.n	8005c6a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8005c0a:	79fb      	ldrb	r3, [r7, #7]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d11c      	bne.n	8005c4a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	7c9b      	ldrb	r3, [r3, #18]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d003      	beq.n	8005c20 <USB_HC_StartXfer+0x3c>
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	7c9b      	ldrb	r3, [r3, #18]
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d124      	bne.n	8005c6a <USB_HC_StartXfer+0x86>
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	799b      	ldrb	r3, [r3, #6]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d120      	bne.n	8005c6a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	015a      	lsls	r2, r3, #5
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	69fa      	ldr	r2, [r7, #28]
 8005c38:	0151      	lsls	r1, r2, #5
 8005c3a:	6a3a      	ldr	r2, [r7, #32]
 8005c3c:	440a      	add	r2, r1
 8005c3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c46:	60d3      	str	r3, [r2, #12]
 8005c48:	e00f      	b.n	8005c6a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	791b      	ldrb	r3, [r3, #4]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d10b      	bne.n	8005c6a <USB_HC_StartXfer+0x86>
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	795b      	ldrb	r3, [r3, #5]
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d107      	bne.n	8005c6a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	785b      	ldrb	r3, [r3, #1]
 8005c5e:	4619      	mov	r1, r3
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f000 fb6b 	bl	800633c <USB_DoPing>
        return HAL_OK;
 8005c66:	2300      	movs	r3, #0
 8005c68:	e232      	b.n	80060d0 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	799b      	ldrb	r3, [r3, #6]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d158      	bne.n	8005d24 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8005c72:	2301      	movs	r3, #1
 8005c74:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	78db      	ldrb	r3, [r3, #3]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d007      	beq.n	8005c8e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005c7e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	8a92      	ldrh	r2, [r2, #20]
 8005c84:	fb03 f202 	mul.w	r2, r3, r2
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	61da      	str	r2, [r3, #28]
 8005c8c:	e07c      	b.n	8005d88 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	7c9b      	ldrb	r3, [r3, #18]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d130      	bne.n	8005cf8 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	2bbc      	cmp	r3, #188	@ 0xbc
 8005c9c:	d918      	bls.n	8005cd0 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	8a9b      	ldrh	r3, [r3, #20]
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	69da      	ldr	r2, [r3, #28]
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d003      	beq.n	8005cc0 <USB_HC_StartXfer+0xdc>
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d103      	bne.n	8005cc8 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	60da      	str	r2, [r3, #12]
 8005cc6:	e05f      	b.n	8005d88 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	60da      	str	r2, [r3, #12]
 8005cce:	e05b      	b.n	8005d88 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	6a1a      	ldr	r2, [r3, #32]
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d007      	beq.n	8005cf0 <USB_HC_StartXfer+0x10c>
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d003      	beq.n	8005cf0 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	2204      	movs	r2, #4
 8005cec:	60da      	str	r2, [r3, #12]
 8005cee:	e04b      	b.n	8005d88 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	2203      	movs	r2, #3
 8005cf4:	60da      	str	r2, [r3, #12]
 8005cf6:	e047      	b.n	8005d88 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8005cf8:	79fb      	ldrb	r3, [r7, #7]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d10d      	bne.n	8005d1a <USB_HC_StartXfer+0x136>
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	8a92      	ldrh	r2, [r2, #20]
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d907      	bls.n	8005d1a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005d0a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005d0c:	68ba      	ldr	r2, [r7, #8]
 8005d0e:	8a92      	ldrh	r2, [r2, #20]
 8005d10:	fb03 f202 	mul.w	r2, r3, r2
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	61da      	str	r2, [r3, #28]
 8005d18:	e036      	b.n	8005d88 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	6a1a      	ldr	r2, [r3, #32]
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	61da      	str	r2, [r3, #28]
 8005d22:	e031      	b.n	8005d88 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	6a1b      	ldr	r3, [r3, #32]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d018      	beq.n	8005d5e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	6a1b      	ldr	r3, [r3, #32]
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	8a92      	ldrh	r2, [r2, #20]
 8005d34:	4413      	add	r3, r2
 8005d36:	3b01      	subs	r3, #1
 8005d38:	68ba      	ldr	r2, [r7, #8]
 8005d3a:	8a92      	ldrh	r2, [r2, #20]
 8005d3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d40:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8005d42:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005d44:	8b7b      	ldrh	r3, [r7, #26]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d90b      	bls.n	8005d62 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8005d4a:	8b7b      	ldrh	r3, [r7, #26]
 8005d4c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005d4e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005d50:	68ba      	ldr	r2, [r7, #8]
 8005d52:	8a92      	ldrh	r2, [r2, #20]
 8005d54:	fb03 f202 	mul.w	r2, r3, r2
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	61da      	str	r2, [r3, #28]
 8005d5c:	e001      	b.n	8005d62 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	78db      	ldrb	r3, [r3, #3]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00a      	beq.n	8005d80 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005d6a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005d6c:	68ba      	ldr	r2, [r7, #8]
 8005d6e:	8a92      	ldrh	r2, [r2, #20]
 8005d70:	fb03 f202 	mul.w	r2, r3, r2
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	61da      	str	r2, [r3, #28]
 8005d78:	e006      	b.n	8005d88 <USB_HC_StartXfer+0x1a4>
 8005d7a:	bf00      	nop
 8005d7c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	6a1a      	ldr	r2, [r3, #32]
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	69db      	ldr	r3, [r3, #28]
 8005d8c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005d90:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005d92:	04d9      	lsls	r1, r3, #19
 8005d94:	4ba3      	ldr	r3, [pc, #652]	@ (8006024 <USB_HC_StartXfer+0x440>)
 8005d96:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d98:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	7d9b      	ldrb	r3, [r3, #22]
 8005d9e:	075b      	lsls	r3, r3, #29
 8005da0:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005da4:	69f9      	ldr	r1, [r7, #28]
 8005da6:	0148      	lsls	r0, r1, #5
 8005da8:	6a39      	ldr	r1, [r7, #32]
 8005daa:	4401      	add	r1, r0
 8005dac:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005db0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005db2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005db4:	79fb      	ldrb	r3, [r7, #7]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d009      	beq.n	8005dce <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	6999      	ldr	r1, [r3, #24]
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	015a      	lsls	r2, r3, #5
 8005dc2:	6a3b      	ldr	r3, [r7, #32]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dca:	460a      	mov	r2, r1
 8005dcc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005dce:	6a3b      	ldr	r3, [r7, #32]
 8005dd0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	bf0c      	ite	eq
 8005dde:	2301      	moveq	r3, #1
 8005de0:	2300      	movne	r3, #0
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	015a      	lsls	r2, r3, #5
 8005dea:	6a3b      	ldr	r3, [r7, #32]
 8005dec:	4413      	add	r3, r2
 8005dee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	69fa      	ldr	r2, [r7, #28]
 8005df6:	0151      	lsls	r1, r2, #5
 8005df8:	6a3a      	ldr	r2, [r7, #32]
 8005dfa:	440a      	add	r2, r1
 8005dfc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e00:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005e04:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	015a      	lsls	r2, r3, #5
 8005e0a:	6a3b      	ldr	r3, [r7, #32]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	7e7b      	ldrb	r3, [r7, #25]
 8005e16:	075b      	lsls	r3, r3, #29
 8005e18:	69f9      	ldr	r1, [r7, #28]
 8005e1a:	0148      	lsls	r0, r1, #5
 8005e1c:	6a39      	ldr	r1, [r7, #32]
 8005e1e:	4401      	add	r1, r0
 8005e20:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8005e24:	4313      	orrs	r3, r2
 8005e26:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	799b      	ldrb	r3, [r3, #6]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	f040 80c3 	bne.w	8005fb8 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	7c5b      	ldrb	r3, [r3, #17]
 8005e36:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005e38:	68ba      	ldr	r2, [r7, #8]
 8005e3a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	69fa      	ldr	r2, [r7, #28]
 8005e40:	0151      	lsls	r1, r2, #5
 8005e42:	6a3a      	ldr	r2, [r7, #32]
 8005e44:	440a      	add	r2, r1
 8005e46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005e4a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005e4e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	015a      	lsls	r2, r3, #5
 8005e54:	6a3b      	ldr	r3, [r7, #32]
 8005e56:	4413      	add	r3, r2
 8005e58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	69fa      	ldr	r2, [r7, #28]
 8005e60:	0151      	lsls	r1, r2, #5
 8005e62:	6a3a      	ldr	r2, [r7, #32]
 8005e64:	440a      	add	r2, r1
 8005e66:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e6a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005e6e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	79db      	ldrb	r3, [r3, #7]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d123      	bne.n	8005ec0 <USB_HC_StartXfer+0x2dc>
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	78db      	ldrb	r3, [r3, #3]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d11f      	bne.n	8005ec0 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	015a      	lsls	r2, r3, #5
 8005e84:	6a3b      	ldr	r3, [r7, #32]
 8005e86:	4413      	add	r3, r2
 8005e88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	69fa      	ldr	r2, [r7, #28]
 8005e90:	0151      	lsls	r1, r2, #5
 8005e92:	6a3a      	ldr	r2, [r7, #32]
 8005e94:	440a      	add	r2, r1
 8005e96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e9e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	6a3b      	ldr	r3, [r7, #32]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	69fa      	ldr	r2, [r7, #28]
 8005eb0:	0151      	lsls	r1, r2, #5
 8005eb2:	6a3a      	ldr	r2, [r7, #32]
 8005eb4:	440a      	add	r2, r1
 8005eb6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005eba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ebe:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	7c9b      	ldrb	r3, [r3, #18]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d003      	beq.n	8005ed0 <USB_HC_StartXfer+0x2ec>
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	7c9b      	ldrb	r3, [r3, #18]
 8005ecc:	2b03      	cmp	r3, #3
 8005ece:	d117      	bne.n	8005f00 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d113      	bne.n	8005f00 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	78db      	ldrb	r3, [r3, #3]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d10f      	bne.n	8005f00 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	015a      	lsls	r2, r3, #5
 8005ee4:	6a3b      	ldr	r3, [r7, #32]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	69fa      	ldr	r2, [r7, #28]
 8005ef0:	0151      	lsls	r1, r2, #5
 8005ef2:	6a3a      	ldr	r2, [r7, #32]
 8005ef4:	440a      	add	r2, r1
 8005ef6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005efa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005efe:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	7c9b      	ldrb	r3, [r3, #18]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d162      	bne.n	8005fce <USB_HC_StartXfer+0x3ea>
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	78db      	ldrb	r3, [r3, #3]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d15e      	bne.n	8005fce <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	3b01      	subs	r3, #1
 8005f16:	2b03      	cmp	r3, #3
 8005f18:	d858      	bhi.n	8005fcc <USB_HC_StartXfer+0x3e8>
 8005f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f20 <USB_HC_StartXfer+0x33c>)
 8005f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f20:	08005f31 	.word	0x08005f31
 8005f24:	08005f53 	.word	0x08005f53
 8005f28:	08005f75 	.word	0x08005f75
 8005f2c:	08005f97 	.word	0x08005f97
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	015a      	lsls	r2, r3, #5
 8005f34:	6a3b      	ldr	r3, [r7, #32]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	69fa      	ldr	r2, [r7, #28]
 8005f40:	0151      	lsls	r1, r2, #5
 8005f42:	6a3a      	ldr	r2, [r7, #32]
 8005f44:	440a      	add	r2, r1
 8005f46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f4e:	6053      	str	r3, [r2, #4]
          break;
 8005f50:	e03d      	b.n	8005fce <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	015a      	lsls	r2, r3, #5
 8005f56:	6a3b      	ldr	r3, [r7, #32]
 8005f58:	4413      	add	r3, r2
 8005f5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	69fa      	ldr	r2, [r7, #28]
 8005f62:	0151      	lsls	r1, r2, #5
 8005f64:	6a3a      	ldr	r2, [r7, #32]
 8005f66:	440a      	add	r2, r1
 8005f68:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f6c:	f043 030e 	orr.w	r3, r3, #14
 8005f70:	6053      	str	r3, [r2, #4]
          break;
 8005f72:	e02c      	b.n	8005fce <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	015a      	lsls	r2, r3, #5
 8005f78:	6a3b      	ldr	r3, [r7, #32]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	69fa      	ldr	r2, [r7, #28]
 8005f84:	0151      	lsls	r1, r2, #5
 8005f86:	6a3a      	ldr	r2, [r7, #32]
 8005f88:	440a      	add	r2, r1
 8005f8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005f92:	6053      	str	r3, [r2, #4]
          break;
 8005f94:	e01b      	b.n	8005fce <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	015a      	lsls	r2, r3, #5
 8005f9a:	6a3b      	ldr	r3, [r7, #32]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	69fa      	ldr	r2, [r7, #28]
 8005fa6:	0151      	lsls	r1, r2, #5
 8005fa8:	6a3a      	ldr	r2, [r7, #32]
 8005faa:	440a      	add	r2, r1
 8005fac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fb0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005fb4:	6053      	str	r3, [r2, #4]
          break;
 8005fb6:	e00a      	b.n	8005fce <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	6a3b      	ldr	r3, [r7, #32]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	6053      	str	r3, [r2, #4]
 8005fca:	e000      	b.n	8005fce <USB_HC_StartXfer+0x3ea>
          break;
 8005fcc:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	015a      	lsls	r2, r3, #5
 8005fd2:	6a3b      	ldr	r3, [r7, #32]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005fe4:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	78db      	ldrb	r3, [r3, #3]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d004      	beq.n	8005ff8 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ff4:	613b      	str	r3, [r7, #16]
 8005ff6:	e003      	b.n	8006000 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005ffe:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006006:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	015a      	lsls	r2, r3, #5
 800600c:	6a3b      	ldr	r3, [r7, #32]
 800600e:	4413      	add	r3, r2
 8006010:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006014:	461a      	mov	r2, r3
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800601a:	79fb      	ldrb	r3, [r7, #7]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d003      	beq.n	8006028 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006020:	2300      	movs	r3, #0
 8006022:	e055      	b.n	80060d0 <USB_HC_StartXfer+0x4ec>
 8006024:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	78db      	ldrb	r3, [r3, #3]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d14e      	bne.n	80060ce <USB_HC_StartXfer+0x4ea>
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	6a1b      	ldr	r3, [r3, #32]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d04a      	beq.n	80060ce <USB_HC_StartXfer+0x4ea>
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	79db      	ldrb	r3, [r3, #7]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d146      	bne.n	80060ce <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	7c9b      	ldrb	r3, [r3, #18]
 8006044:	2b03      	cmp	r3, #3
 8006046:	d831      	bhi.n	80060ac <USB_HC_StartXfer+0x4c8>
 8006048:	a201      	add	r2, pc, #4	@ (adr r2, 8006050 <USB_HC_StartXfer+0x46c>)
 800604a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800604e:	bf00      	nop
 8006050:	08006061 	.word	0x08006061
 8006054:	08006085 	.word	0x08006085
 8006058:	08006061 	.word	0x08006061
 800605c:	08006085 	.word	0x08006085
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	6a1b      	ldr	r3, [r3, #32]
 8006064:	3303      	adds	r3, #3
 8006066:	089b      	lsrs	r3, r3, #2
 8006068:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800606a:	8afa      	ldrh	r2, [r7, #22]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006070:	b29b      	uxth	r3, r3
 8006072:	429a      	cmp	r2, r3
 8006074:	d91c      	bls.n	80060b0 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	f043 0220 	orr.w	r2, r3, #32
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	619a      	str	r2, [r3, #24]
        }
        break;
 8006082:	e015      	b.n	80060b0 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	6a1b      	ldr	r3, [r3, #32]
 8006088:	3303      	adds	r3, #3
 800608a:	089b      	lsrs	r3, r3, #2
 800608c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800608e:	8afa      	ldrh	r2, [r7, #22]
 8006090:	6a3b      	ldr	r3, [r7, #32]
 8006092:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	b29b      	uxth	r3, r3
 800609a:	429a      	cmp	r2, r3
 800609c:	d90a      	bls.n	80060b4 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	619a      	str	r2, [r3, #24]
        }
        break;
 80060aa:	e003      	b.n	80060b4 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80060ac:	bf00      	nop
 80060ae:	e002      	b.n	80060b6 <USB_HC_StartXfer+0x4d2>
        break;
 80060b0:	bf00      	nop
 80060b2:	e000      	b.n	80060b6 <USB_HC_StartXfer+0x4d2>
        break;
 80060b4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	6999      	ldr	r1, [r3, #24]
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	785a      	ldrb	r2, [r3, #1]
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	2000      	movs	r0, #0
 80060c6:	9000      	str	r0, [sp, #0]
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f7ff f9ca 	bl	8005462 <USB_WritePacket>
  }

  return HAL_OK;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3728      	adds	r7, #40	@ 0x28
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80060d8:	b480      	push	{r7}
 80060da:	b085      	sub	sp, #20
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80060ea:	695b      	ldr	r3, [r3, #20]
 80060ec:	b29b      	uxth	r3, r3
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3714      	adds	r7, #20
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr

080060fa <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80060fa:	b480      	push	{r7}
 80060fc:	b089      	sub	sp, #36	@ 0x24
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
 8006102:	460b      	mov	r3, r1
 8006104:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800610a:	78fb      	ldrb	r3, [r7, #3]
 800610c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800610e:	2300      	movs	r3, #0
 8006110:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	015a      	lsls	r2, r3, #5
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	4413      	add	r3, r2
 800611a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	0c9b      	lsrs	r3, r3, #18
 8006122:	f003 0303 	and.w	r3, r3, #3
 8006126:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	015a      	lsls	r2, r3, #5
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	4413      	add	r3, r2
 8006130:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	0fdb      	lsrs	r3, r3, #31
 8006138:	f003 0301 	and.w	r3, r3, #1
 800613c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	015a      	lsls	r2, r3, #5
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	4413      	add	r3, r2
 8006146:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	0fdb      	lsrs	r3, r3, #31
 800614e:	f003 0301 	and.w	r3, r3, #1
 8006152:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f003 0320 	and.w	r3, r3, #32
 800615c:	2b20      	cmp	r3, #32
 800615e:	d10d      	bne.n	800617c <USB_HC_Halt+0x82>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10a      	bne.n	800617c <USB_HC_Halt+0x82>
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d005      	beq.n	8006178 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	2b01      	cmp	r3, #1
 8006170:	d002      	beq.n	8006178 <USB_HC_Halt+0x7e>
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	2b03      	cmp	r3, #3
 8006176:	d101      	bne.n	800617c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006178:	2300      	movs	r3, #0
 800617a:	e0d8      	b.n	800632e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d002      	beq.n	8006188 <USB_HC_Halt+0x8e>
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	2b02      	cmp	r3, #2
 8006186:	d173      	bne.n	8006270 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	015a      	lsls	r2, r3, #5
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	4413      	add	r3, r2
 8006190:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	69ba      	ldr	r2, [r7, #24]
 8006198:	0151      	lsls	r1, r2, #5
 800619a:	69fa      	ldr	r2, [r7, #28]
 800619c:	440a      	add	r2, r1
 800619e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80061a6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f003 0320 	and.w	r3, r3, #32
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d14a      	bne.n	800624a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d133      	bne.n	8006228 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	015a      	lsls	r2, r3, #5
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	4413      	add	r3, r2
 80061c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	69ba      	ldr	r2, [r7, #24]
 80061d0:	0151      	lsls	r1, r2, #5
 80061d2:	69fa      	ldr	r2, [r7, #28]
 80061d4:	440a      	add	r2, r1
 80061d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80061de:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	015a      	lsls	r2, r3, #5
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	69ba      	ldr	r2, [r7, #24]
 80061f0:	0151      	lsls	r1, r2, #5
 80061f2:	69fa      	ldr	r2, [r7, #28]
 80061f4:	440a      	add	r2, r1
 80061f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80061fe:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	3301      	adds	r3, #1
 8006204:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800620c:	d82e      	bhi.n	800626c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	015a      	lsls	r2, r3, #5
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	4413      	add	r3, r2
 8006216:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006220:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006224:	d0ec      	beq.n	8006200 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006226:	e081      	b.n	800632c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	015a      	lsls	r2, r3, #5
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	4413      	add	r3, r2
 8006230:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	69ba      	ldr	r2, [r7, #24]
 8006238:	0151      	lsls	r1, r2, #5
 800623a:	69fa      	ldr	r2, [r7, #28]
 800623c:	440a      	add	r2, r1
 800623e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006242:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006246:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006248:	e070      	b.n	800632c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	015a      	lsls	r2, r3, #5
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	4413      	add	r3, r2
 8006252:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	69ba      	ldr	r2, [r7, #24]
 800625a:	0151      	lsls	r1, r2, #5
 800625c:	69fa      	ldr	r2, [r7, #28]
 800625e:	440a      	add	r2, r1
 8006260:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006264:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006268:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800626a:	e05f      	b.n	800632c <USB_HC_Halt+0x232>
            break;
 800626c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800626e:	e05d      	b.n	800632c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	015a      	lsls	r2, r3, #5
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	4413      	add	r3, r2
 8006278:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	69ba      	ldr	r2, [r7, #24]
 8006280:	0151      	lsls	r1, r2, #5
 8006282:	69fa      	ldr	r2, [r7, #28]
 8006284:	440a      	add	r2, r1
 8006286:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800628a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800628e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d133      	bne.n	8006308 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	015a      	lsls	r2, r3, #5
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	4413      	add	r3, r2
 80062a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	69ba      	ldr	r2, [r7, #24]
 80062b0:	0151      	lsls	r1, r2, #5
 80062b2:	69fa      	ldr	r2, [r7, #28]
 80062b4:	440a      	add	r2, r1
 80062b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80062ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80062be:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	015a      	lsls	r2, r3, #5
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	4413      	add	r3, r2
 80062c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	69ba      	ldr	r2, [r7, #24]
 80062d0:	0151      	lsls	r1, r2, #5
 80062d2:	69fa      	ldr	r2, [r7, #28]
 80062d4:	440a      	add	r2, r1
 80062d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80062da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80062de:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	3301      	adds	r3, #1
 80062e4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80062ec:	d81d      	bhi.n	800632a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	015a      	lsls	r2, r3, #5
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	4413      	add	r3, r2
 80062f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006300:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006304:	d0ec      	beq.n	80062e0 <USB_HC_Halt+0x1e6>
 8006306:	e011      	b.n	800632c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	015a      	lsls	r2, r3, #5
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	4413      	add	r3, r2
 8006310:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	69ba      	ldr	r2, [r7, #24]
 8006318:	0151      	lsls	r1, r2, #5
 800631a:	69fa      	ldr	r2, [r7, #28]
 800631c:	440a      	add	r2, r1
 800631e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006322:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006326:	6013      	str	r3, [r2, #0]
 8006328:	e000      	b.n	800632c <USB_HC_Halt+0x232>
          break;
 800632a:	bf00      	nop
    }
  }

  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3724      	adds	r7, #36	@ 0x24
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
	...

0800633c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800633c:	b480      	push	{r7}
 800633e:	b087      	sub	sp, #28
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	460b      	mov	r3, r1
 8006346:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800634c:	78fb      	ldrb	r3, [r7, #3]
 800634e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006350:	2301      	movs	r3, #1
 8006352:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	04da      	lsls	r2, r3, #19
 8006358:	4b15      	ldr	r3, [pc, #84]	@ (80063b0 <USB_DoPing+0x74>)
 800635a:	4013      	ands	r3, r2
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	0151      	lsls	r1, r2, #5
 8006360:	697a      	ldr	r2, [r7, #20]
 8006362:	440a      	add	r2, r1
 8006364:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006368:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800636c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	015a      	lsls	r2, r3, #5
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	4413      	add	r3, r2
 8006376:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006384:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800638c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	015a      	lsls	r2, r3, #5
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	4413      	add	r3, r2
 8006396:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800639a:	461a      	mov	r2, r3
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	371c      	adds	r7, #28
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop
 80063b0:	1ff80000 	.word	0x1ff80000

080063b4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b088      	sub	sp, #32
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80063bc:	2300      	movs	r3, #0
 80063be:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80063c4:	2300      	movs	r3, #0
 80063c6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f7fe ff8d 	bl	80052e8 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80063ce:	2110      	movs	r1, #16
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f7fe ffe6 	bl	80053a2 <USB_FlushTxFifo>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d001      	beq.n	80063e0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f7ff f810 	bl	8005406 <USB_FlushRxFifo>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d001      	beq.n	80063f0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80063f0:	2300      	movs	r3, #0
 80063f2:	61bb      	str	r3, [r7, #24]
 80063f4:	e01f      	b.n	8006436 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	015a      	lsls	r2, r3, #5
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	4413      	add	r3, r2
 80063fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800640c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006414:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800641c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	015a      	lsls	r2, r3, #5
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	4413      	add	r3, r2
 8006426:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800642a:	461a      	mov	r2, r3
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	3301      	adds	r3, #1
 8006434:	61bb      	str	r3, [r7, #24]
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	2b0f      	cmp	r3, #15
 800643a:	d9dc      	bls.n	80063f6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800643c:	2300      	movs	r3, #0
 800643e:	61bb      	str	r3, [r7, #24]
 8006440:	e034      	b.n	80064ac <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	015a      	lsls	r2, r3, #5
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	4413      	add	r3, r2
 800644a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006458:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006460:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006468:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	015a      	lsls	r2, r3, #5
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	4413      	add	r3, r2
 8006472:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006476:	461a      	mov	r2, r3
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	3301      	adds	r3, #1
 8006480:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006488:	d80c      	bhi.n	80064a4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	015a      	lsls	r2, r3, #5
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	4413      	add	r3, r2
 8006492:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800649c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064a0:	d0ec      	beq.n	800647c <USB_StopHost+0xc8>
 80064a2:	e000      	b.n	80064a6 <USB_StopHost+0xf2>
        break;
 80064a4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	3301      	adds	r3, #1
 80064aa:	61bb      	str	r3, [r7, #24]
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	2b0f      	cmp	r3, #15
 80064b0:	d9c7      	bls.n	8006442 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064b8:	461a      	mov	r2, r3
 80064ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80064be:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80064c6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f7fe fefc 	bl	80052c6 <USB_EnableGlobalInt>

  return ret;
 80064ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3720      	adds	r7, #32
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80064d8:	b590      	push	{r4, r7, lr}
 80064da:	b089      	sub	sp, #36	@ 0x24
 80064dc:	af04      	add	r7, sp, #16
 80064de:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80064e0:	2301      	movs	r3, #1
 80064e2:	2202      	movs	r2, #2
 80064e4:	2102      	movs	r1, #2
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 fc85 	bl	8006df6 <USBH_FindInterface>
 80064ec:	4603      	mov	r3, r0
 80064ee:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80064f0:	7bfb      	ldrb	r3, [r7, #15]
 80064f2:	2bff      	cmp	r3, #255	@ 0xff
 80064f4:	d002      	beq.n	80064fc <USBH_CDC_InterfaceInit+0x24>
 80064f6:	7bfb      	ldrb	r3, [r7, #15]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d901      	bls.n	8006500 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80064fc:	2302      	movs	r3, #2
 80064fe:	e13d      	b.n	800677c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006500:	7bfb      	ldrb	r3, [r7, #15]
 8006502:	4619      	mov	r1, r3
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 fc5a 	bl	8006dbe <USBH_SelectInterface>
 800650a:	4603      	mov	r3, r0
 800650c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800650e:	7bbb      	ldrb	r3, [r7, #14]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d001      	beq.n	8006518 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006514:	2302      	movs	r3, #2
 8006516:	e131      	b.n	800677c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800651e:	2050      	movs	r0, #80	@ 0x50
 8006520:	f002 fb64 	bl	8008bec <malloc>
 8006524:	4603      	mov	r3, r0
 8006526:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800652e:	69db      	ldr	r3, [r3, #28]
 8006530:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d101      	bne.n	800653c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006538:	2302      	movs	r3, #2
 800653a:	e11f      	b.n	800677c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800653c:	2250      	movs	r2, #80	@ 0x50
 800653e:	2100      	movs	r1, #0
 8006540:	68b8      	ldr	r0, [r7, #8]
 8006542:	f002 fc11 	bl	8008d68 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006546:	7bfb      	ldrb	r3, [r7, #15]
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	211a      	movs	r1, #26
 800654c:	fb01 f303 	mul.w	r3, r1, r3
 8006550:	4413      	add	r3, r2
 8006552:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	b25b      	sxtb	r3, r3
 800655a:	2b00      	cmp	r3, #0
 800655c:	da15      	bge.n	800658a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800655e:	7bfb      	ldrb	r3, [r7, #15]
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	211a      	movs	r1, #26
 8006564:	fb01 f303 	mul.w	r3, r1, r3
 8006568:	4413      	add	r3, r2
 800656a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800656e:	781a      	ldrb	r2, [r3, #0]
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006574:	7bfb      	ldrb	r3, [r7, #15]
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	211a      	movs	r1, #26
 800657a:	fb01 f303 	mul.w	r3, r1, r3
 800657e:	4413      	add	r3, r2
 8006580:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006584:	881a      	ldrh	r2, [r3, #0]
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	785b      	ldrb	r3, [r3, #1]
 800658e:	4619      	mov	r1, r3
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f001 ffbe 	bl	8008512 <USBH_AllocPipe>
 8006596:	4603      	mov	r3, r0
 8006598:	461a      	mov	r2, r3
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	7819      	ldrb	r1, [r3, #0]
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	7858      	ldrb	r0, [r3, #1]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80065b2:	68ba      	ldr	r2, [r7, #8]
 80065b4:	8952      	ldrh	r2, [r2, #10]
 80065b6:	9202      	str	r2, [sp, #8]
 80065b8:	2203      	movs	r2, #3
 80065ba:	9201      	str	r2, [sp, #4]
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	4623      	mov	r3, r4
 80065c0:	4602      	mov	r2, r0
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f001 ff76 	bl	80084b4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	2200      	movs	r2, #0
 80065ce:	4619      	mov	r1, r3
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f002 fa85 	bl	8008ae0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80065d6:	2300      	movs	r3, #0
 80065d8:	2200      	movs	r2, #0
 80065da:	210a      	movs	r1, #10
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 fc0a 	bl	8006df6 <USBH_FindInterface>
 80065e2:	4603      	mov	r3, r0
 80065e4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80065e6:	7bfb      	ldrb	r3, [r7, #15]
 80065e8:	2bff      	cmp	r3, #255	@ 0xff
 80065ea:	d002      	beq.n	80065f2 <USBH_CDC_InterfaceInit+0x11a>
 80065ec:	7bfb      	ldrb	r3, [r7, #15]
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d901      	bls.n	80065f6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80065f2:	2302      	movs	r3, #2
 80065f4:	e0c2      	b.n	800677c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80065f6:	7bfb      	ldrb	r3, [r7, #15]
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	211a      	movs	r1, #26
 80065fc:	fb01 f303 	mul.w	r3, r1, r3
 8006600:	4413      	add	r3, r2
 8006602:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	b25b      	sxtb	r3, r3
 800660a:	2b00      	cmp	r3, #0
 800660c:	da16      	bge.n	800663c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800660e:	7bfb      	ldrb	r3, [r7, #15]
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	211a      	movs	r1, #26
 8006614:	fb01 f303 	mul.w	r3, r1, r3
 8006618:	4413      	add	r3, r2
 800661a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800661e:	781a      	ldrb	r2, [r3, #0]
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006624:	7bfb      	ldrb	r3, [r7, #15]
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	211a      	movs	r1, #26
 800662a:	fb01 f303 	mul.w	r3, r1, r3
 800662e:	4413      	add	r3, r2
 8006630:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006634:	881a      	ldrh	r2, [r3, #0]
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	835a      	strh	r2, [r3, #26]
 800663a:	e015      	b.n	8006668 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800663c:	7bfb      	ldrb	r3, [r7, #15]
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	211a      	movs	r1, #26
 8006642:	fb01 f303 	mul.w	r3, r1, r3
 8006646:	4413      	add	r3, r2
 8006648:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800664c:	781a      	ldrb	r2, [r3, #0]
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006652:	7bfb      	ldrb	r3, [r7, #15]
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	211a      	movs	r1, #26
 8006658:	fb01 f303 	mul.w	r3, r1, r3
 800665c:	4413      	add	r3, r2
 800665e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006662:	881a      	ldrh	r2, [r3, #0]
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006668:	7bfb      	ldrb	r3, [r7, #15]
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	211a      	movs	r1, #26
 800666e:	fb01 f303 	mul.w	r3, r1, r3
 8006672:	4413      	add	r3, r2
 8006674:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	b25b      	sxtb	r3, r3
 800667c:	2b00      	cmp	r3, #0
 800667e:	da16      	bge.n	80066ae <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006680:	7bfb      	ldrb	r3, [r7, #15]
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	211a      	movs	r1, #26
 8006686:	fb01 f303 	mul.w	r3, r1, r3
 800668a:	4413      	add	r3, r2
 800668c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006690:	781a      	ldrb	r2, [r3, #0]
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006696:	7bfb      	ldrb	r3, [r7, #15]
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	211a      	movs	r1, #26
 800669c:	fb01 f303 	mul.w	r3, r1, r3
 80066a0:	4413      	add	r3, r2
 80066a2:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80066a6:	881a      	ldrh	r2, [r3, #0]
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	835a      	strh	r2, [r3, #26]
 80066ac:	e015      	b.n	80066da <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80066ae:	7bfb      	ldrb	r3, [r7, #15]
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	211a      	movs	r1, #26
 80066b4:	fb01 f303 	mul.w	r3, r1, r3
 80066b8:	4413      	add	r3, r2
 80066ba:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80066be:	781a      	ldrb	r2, [r3, #0]
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	211a      	movs	r1, #26
 80066ca:	fb01 f303 	mul.w	r3, r1, r3
 80066ce:	4413      	add	r3, r2
 80066d0:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80066d4:	881a      	ldrh	r2, [r3, #0]
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	7b9b      	ldrb	r3, [r3, #14]
 80066de:	4619      	mov	r1, r3
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f001 ff16 	bl	8008512 <USBH_AllocPipe>
 80066e6:	4603      	mov	r3, r0
 80066e8:	461a      	mov	r2, r3
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	7bdb      	ldrb	r3, [r3, #15]
 80066f2:	4619      	mov	r1, r3
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f001 ff0c 	bl	8008512 <USBH_AllocPipe>
 80066fa:	4603      	mov	r3, r0
 80066fc:	461a      	mov	r2, r3
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	7b59      	ldrb	r1, [r3, #13]
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	7b98      	ldrb	r0, [r3, #14]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006716:	68ba      	ldr	r2, [r7, #8]
 8006718:	8b12      	ldrh	r2, [r2, #24]
 800671a:	9202      	str	r2, [sp, #8]
 800671c:	2202      	movs	r2, #2
 800671e:	9201      	str	r2, [sp, #4]
 8006720:	9300      	str	r3, [sp, #0]
 8006722:	4623      	mov	r3, r4
 8006724:	4602      	mov	r2, r0
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f001 fec4 	bl	80084b4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	7b19      	ldrb	r1, [r3, #12]
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	7bd8      	ldrb	r0, [r3, #15]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006740:	68ba      	ldr	r2, [r7, #8]
 8006742:	8b52      	ldrh	r2, [r2, #26]
 8006744:	9202      	str	r2, [sp, #8]
 8006746:	2202      	movs	r2, #2
 8006748:	9201      	str	r2, [sp, #4]
 800674a:	9300      	str	r3, [sp, #0]
 800674c:	4623      	mov	r3, r4
 800674e:	4602      	mov	r2, r0
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f001 feaf 	bl	80084b4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	2200      	movs	r2, #0
 800675a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	7b5b      	ldrb	r3, [r3, #13]
 8006762:	2200      	movs	r2, #0
 8006764:	4619      	mov	r1, r3
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f002 f9ba 	bl	8008ae0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	7b1b      	ldrb	r3, [r3, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	4619      	mov	r1, r3
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f002 f9b3 	bl	8008ae0 <USBH_LL_SetToggle>

  return USBH_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3714      	adds	r7, #20
 8006780:	46bd      	mov	sp, r7
 8006782:	bd90      	pop	{r4, r7, pc}

08006784 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006792:	69db      	ldr	r3, [r3, #28]
 8006794:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00e      	beq.n	80067bc <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	4619      	mov	r1, r3
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f001 fea4 	bl	80084f2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	4619      	mov	r1, r3
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f001 fecf 	bl	8008554 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	7b1b      	ldrb	r3, [r3, #12]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00e      	beq.n	80067e2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	7b1b      	ldrb	r3, [r3, #12]
 80067c8:	4619      	mov	r1, r3
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f001 fe91 	bl	80084f2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	7b1b      	ldrb	r3, [r3, #12]
 80067d4:	4619      	mov	r1, r3
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f001 febc 	bl	8008554 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2200      	movs	r2, #0
 80067e0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	7b5b      	ldrb	r3, [r3, #13]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00e      	beq.n	8006808 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	7b5b      	ldrb	r3, [r3, #13]
 80067ee:	4619      	mov	r1, r3
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f001 fe7e 	bl	80084f2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	7b5b      	ldrb	r3, [r3, #13]
 80067fa:	4619      	mov	r1, r3
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f001 fea9 	bl	8008554 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800680e:	69db      	ldr	r3, [r3, #28]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00b      	beq.n	800682c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800681a:	69db      	ldr	r3, [r3, #28]
 800681c:	4618      	mov	r0, r3
 800681e:	f002 f9ed 	bl	8008bfc <free>
    phost->pActiveClass->pData = 0U;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006828:	2200      	movs	r2, #0
 800682a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b084      	sub	sp, #16
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006844:	69db      	ldr	r3, [r3, #28]
 8006846:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	3340      	adds	r3, #64	@ 0x40
 800684c:	4619      	mov	r1, r3
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 f8b1 	bl	80069b6 <GetLineCoding>
 8006854:	4603      	mov	r3, r0
 8006856:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006858:	7afb      	ldrb	r3, [r7, #11]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d105      	bne.n	800686a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006864:	2102      	movs	r1, #2
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800686a:	7afb      	ldrb	r3, [r7, #11]
}
 800686c:	4618      	mov	r0, r3
 800686e:	3710      	adds	r7, #16
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800687c:	2301      	movs	r3, #1
 800687e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006880:	2300      	movs	r3, #0
 8006882:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800688a:	69db      	ldr	r3, [r3, #28]
 800688c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006894:	2b04      	cmp	r3, #4
 8006896:	d877      	bhi.n	8006988 <USBH_CDC_Process+0x114>
 8006898:	a201      	add	r2, pc, #4	@ (adr r2, 80068a0 <USBH_CDC_Process+0x2c>)
 800689a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800689e:	bf00      	nop
 80068a0:	080068b5 	.word	0x080068b5
 80068a4:	080068bb 	.word	0x080068bb
 80068a8:	080068eb 	.word	0x080068eb
 80068ac:	0800695f 	.word	0x0800695f
 80068b0:	0800696d 	.word	0x0800696d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80068b4:	2300      	movs	r3, #0
 80068b6:	73fb      	strb	r3, [r7, #15]
      break;
 80068b8:	e06d      	b.n	8006996 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068be:	4619      	mov	r1, r3
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 f897 	bl	80069f4 <SetLineCoding>
 80068c6:	4603      	mov	r3, r0
 80068c8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80068ca:	7bbb      	ldrb	r3, [r7, #14]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d104      	bne.n	80068da <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	2202      	movs	r2, #2
 80068d4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80068d8:	e058      	b.n	800698c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80068da:	7bbb      	ldrb	r3, [r7, #14]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d055      	beq.n	800698c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	2204      	movs	r2, #4
 80068e4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80068e8:	e050      	b.n	800698c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	3340      	adds	r3, #64	@ 0x40
 80068ee:	4619      	mov	r1, r3
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 f860 	bl	80069b6 <GetLineCoding>
 80068f6:	4603      	mov	r3, r0
 80068f8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80068fa:	7bbb      	ldrb	r3, [r7, #14]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d126      	bne.n	800694e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006912:	791b      	ldrb	r3, [r3, #4]
 8006914:	429a      	cmp	r2, r3
 8006916:	d13b      	bne.n	8006990 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006922:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006924:	429a      	cmp	r2, r3
 8006926:	d133      	bne.n	8006990 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006932:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006934:	429a      	cmp	r2, r3
 8006936:	d12b      	bne.n	8006990 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006940:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006942:	429a      	cmp	r2, r3
 8006944:	d124      	bne.n	8006990 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 f958 	bl	8006bfc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800694c:	e020      	b.n	8006990 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800694e:	7bbb      	ldrb	r3, [r7, #14]
 8006950:	2b01      	cmp	r3, #1
 8006952:	d01d      	beq.n	8006990 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	2204      	movs	r2, #4
 8006958:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800695c:	e018      	b.n	8006990 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f867 	bl	8006a32 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 f8da 	bl	8006b1e <CDC_ProcessReception>
      break;
 800696a:	e014      	b.n	8006996 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800696c:	2100      	movs	r1, #0
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f001 f81a 	bl	80079a8 <USBH_ClrFeature>
 8006974:	4603      	mov	r3, r0
 8006976:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006978:	7bbb      	ldrb	r3, [r7, #14]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d10a      	bne.n	8006994 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8006986:	e005      	b.n	8006994 <USBH_CDC_Process+0x120>

    default:
      break;
 8006988:	bf00      	nop
 800698a:	e004      	b.n	8006996 <USBH_CDC_Process+0x122>
      break;
 800698c:	bf00      	nop
 800698e:	e002      	b.n	8006996 <USBH_CDC_Process+0x122>
      break;
 8006990:	bf00      	nop
 8006992:	e000      	b.n	8006996 <USBH_CDC_Process+0x122>
      break;
 8006994:	bf00      	nop

  }

  return status;
 8006996:	7bfb      	ldrb	r3, [r7, #15]
}
 8006998:	4618      	mov	r0, r3
 800699a:	3710      	adds	r7, #16
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	370c      	adds	r7, #12
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b082      	sub	sp, #8
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
 80069be:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	22a1      	movs	r2, #161	@ 0xa1
 80069c4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2221      	movs	r2, #33	@ 0x21
 80069ca:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2207      	movs	r2, #7
 80069dc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	2207      	movs	r2, #7
 80069e2:	4619      	mov	r1, r3
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f001 fb14 	bl	8008012 <USBH_CtlReq>
 80069ea:	4603      	mov	r3, r0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3708      	adds	r7, #8
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2221      	movs	r2, #33	@ 0x21
 8006a02:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2220      	movs	r2, #32
 8006a08:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2207      	movs	r2, #7
 8006a1a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	2207      	movs	r2, #7
 8006a20:	4619      	mov	r1, r3
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f001 faf5 	bl	8008012 <USBH_CtlReq>
 8006a28:	4603      	mov	r3, r0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3708      	adds	r7, #8
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b086      	sub	sp, #24
 8006a36:	af02      	add	r7, sp, #8
 8006a38:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006a40:	69db      	ldr	r3, [r3, #28]
 8006a42:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006a44:	2300      	movs	r3, #0
 8006a46:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d002      	beq.n	8006a58 <CDC_ProcessTransmission+0x26>
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d023      	beq.n	8006a9e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006a56:	e05e      	b.n	8006b16 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	8b12      	ldrh	r2, [r2, #24]
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d90b      	bls.n	8006a7c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	69d9      	ldr	r1, [r3, #28]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	8b1a      	ldrh	r2, [r3, #24]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	7b5b      	ldrb	r3, [r3, #13]
 8006a70:	2001      	movs	r0, #1
 8006a72:	9000      	str	r0, [sp, #0]
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f001 fcda 	bl	800842e <USBH_BulkSendData>
 8006a7a:	e00b      	b.n	8006a94 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	7b5b      	ldrb	r3, [r3, #13]
 8006a8a:	2001      	movs	r0, #1
 8006a8c:	9000      	str	r0, [sp, #0]
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f001 fccd 	bl	800842e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2202      	movs	r2, #2
 8006a98:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006a9c:	e03b      	b.n	8006b16 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	7b5b      	ldrb	r3, [r3, #13]
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f001 fff1 	bl	8008a8c <USBH_LL_GetURBState>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006aae:	7afb      	ldrb	r3, [r7, #11]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d128      	bne.n	8006b06 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	8b12      	ldrh	r2, [r2, #24]
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d90e      	bls.n	8006ade <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	8b12      	ldrh	r2, [r2, #24]
 8006ac8:	1a9a      	subs	r2, r3, r2
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	69db      	ldr	r3, [r3, #28]
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	8b12      	ldrh	r2, [r2, #24]
 8006ad6:	441a      	add	r2, r3
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	61da      	str	r2, [r3, #28]
 8006adc:	e002      	b.n	8006ae4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d004      	beq.n	8006af6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006af4:	e00e      	b.n	8006b14 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f868 	bl	8006bd4 <USBH_CDC_TransmitCallback>
      break;
 8006b04:	e006      	b.n	8006b14 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006b06:	7afb      	ldrb	r3, [r7, #11]
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	d103      	bne.n	8006b14 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006b14:	bf00      	nop
  }
}
 8006b16:	bf00      	nop
 8006b18:	3710      	adds	r7, #16
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b086      	sub	sp, #24
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006b2c:	69db      	ldr	r3, [r3, #28]
 8006b2e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006b30:	2300      	movs	r3, #0
 8006b32:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8006b3a:	2b03      	cmp	r3, #3
 8006b3c:	d002      	beq.n	8006b44 <CDC_ProcessReception+0x26>
 8006b3e:	2b04      	cmp	r3, #4
 8006b40:	d00e      	beq.n	8006b60 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006b42:	e043      	b.n	8006bcc <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	6a19      	ldr	r1, [r3, #32]
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	8b5a      	ldrh	r2, [r3, #26]
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	7b1b      	ldrb	r3, [r3, #12]
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f001 fc91 	bl	8008478 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	2204      	movs	r2, #4
 8006b5a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006b5e:	e035      	b.n	8006bcc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	7b1b      	ldrb	r3, [r3, #12]
 8006b64:	4619      	mov	r1, r3
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f001 ff90 	bl	8008a8c <USBH_LL_GetURBState>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006b70:	7cfb      	ldrb	r3, [r7, #19]
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d129      	bne.n	8006bca <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	7b1b      	ldrb	r3, [r3, #12]
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f001 fef3 	bl	8008968 <USBH_LL_GetLastXferSize>
 8006b82:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d016      	beq.n	8006bbc <CDC_ProcessReception+0x9e>
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	8b5b      	ldrh	r3, [r3, #26]
 8006b92:	461a      	mov	r2, r3
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d910      	bls.n	8006bbc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	1ad2      	subs	r2, r2, r3
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	6a1a      	ldr	r2, [r3, #32]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	441a      	add	r2, r3
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	2203      	movs	r2, #3
 8006bb6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006bba:	e006      	b.n	8006bca <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 f80f 	bl	8006be8 <USBH_CDC_ReceiveCallback>
      break;
 8006bca:	bf00      	nop
  }
}
 8006bcc:	bf00      	nop
 8006bce:	3718      	adds	r7, #24
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006bdc:	bf00      	nop
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006bf0:	bf00      	nop
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006c04:	bf00      	nop
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d101      	bne.n	8006c28 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006c24:	2302      	movs	r3, #2
 8006c26:	e029      	b.n	8006c7c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	79fa      	ldrb	r2, [r7, #7]
 8006c2c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f000 f81f 	bl	8006c84 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d003      	beq.n	8006c74 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	68ba      	ldr	r2, [r7, #8]
 8006c70:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	f001 fdc3 	bl	8008800 <USBH_LL_Init>

  return USBH_OK;
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3710      	adds	r7, #16
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006c90:	2300      	movs	r3, #0
 8006c92:	60fb      	str	r3, [r7, #12]
 8006c94:	e009      	b.n	8006caa <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	33e0      	adds	r3, #224	@ 0xe0
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4413      	add	r3, r2
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	60fb      	str	r3, [r7, #12]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2b0f      	cmp	r3, #15
 8006cae:	d9f2      	bls.n	8006c96 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	60fb      	str	r3, [r7, #12]
 8006cb4:	e009      	b.n	8006cca <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	60fb      	str	r3, [r7, #12]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cd0:	d3f1      	bcc.n	8006cb6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2240      	movs	r2, #64	@ 0x40
 8006cf6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	331c      	adds	r3, #28
 8006d22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006d26:	2100      	movs	r1, #0
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f002 f81d 	bl	8008d68 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006d34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d38:	2100      	movs	r1, #0
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f002 f814 	bl	8008d68 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8006d46:	2212      	movs	r2, #18
 8006d48:	2100      	movs	r1, #0
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f002 f80c 	bl	8008d68 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006d56:	223e      	movs	r2, #62	@ 0x3e
 8006d58:	2100      	movs	r1, #0
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f002 f804 	bl	8008d68 <memset>

  return USBH_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006d6a:	b480      	push	{r7}
 8006d6c:	b085      	sub	sp, #20
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
 8006d72:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006d74:	2300      	movs	r3, #0
 8006d76:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d016      	beq.n	8006dac <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d10e      	bne.n	8006da6 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006d8e:	1c59      	adds	r1, r3, #1
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	33de      	adds	r3, #222	@ 0xde
 8006d9a:	6839      	ldr	r1, [r7, #0]
 8006d9c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006da0:	2300      	movs	r3, #0
 8006da2:	73fb      	strb	r3, [r7, #15]
 8006da4:	e004      	b.n	8006db0 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006da6:	2302      	movs	r3, #2
 8006da8:	73fb      	strb	r3, [r7, #15]
 8006daa:	e001      	b.n	8006db0 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006dac:	2302      	movs	r3, #2
 8006dae:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3714      	adds	r7, #20
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr

08006dbe <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006dbe:	b480      	push	{r7}
 8006dc0:	b085      	sub	sp, #20
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8006dd4:	78fa      	ldrb	r2, [r7, #3]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d204      	bcs.n	8006de4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	78fa      	ldrb	r2, [r7, #3]
 8006dde:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8006de2:	e001      	b.n	8006de8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006de4:	2302      	movs	r3, #2
 8006de6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3714      	adds	r7, #20
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr

08006df6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006df6:	b480      	push	{r7}
 8006df8:	b087      	sub	sp, #28
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
 8006dfe:	4608      	mov	r0, r1
 8006e00:	4611      	mov	r1, r2
 8006e02:	461a      	mov	r2, r3
 8006e04:	4603      	mov	r3, r0
 8006e06:	70fb      	strb	r3, [r7, #3]
 8006e08:	460b      	mov	r3, r1
 8006e0a:	70bb      	strb	r3, [r7, #2]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006e10:	2300      	movs	r3, #0
 8006e12:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006e14:	2300      	movs	r3, #0
 8006e16:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006e1e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006e20:	e025      	b.n	8006e6e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006e22:	7dfb      	ldrb	r3, [r7, #23]
 8006e24:	221a      	movs	r2, #26
 8006e26:	fb02 f303 	mul.w	r3, r2, r3
 8006e2a:	3308      	adds	r3, #8
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	4413      	add	r3, r2
 8006e30:	3302      	adds	r3, #2
 8006e32:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	795b      	ldrb	r3, [r3, #5]
 8006e38:	78fa      	ldrb	r2, [r7, #3]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d002      	beq.n	8006e44 <USBH_FindInterface+0x4e>
 8006e3e:	78fb      	ldrb	r3, [r7, #3]
 8006e40:	2bff      	cmp	r3, #255	@ 0xff
 8006e42:	d111      	bne.n	8006e68 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006e48:	78ba      	ldrb	r2, [r7, #2]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d002      	beq.n	8006e54 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006e4e:	78bb      	ldrb	r3, [r7, #2]
 8006e50:	2bff      	cmp	r3, #255	@ 0xff
 8006e52:	d109      	bne.n	8006e68 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006e58:	787a      	ldrb	r2, [r7, #1]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d002      	beq.n	8006e64 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006e5e:	787b      	ldrb	r3, [r7, #1]
 8006e60:	2bff      	cmp	r3, #255	@ 0xff
 8006e62:	d101      	bne.n	8006e68 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006e64:	7dfb      	ldrb	r3, [r7, #23]
 8006e66:	e006      	b.n	8006e76 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006e68:	7dfb      	ldrb	r3, [r7, #23]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006e6e:	7dfb      	ldrb	r3, [r7, #23]
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d9d6      	bls.n	8006e22 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006e74:	23ff      	movs	r3, #255	@ 0xff
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	371c      	adds	r7, #28
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr

08006e82 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b082      	sub	sp, #8
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f001 fcf4 	bl	8008878 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006e90:	2101      	movs	r1, #1
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f001 fe0d 	bl	8008ab2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3708      	adds	r7, #8
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
	...

08006ea4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b088      	sub	sp, #32
 8006ea8:	af04      	add	r7, sp, #16
 8006eaa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006eac:	2302      	movs	r3, #2
 8006eae:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d102      	bne.n	8006ec6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2203      	movs	r2, #3
 8006ec4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	2b0b      	cmp	r3, #11
 8006ece:	f200 81bb 	bhi.w	8007248 <USBH_Process+0x3a4>
 8006ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ed8 <USBH_Process+0x34>)
 8006ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed8:	08006f09 	.word	0x08006f09
 8006edc:	08006f3b 	.word	0x08006f3b
 8006ee0:	08006fa3 	.word	0x08006fa3
 8006ee4:	080071e3 	.word	0x080071e3
 8006ee8:	08007249 	.word	0x08007249
 8006eec:	08007043 	.word	0x08007043
 8006ef0:	08007189 	.word	0x08007189
 8006ef4:	08007079 	.word	0x08007079
 8006ef8:	08007099 	.word	0x08007099
 8006efc:	080070b7 	.word	0x080070b7
 8006f00:	080070fb 	.word	0x080070fb
 8006f04:	080071cb 	.word	0x080071cb
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	f000 819b 	beq.w	800724c <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006f1c:	20c8      	movs	r0, #200	@ 0xc8
 8006f1e:	f001 fe12 	bl	8008b46 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f001 fd05 	bl	8008932 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006f38:	e188      	b.n	800724c <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d107      	bne.n	8006f54 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2202      	movs	r2, #2
 8006f50:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006f52:	e18a      	b.n	800726a <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006f5a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006f5e:	d914      	bls.n	8006f8a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006f66:	3301      	adds	r3, #1
 8006f68:	b2da      	uxtb	r2, r3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006f76:	2b03      	cmp	r3, #3
 8006f78:	d903      	bls.n	8006f82 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	220d      	movs	r2, #13
 8006f7e:	701a      	strb	r2, [r3, #0]
      break;
 8006f80:	e173      	b.n	800726a <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	701a      	strb	r2, [r3, #0]
      break;
 8006f88:	e16f      	b.n	800726a <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006f90:	f103 020a 	add.w	r2, r3, #10
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8006f9a:	200a      	movs	r0, #10
 8006f9c:	f001 fdd3 	bl	8008b46 <USBH_Delay>
      break;
 8006fa0:	e163      	b.n	800726a <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d005      	beq.n	8006fb8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006fb2:	2104      	movs	r1, #4
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006fb8:	2064      	movs	r0, #100	@ 0x64
 8006fba:	f001 fdc4 	bl	8008b46 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f001 fc90 	bl	80088e4 <USBH_LL_GetSpeed>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2205      	movs	r2, #5
 8006fd2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006fd4:	2100      	movs	r1, #0
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f001 fa9b 	bl	8008512 <USBH_AllocPipe>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	461a      	mov	r2, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006fe4:	2180      	movs	r1, #128	@ 0x80
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f001 fa93 	bl	8008512 <USBH_AllocPipe>
 8006fec:	4603      	mov	r3, r0
 8006fee:	461a      	mov	r2, r3
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	7919      	ldrb	r1, [r3, #4]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007008:	9202      	str	r2, [sp, #8]
 800700a:	2200      	movs	r2, #0
 800700c:	9201      	str	r2, [sp, #4]
 800700e:	9300      	str	r3, [sp, #0]
 8007010:	4603      	mov	r3, r0
 8007012:	2280      	movs	r2, #128	@ 0x80
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f001 fa4d 	bl	80084b4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	7959      	ldrb	r1, [r3, #5]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800702e:	9202      	str	r2, [sp, #8]
 8007030:	2200      	movs	r2, #0
 8007032:	9201      	str	r2, [sp, #4]
 8007034:	9300      	str	r3, [sp, #0]
 8007036:	4603      	mov	r3, r0
 8007038:	2200      	movs	r2, #0
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f001 fa3a 	bl	80084b4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007040:	e113      	b.n	800726a <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 f916 	bl	8007274 <USBH_HandleEnum>
 8007048:	4603      	mov	r3, r0
 800704a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800704c:	7bbb      	ldrb	r3, [r7, #14]
 800704e:	b2db      	uxtb	r3, r3
 8007050:	2b00      	cmp	r3, #0
 8007052:	f040 80fd 	bne.w	8007250 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007064:	2b01      	cmp	r3, #1
 8007066:	d103      	bne.n	8007070 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2208      	movs	r2, #8
 800706c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800706e:	e0ef      	b.n	8007250 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2207      	movs	r2, #7
 8007074:	701a      	strb	r2, [r3, #0]
      break;
 8007076:	e0eb      	b.n	8007250 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800707e:	2b00      	cmp	r3, #0
 8007080:	f000 80e8 	beq.w	8007254 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800708a:	2101      	movs	r1, #1
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2208      	movs	r2, #8
 8007094:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007096:	e0dd      	b.n	8007254 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800709e:	4619      	mov	r1, r3
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 fc3a 	bl	800791a <USBH_SetCfg>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f040 80d5 	bne.w	8007258 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2209      	movs	r2, #9
 80070b2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80070b4:	e0d0      	b.n	8007258 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80070bc:	f003 0320 	and.w	r3, r3, #32
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d016      	beq.n	80070f2 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80070c4:	2101      	movs	r1, #1
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 fc4a 	bl	8007960 <USBH_SetFeature>
 80070cc:	4603      	mov	r3, r0
 80070ce:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80070d0:	7bbb      	ldrb	r3, [r7, #14]
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d103      	bne.n	80070e0 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	220a      	movs	r2, #10
 80070dc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80070de:	e0bd      	b.n	800725c <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 80070e0:	7bbb      	ldrb	r3, [r7, #14]
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	2b03      	cmp	r3, #3
 80070e6:	f040 80b9 	bne.w	800725c <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	220a      	movs	r2, #10
 80070ee:	701a      	strb	r2, [r3, #0]
      break;
 80070f0:	e0b4      	b.n	800725c <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	220a      	movs	r2, #10
 80070f6:	701a      	strb	r2, [r3, #0]
      break;
 80070f8:	e0b0      	b.n	800725c <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007100:	2b00      	cmp	r3, #0
 8007102:	f000 80ad 	beq.w	8007260 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800710e:	2300      	movs	r3, #0
 8007110:	73fb      	strb	r3, [r7, #15]
 8007112:	e016      	b.n	8007142 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007114:	7bfa      	ldrb	r2, [r7, #15]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	32de      	adds	r2, #222	@ 0xde
 800711a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800711e:	791a      	ldrb	r2, [r3, #4]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007126:	429a      	cmp	r2, r3
 8007128:	d108      	bne.n	800713c <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800712a:	7bfa      	ldrb	r2, [r7, #15]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	32de      	adds	r2, #222	@ 0xde
 8007130:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800713a:	e005      	b.n	8007148 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800713c:	7bfb      	ldrb	r3, [r7, #15]
 800713e:	3301      	adds	r3, #1
 8007140:	73fb      	strb	r3, [r7, #15]
 8007142:	7bfb      	ldrb	r3, [r7, #15]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d0e5      	beq.n	8007114 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800714e:	2b00      	cmp	r3, #0
 8007150:	d016      	beq.n	8007180 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	4798      	blx	r3
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d109      	bne.n	8007178 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2206      	movs	r2, #6
 8007168:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007170:	2103      	movs	r1, #3
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007176:	e073      	b.n	8007260 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	220d      	movs	r2, #13
 800717c:	701a      	strb	r2, [r3, #0]
      break;
 800717e:	e06f      	b.n	8007260 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	220d      	movs	r2, #13
 8007184:	701a      	strb	r2, [r3, #0]
      break;
 8007186:	e06b      	b.n	8007260 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800718e:	2b00      	cmp	r3, #0
 8007190:	d017      	beq.n	80071c2 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	4798      	blx	r3
 800719e:	4603      	mov	r3, r0
 80071a0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80071a2:	7bbb      	ldrb	r3, [r7, #14]
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d103      	bne.n	80071b2 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	220b      	movs	r2, #11
 80071ae:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80071b0:	e058      	b.n	8007264 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 80071b2:	7bbb      	ldrb	r3, [r7, #14]
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	d154      	bne.n	8007264 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	220d      	movs	r2, #13
 80071be:	701a      	strb	r2, [r3, #0]
      break;
 80071c0:	e050      	b.n	8007264 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	220d      	movs	r2, #13
 80071c6:	701a      	strb	r2, [r3, #0]
      break;
 80071c8:	e04c      	b.n	8007264 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d049      	beq.n	8007268 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80071da:	695b      	ldr	r3, [r3, #20]
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	4798      	blx	r3
      }
      break;
 80071e0:	e042      	b.n	8007268 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f7ff fd4a 	bl	8006c84 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d009      	beq.n	800720e <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007214:	2b00      	cmp	r3, #0
 8007216:	d005      	beq.n	8007224 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800721e:	2105      	movs	r1, #5
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800722a:	b2db      	uxtb	r3, r3
 800722c:	2b01      	cmp	r3, #1
 800722e:	d107      	bne.n	8007240 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f7ff fe22 	bl	8006e82 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800723e:	e014      	b.n	800726a <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f001 fb19 	bl	8008878 <USBH_LL_Start>
      break;
 8007246:	e010      	b.n	800726a <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007248:	bf00      	nop
 800724a:	e00e      	b.n	800726a <USBH_Process+0x3c6>
      break;
 800724c:	bf00      	nop
 800724e:	e00c      	b.n	800726a <USBH_Process+0x3c6>
      break;
 8007250:	bf00      	nop
 8007252:	e00a      	b.n	800726a <USBH_Process+0x3c6>
    break;
 8007254:	bf00      	nop
 8007256:	e008      	b.n	800726a <USBH_Process+0x3c6>
      break;
 8007258:	bf00      	nop
 800725a:	e006      	b.n	800726a <USBH_Process+0x3c6>
      break;
 800725c:	bf00      	nop
 800725e:	e004      	b.n	800726a <USBH_Process+0x3c6>
      break;
 8007260:	bf00      	nop
 8007262:	e002      	b.n	800726a <USBH_Process+0x3c6>
      break;
 8007264:	bf00      	nop
 8007266:	e000      	b.n	800726a <USBH_Process+0x3c6>
      break;
 8007268:	bf00      	nop
  }
  return USBH_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b088      	sub	sp, #32
 8007278:	af04      	add	r7, sp, #16
 800727a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800727c:	2301      	movs	r3, #1
 800727e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007280:	2301      	movs	r3, #1
 8007282:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	785b      	ldrb	r3, [r3, #1]
 8007288:	2b07      	cmp	r3, #7
 800728a:	f200 81bd 	bhi.w	8007608 <USBH_HandleEnum+0x394>
 800728e:	a201      	add	r2, pc, #4	@ (adr r2, 8007294 <USBH_HandleEnum+0x20>)
 8007290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007294:	080072b5 	.word	0x080072b5
 8007298:	0800736f 	.word	0x0800736f
 800729c:	080073d9 	.word	0x080073d9
 80072a0:	08007463 	.word	0x08007463
 80072a4:	080074cd 	.word	0x080074cd
 80072a8:	0800753d 	.word	0x0800753d
 80072ac:	08007583 	.word	0x08007583
 80072b0:	080075c9 	.word	0x080075c9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80072b4:	2108      	movs	r1, #8
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 fa4c 	bl	8007754 <USBH_Get_DevDesc>
 80072bc:	4603      	mov	r3, r0
 80072be:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80072c0:	7bbb      	ldrb	r3, [r7, #14]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d12e      	bne.n	8007324 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	7919      	ldrb	r1, [r3, #4]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80072ea:	9202      	str	r2, [sp, #8]
 80072ec:	2200      	movs	r2, #0
 80072ee:	9201      	str	r2, [sp, #4]
 80072f0:	9300      	str	r3, [sp, #0]
 80072f2:	4603      	mov	r3, r0
 80072f4:	2280      	movs	r2, #128	@ 0x80
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f001 f8dc 	bl	80084b4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	7959      	ldrb	r1, [r3, #5]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007310:	9202      	str	r2, [sp, #8]
 8007312:	2200      	movs	r2, #0
 8007314:	9201      	str	r2, [sp, #4]
 8007316:	9300      	str	r3, [sp, #0]
 8007318:	4603      	mov	r3, r0
 800731a:	2200      	movs	r2, #0
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f001 f8c9 	bl	80084b4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007322:	e173      	b.n	800760c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007324:	7bbb      	ldrb	r3, [r7, #14]
 8007326:	2b03      	cmp	r3, #3
 8007328:	f040 8170 	bne.w	800760c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007332:	3301      	adds	r3, #1
 8007334:	b2da      	uxtb	r2, r3
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007342:	2b03      	cmp	r3, #3
 8007344:	d903      	bls.n	800734e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	220d      	movs	r2, #13
 800734a:	701a      	strb	r2, [r3, #0]
      break;
 800734c:	e15e      	b.n	800760c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	795b      	ldrb	r3, [r3, #5]
 8007352:	4619      	mov	r1, r3
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f001 f8fd 	bl	8008554 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	791b      	ldrb	r3, [r3, #4]
 800735e:	4619      	mov	r1, r3
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f001 f8f7 	bl	8008554 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	701a      	strb	r2, [r3, #0]
      break;
 800736c:	e14e      	b.n	800760c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800736e:	2112      	movs	r1, #18
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 f9ef 	bl	8007754 <USBH_Get_DevDesc>
 8007376:	4603      	mov	r3, r0
 8007378:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800737a:	7bbb      	ldrb	r3, [r7, #14]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d103      	bne.n	8007388 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2202      	movs	r2, #2
 8007384:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007386:	e143      	b.n	8007610 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007388:	7bbb      	ldrb	r3, [r7, #14]
 800738a:	2b03      	cmp	r3, #3
 800738c:	f040 8140 	bne.w	8007610 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007396:	3301      	adds	r3, #1
 8007398:	b2da      	uxtb	r2, r3
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80073a6:	2b03      	cmp	r3, #3
 80073a8:	d903      	bls.n	80073b2 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	220d      	movs	r2, #13
 80073ae:	701a      	strb	r2, [r3, #0]
      break;
 80073b0:	e12e      	b.n	8007610 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	795b      	ldrb	r3, [r3, #5]
 80073b6:	4619      	mov	r1, r3
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f001 f8cb 	bl	8008554 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	791b      	ldrb	r3, [r3, #4]
 80073c2:	4619      	mov	r1, r3
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f001 f8c5 	bl	8008554 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	701a      	strb	r2, [r3, #0]
      break;
 80073d6:	e11b      	b.n	8007610 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80073d8:	2101      	movs	r1, #1
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 fa79 	bl	80078d2 <USBH_SetAddress>
 80073e0:	4603      	mov	r3, r0
 80073e2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80073e4:	7bbb      	ldrb	r3, [r7, #14]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d130      	bne.n	800744c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80073ea:	2002      	movs	r0, #2
 80073ec:	f001 fbab 	bl	8008b46 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2203      	movs	r2, #3
 80073fc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	7919      	ldrb	r1, [r3, #4]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007412:	9202      	str	r2, [sp, #8]
 8007414:	2200      	movs	r2, #0
 8007416:	9201      	str	r2, [sp, #4]
 8007418:	9300      	str	r3, [sp, #0]
 800741a:	4603      	mov	r3, r0
 800741c:	2280      	movs	r2, #128	@ 0x80
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f001 f848 	bl	80084b4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	7959      	ldrb	r1, [r3, #5]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007438:	9202      	str	r2, [sp, #8]
 800743a:	2200      	movs	r2, #0
 800743c:	9201      	str	r2, [sp, #4]
 800743e:	9300      	str	r3, [sp, #0]
 8007440:	4603      	mov	r3, r0
 8007442:	2200      	movs	r2, #0
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f001 f835 	bl	80084b4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800744a:	e0e3      	b.n	8007614 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800744c:	7bbb      	ldrb	r3, [r7, #14]
 800744e:	2b03      	cmp	r3, #3
 8007450:	f040 80e0 	bne.w	8007614 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	220d      	movs	r2, #13
 8007458:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	705a      	strb	r2, [r3, #1]
      break;
 8007460:	e0d8      	b.n	8007614 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007462:	2109      	movs	r1, #9
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 f9a1 	bl	80077ac <USBH_Get_CfgDesc>
 800746a:	4603      	mov	r3, r0
 800746c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800746e:	7bbb      	ldrb	r3, [r7, #14]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d103      	bne.n	800747c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2204      	movs	r2, #4
 8007478:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800747a:	e0cd      	b.n	8007618 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800747c:	7bbb      	ldrb	r3, [r7, #14]
 800747e:	2b03      	cmp	r3, #3
 8007480:	f040 80ca 	bne.w	8007618 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800748a:	3301      	adds	r3, #1
 800748c:	b2da      	uxtb	r2, r3
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800749a:	2b03      	cmp	r3, #3
 800749c:	d903      	bls.n	80074a6 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	220d      	movs	r2, #13
 80074a2:	701a      	strb	r2, [r3, #0]
      break;
 80074a4:	e0b8      	b.n	8007618 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	795b      	ldrb	r3, [r3, #5]
 80074aa:	4619      	mov	r1, r3
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f001 f851 	bl	8008554 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	791b      	ldrb	r3, [r3, #4]
 80074b6:	4619      	mov	r1, r3
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f001 f84b 	bl	8008554 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	701a      	strb	r2, [r3, #0]
      break;
 80074ca:	e0a5      	b.n	8007618 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80074d2:	4619      	mov	r1, r3
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 f969 	bl	80077ac <USBH_Get_CfgDesc>
 80074da:	4603      	mov	r3, r0
 80074dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80074de:	7bbb      	ldrb	r3, [r7, #14]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d103      	bne.n	80074ec <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2205      	movs	r2, #5
 80074e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80074ea:	e097      	b.n	800761c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80074ec:	7bbb      	ldrb	r3, [r7, #14]
 80074ee:	2b03      	cmp	r3, #3
 80074f0:	f040 8094 	bne.w	800761c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80074fa:	3301      	adds	r3, #1
 80074fc:	b2da      	uxtb	r2, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800750a:	2b03      	cmp	r3, #3
 800750c:	d903      	bls.n	8007516 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	220d      	movs	r2, #13
 8007512:	701a      	strb	r2, [r3, #0]
      break;
 8007514:	e082      	b.n	800761c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	795b      	ldrb	r3, [r3, #5]
 800751a:	4619      	mov	r1, r3
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f001 f819 	bl	8008554 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	791b      	ldrb	r3, [r3, #4]
 8007526:	4619      	mov	r1, r3
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f001 f813 	bl	8008554 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	701a      	strb	r2, [r3, #0]
      break;
 800753a:	e06f      	b.n	800761c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8007542:	2b00      	cmp	r3, #0
 8007544:	d019      	beq.n	800757a <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007552:	23ff      	movs	r3, #255	@ 0xff
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 f953 	bl	8007800 <USBH_Get_StringDesc>
 800755a:	4603      	mov	r3, r0
 800755c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800755e:	7bbb      	ldrb	r3, [r7, #14]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d103      	bne.n	800756c <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2206      	movs	r2, #6
 8007568:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800756a:	e059      	b.n	8007620 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800756c:	7bbb      	ldrb	r3, [r7, #14]
 800756e:	2b03      	cmp	r3, #3
 8007570:	d156      	bne.n	8007620 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2206      	movs	r2, #6
 8007576:	705a      	strb	r2, [r3, #1]
      break;
 8007578:	e052      	b.n	8007620 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2206      	movs	r2, #6
 800757e:	705a      	strb	r2, [r3, #1]
      break;
 8007580:	e04e      	b.n	8007620 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007588:	2b00      	cmp	r3, #0
 800758a:	d019      	beq.n	80075c0 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007598:	23ff      	movs	r3, #255	@ 0xff
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 f930 	bl	8007800 <USBH_Get_StringDesc>
 80075a0:	4603      	mov	r3, r0
 80075a2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80075a4:	7bbb      	ldrb	r3, [r7, #14]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d103      	bne.n	80075b2 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2207      	movs	r2, #7
 80075ae:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80075b0:	e038      	b.n	8007624 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075b2:	7bbb      	ldrb	r3, [r7, #14]
 80075b4:	2b03      	cmp	r3, #3
 80075b6:	d135      	bne.n	8007624 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2207      	movs	r2, #7
 80075bc:	705a      	strb	r2, [r3, #1]
      break;
 80075be:	e031      	b.n	8007624 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2207      	movs	r2, #7
 80075c4:	705a      	strb	r2, [r3, #1]
      break;
 80075c6:	e02d      	b.n	8007624 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d017      	beq.n	8007602 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80075de:	23ff      	movs	r3, #255	@ 0xff
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f90d 	bl	8007800 <USBH_Get_StringDesc>
 80075e6:	4603      	mov	r3, r0
 80075e8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80075ea:	7bbb      	ldrb	r3, [r7, #14]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d102      	bne.n	80075f6 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80075f0:	2300      	movs	r3, #0
 80075f2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80075f4:	e018      	b.n	8007628 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075f6:	7bbb      	ldrb	r3, [r7, #14]
 80075f8:	2b03      	cmp	r3, #3
 80075fa:	d115      	bne.n	8007628 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 80075fc:	2300      	movs	r3, #0
 80075fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007600:	e012      	b.n	8007628 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8007602:	2300      	movs	r3, #0
 8007604:	73fb      	strb	r3, [r7, #15]
      break;
 8007606:	e00f      	b.n	8007628 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8007608:	bf00      	nop
 800760a:	e00e      	b.n	800762a <USBH_HandleEnum+0x3b6>
      break;
 800760c:	bf00      	nop
 800760e:	e00c      	b.n	800762a <USBH_HandleEnum+0x3b6>
      break;
 8007610:	bf00      	nop
 8007612:	e00a      	b.n	800762a <USBH_HandleEnum+0x3b6>
      break;
 8007614:	bf00      	nop
 8007616:	e008      	b.n	800762a <USBH_HandleEnum+0x3b6>
      break;
 8007618:	bf00      	nop
 800761a:	e006      	b.n	800762a <USBH_HandleEnum+0x3b6>
      break;
 800761c:	bf00      	nop
 800761e:	e004      	b.n	800762a <USBH_HandleEnum+0x3b6>
      break;
 8007620:	bf00      	nop
 8007622:	e002      	b.n	800762a <USBH_HandleEnum+0x3b6>
      break;
 8007624:	bf00      	nop
 8007626:	e000      	b.n	800762a <USBH_HandleEnum+0x3b6>
      break;
 8007628:	bf00      	nop
  }
  return Status;
 800762a:	7bfb      	ldrb	r3, [r7, #15]
}
 800762c:	4618      	mov	r0, r3
 800762e:	3710      	adds	r7, #16
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	683a      	ldr	r2, [r7, #0]
 8007642:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007646:	bf00      	nop
 8007648:	370c      	adds	r7, #12
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr

08007652 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007652:	b580      	push	{r7, lr}
 8007654:	b082      	sub	sp, #8
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007660:	1c5a      	adds	r2, r3, #1
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 f804 	bl	8007676 <USBH_HandleSof>
}
 800766e:	bf00      	nop
 8007670:	3708      	adds	r7, #8
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}

08007676 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007676:	b580      	push	{r7, lr}
 8007678:	b082      	sub	sp, #8
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	b2db      	uxtb	r3, r3
 8007684:	2b0b      	cmp	r3, #11
 8007686:	d10a      	bne.n	800769e <USBH_HandleSof+0x28>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800768e:	2b00      	cmp	r3, #0
 8007690:	d005      	beq.n	800769e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007698:	699b      	ldr	r3, [r3, #24]
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	4798      	blx	r3
  }
}
 800769e:	bf00      	nop
 80076a0:	3708      	adds	r7, #8
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}

080076a6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80076a6:	b480      	push	{r7}
 80076a8:	b083      	sub	sp, #12
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2201      	movs	r2, #1
 80076b2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80076b6:	bf00      	nop
}
 80076b8:	370c      	adds	r7, #12
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr

080076c2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80076c2:	b480      	push	{r7}
 80076c4:	b083      	sub	sp, #12
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80076d2:	bf00      	nop
}
 80076d4:	370c      	adds	r7, #12
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80076de:	b480      	push	{r7}
 80076e0:	b083      	sub	sp, #12
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2201      	movs	r2, #1
 80076ea:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f001 f8be 	bl	80088ae <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	791b      	ldrb	r3, [r3, #4]
 8007736:	4619      	mov	r1, r3
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 ff0b 	bl	8008554 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	795b      	ldrb	r3, [r3, #5]
 8007742:	4619      	mov	r1, r3
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 ff05 	bl	8008554 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	3708      	adds	r7, #8
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b086      	sub	sp, #24
 8007758:	af02      	add	r7, sp, #8
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	460b      	mov	r3, r1
 800775e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007760:	887b      	ldrh	r3, [r7, #2]
 8007762:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007766:	d901      	bls.n	800776c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007768:	2303      	movs	r3, #3
 800776a:	e01b      	b.n	80077a4 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007772:	887b      	ldrh	r3, [r7, #2]
 8007774:	9300      	str	r3, [sp, #0]
 8007776:	4613      	mov	r3, r2
 8007778:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800777c:	2100      	movs	r1, #0
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 f872 	bl	8007868 <USBH_GetDescriptor>
 8007784:	4603      	mov	r3, r0
 8007786:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007788:	7bfb      	ldrb	r3, [r7, #15]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d109      	bne.n	80077a2 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007794:	887a      	ldrh	r2, [r7, #2]
 8007796:	4619      	mov	r1, r3
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 f929 	bl	80079f0 <USBH_ParseDevDesc>
 800779e:	4603      	mov	r3, r0
 80077a0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80077a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b086      	sub	sp, #24
 80077b0:	af02      	add	r7, sp, #8
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	460b      	mov	r3, r1
 80077b6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	331c      	adds	r3, #28
 80077bc:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80077be:	887b      	ldrh	r3, [r7, #2]
 80077c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077c4:	d901      	bls.n	80077ca <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80077c6:	2303      	movs	r3, #3
 80077c8:	e016      	b.n	80077f8 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80077ca:	887b      	ldrh	r3, [r7, #2]
 80077cc:	9300      	str	r3, [sp, #0]
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80077d4:	2100      	movs	r1, #0
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f846 	bl	8007868 <USBH_GetDescriptor>
 80077dc:	4603      	mov	r3, r0
 80077de:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80077e0:	7bfb      	ldrb	r3, [r7, #15]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d107      	bne.n	80077f6 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80077e6:	887b      	ldrh	r3, [r7, #2]
 80077e8:	461a      	mov	r2, r3
 80077ea:	68b9      	ldr	r1, [r7, #8]
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 f9af 	bl	8007b50 <USBH_ParseCfgDesc>
 80077f2:	4603      	mov	r3, r0
 80077f4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80077f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3710      	adds	r7, #16
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b088      	sub	sp, #32
 8007804:	af02      	add	r7, sp, #8
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	607a      	str	r2, [r7, #4]
 800780a:	461a      	mov	r2, r3
 800780c:	460b      	mov	r3, r1
 800780e:	72fb      	strb	r3, [r7, #11]
 8007810:	4613      	mov	r3, r2
 8007812:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007814:	893b      	ldrh	r3, [r7, #8]
 8007816:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800781a:	d802      	bhi.n	8007822 <USBH_Get_StringDesc+0x22>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d101      	bne.n	8007826 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007822:	2303      	movs	r3, #3
 8007824:	e01c      	b.n	8007860 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007826:	7afb      	ldrb	r3, [r7, #11]
 8007828:	b29b      	uxth	r3, r3
 800782a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800782e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007836:	893b      	ldrh	r3, [r7, #8]
 8007838:	9300      	str	r3, [sp, #0]
 800783a:	460b      	mov	r3, r1
 800783c:	2100      	movs	r1, #0
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	f000 f812 	bl	8007868 <USBH_GetDescriptor>
 8007844:	4603      	mov	r3, r0
 8007846:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007848:	7dfb      	ldrb	r3, [r7, #23]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d107      	bne.n	800785e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007854:	893a      	ldrh	r2, [r7, #8]
 8007856:	6879      	ldr	r1, [r7, #4]
 8007858:	4618      	mov	r0, r3
 800785a:	f000 fb8d 	bl	8007f78 <USBH_ParseStringDesc>
  }

  return status;
 800785e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007860:	4618      	mov	r0, r3
 8007862:	3718      	adds	r7, #24
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	60f8      	str	r0, [r7, #12]
 8007870:	607b      	str	r3, [r7, #4]
 8007872:	460b      	mov	r3, r1
 8007874:	72fb      	strb	r3, [r7, #11]
 8007876:	4613      	mov	r3, r2
 8007878:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	789b      	ldrb	r3, [r3, #2]
 800787e:	2b01      	cmp	r3, #1
 8007880:	d11c      	bne.n	80078bc <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007882:	7afb      	ldrb	r3, [r7, #11]
 8007884:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007888:	b2da      	uxtb	r2, r3
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2206      	movs	r2, #6
 8007892:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	893a      	ldrh	r2, [r7, #8]
 8007898:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800789a:	893b      	ldrh	r3, [r7, #8]
 800789c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80078a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078a4:	d104      	bne.n	80078b0 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f240 4209 	movw	r2, #1033	@ 0x409
 80078ac:	829a      	strh	r2, [r3, #20]
 80078ae:	e002      	b.n	80078b6 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2200      	movs	r2, #0
 80078b4:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	8b3a      	ldrh	r2, [r7, #24]
 80078ba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80078bc:	8b3b      	ldrh	r3, [r7, #24]
 80078be:	461a      	mov	r2, r3
 80078c0:	6879      	ldr	r1, [r7, #4]
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	f000 fba5 	bl	8008012 <USBH_CtlReq>
 80078c8:	4603      	mov	r3, r0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b082      	sub	sp, #8
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
 80078da:	460b      	mov	r3, r1
 80078dc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	789b      	ldrb	r3, [r3, #2]
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d10f      	bne.n	8007906 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2205      	movs	r2, #5
 80078f0:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80078f2:	78fb      	ldrb	r3, [r7, #3]
 80078f4:	b29a      	uxth	r2, r3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007906:	2200      	movs	r2, #0
 8007908:	2100      	movs	r1, #0
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 fb81 	bl	8008012 <USBH_CtlReq>
 8007910:	4603      	mov	r3, r0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3708      	adds	r7, #8
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800791a:	b580      	push	{r7, lr}
 800791c:	b082      	sub	sp, #8
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
 8007922:	460b      	mov	r3, r1
 8007924:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	789b      	ldrb	r3, [r3, #2]
 800792a:	2b01      	cmp	r3, #1
 800792c:	d10e      	bne.n	800794c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2209      	movs	r2, #9
 8007938:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	887a      	ldrh	r2, [r7, #2]
 800793e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800794c:	2200      	movs	r2, #0
 800794e:	2100      	movs	r1, #0
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 fb5e 	bl	8008012 <USBH_CtlReq>
 8007956:	4603      	mov	r3, r0
}
 8007958:	4618      	mov	r0, r3
 800795a:	3708      	adds	r7, #8
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	460b      	mov	r3, r1
 800796a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	789b      	ldrb	r3, [r3, #2]
 8007970:	2b01      	cmp	r3, #1
 8007972:	d10f      	bne.n	8007994 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2203      	movs	r2, #3
 800797e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007980:	78fb      	ldrb	r3, [r7, #3]
 8007982:	b29a      	uxth	r2, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007994:	2200      	movs	r2, #0
 8007996:	2100      	movs	r1, #0
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 fb3a 	bl	8008012 <USBH_CtlReq>
 800799e:	4603      	mov	r3, r0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3708      	adds	r7, #8
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	460b      	mov	r3, r1
 80079b2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	789b      	ldrb	r3, [r3, #2]
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d10f      	bne.n	80079dc <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2202      	movs	r2, #2
 80079c0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2201      	movs	r2, #1
 80079c6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80079ce:	78fb      	ldrb	r3, [r7, #3]
 80079d0:	b29a      	uxth	r2, r3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80079dc:	2200      	movs	r2, #0
 80079de:	2100      	movs	r1, #0
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 fb16 	bl	8008012 <USBH_CtlReq>
 80079e6:	4603      	mov	r3, r0
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3708      	adds	r7, #8
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b087      	sub	sp, #28
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	4613      	mov	r3, r2
 80079fc:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007a04:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8007a06:	2300      	movs	r3, #0
 8007a08:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d101      	bne.n	8007a14 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8007a10:	2302      	movs	r3, #2
 8007a12:	e094      	b.n	8007b3e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	781a      	ldrb	r2, [r3, #0]
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	785a      	ldrb	r2, [r3, #1]
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	3302      	adds	r3, #2
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	3303      	adds	r3, #3
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	021b      	lsls	r3, r3, #8
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	4313      	orrs	r3, r2
 8007a38:	b29a      	uxth	r2, r3
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	791a      	ldrb	r2, [r3, #4]
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	795a      	ldrb	r2, [r3, #5]
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	799a      	ldrb	r2, [r3, #6]
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	79da      	ldrb	r2, [r3, #7]
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d004      	beq.n	8007a72 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d11b      	bne.n	8007aaa <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	79db      	ldrb	r3, [r3, #7]
 8007a76:	2b20      	cmp	r3, #32
 8007a78:	dc0f      	bgt.n	8007a9a <USBH_ParseDevDesc+0xaa>
 8007a7a:	2b08      	cmp	r3, #8
 8007a7c:	db0f      	blt.n	8007a9e <USBH_ParseDevDesc+0xae>
 8007a7e:	3b08      	subs	r3, #8
 8007a80:	4a32      	ldr	r2, [pc, #200]	@ (8007b4c <USBH_ParseDevDesc+0x15c>)
 8007a82:	fa22 f303 	lsr.w	r3, r2, r3
 8007a86:	f003 0301 	and.w	r3, r3, #1
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	bf14      	ite	ne
 8007a8e:	2301      	movne	r3, #1
 8007a90:	2300      	moveq	r3, #0
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d106      	bne.n	8007aa6 <USBH_ParseDevDesc+0xb6>
 8007a98:	e001      	b.n	8007a9e <USBH_ParseDevDesc+0xae>
 8007a9a:	2b40      	cmp	r3, #64	@ 0x40
 8007a9c:	d003      	beq.n	8007aa6 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	2208      	movs	r2, #8
 8007aa2:	71da      	strb	r2, [r3, #7]
        break;
 8007aa4:	e000      	b.n	8007aa8 <USBH_ParseDevDesc+0xb8>
        break;
 8007aa6:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8007aa8:	e00e      	b.n	8007ac8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007ab0:	2b02      	cmp	r3, #2
 8007ab2:	d107      	bne.n	8007ac4 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	79db      	ldrb	r3, [r3, #7]
 8007ab8:	2b08      	cmp	r3, #8
 8007aba:	d005      	beq.n	8007ac8 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	2208      	movs	r2, #8
 8007ac0:	71da      	strb	r2, [r3, #7]
 8007ac2:	e001      	b.n	8007ac8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007ac4:	2303      	movs	r3, #3
 8007ac6:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8007ac8:	88fb      	ldrh	r3, [r7, #6]
 8007aca:	2b08      	cmp	r3, #8
 8007acc:	d936      	bls.n	8007b3c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	3308      	adds	r3, #8
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	3309      	adds	r3, #9
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	021b      	lsls	r3, r3, #8
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	b29a      	uxth	r2, r3
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	330a      	adds	r3, #10
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	461a      	mov	r2, r3
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	330b      	adds	r3, #11
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	021b      	lsls	r3, r3, #8
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	4313      	orrs	r3, r2
 8007afc:	b29a      	uxth	r2, r3
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	330c      	adds	r3, #12
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	461a      	mov	r2, r3
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	330d      	adds	r3, #13
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	021b      	lsls	r3, r3, #8
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	4313      	orrs	r3, r2
 8007b16:	b29a      	uxth	r2, r3
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	7b9a      	ldrb	r2, [r3, #14]
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	7bda      	ldrb	r2, [r3, #15]
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	7c1a      	ldrb	r2, [r3, #16]
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	7c5a      	ldrb	r2, [r3, #17]
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8007b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	371c      	adds	r7, #28
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop
 8007b4c:	01000101 	.word	0x01000101

08007b50 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b08c      	sub	sp, #48	@ 0x30
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007b64:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007b66:	2300      	movs	r3, #0
 8007b68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8007b72:	2300      	movs	r3, #0
 8007b74:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d101      	bne.n	8007b82 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8007b7e:	2302      	movs	r3, #2
 8007b80:	e0da      	b.n	8007d38 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	781a      	ldrb	r2, [r3, #0]
 8007b8a:	6a3b      	ldr	r3, [r7, #32]
 8007b8c:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	785a      	ldrb	r2, [r3, #1]
 8007b92:	6a3b      	ldr	r3, [r7, #32]
 8007b94:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	3302      	adds	r3, #2
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	3303      	adds	r3, #3
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	021b      	lsls	r3, r3, #8
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bb0:	bf28      	it	cs
 8007bb2:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8007bb6:	b29a      	uxth	r2, r3
 8007bb8:	6a3b      	ldr	r3, [r7, #32]
 8007bba:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	791a      	ldrb	r2, [r3, #4]
 8007bc0:	6a3b      	ldr	r3, [r7, #32]
 8007bc2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	795a      	ldrb	r2, [r3, #5]
 8007bc8:	6a3b      	ldr	r3, [r7, #32]
 8007bca:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	799a      	ldrb	r2, [r3, #6]
 8007bd0:	6a3b      	ldr	r3, [r7, #32]
 8007bd2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	79da      	ldrb	r2, [r3, #7]
 8007bd8:	6a3b      	ldr	r3, [r7, #32]
 8007bda:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	7a1a      	ldrb	r2, [r3, #8]
 8007be0:	6a3b      	ldr	r3, [r7, #32]
 8007be2:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8007be4:	6a3b      	ldr	r3, [r7, #32]
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	2b09      	cmp	r3, #9
 8007bea:	d002      	beq.n	8007bf2 <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007bec:	6a3b      	ldr	r3, [r7, #32]
 8007bee:	2209      	movs	r2, #9
 8007bf0:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007bf2:	88fb      	ldrh	r3, [r7, #6]
 8007bf4:	2b09      	cmp	r3, #9
 8007bf6:	f240 809d 	bls.w	8007d34 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8007bfa:	2309      	movs	r3, #9
 8007bfc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007c02:	e081      	b.n	8007d08 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007c04:	f107 0316 	add.w	r3, r7, #22
 8007c08:	4619      	mov	r1, r3
 8007c0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c0c:	f000 f9e7 	bl	8007fde <USBH_GetNextDesc>
 8007c10:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c14:	785b      	ldrb	r3, [r3, #1]
 8007c16:	2b04      	cmp	r3, #4
 8007c18:	d176      	bne.n	8007d08 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	2b09      	cmp	r3, #9
 8007c20:	d002      	beq.n	8007c28 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c24:	2209      	movs	r2, #9
 8007c26:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007c28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c2c:	221a      	movs	r2, #26
 8007c2e:	fb02 f303 	mul.w	r3, r2, r3
 8007c32:	3308      	adds	r3, #8
 8007c34:	6a3a      	ldr	r2, [r7, #32]
 8007c36:	4413      	add	r3, r2
 8007c38:	3302      	adds	r3, #2
 8007c3a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007c3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c3e:	69f8      	ldr	r0, [r7, #28]
 8007c40:	f000 f87e 	bl	8007d40 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007c44:	2300      	movs	r3, #0
 8007c46:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007c4e:	e043      	b.n	8007cd8 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007c50:	f107 0316 	add.w	r3, r7, #22
 8007c54:	4619      	mov	r1, r3
 8007c56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c58:	f000 f9c1 	bl	8007fde <USBH_GetNextDesc>
 8007c5c:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c60:	785b      	ldrb	r3, [r3, #1]
 8007c62:	2b05      	cmp	r3, #5
 8007c64:	d138      	bne.n	8007cd8 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	795b      	ldrb	r3, [r3, #5]
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d113      	bne.n	8007c96 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8007c72:	2b02      	cmp	r3, #2
 8007c74:	d003      	beq.n	8007c7e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	799b      	ldrb	r3, [r3, #6]
 8007c7a:	2b03      	cmp	r3, #3
 8007c7c:	d10b      	bne.n	8007c96 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	79db      	ldrb	r3, [r3, #7]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d10b      	bne.n	8007c9e <USBH_ParseCfgDesc+0x14e>
 8007c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	2b09      	cmp	r3, #9
 8007c8c:	d007      	beq.n	8007c9e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8007c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c90:	2209      	movs	r2, #9
 8007c92:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007c94:	e003      	b.n	8007c9e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c98:	2207      	movs	r2, #7
 8007c9a:	701a      	strb	r2, [r3, #0]
 8007c9c:	e000      	b.n	8007ca0 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007c9e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007ca0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ca4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007ca8:	3201      	adds	r2, #1
 8007caa:	00d2      	lsls	r2, r2, #3
 8007cac:	211a      	movs	r1, #26
 8007cae:	fb01 f303 	mul.w	r3, r1, r3
 8007cb2:	4413      	add	r3, r2
 8007cb4:	3308      	adds	r3, #8
 8007cb6:	6a3a      	ldr	r2, [r7, #32]
 8007cb8:	4413      	add	r3, r2
 8007cba:	3304      	adds	r3, #4
 8007cbc:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007cbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007cc0:	69b9      	ldr	r1, [r7, #24]
 8007cc2:	68f8      	ldr	r0, [r7, #12]
 8007cc4:	f000 f870 	bl	8007da8 <USBH_ParseEPDesc>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8007cce:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	791b      	ldrb	r3, [r3, #4]
 8007cdc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d204      	bcs.n	8007cee <USBH_ParseCfgDesc+0x19e>
 8007ce4:	6a3b      	ldr	r3, [r7, #32]
 8007ce6:	885a      	ldrh	r2, [r3, #2]
 8007ce8:	8afb      	ldrh	r3, [r7, #22]
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d8b0      	bhi.n	8007c50 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007cee:	69fb      	ldr	r3, [r7, #28]
 8007cf0:	791b      	ldrb	r3, [r3, #4]
 8007cf2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d201      	bcs.n	8007cfe <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	e01c      	b.n	8007d38 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8007cfe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d02:	3301      	adds	r3, #1
 8007d04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007d08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d805      	bhi.n	8007d1c <USBH_ParseCfgDesc+0x1cc>
 8007d10:	6a3b      	ldr	r3, [r7, #32]
 8007d12:	885a      	ldrh	r2, [r3, #2]
 8007d14:	8afb      	ldrh	r3, [r7, #22]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	f63f af74 	bhi.w	8007c04 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007d1c:	6a3b      	ldr	r3, [r7, #32]
 8007d1e:	791b      	ldrb	r3, [r3, #4]
 8007d20:	2b02      	cmp	r3, #2
 8007d22:	bf28      	it	cs
 8007d24:	2302      	movcs	r3, #2
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d201      	bcs.n	8007d34 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8007d30:	2303      	movs	r3, #3
 8007d32:	e001      	b.n	8007d38 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8007d34:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3730      	adds	r7, #48	@ 0x30
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	781a      	ldrb	r2, [r3, #0]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	785a      	ldrb	r2, [r3, #1]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	789a      	ldrb	r2, [r3, #2]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	78da      	ldrb	r2, [r3, #3]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	3304      	adds	r3, #4
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	bf28      	it	cs
 8007d74:	2302      	movcs	r3, #2
 8007d76:	b2da      	uxtb	r2, r3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	795a      	ldrb	r2, [r3, #5]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	799a      	ldrb	r2, [r3, #6]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	79da      	ldrb	r2, [r3, #7]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	7a1a      	ldrb	r2, [r3, #8]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	721a      	strb	r2, [r3, #8]
}
 8007d9c:	bf00      	nop
 8007d9e:	370c      	adds	r7, #12
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b087      	sub	sp, #28
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007db4:	2300      	movs	r3, #0
 8007db6:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	781a      	ldrb	r2, [r3, #0]
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	785a      	ldrb	r2, [r3, #1]
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	789a      	ldrb	r2, [r3, #2]
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	78da      	ldrb	r2, [r3, #3]
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	3304      	adds	r3, #4
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	461a      	mov	r2, r3
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	3305      	adds	r3, #5
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	021b      	lsls	r3, r3, #8
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	4313      	orrs	r3, r2
 8007dec:	b29a      	uxth	r2, r3
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	799a      	ldrb	r2, [r3, #6]
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	889b      	ldrh	r3, [r3, #4]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d009      	beq.n	8007e16 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007e06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e0a:	d804      	bhi.n	8007e16 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007e10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e14:	d901      	bls.n	8007e1a <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8007e16:	2303      	movs	r3, #3
 8007e18:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d136      	bne.n	8007e92 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	78db      	ldrb	r3, [r3, #3]
 8007e28:	f003 0303 	and.w	r3, r3, #3
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d108      	bne.n	8007e42 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	889b      	ldrh	r3, [r3, #4]
 8007e34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e38:	f240 8097 	bls.w	8007f6a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	75fb      	strb	r3, [r7, #23]
 8007e40:	e093      	b.n	8007f6a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	78db      	ldrb	r3, [r3, #3]
 8007e46:	f003 0303 	and.w	r3, r3, #3
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d107      	bne.n	8007e5e <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	889b      	ldrh	r3, [r3, #4]
 8007e52:	2b40      	cmp	r3, #64	@ 0x40
 8007e54:	f240 8089 	bls.w	8007f6a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007e58:	2303      	movs	r3, #3
 8007e5a:	75fb      	strb	r3, [r7, #23]
 8007e5c:	e085      	b.n	8007f6a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	78db      	ldrb	r3, [r3, #3]
 8007e62:	f003 0303 	and.w	r3, r3, #3
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d005      	beq.n	8007e76 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	78db      	ldrb	r3, [r3, #3]
 8007e6e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007e72:	2b03      	cmp	r3, #3
 8007e74:	d10a      	bne.n	8007e8c <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	799b      	ldrb	r3, [r3, #6]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d003      	beq.n	8007e86 <USBH_ParseEPDesc+0xde>
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	799b      	ldrb	r3, [r3, #6]
 8007e82:	2b10      	cmp	r3, #16
 8007e84:	d970      	bls.n	8007f68 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8007e86:	2303      	movs	r3, #3
 8007e88:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007e8a:	e06d      	b.n	8007f68 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	75fb      	strb	r3, [r7, #23]
 8007e90:	e06b      	b.n	8007f6a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d13c      	bne.n	8007f16 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	78db      	ldrb	r3, [r3, #3]
 8007ea0:	f003 0303 	and.w	r3, r3, #3
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	d005      	beq.n	8007eb4 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	78db      	ldrb	r3, [r3, #3]
 8007eac:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d106      	bne.n	8007ec2 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	889b      	ldrh	r3, [r3, #4]
 8007eb8:	2b40      	cmp	r3, #64	@ 0x40
 8007eba:	d956      	bls.n	8007f6a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007ebc:	2303      	movs	r3, #3
 8007ebe:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007ec0:	e053      	b.n	8007f6a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	78db      	ldrb	r3, [r3, #3]
 8007ec6:	f003 0303 	and.w	r3, r3, #3
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d10e      	bne.n	8007eec <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	799b      	ldrb	r3, [r3, #6]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d007      	beq.n	8007ee6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8007eda:	2b10      	cmp	r3, #16
 8007edc:	d803      	bhi.n	8007ee6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8007ee2:	2b40      	cmp	r3, #64	@ 0x40
 8007ee4:	d941      	bls.n	8007f6a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007ee6:	2303      	movs	r3, #3
 8007ee8:	75fb      	strb	r3, [r7, #23]
 8007eea:	e03e      	b.n	8007f6a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	78db      	ldrb	r3, [r3, #3]
 8007ef0:	f003 0303 	and.w	r3, r3, #3
 8007ef4:	2b03      	cmp	r3, #3
 8007ef6:	d10b      	bne.n	8007f10 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	799b      	ldrb	r3, [r3, #6]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d004      	beq.n	8007f0a <USBH_ParseEPDesc+0x162>
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	889b      	ldrh	r3, [r3, #4]
 8007f04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f08:	d32f      	bcc.n	8007f6a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007f0a:	2303      	movs	r3, #3
 8007f0c:	75fb      	strb	r3, [r7, #23]
 8007f0e:	e02c      	b.n	8007f6a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007f10:	2303      	movs	r3, #3
 8007f12:	75fb      	strb	r3, [r7, #23]
 8007f14:	e029      	b.n	8007f6a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007f1c:	2b02      	cmp	r3, #2
 8007f1e:	d120      	bne.n	8007f62 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	78db      	ldrb	r3, [r3, #3]
 8007f24:	f003 0303 	and.w	r3, r3, #3
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d106      	bne.n	8007f3a <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	889b      	ldrh	r3, [r3, #4]
 8007f30:	2b08      	cmp	r3, #8
 8007f32:	d01a      	beq.n	8007f6a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007f34:	2303      	movs	r3, #3
 8007f36:	75fb      	strb	r3, [r7, #23]
 8007f38:	e017      	b.n	8007f6a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	78db      	ldrb	r3, [r3, #3]
 8007f3e:	f003 0303 	and.w	r3, r3, #3
 8007f42:	2b03      	cmp	r3, #3
 8007f44:	d10a      	bne.n	8007f5c <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	799b      	ldrb	r3, [r3, #6]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d003      	beq.n	8007f56 <USBH_ParseEPDesc+0x1ae>
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	889b      	ldrh	r3, [r3, #4]
 8007f52:	2b08      	cmp	r3, #8
 8007f54:	d909      	bls.n	8007f6a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007f56:	2303      	movs	r3, #3
 8007f58:	75fb      	strb	r3, [r7, #23]
 8007f5a:	e006      	b.n	8007f6a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007f5c:	2303      	movs	r3, #3
 8007f5e:	75fb      	strb	r3, [r7, #23]
 8007f60:	e003      	b.n	8007f6a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007f62:	2303      	movs	r3, #3
 8007f64:	75fb      	strb	r3, [r7, #23]
 8007f66:	e000      	b.n	8007f6a <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007f68:	bf00      	nop
  }

  return status;
 8007f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	371c      	adds	r7, #28
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b087      	sub	sp, #28
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	4613      	mov	r3, r2
 8007f84:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	3301      	adds	r3, #1
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	2b03      	cmp	r3, #3
 8007f8e:	d120      	bne.n	8007fd2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	1e9a      	subs	r2, r3, #2
 8007f96:	88fb      	ldrh	r3, [r7, #6]
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	bf28      	it	cs
 8007f9c:	4613      	movcs	r3, r2
 8007f9e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	3302      	adds	r3, #2
 8007fa4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	82fb      	strh	r3, [r7, #22]
 8007faa:	e00b      	b.n	8007fc4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007fac:	8afb      	ldrh	r3, [r7, #22]
 8007fae:	68fa      	ldr	r2, [r7, #12]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	781a      	ldrb	r2, [r3, #0]
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007fbe:	8afb      	ldrh	r3, [r7, #22]
 8007fc0:	3302      	adds	r3, #2
 8007fc2:	82fb      	strh	r3, [r7, #22]
 8007fc4:	8afa      	ldrh	r2, [r7, #22]
 8007fc6:	8abb      	ldrh	r3, [r7, #20]
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d3ef      	bcc.n	8007fac <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	701a      	strb	r2, [r3, #0]
  }
}
 8007fd2:	bf00      	nop
 8007fd4:	371c      	adds	r7, #28
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr

08007fde <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007fde:	b480      	push	{r7}
 8007fe0:	b085      	sub	sp, #20
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
 8007fe6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	881b      	ldrh	r3, [r3, #0]
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	7812      	ldrb	r2, [r2, #0]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	b29a      	uxth	r2, r3
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4413      	add	r3, r2
 8008002:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008004:	68fb      	ldr	r3, [r7, #12]
}
 8008006:	4618      	mov	r0, r3
 8008008:	3714      	adds	r7, #20
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr

08008012 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b086      	sub	sp, #24
 8008016:	af00      	add	r7, sp, #0
 8008018:	60f8      	str	r0, [r7, #12]
 800801a:	60b9      	str	r1, [r7, #8]
 800801c:	4613      	mov	r3, r2
 800801e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008020:	2301      	movs	r3, #1
 8008022:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	789b      	ldrb	r3, [r3, #2]
 8008028:	2b01      	cmp	r3, #1
 800802a:	d002      	beq.n	8008032 <USBH_CtlReq+0x20>
 800802c:	2b02      	cmp	r3, #2
 800802e:	d00f      	beq.n	8008050 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008030:	e027      	b.n	8008082 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	68ba      	ldr	r2, [r7, #8]
 8008036:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	88fa      	ldrh	r2, [r7, #6]
 800803c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2201      	movs	r2, #1
 8008042:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2202      	movs	r2, #2
 8008048:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800804a:	2301      	movs	r3, #1
 800804c:	75fb      	strb	r3, [r7, #23]
      break;
 800804e:	e018      	b.n	8008082 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f000 f81b 	bl	800808c <USBH_HandleControl>
 8008056:	4603      	mov	r3, r0
 8008058:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800805a:	7dfb      	ldrb	r3, [r7, #23]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d002      	beq.n	8008066 <USBH_CtlReq+0x54>
 8008060:	7dfb      	ldrb	r3, [r7, #23]
 8008062:	2b03      	cmp	r3, #3
 8008064:	d106      	bne.n	8008074 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2201      	movs	r2, #1
 800806a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2200      	movs	r2, #0
 8008070:	761a      	strb	r2, [r3, #24]
      break;
 8008072:	e005      	b.n	8008080 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008074:	7dfb      	ldrb	r3, [r7, #23]
 8008076:	2b02      	cmp	r3, #2
 8008078:	d102      	bne.n	8008080 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2201      	movs	r2, #1
 800807e:	709a      	strb	r2, [r3, #2]
      break;
 8008080:	bf00      	nop
  }
  return status;
 8008082:	7dfb      	ldrb	r3, [r7, #23]
}
 8008084:	4618      	mov	r0, r3
 8008086:	3718      	adds	r7, #24
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b086      	sub	sp, #24
 8008090:	af02      	add	r7, sp, #8
 8008092:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008094:	2301      	movs	r3, #1
 8008096:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008098:	2300      	movs	r3, #0
 800809a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	7e1b      	ldrb	r3, [r3, #24]
 80080a0:	3b01      	subs	r3, #1
 80080a2:	2b0a      	cmp	r3, #10
 80080a4:	f200 8156 	bhi.w	8008354 <USBH_HandleControl+0x2c8>
 80080a8:	a201      	add	r2, pc, #4	@ (adr r2, 80080b0 <USBH_HandleControl+0x24>)
 80080aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ae:	bf00      	nop
 80080b0:	080080dd 	.word	0x080080dd
 80080b4:	080080f7 	.word	0x080080f7
 80080b8:	08008161 	.word	0x08008161
 80080bc:	08008187 	.word	0x08008187
 80080c0:	080081bf 	.word	0x080081bf
 80080c4:	080081e9 	.word	0x080081e9
 80080c8:	0800823b 	.word	0x0800823b
 80080cc:	0800825d 	.word	0x0800825d
 80080d0:	08008299 	.word	0x08008299
 80080d4:	080082bf 	.word	0x080082bf
 80080d8:	080082fd 	.word	0x080082fd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f103 0110 	add.w	r1, r3, #16
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	795b      	ldrb	r3, [r3, #5]
 80080e6:	461a      	mov	r2, r3
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 f943 	bl	8008374 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2202      	movs	r2, #2
 80080f2:	761a      	strb	r2, [r3, #24]
      break;
 80080f4:	e139      	b.n	800836a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	795b      	ldrb	r3, [r3, #5]
 80080fa:	4619      	mov	r1, r3
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 fcc5 	bl	8008a8c <USBH_LL_GetURBState>
 8008102:	4603      	mov	r3, r0
 8008104:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008106:	7bbb      	ldrb	r3, [r7, #14]
 8008108:	2b01      	cmp	r3, #1
 800810a:	d11e      	bne.n	800814a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	7c1b      	ldrb	r3, [r3, #16]
 8008110:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008114:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	8adb      	ldrh	r3, [r3, #22]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d00a      	beq.n	8008134 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800811e:	7b7b      	ldrb	r3, [r7, #13]
 8008120:	2b80      	cmp	r3, #128	@ 0x80
 8008122:	d103      	bne.n	800812c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2203      	movs	r2, #3
 8008128:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800812a:	e115      	b.n	8008358 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2205      	movs	r2, #5
 8008130:	761a      	strb	r2, [r3, #24]
      break;
 8008132:	e111      	b.n	8008358 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008134:	7b7b      	ldrb	r3, [r7, #13]
 8008136:	2b80      	cmp	r3, #128	@ 0x80
 8008138:	d103      	bne.n	8008142 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2209      	movs	r2, #9
 800813e:	761a      	strb	r2, [r3, #24]
      break;
 8008140:	e10a      	b.n	8008358 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2207      	movs	r2, #7
 8008146:	761a      	strb	r2, [r3, #24]
      break;
 8008148:	e106      	b.n	8008358 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800814a:	7bbb      	ldrb	r3, [r7, #14]
 800814c:	2b04      	cmp	r3, #4
 800814e:	d003      	beq.n	8008158 <USBH_HandleControl+0xcc>
 8008150:	7bbb      	ldrb	r3, [r7, #14]
 8008152:	2b02      	cmp	r3, #2
 8008154:	f040 8100 	bne.w	8008358 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	220b      	movs	r2, #11
 800815c:	761a      	strb	r2, [r3, #24]
      break;
 800815e:	e0fb      	b.n	8008358 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008166:	b29a      	uxth	r2, r3
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6899      	ldr	r1, [r3, #8]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	899a      	ldrh	r2, [r3, #12]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	791b      	ldrb	r3, [r3, #4]
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 f93a 	bl	80083f2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2204      	movs	r2, #4
 8008182:	761a      	strb	r2, [r3, #24]
      break;
 8008184:	e0f1      	b.n	800836a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	791b      	ldrb	r3, [r3, #4]
 800818a:	4619      	mov	r1, r3
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 fc7d 	bl	8008a8c <USBH_LL_GetURBState>
 8008192:	4603      	mov	r3, r0
 8008194:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008196:	7bbb      	ldrb	r3, [r7, #14]
 8008198:	2b01      	cmp	r3, #1
 800819a:	d102      	bne.n	80081a2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2209      	movs	r2, #9
 80081a0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80081a2:	7bbb      	ldrb	r3, [r7, #14]
 80081a4:	2b05      	cmp	r3, #5
 80081a6:	d102      	bne.n	80081ae <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80081a8:	2303      	movs	r3, #3
 80081aa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80081ac:	e0d6      	b.n	800835c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80081ae:	7bbb      	ldrb	r3, [r7, #14]
 80081b0:	2b04      	cmp	r3, #4
 80081b2:	f040 80d3 	bne.w	800835c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	220b      	movs	r2, #11
 80081ba:	761a      	strb	r2, [r3, #24]
      break;
 80081bc:	e0ce      	b.n	800835c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6899      	ldr	r1, [r3, #8]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	899a      	ldrh	r2, [r3, #12]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	795b      	ldrb	r3, [r3, #5]
 80081ca:	2001      	movs	r0, #1
 80081cc:	9000      	str	r0, [sp, #0]
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 f8ea 	bl	80083a8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80081da:	b29a      	uxth	r2, r3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2206      	movs	r2, #6
 80081e4:	761a      	strb	r2, [r3, #24]
      break;
 80081e6:	e0c0      	b.n	800836a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	795b      	ldrb	r3, [r3, #5]
 80081ec:	4619      	mov	r1, r3
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 fc4c 	bl	8008a8c <USBH_LL_GetURBState>
 80081f4:	4603      	mov	r3, r0
 80081f6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80081f8:	7bbb      	ldrb	r3, [r7, #14]
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d103      	bne.n	8008206 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2207      	movs	r2, #7
 8008202:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008204:	e0ac      	b.n	8008360 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008206:	7bbb      	ldrb	r3, [r7, #14]
 8008208:	2b05      	cmp	r3, #5
 800820a:	d105      	bne.n	8008218 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	220c      	movs	r2, #12
 8008210:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008212:	2303      	movs	r3, #3
 8008214:	73fb      	strb	r3, [r7, #15]
      break;
 8008216:	e0a3      	b.n	8008360 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008218:	7bbb      	ldrb	r3, [r7, #14]
 800821a:	2b02      	cmp	r3, #2
 800821c:	d103      	bne.n	8008226 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2205      	movs	r2, #5
 8008222:	761a      	strb	r2, [r3, #24]
      break;
 8008224:	e09c      	b.n	8008360 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008226:	7bbb      	ldrb	r3, [r7, #14]
 8008228:	2b04      	cmp	r3, #4
 800822a:	f040 8099 	bne.w	8008360 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	220b      	movs	r2, #11
 8008232:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008234:	2302      	movs	r3, #2
 8008236:	73fb      	strb	r3, [r7, #15]
      break;
 8008238:	e092      	b.n	8008360 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	791b      	ldrb	r3, [r3, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	2100      	movs	r1, #0
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 f8d5 	bl	80083f2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800824e:	b29a      	uxth	r2, r3
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2208      	movs	r2, #8
 8008258:	761a      	strb	r2, [r3, #24]

      break;
 800825a:	e086      	b.n	800836a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	791b      	ldrb	r3, [r3, #4]
 8008260:	4619      	mov	r1, r3
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 fc12 	bl	8008a8c <USBH_LL_GetURBState>
 8008268:	4603      	mov	r3, r0
 800826a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800826c:	7bbb      	ldrb	r3, [r7, #14]
 800826e:	2b01      	cmp	r3, #1
 8008270:	d105      	bne.n	800827e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	220d      	movs	r2, #13
 8008276:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008278:	2300      	movs	r3, #0
 800827a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800827c:	e072      	b.n	8008364 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800827e:	7bbb      	ldrb	r3, [r7, #14]
 8008280:	2b04      	cmp	r3, #4
 8008282:	d103      	bne.n	800828c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	220b      	movs	r2, #11
 8008288:	761a      	strb	r2, [r3, #24]
      break;
 800828a:	e06b      	b.n	8008364 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800828c:	7bbb      	ldrb	r3, [r7, #14]
 800828e:	2b05      	cmp	r3, #5
 8008290:	d168      	bne.n	8008364 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008292:	2303      	movs	r3, #3
 8008294:	73fb      	strb	r3, [r7, #15]
      break;
 8008296:	e065      	b.n	8008364 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	795b      	ldrb	r3, [r3, #5]
 800829c:	2201      	movs	r2, #1
 800829e:	9200      	str	r2, [sp, #0]
 80082a0:	2200      	movs	r2, #0
 80082a2:	2100      	movs	r1, #0
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 f87f 	bl	80083a8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80082b0:	b29a      	uxth	r2, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	220a      	movs	r2, #10
 80082ba:	761a      	strb	r2, [r3, #24]
      break;
 80082bc:	e055      	b.n	800836a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	795b      	ldrb	r3, [r3, #5]
 80082c2:	4619      	mov	r1, r3
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 fbe1 	bl	8008a8c <USBH_LL_GetURBState>
 80082ca:	4603      	mov	r3, r0
 80082cc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80082ce:	7bbb      	ldrb	r3, [r7, #14]
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d105      	bne.n	80082e0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80082d4:	2300      	movs	r3, #0
 80082d6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	220d      	movs	r2, #13
 80082dc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80082de:	e043      	b.n	8008368 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80082e0:	7bbb      	ldrb	r3, [r7, #14]
 80082e2:	2b02      	cmp	r3, #2
 80082e4:	d103      	bne.n	80082ee <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2209      	movs	r2, #9
 80082ea:	761a      	strb	r2, [r3, #24]
      break;
 80082ec:	e03c      	b.n	8008368 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80082ee:	7bbb      	ldrb	r3, [r7, #14]
 80082f0:	2b04      	cmp	r3, #4
 80082f2:	d139      	bne.n	8008368 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	220b      	movs	r2, #11
 80082f8:	761a      	strb	r2, [r3, #24]
      break;
 80082fa:	e035      	b.n	8008368 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	7e5b      	ldrb	r3, [r3, #25]
 8008300:	3301      	adds	r3, #1
 8008302:	b2da      	uxtb	r2, r3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	765a      	strb	r2, [r3, #25]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	7e5b      	ldrb	r3, [r3, #25]
 800830c:	2b02      	cmp	r3, #2
 800830e:	d806      	bhi.n	800831e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2201      	movs	r2, #1
 8008314:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2201      	movs	r2, #1
 800831a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800831c:	e025      	b.n	800836a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008324:	2106      	movs	r1, #6
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	795b      	ldrb	r3, [r3, #5]
 8008334:	4619      	mov	r1, r3
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 f90c 	bl	8008554 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	791b      	ldrb	r3, [r3, #4]
 8008340:	4619      	mov	r1, r3
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f906 	bl	8008554 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800834e:	2302      	movs	r3, #2
 8008350:	73fb      	strb	r3, [r7, #15]
      break;
 8008352:	e00a      	b.n	800836a <USBH_HandleControl+0x2de>

    default:
      break;
 8008354:	bf00      	nop
 8008356:	e008      	b.n	800836a <USBH_HandleControl+0x2de>
      break;
 8008358:	bf00      	nop
 800835a:	e006      	b.n	800836a <USBH_HandleControl+0x2de>
      break;
 800835c:	bf00      	nop
 800835e:	e004      	b.n	800836a <USBH_HandleControl+0x2de>
      break;
 8008360:	bf00      	nop
 8008362:	e002      	b.n	800836a <USBH_HandleControl+0x2de>
      break;
 8008364:	bf00      	nop
 8008366:	e000      	b.n	800836a <USBH_HandleControl+0x2de>
      break;
 8008368:	bf00      	nop
  }

  return status;
 800836a:	7bfb      	ldrb	r3, [r7, #15]
}
 800836c:	4618      	mov	r0, r3
 800836e:	3710      	adds	r7, #16
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b088      	sub	sp, #32
 8008378:	af04      	add	r7, sp, #16
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	4613      	mov	r3, r2
 8008380:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008382:	79f9      	ldrb	r1, [r7, #7]
 8008384:	2300      	movs	r3, #0
 8008386:	9303      	str	r3, [sp, #12]
 8008388:	2308      	movs	r3, #8
 800838a:	9302      	str	r3, [sp, #8]
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	9301      	str	r3, [sp, #4]
 8008390:	2300      	movs	r3, #0
 8008392:	9300      	str	r3, [sp, #0]
 8008394:	2300      	movs	r3, #0
 8008396:	2200      	movs	r2, #0
 8008398:	68f8      	ldr	r0, [r7, #12]
 800839a:	f000 fb46 	bl	8008a2a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800839e:	2300      	movs	r3, #0
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3710      	adds	r7, #16
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b088      	sub	sp, #32
 80083ac:	af04      	add	r7, sp, #16
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	60b9      	str	r1, [r7, #8]
 80083b2:	4611      	mov	r1, r2
 80083b4:	461a      	mov	r2, r3
 80083b6:	460b      	mov	r3, r1
 80083b8:	80fb      	strh	r3, [r7, #6]
 80083ba:	4613      	mov	r3, r2
 80083bc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d001      	beq.n	80083cc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80083c8:	2300      	movs	r3, #0
 80083ca:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80083cc:	7979      	ldrb	r1, [r7, #5]
 80083ce:	7e3b      	ldrb	r3, [r7, #24]
 80083d0:	9303      	str	r3, [sp, #12]
 80083d2:	88fb      	ldrh	r3, [r7, #6]
 80083d4:	9302      	str	r3, [sp, #8]
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	9301      	str	r3, [sp, #4]
 80083da:	2301      	movs	r3, #1
 80083dc:	9300      	str	r3, [sp, #0]
 80083de:	2300      	movs	r3, #0
 80083e0:	2200      	movs	r2, #0
 80083e2:	68f8      	ldr	r0, [r7, #12]
 80083e4:	f000 fb21 	bl	8008a2a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80083e8:	2300      	movs	r3, #0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b088      	sub	sp, #32
 80083f6:	af04      	add	r7, sp, #16
 80083f8:	60f8      	str	r0, [r7, #12]
 80083fa:	60b9      	str	r1, [r7, #8]
 80083fc:	4611      	mov	r1, r2
 80083fe:	461a      	mov	r2, r3
 8008400:	460b      	mov	r3, r1
 8008402:	80fb      	strh	r3, [r7, #6]
 8008404:	4613      	mov	r3, r2
 8008406:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008408:	7979      	ldrb	r1, [r7, #5]
 800840a:	2300      	movs	r3, #0
 800840c:	9303      	str	r3, [sp, #12]
 800840e:	88fb      	ldrh	r3, [r7, #6]
 8008410:	9302      	str	r3, [sp, #8]
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	9301      	str	r3, [sp, #4]
 8008416:	2301      	movs	r3, #1
 8008418:	9300      	str	r3, [sp, #0]
 800841a:	2300      	movs	r3, #0
 800841c:	2201      	movs	r2, #1
 800841e:	68f8      	ldr	r0, [r7, #12]
 8008420:	f000 fb03 	bl	8008a2a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008424:	2300      	movs	r3, #0

}
 8008426:	4618      	mov	r0, r3
 8008428:	3710      	adds	r7, #16
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}

0800842e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800842e:	b580      	push	{r7, lr}
 8008430:	b088      	sub	sp, #32
 8008432:	af04      	add	r7, sp, #16
 8008434:	60f8      	str	r0, [r7, #12]
 8008436:	60b9      	str	r1, [r7, #8]
 8008438:	4611      	mov	r1, r2
 800843a:	461a      	mov	r2, r3
 800843c:	460b      	mov	r3, r1
 800843e:	80fb      	strh	r3, [r7, #6]
 8008440:	4613      	mov	r3, r2
 8008442:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800844a:	2b00      	cmp	r3, #0
 800844c:	d001      	beq.n	8008452 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800844e:	2300      	movs	r3, #0
 8008450:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008452:	7979      	ldrb	r1, [r7, #5]
 8008454:	7e3b      	ldrb	r3, [r7, #24]
 8008456:	9303      	str	r3, [sp, #12]
 8008458:	88fb      	ldrh	r3, [r7, #6]
 800845a:	9302      	str	r3, [sp, #8]
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	9301      	str	r3, [sp, #4]
 8008460:	2301      	movs	r3, #1
 8008462:	9300      	str	r3, [sp, #0]
 8008464:	2302      	movs	r3, #2
 8008466:	2200      	movs	r2, #0
 8008468:	68f8      	ldr	r0, [r7, #12]
 800846a:	f000 fade 	bl	8008a2a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800846e:	2300      	movs	r3, #0
}
 8008470:	4618      	mov	r0, r3
 8008472:	3710      	adds	r7, #16
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b088      	sub	sp, #32
 800847c:	af04      	add	r7, sp, #16
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	4611      	mov	r1, r2
 8008484:	461a      	mov	r2, r3
 8008486:	460b      	mov	r3, r1
 8008488:	80fb      	strh	r3, [r7, #6]
 800848a:	4613      	mov	r3, r2
 800848c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800848e:	7979      	ldrb	r1, [r7, #5]
 8008490:	2300      	movs	r3, #0
 8008492:	9303      	str	r3, [sp, #12]
 8008494:	88fb      	ldrh	r3, [r7, #6]
 8008496:	9302      	str	r3, [sp, #8]
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	9301      	str	r3, [sp, #4]
 800849c:	2301      	movs	r3, #1
 800849e:	9300      	str	r3, [sp, #0]
 80084a0:	2302      	movs	r3, #2
 80084a2:	2201      	movs	r2, #1
 80084a4:	68f8      	ldr	r0, [r7, #12]
 80084a6:	f000 fac0 	bl	8008a2a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3710      	adds	r7, #16
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b086      	sub	sp, #24
 80084b8:	af04      	add	r7, sp, #16
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	4608      	mov	r0, r1
 80084be:	4611      	mov	r1, r2
 80084c0:	461a      	mov	r2, r3
 80084c2:	4603      	mov	r3, r0
 80084c4:	70fb      	strb	r3, [r7, #3]
 80084c6:	460b      	mov	r3, r1
 80084c8:	70bb      	strb	r3, [r7, #2]
 80084ca:	4613      	mov	r3, r2
 80084cc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80084ce:	7878      	ldrb	r0, [r7, #1]
 80084d0:	78ba      	ldrb	r2, [r7, #2]
 80084d2:	78f9      	ldrb	r1, [r7, #3]
 80084d4:	8b3b      	ldrh	r3, [r7, #24]
 80084d6:	9302      	str	r3, [sp, #8]
 80084d8:	7d3b      	ldrb	r3, [r7, #20]
 80084da:	9301      	str	r3, [sp, #4]
 80084dc:	7c3b      	ldrb	r3, [r7, #16]
 80084de:	9300      	str	r3, [sp, #0]
 80084e0:	4603      	mov	r3, r0
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 fa53 	bl	800898e <USBH_LL_OpenPipe>

  return USBH_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3708      	adds	r7, #8
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b082      	sub	sp, #8
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
 80084fa:	460b      	mov	r3, r1
 80084fc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80084fe:	78fb      	ldrb	r3, [r7, #3]
 8008500:	4619      	mov	r1, r3
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 fa72 	bl	80089ec <USBH_LL_ClosePipe>

  return USBH_OK;
 8008508:	2300      	movs	r3, #0
}
 800850a:	4618      	mov	r0, r3
 800850c:	3708      	adds	r7, #8
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b084      	sub	sp, #16
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
 800851a:	460b      	mov	r3, r1
 800851c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 f836 	bl	8008590 <USBH_GetFreePipe>
 8008524:	4603      	mov	r3, r0
 8008526:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008528:	89fb      	ldrh	r3, [r7, #14]
 800852a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800852e:	4293      	cmp	r3, r2
 8008530:	d00a      	beq.n	8008548 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008532:	78fa      	ldrb	r2, [r7, #3]
 8008534:	89fb      	ldrh	r3, [r7, #14]
 8008536:	f003 030f 	and.w	r3, r3, #15
 800853a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800853e:	6879      	ldr	r1, [r7, #4]
 8008540:	33e0      	adds	r3, #224	@ 0xe0
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	440b      	add	r3, r1
 8008546:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008548:	89fb      	ldrh	r3, [r7, #14]
 800854a:	b2db      	uxtb	r3, r3
}
 800854c:	4618      	mov	r0, r3
 800854e:	3710      	adds	r7, #16
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008554:	b480      	push	{r7}
 8008556:	b083      	sub	sp, #12
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	460b      	mov	r3, r1
 800855e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008560:	78fb      	ldrb	r3, [r7, #3]
 8008562:	2b0f      	cmp	r3, #15
 8008564:	d80d      	bhi.n	8008582 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008566:	78fb      	ldrb	r3, [r7, #3]
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	33e0      	adds	r3, #224	@ 0xe0
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	4413      	add	r3, r2
 8008570:	685a      	ldr	r2, [r3, #4]
 8008572:	78fb      	ldrb	r3, [r7, #3]
 8008574:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008578:	6879      	ldr	r1, [r7, #4]
 800857a:	33e0      	adds	r3, #224	@ 0xe0
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	440b      	add	r3, r1
 8008580:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008582:	2300      	movs	r3, #0
}
 8008584:	4618      	mov	r0, r3
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr

08008590 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008590:	b480      	push	{r7}
 8008592:	b085      	sub	sp, #20
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008598:	2300      	movs	r3, #0
 800859a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800859c:	2300      	movs	r3, #0
 800859e:	73fb      	strb	r3, [r7, #15]
 80085a0:	e00f      	b.n	80085c2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80085a2:	7bfb      	ldrb	r3, [r7, #15]
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	33e0      	adds	r3, #224	@ 0xe0
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	4413      	add	r3, r2
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d102      	bne.n	80085bc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80085b6:	7bfb      	ldrb	r3, [r7, #15]
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	e007      	b.n	80085cc <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80085bc:	7bfb      	ldrb	r3, [r7, #15]
 80085be:	3301      	adds	r3, #1
 80085c0:	73fb      	strb	r3, [r7, #15]
 80085c2:	7bfb      	ldrb	r3, [r7, #15]
 80085c4:	2b0f      	cmp	r3, #15
 80085c6:	d9ec      	bls.n	80085a2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80085c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3714      	adds	r7, #20
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80085dc:	2201      	movs	r2, #1
 80085de:	490e      	ldr	r1, [pc, #56]	@ (8008618 <MX_USB_HOST_Init+0x40>)
 80085e0:	480e      	ldr	r0, [pc, #56]	@ (800861c <MX_USB_HOST_Init+0x44>)
 80085e2:	f7fe fb15 	bl	8006c10 <USBH_Init>
 80085e6:	4603      	mov	r3, r0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d001      	beq.n	80085f0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80085ec:	f7f8 f9b4 	bl	8000958 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80085f0:	490b      	ldr	r1, [pc, #44]	@ (8008620 <MX_USB_HOST_Init+0x48>)
 80085f2:	480a      	ldr	r0, [pc, #40]	@ (800861c <MX_USB_HOST_Init+0x44>)
 80085f4:	f7fe fbb9 	bl	8006d6a <USBH_RegisterClass>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d001      	beq.n	8008602 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80085fe:	f7f8 f9ab 	bl	8000958 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008602:	4806      	ldr	r0, [pc, #24]	@ (800861c <MX_USB_HOST_Init+0x44>)
 8008604:	f7fe fc3d 	bl	8006e82 <USBH_Start>
 8008608:	4603      	mov	r3, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d001      	beq.n	8008612 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800860e:	f7f8 f9a3 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008612:	bf00      	nop
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	08008639 	.word	0x08008639
 800861c:	20000288 	.word	0x20000288
 8008620:	2000008c 	.word	0x2000008c

08008624 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008628:	4802      	ldr	r0, [pc, #8]	@ (8008634 <MX_USB_HOST_Process+0x10>)
 800862a:	f7fe fc3b 	bl	8006ea4 <USBH_Process>
}
 800862e:	bf00      	nop
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	20000288 	.word	0x20000288

08008638 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	460b      	mov	r3, r1
 8008642:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008644:	78fb      	ldrb	r3, [r7, #3]
 8008646:	3b01      	subs	r3, #1
 8008648:	2b04      	cmp	r3, #4
 800864a:	d819      	bhi.n	8008680 <USBH_UserProcess+0x48>
 800864c:	a201      	add	r2, pc, #4	@ (adr r2, 8008654 <USBH_UserProcess+0x1c>)
 800864e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008652:	bf00      	nop
 8008654:	08008681 	.word	0x08008681
 8008658:	08008671 	.word	0x08008671
 800865c:	08008681 	.word	0x08008681
 8008660:	08008679 	.word	0x08008679
 8008664:	08008669 	.word	0x08008669
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008668:	4b09      	ldr	r3, [pc, #36]	@ (8008690 <USBH_UserProcess+0x58>)
 800866a:	2203      	movs	r2, #3
 800866c:	701a      	strb	r2, [r3, #0]
  break;
 800866e:	e008      	b.n	8008682 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008670:	4b07      	ldr	r3, [pc, #28]	@ (8008690 <USBH_UserProcess+0x58>)
 8008672:	2202      	movs	r2, #2
 8008674:	701a      	strb	r2, [r3, #0]
  break;
 8008676:	e004      	b.n	8008682 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008678:	4b05      	ldr	r3, [pc, #20]	@ (8008690 <USBH_UserProcess+0x58>)
 800867a:	2201      	movs	r2, #1
 800867c:	701a      	strb	r2, [r3, #0]
  break;
 800867e:	e000      	b.n	8008682 <USBH_UserProcess+0x4a>

  default:
  break;
 8008680:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008682:	bf00      	nop
 8008684:	370c      	adds	r7, #12
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr
 800868e:	bf00      	nop
 8008690:	20000660 	.word	0x20000660

08008694 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b08a      	sub	sp, #40	@ 0x28
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800869c:	f107 0314 	add.w	r3, r7, #20
 80086a0:	2200      	movs	r2, #0
 80086a2:	601a      	str	r2, [r3, #0]
 80086a4:	605a      	str	r2, [r3, #4]
 80086a6:	609a      	str	r2, [r3, #8]
 80086a8:	60da      	str	r2, [r3, #12]
 80086aa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80086b4:	d147      	bne.n	8008746 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086b6:	2300      	movs	r3, #0
 80086b8:	613b      	str	r3, [r7, #16]
 80086ba:	4b25      	ldr	r3, [pc, #148]	@ (8008750 <HAL_HCD_MspInit+0xbc>)
 80086bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086be:	4a24      	ldr	r2, [pc, #144]	@ (8008750 <HAL_HCD_MspInit+0xbc>)
 80086c0:	f043 0301 	orr.w	r3, r3, #1
 80086c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80086c6:	4b22      	ldr	r3, [pc, #136]	@ (8008750 <HAL_HCD_MspInit+0xbc>)
 80086c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086ca:	f003 0301 	and.w	r3, r3, #1
 80086ce:	613b      	str	r3, [r7, #16]
 80086d0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80086d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80086d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80086d8:	2300      	movs	r3, #0
 80086da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086dc:	2300      	movs	r3, #0
 80086de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80086e0:	f107 0314 	add.w	r3, r7, #20
 80086e4:	4619      	mov	r1, r3
 80086e6:	481b      	ldr	r0, [pc, #108]	@ (8008754 <HAL_HCD_MspInit+0xc0>)
 80086e8:	f7f8 fe86 	bl	80013f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80086ec:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80086f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086f2:	2302      	movs	r3, #2
 80086f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086f6:	2300      	movs	r3, #0
 80086f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086fa:	2300      	movs	r3, #0
 80086fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80086fe:	230a      	movs	r3, #10
 8008700:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008702:	f107 0314 	add.w	r3, r7, #20
 8008706:	4619      	mov	r1, r3
 8008708:	4812      	ldr	r0, [pc, #72]	@ (8008754 <HAL_HCD_MspInit+0xc0>)
 800870a:	f7f8 fe75 	bl	80013f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800870e:	4b10      	ldr	r3, [pc, #64]	@ (8008750 <HAL_HCD_MspInit+0xbc>)
 8008710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008712:	4a0f      	ldr	r2, [pc, #60]	@ (8008750 <HAL_HCD_MspInit+0xbc>)
 8008714:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008718:	6353      	str	r3, [r2, #52]	@ 0x34
 800871a:	2300      	movs	r3, #0
 800871c:	60fb      	str	r3, [r7, #12]
 800871e:	4b0c      	ldr	r3, [pc, #48]	@ (8008750 <HAL_HCD_MspInit+0xbc>)
 8008720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008722:	4a0b      	ldr	r2, [pc, #44]	@ (8008750 <HAL_HCD_MspInit+0xbc>)
 8008724:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008728:	6453      	str	r3, [r2, #68]	@ 0x44
 800872a:	4b09      	ldr	r3, [pc, #36]	@ (8008750 <HAL_HCD_MspInit+0xbc>)
 800872c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800872e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008732:	60fb      	str	r3, [r7, #12]
 8008734:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008736:	2200      	movs	r2, #0
 8008738:	2100      	movs	r1, #0
 800873a:	2043      	movs	r0, #67	@ 0x43
 800873c:	f7f8 fe25 	bl	800138a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008740:	2043      	movs	r0, #67	@ 0x43
 8008742:	f7f8 fe3e 	bl	80013c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008746:	bf00      	nop
 8008748:	3728      	adds	r7, #40	@ 0x28
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	40023800 	.word	0x40023800
 8008754:	40020000 	.word	0x40020000

08008758 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008766:	4618      	mov	r0, r3
 8008768:	f7fe ff73 	bl	8007652 <USBH_LL_IncTimer>
}
 800876c:	bf00      	nop
 800876e:	3708      	adds	r7, #8
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b082      	sub	sp, #8
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008782:	4618      	mov	r0, r3
 8008784:	f7fe ffab 	bl	80076de <USBH_LL_Connect>
}
 8008788:	bf00      	nop
 800878a:	3708      	adds	r7, #8
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b082      	sub	sp, #8
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800879e:	4618      	mov	r0, r3
 80087a0:	f7fe ffb4 	bl	800770c <USBH_LL_Disconnect>
}
 80087a4:	bf00      	nop
 80087a6:	3708      	adds	r7, #8
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	460b      	mov	r3, r1
 80087b6:	70fb      	strb	r3, [r7, #3]
 80087b8:	4613      	mov	r3, r2
 80087ba:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80087bc:	bf00      	nop
 80087be:	370c      	adds	r7, #12
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7fe ff65 	bl	80076a6 <USBH_LL_PortEnabled>
}
 80087dc:	bf00      	nop
 80087de:	3708      	adds	r7, #8
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b082      	sub	sp, #8
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80087f2:	4618      	mov	r0, r3
 80087f4:	f7fe ff65 	bl	80076c2 <USBH_LL_PortDisabled>
}
 80087f8:	bf00      	nop
 80087fa:	3708      	adds	r7, #8
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800880e:	2b01      	cmp	r3, #1
 8008810:	d12a      	bne.n	8008868 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008812:	4a18      	ldr	r2, [pc, #96]	@ (8008874 <USBH_LL_Init+0x74>)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a15      	ldr	r2, [pc, #84]	@ (8008874 <USBH_LL_Init+0x74>)
 800881e:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008822:	4b14      	ldr	r3, [pc, #80]	@ (8008874 <USBH_LL_Init+0x74>)
 8008824:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008828:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800882a:	4b12      	ldr	r3, [pc, #72]	@ (8008874 <USBH_LL_Init+0x74>)
 800882c:	2208      	movs	r2, #8
 800882e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008830:	4b10      	ldr	r3, [pc, #64]	@ (8008874 <USBH_LL_Init+0x74>)
 8008832:	2201      	movs	r2, #1
 8008834:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008836:	4b0f      	ldr	r3, [pc, #60]	@ (8008874 <USBH_LL_Init+0x74>)
 8008838:	2200      	movs	r2, #0
 800883a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800883c:	4b0d      	ldr	r3, [pc, #52]	@ (8008874 <USBH_LL_Init+0x74>)
 800883e:	2202      	movs	r2, #2
 8008840:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008842:	4b0c      	ldr	r3, [pc, #48]	@ (8008874 <USBH_LL_Init+0x74>)
 8008844:	2200      	movs	r2, #0
 8008846:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008848:	480a      	ldr	r0, [pc, #40]	@ (8008874 <USBH_LL_Init+0x74>)
 800884a:	f7f8 ff8a 	bl	8001762 <HAL_HCD_Init>
 800884e:	4603      	mov	r3, r0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d001      	beq.n	8008858 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008854:	f7f8 f880 	bl	8000958 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008858:	4806      	ldr	r0, [pc, #24]	@ (8008874 <USBH_LL_Init+0x74>)
 800885a:	f7f9 fbeb 	bl	8002034 <HAL_HCD_GetCurrentFrame>
 800885e:	4603      	mov	r3, r0
 8008860:	4619      	mov	r1, r3
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f7fe fee6 	bl	8007634 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008868:	2300      	movs	r3, #0
}
 800886a:	4618      	mov	r0, r3
 800886c:	3708      	adds	r7, #8
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	20000664 	.word	0x20000664

08008878 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008880:	2300      	movs	r3, #0
 8008882:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008884:	2300      	movs	r3, #0
 8008886:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800888e:	4618      	mov	r0, r3
 8008890:	f7f9 fb58 	bl	8001f44 <HAL_HCD_Start>
 8008894:	4603      	mov	r3, r0
 8008896:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008898:	7bfb      	ldrb	r3, [r7, #15]
 800889a:	4618      	mov	r0, r3
 800889c:	f000 f95e 	bl	8008b5c <USBH_Get_USB_Status>
 80088a0:	4603      	mov	r3, r0
 80088a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b084      	sub	sp, #16
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088b6:	2300      	movs	r3, #0
 80088b8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80088ba:	2300      	movs	r3, #0
 80088bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80088c4:	4618      	mov	r0, r3
 80088c6:	f7f9 fb60 	bl	8001f8a <HAL_HCD_Stop>
 80088ca:	4603      	mov	r3, r0
 80088cc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80088ce:	7bfb      	ldrb	r3, [r7, #15]
 80088d0:	4618      	mov	r0, r3
 80088d2:	f000 f943 	bl	8008b5c <USBH_Get_USB_Status>
 80088d6:	4603      	mov	r3, r0
 80088d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088da:	7bbb      	ldrb	r3, [r7, #14]
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3710      	adds	r7, #16
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b084      	sub	sp, #16
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80088ec:	2301      	movs	r3, #1
 80088ee:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7f9 fbaa 	bl	8002050 <HAL_HCD_GetCurrentSpeed>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b02      	cmp	r3, #2
 8008900:	d00c      	beq.n	800891c <USBH_LL_GetSpeed+0x38>
 8008902:	2b02      	cmp	r3, #2
 8008904:	d80d      	bhi.n	8008922 <USBH_LL_GetSpeed+0x3e>
 8008906:	2b00      	cmp	r3, #0
 8008908:	d002      	beq.n	8008910 <USBH_LL_GetSpeed+0x2c>
 800890a:	2b01      	cmp	r3, #1
 800890c:	d003      	beq.n	8008916 <USBH_LL_GetSpeed+0x32>
 800890e:	e008      	b.n	8008922 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008910:	2300      	movs	r3, #0
 8008912:	73fb      	strb	r3, [r7, #15]
    break;
 8008914:	e008      	b.n	8008928 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008916:	2301      	movs	r3, #1
 8008918:	73fb      	strb	r3, [r7, #15]
    break;
 800891a:	e005      	b.n	8008928 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800891c:	2302      	movs	r3, #2
 800891e:	73fb      	strb	r3, [r7, #15]
    break;
 8008920:	e002      	b.n	8008928 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008922:	2301      	movs	r3, #1
 8008924:	73fb      	strb	r3, [r7, #15]
    break;
 8008926:	bf00      	nop
  }
  return  speed;
 8008928:	7bfb      	ldrb	r3, [r7, #15]
}
 800892a:	4618      	mov	r0, r3
 800892c:	3710      	adds	r7, #16
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}

08008932 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008932:	b580      	push	{r7, lr}
 8008934:	b084      	sub	sp, #16
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800893a:	2300      	movs	r3, #0
 800893c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800893e:	2300      	movs	r3, #0
 8008940:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008948:	4618      	mov	r0, r3
 800894a:	f7f9 fb3b 	bl	8001fc4 <HAL_HCD_ResetPort>
 800894e:	4603      	mov	r3, r0
 8008950:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008952:	7bfb      	ldrb	r3, [r7, #15]
 8008954:	4618      	mov	r0, r3
 8008956:	f000 f901 	bl	8008b5c <USBH_Get_USB_Status>
 800895a:	4603      	mov	r3, r0
 800895c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800895e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008960:	4618      	mov	r0, r3
 8008962:	3710      	adds	r7, #16
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	460b      	mov	r3, r1
 8008972:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800897a:	78fa      	ldrb	r2, [r7, #3]
 800897c:	4611      	mov	r1, r2
 800897e:	4618      	mov	r0, r3
 8008980:	f7f9 fb43 	bl	800200a <HAL_HCD_HC_GetXferCount>
 8008984:	4603      	mov	r3, r0
}
 8008986:	4618      	mov	r0, r3
 8008988:	3708      	adds	r7, #8
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800898e:	b590      	push	{r4, r7, lr}
 8008990:	b089      	sub	sp, #36	@ 0x24
 8008992:	af04      	add	r7, sp, #16
 8008994:	6078      	str	r0, [r7, #4]
 8008996:	4608      	mov	r0, r1
 8008998:	4611      	mov	r1, r2
 800899a:	461a      	mov	r2, r3
 800899c:	4603      	mov	r3, r0
 800899e:	70fb      	strb	r3, [r7, #3]
 80089a0:	460b      	mov	r3, r1
 80089a2:	70bb      	strb	r3, [r7, #2]
 80089a4:	4613      	mov	r3, r2
 80089a6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089a8:	2300      	movs	r3, #0
 80089aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80089ac:	2300      	movs	r3, #0
 80089ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80089b6:	787c      	ldrb	r4, [r7, #1]
 80089b8:	78ba      	ldrb	r2, [r7, #2]
 80089ba:	78f9      	ldrb	r1, [r7, #3]
 80089bc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80089be:	9302      	str	r3, [sp, #8]
 80089c0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80089c4:	9301      	str	r3, [sp, #4]
 80089c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80089ca:	9300      	str	r3, [sp, #0]
 80089cc:	4623      	mov	r3, r4
 80089ce:	f7f8 ff2f 	bl	8001830 <HAL_HCD_HC_Init>
 80089d2:	4603      	mov	r3, r0
 80089d4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80089d6:	7bfb      	ldrb	r3, [r7, #15]
 80089d8:	4618      	mov	r0, r3
 80089da:	f000 f8bf 	bl	8008b5c <USBH_Get_USB_Status>
 80089de:	4603      	mov	r3, r0
 80089e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3714      	adds	r7, #20
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd90      	pop	{r4, r7, pc}

080089ec <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	460b      	mov	r3, r1
 80089f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089f8:	2300      	movs	r3, #0
 80089fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80089fc:	2300      	movs	r3, #0
 80089fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008a06:	78fa      	ldrb	r2, [r7, #3]
 8008a08:	4611      	mov	r1, r2
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7f8 ffc8 	bl	80019a0 <HAL_HCD_HC_Halt>
 8008a10:	4603      	mov	r3, r0
 8008a12:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a14:	7bfb      	ldrb	r3, [r7, #15]
 8008a16:	4618      	mov	r0, r3
 8008a18:	f000 f8a0 	bl	8008b5c <USBH_Get_USB_Status>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a20:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008a2a:	b590      	push	{r4, r7, lr}
 8008a2c:	b089      	sub	sp, #36	@ 0x24
 8008a2e:	af04      	add	r7, sp, #16
 8008a30:	6078      	str	r0, [r7, #4]
 8008a32:	4608      	mov	r0, r1
 8008a34:	4611      	mov	r1, r2
 8008a36:	461a      	mov	r2, r3
 8008a38:	4603      	mov	r3, r0
 8008a3a:	70fb      	strb	r3, [r7, #3]
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	70bb      	strb	r3, [r7, #2]
 8008a40:	4613      	mov	r3, r2
 8008a42:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a44:	2300      	movs	r3, #0
 8008a46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8008a52:	787c      	ldrb	r4, [r7, #1]
 8008a54:	78ba      	ldrb	r2, [r7, #2]
 8008a56:	78f9      	ldrb	r1, [r7, #3]
 8008a58:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008a5c:	9303      	str	r3, [sp, #12]
 8008a5e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008a60:	9302      	str	r3, [sp, #8]
 8008a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a64:	9301      	str	r3, [sp, #4]
 8008a66:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008a6a:	9300      	str	r3, [sp, #0]
 8008a6c:	4623      	mov	r3, r4
 8008a6e:	f7f8 ffbb 	bl	80019e8 <HAL_HCD_HC_SubmitRequest>
 8008a72:	4603      	mov	r3, r0
 8008a74:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008a76:	7bfb      	ldrb	r3, [r7, #15]
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f000 f86f 	bl	8008b5c <USBH_Get_USB_Status>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a82:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3714      	adds	r7, #20
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd90      	pop	{r4, r7, pc}

08008a8c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	460b      	mov	r3, r1
 8008a96:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008a9e:	78fa      	ldrb	r2, [r7, #3]
 8008aa0:	4611      	mov	r1, r2
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f7f9 fa9c 	bl	8001fe0 <HAL_HCD_HC_GetURBState>
 8008aa8:	4603      	mov	r3, r0
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3708      	adds	r7, #8
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}

08008ab2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008ab2:	b580      	push	{r7, lr}
 8008ab4:	b082      	sub	sp, #8
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6078      	str	r0, [r7, #4]
 8008aba:	460b      	mov	r3, r1
 8008abc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d103      	bne.n	8008ad0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008ac8:	78fb      	ldrb	r3, [r7, #3]
 8008aca:	4618      	mov	r0, r3
 8008acc:	f000 f872 	bl	8008bb4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008ad0:	20c8      	movs	r0, #200	@ 0xc8
 8008ad2:	f7f8 fb5b 	bl	800118c <HAL_Delay>
  return USBH_OK;
 8008ad6:	2300      	movs	r3, #0
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3708      	adds	r7, #8
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b085      	sub	sp, #20
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	460b      	mov	r3, r1
 8008aea:	70fb      	strb	r3, [r7, #3]
 8008aec:	4613      	mov	r3, r2
 8008aee:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008af6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008af8:	78fa      	ldrb	r2, [r7, #3]
 8008afa:	68f9      	ldr	r1, [r7, #12]
 8008afc:	4613      	mov	r3, r2
 8008afe:	011b      	lsls	r3, r3, #4
 8008b00:	1a9b      	subs	r3, r3, r2
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	440b      	add	r3, r1
 8008b06:	3317      	adds	r3, #23
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00a      	beq.n	8008b24 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008b0e:	78fa      	ldrb	r2, [r7, #3]
 8008b10:	68f9      	ldr	r1, [r7, #12]
 8008b12:	4613      	mov	r3, r2
 8008b14:	011b      	lsls	r3, r3, #4
 8008b16:	1a9b      	subs	r3, r3, r2
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	440b      	add	r3, r1
 8008b1c:	333c      	adds	r3, #60	@ 0x3c
 8008b1e:	78ba      	ldrb	r2, [r7, #2]
 8008b20:	701a      	strb	r2, [r3, #0]
 8008b22:	e009      	b.n	8008b38 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008b24:	78fa      	ldrb	r2, [r7, #3]
 8008b26:	68f9      	ldr	r1, [r7, #12]
 8008b28:	4613      	mov	r3, r2
 8008b2a:	011b      	lsls	r3, r3, #4
 8008b2c:	1a9b      	subs	r3, r3, r2
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	440b      	add	r3, r1
 8008b32:	333d      	adds	r3, #61	@ 0x3d
 8008b34:	78ba      	ldrb	r2, [r7, #2]
 8008b36:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3714      	adds	r7, #20
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr

08008b46 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b082      	sub	sp, #8
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f7f8 fb1c 	bl	800118c <HAL_Delay>
}
 8008b54:	bf00      	nop
 8008b56:	3708      	adds	r7, #8
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b085      	sub	sp, #20
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	4603      	mov	r3, r0
 8008b64:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b66:	2300      	movs	r3, #0
 8008b68:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b6a:	79fb      	ldrb	r3, [r7, #7]
 8008b6c:	2b03      	cmp	r3, #3
 8008b6e:	d817      	bhi.n	8008ba0 <USBH_Get_USB_Status+0x44>
 8008b70:	a201      	add	r2, pc, #4	@ (adr r2, 8008b78 <USBH_Get_USB_Status+0x1c>)
 8008b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b76:	bf00      	nop
 8008b78:	08008b89 	.word	0x08008b89
 8008b7c:	08008b8f 	.word	0x08008b8f
 8008b80:	08008b95 	.word	0x08008b95
 8008b84:	08008b9b 	.word	0x08008b9b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b8c:	e00b      	b.n	8008ba6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008b8e:	2302      	movs	r3, #2
 8008b90:	73fb      	strb	r3, [r7, #15]
    break;
 8008b92:	e008      	b.n	8008ba6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008b94:	2301      	movs	r3, #1
 8008b96:	73fb      	strb	r3, [r7, #15]
    break;
 8008b98:	e005      	b.n	8008ba6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008b9a:	2302      	movs	r3, #2
 8008b9c:	73fb      	strb	r3, [r7, #15]
    break;
 8008b9e:	e002      	b.n	8008ba6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008ba0:	2302      	movs	r3, #2
 8008ba2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ba4:	bf00      	nop
  }
  return usb_status;
 8008ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3714      	adds	r7, #20
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	4603      	mov	r3, r0
 8008bbc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008bbe:	79fb      	ldrb	r3, [r7, #7]
 8008bc0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008bc2:	79fb      	ldrb	r3, [r7, #7]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d102      	bne.n	8008bce <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	73fb      	strb	r3, [r7, #15]
 8008bcc:	e001      	b.n	8008bd2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008bd2:	7bfb      	ldrb	r3, [r7, #15]
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	2101      	movs	r1, #1
 8008bd8:	4803      	ldr	r0, [pc, #12]	@ (8008be8 <MX_DriverVbusFS+0x34>)
 8008bda:	f7f8 fda9 	bl	8001730 <HAL_GPIO_WritePin>
}
 8008bde:	bf00      	nop
 8008be0:	3710      	adds	r7, #16
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	bf00      	nop
 8008be8:	40020800 	.word	0x40020800

08008bec <malloc>:
 8008bec:	4b02      	ldr	r3, [pc, #8]	@ (8008bf8 <malloc+0xc>)
 8008bee:	4601      	mov	r1, r0
 8008bf0:	6818      	ldr	r0, [r3, #0]
 8008bf2:	f000 b82d 	b.w	8008c50 <_malloc_r>
 8008bf6:	bf00      	nop
 8008bf8:	200000ac 	.word	0x200000ac

08008bfc <free>:
 8008bfc:	4b02      	ldr	r3, [pc, #8]	@ (8008c08 <free+0xc>)
 8008bfe:	4601      	mov	r1, r0
 8008c00:	6818      	ldr	r0, [r3, #0]
 8008c02:	f000 b903 	b.w	8008e0c <_free_r>
 8008c06:	bf00      	nop
 8008c08:	200000ac 	.word	0x200000ac

08008c0c <sbrk_aligned>:
 8008c0c:	b570      	push	{r4, r5, r6, lr}
 8008c0e:	4e0f      	ldr	r6, [pc, #60]	@ (8008c4c <sbrk_aligned+0x40>)
 8008c10:	460c      	mov	r4, r1
 8008c12:	6831      	ldr	r1, [r6, #0]
 8008c14:	4605      	mov	r5, r0
 8008c16:	b911      	cbnz	r1, 8008c1e <sbrk_aligned+0x12>
 8008c18:	f000 f8ae 	bl	8008d78 <_sbrk_r>
 8008c1c:	6030      	str	r0, [r6, #0]
 8008c1e:	4621      	mov	r1, r4
 8008c20:	4628      	mov	r0, r5
 8008c22:	f000 f8a9 	bl	8008d78 <_sbrk_r>
 8008c26:	1c43      	adds	r3, r0, #1
 8008c28:	d103      	bne.n	8008c32 <sbrk_aligned+0x26>
 8008c2a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008c2e:	4620      	mov	r0, r4
 8008c30:	bd70      	pop	{r4, r5, r6, pc}
 8008c32:	1cc4      	adds	r4, r0, #3
 8008c34:	f024 0403 	bic.w	r4, r4, #3
 8008c38:	42a0      	cmp	r0, r4
 8008c3a:	d0f8      	beq.n	8008c2e <sbrk_aligned+0x22>
 8008c3c:	1a21      	subs	r1, r4, r0
 8008c3e:	4628      	mov	r0, r5
 8008c40:	f000 f89a 	bl	8008d78 <_sbrk_r>
 8008c44:	3001      	adds	r0, #1
 8008c46:	d1f2      	bne.n	8008c2e <sbrk_aligned+0x22>
 8008c48:	e7ef      	b.n	8008c2a <sbrk_aligned+0x1e>
 8008c4a:	bf00      	nop
 8008c4c:	20000a44 	.word	0x20000a44

08008c50 <_malloc_r>:
 8008c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c54:	1ccd      	adds	r5, r1, #3
 8008c56:	f025 0503 	bic.w	r5, r5, #3
 8008c5a:	3508      	adds	r5, #8
 8008c5c:	2d0c      	cmp	r5, #12
 8008c5e:	bf38      	it	cc
 8008c60:	250c      	movcc	r5, #12
 8008c62:	2d00      	cmp	r5, #0
 8008c64:	4606      	mov	r6, r0
 8008c66:	db01      	blt.n	8008c6c <_malloc_r+0x1c>
 8008c68:	42a9      	cmp	r1, r5
 8008c6a:	d904      	bls.n	8008c76 <_malloc_r+0x26>
 8008c6c:	230c      	movs	r3, #12
 8008c6e:	6033      	str	r3, [r6, #0]
 8008c70:	2000      	movs	r0, #0
 8008c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008d4c <_malloc_r+0xfc>
 8008c7a:	f000 f869 	bl	8008d50 <__malloc_lock>
 8008c7e:	f8d8 3000 	ldr.w	r3, [r8]
 8008c82:	461c      	mov	r4, r3
 8008c84:	bb44      	cbnz	r4, 8008cd8 <_malloc_r+0x88>
 8008c86:	4629      	mov	r1, r5
 8008c88:	4630      	mov	r0, r6
 8008c8a:	f7ff ffbf 	bl	8008c0c <sbrk_aligned>
 8008c8e:	1c43      	adds	r3, r0, #1
 8008c90:	4604      	mov	r4, r0
 8008c92:	d158      	bne.n	8008d46 <_malloc_r+0xf6>
 8008c94:	f8d8 4000 	ldr.w	r4, [r8]
 8008c98:	4627      	mov	r7, r4
 8008c9a:	2f00      	cmp	r7, #0
 8008c9c:	d143      	bne.n	8008d26 <_malloc_r+0xd6>
 8008c9e:	2c00      	cmp	r4, #0
 8008ca0:	d04b      	beq.n	8008d3a <_malloc_r+0xea>
 8008ca2:	6823      	ldr	r3, [r4, #0]
 8008ca4:	4639      	mov	r1, r7
 8008ca6:	4630      	mov	r0, r6
 8008ca8:	eb04 0903 	add.w	r9, r4, r3
 8008cac:	f000 f864 	bl	8008d78 <_sbrk_r>
 8008cb0:	4581      	cmp	r9, r0
 8008cb2:	d142      	bne.n	8008d3a <_malloc_r+0xea>
 8008cb4:	6821      	ldr	r1, [r4, #0]
 8008cb6:	1a6d      	subs	r5, r5, r1
 8008cb8:	4629      	mov	r1, r5
 8008cba:	4630      	mov	r0, r6
 8008cbc:	f7ff ffa6 	bl	8008c0c <sbrk_aligned>
 8008cc0:	3001      	adds	r0, #1
 8008cc2:	d03a      	beq.n	8008d3a <_malloc_r+0xea>
 8008cc4:	6823      	ldr	r3, [r4, #0]
 8008cc6:	442b      	add	r3, r5
 8008cc8:	6023      	str	r3, [r4, #0]
 8008cca:	f8d8 3000 	ldr.w	r3, [r8]
 8008cce:	685a      	ldr	r2, [r3, #4]
 8008cd0:	bb62      	cbnz	r2, 8008d2c <_malloc_r+0xdc>
 8008cd2:	f8c8 7000 	str.w	r7, [r8]
 8008cd6:	e00f      	b.n	8008cf8 <_malloc_r+0xa8>
 8008cd8:	6822      	ldr	r2, [r4, #0]
 8008cda:	1b52      	subs	r2, r2, r5
 8008cdc:	d420      	bmi.n	8008d20 <_malloc_r+0xd0>
 8008cde:	2a0b      	cmp	r2, #11
 8008ce0:	d917      	bls.n	8008d12 <_malloc_r+0xc2>
 8008ce2:	1961      	adds	r1, r4, r5
 8008ce4:	42a3      	cmp	r3, r4
 8008ce6:	6025      	str	r5, [r4, #0]
 8008ce8:	bf18      	it	ne
 8008cea:	6059      	strne	r1, [r3, #4]
 8008cec:	6863      	ldr	r3, [r4, #4]
 8008cee:	bf08      	it	eq
 8008cf0:	f8c8 1000 	streq.w	r1, [r8]
 8008cf4:	5162      	str	r2, [r4, r5]
 8008cf6:	604b      	str	r3, [r1, #4]
 8008cf8:	4630      	mov	r0, r6
 8008cfa:	f000 f82f 	bl	8008d5c <__malloc_unlock>
 8008cfe:	f104 000b 	add.w	r0, r4, #11
 8008d02:	1d23      	adds	r3, r4, #4
 8008d04:	f020 0007 	bic.w	r0, r0, #7
 8008d08:	1ac2      	subs	r2, r0, r3
 8008d0a:	bf1c      	itt	ne
 8008d0c:	1a1b      	subne	r3, r3, r0
 8008d0e:	50a3      	strne	r3, [r4, r2]
 8008d10:	e7af      	b.n	8008c72 <_malloc_r+0x22>
 8008d12:	6862      	ldr	r2, [r4, #4]
 8008d14:	42a3      	cmp	r3, r4
 8008d16:	bf0c      	ite	eq
 8008d18:	f8c8 2000 	streq.w	r2, [r8]
 8008d1c:	605a      	strne	r2, [r3, #4]
 8008d1e:	e7eb      	b.n	8008cf8 <_malloc_r+0xa8>
 8008d20:	4623      	mov	r3, r4
 8008d22:	6864      	ldr	r4, [r4, #4]
 8008d24:	e7ae      	b.n	8008c84 <_malloc_r+0x34>
 8008d26:	463c      	mov	r4, r7
 8008d28:	687f      	ldr	r7, [r7, #4]
 8008d2a:	e7b6      	b.n	8008c9a <_malloc_r+0x4a>
 8008d2c:	461a      	mov	r2, r3
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	42a3      	cmp	r3, r4
 8008d32:	d1fb      	bne.n	8008d2c <_malloc_r+0xdc>
 8008d34:	2300      	movs	r3, #0
 8008d36:	6053      	str	r3, [r2, #4]
 8008d38:	e7de      	b.n	8008cf8 <_malloc_r+0xa8>
 8008d3a:	230c      	movs	r3, #12
 8008d3c:	6033      	str	r3, [r6, #0]
 8008d3e:	4630      	mov	r0, r6
 8008d40:	f000 f80c 	bl	8008d5c <__malloc_unlock>
 8008d44:	e794      	b.n	8008c70 <_malloc_r+0x20>
 8008d46:	6005      	str	r5, [r0, #0]
 8008d48:	e7d6      	b.n	8008cf8 <_malloc_r+0xa8>
 8008d4a:	bf00      	nop
 8008d4c:	20000a48 	.word	0x20000a48

08008d50 <__malloc_lock>:
 8008d50:	4801      	ldr	r0, [pc, #4]	@ (8008d58 <__malloc_lock+0x8>)
 8008d52:	f000 b84b 	b.w	8008dec <__retarget_lock_acquire_recursive>
 8008d56:	bf00      	nop
 8008d58:	20000b84 	.word	0x20000b84

08008d5c <__malloc_unlock>:
 8008d5c:	4801      	ldr	r0, [pc, #4]	@ (8008d64 <__malloc_unlock+0x8>)
 8008d5e:	f000 b846 	b.w	8008dee <__retarget_lock_release_recursive>
 8008d62:	bf00      	nop
 8008d64:	20000b84 	.word	0x20000b84

08008d68 <memset>:
 8008d68:	4402      	add	r2, r0
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d100      	bne.n	8008d72 <memset+0xa>
 8008d70:	4770      	bx	lr
 8008d72:	f803 1b01 	strb.w	r1, [r3], #1
 8008d76:	e7f9      	b.n	8008d6c <memset+0x4>

08008d78 <_sbrk_r>:
 8008d78:	b538      	push	{r3, r4, r5, lr}
 8008d7a:	4d06      	ldr	r5, [pc, #24]	@ (8008d94 <_sbrk_r+0x1c>)
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	4604      	mov	r4, r0
 8008d80:	4608      	mov	r0, r1
 8008d82:	602b      	str	r3, [r5, #0]
 8008d84:	f7f8 f91e 	bl	8000fc4 <_sbrk>
 8008d88:	1c43      	adds	r3, r0, #1
 8008d8a:	d102      	bne.n	8008d92 <_sbrk_r+0x1a>
 8008d8c:	682b      	ldr	r3, [r5, #0]
 8008d8e:	b103      	cbz	r3, 8008d92 <_sbrk_r+0x1a>
 8008d90:	6023      	str	r3, [r4, #0]
 8008d92:	bd38      	pop	{r3, r4, r5, pc}
 8008d94:	20000b88 	.word	0x20000b88

08008d98 <__errno>:
 8008d98:	4b01      	ldr	r3, [pc, #4]	@ (8008da0 <__errno+0x8>)
 8008d9a:	6818      	ldr	r0, [r3, #0]
 8008d9c:	4770      	bx	lr
 8008d9e:	bf00      	nop
 8008da0:	200000ac 	.word	0x200000ac

08008da4 <__libc_init_array>:
 8008da4:	b570      	push	{r4, r5, r6, lr}
 8008da6:	4d0d      	ldr	r5, [pc, #52]	@ (8008ddc <__libc_init_array+0x38>)
 8008da8:	4c0d      	ldr	r4, [pc, #52]	@ (8008de0 <__libc_init_array+0x3c>)
 8008daa:	1b64      	subs	r4, r4, r5
 8008dac:	10a4      	asrs	r4, r4, #2
 8008dae:	2600      	movs	r6, #0
 8008db0:	42a6      	cmp	r6, r4
 8008db2:	d109      	bne.n	8008dc8 <__libc_init_array+0x24>
 8008db4:	4d0b      	ldr	r5, [pc, #44]	@ (8008de4 <__libc_init_array+0x40>)
 8008db6:	4c0c      	ldr	r4, [pc, #48]	@ (8008de8 <__libc_init_array+0x44>)
 8008db8:	f000 f872 	bl	8008ea0 <_init>
 8008dbc:	1b64      	subs	r4, r4, r5
 8008dbe:	10a4      	asrs	r4, r4, #2
 8008dc0:	2600      	movs	r6, #0
 8008dc2:	42a6      	cmp	r6, r4
 8008dc4:	d105      	bne.n	8008dd2 <__libc_init_array+0x2e>
 8008dc6:	bd70      	pop	{r4, r5, r6, pc}
 8008dc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dcc:	4798      	blx	r3
 8008dce:	3601      	adds	r6, #1
 8008dd0:	e7ee      	b.n	8008db0 <__libc_init_array+0xc>
 8008dd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dd6:	4798      	blx	r3
 8008dd8:	3601      	adds	r6, #1
 8008dda:	e7f2      	b.n	8008dc2 <__libc_init_array+0x1e>
 8008ddc:	08008edc 	.word	0x08008edc
 8008de0:	08008edc 	.word	0x08008edc
 8008de4:	08008edc 	.word	0x08008edc
 8008de8:	08008ee0 	.word	0x08008ee0

08008dec <__retarget_lock_acquire_recursive>:
 8008dec:	4770      	bx	lr

08008dee <__retarget_lock_release_recursive>:
 8008dee:	4770      	bx	lr

08008df0 <memcpy>:
 8008df0:	440a      	add	r2, r1
 8008df2:	4291      	cmp	r1, r2
 8008df4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008df8:	d100      	bne.n	8008dfc <memcpy+0xc>
 8008dfa:	4770      	bx	lr
 8008dfc:	b510      	push	{r4, lr}
 8008dfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e06:	4291      	cmp	r1, r2
 8008e08:	d1f9      	bne.n	8008dfe <memcpy+0xe>
 8008e0a:	bd10      	pop	{r4, pc}

08008e0c <_free_r>:
 8008e0c:	b538      	push	{r3, r4, r5, lr}
 8008e0e:	4605      	mov	r5, r0
 8008e10:	2900      	cmp	r1, #0
 8008e12:	d041      	beq.n	8008e98 <_free_r+0x8c>
 8008e14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e18:	1f0c      	subs	r4, r1, #4
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	bfb8      	it	lt
 8008e1e:	18e4      	addlt	r4, r4, r3
 8008e20:	f7ff ff96 	bl	8008d50 <__malloc_lock>
 8008e24:	4a1d      	ldr	r2, [pc, #116]	@ (8008e9c <_free_r+0x90>)
 8008e26:	6813      	ldr	r3, [r2, #0]
 8008e28:	b933      	cbnz	r3, 8008e38 <_free_r+0x2c>
 8008e2a:	6063      	str	r3, [r4, #4]
 8008e2c:	6014      	str	r4, [r2, #0]
 8008e2e:	4628      	mov	r0, r5
 8008e30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e34:	f7ff bf92 	b.w	8008d5c <__malloc_unlock>
 8008e38:	42a3      	cmp	r3, r4
 8008e3a:	d908      	bls.n	8008e4e <_free_r+0x42>
 8008e3c:	6820      	ldr	r0, [r4, #0]
 8008e3e:	1821      	adds	r1, r4, r0
 8008e40:	428b      	cmp	r3, r1
 8008e42:	bf01      	itttt	eq
 8008e44:	6819      	ldreq	r1, [r3, #0]
 8008e46:	685b      	ldreq	r3, [r3, #4]
 8008e48:	1809      	addeq	r1, r1, r0
 8008e4a:	6021      	streq	r1, [r4, #0]
 8008e4c:	e7ed      	b.n	8008e2a <_free_r+0x1e>
 8008e4e:	461a      	mov	r2, r3
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	b10b      	cbz	r3, 8008e58 <_free_r+0x4c>
 8008e54:	42a3      	cmp	r3, r4
 8008e56:	d9fa      	bls.n	8008e4e <_free_r+0x42>
 8008e58:	6811      	ldr	r1, [r2, #0]
 8008e5a:	1850      	adds	r0, r2, r1
 8008e5c:	42a0      	cmp	r0, r4
 8008e5e:	d10b      	bne.n	8008e78 <_free_r+0x6c>
 8008e60:	6820      	ldr	r0, [r4, #0]
 8008e62:	4401      	add	r1, r0
 8008e64:	1850      	adds	r0, r2, r1
 8008e66:	4283      	cmp	r3, r0
 8008e68:	6011      	str	r1, [r2, #0]
 8008e6a:	d1e0      	bne.n	8008e2e <_free_r+0x22>
 8008e6c:	6818      	ldr	r0, [r3, #0]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	6053      	str	r3, [r2, #4]
 8008e72:	4408      	add	r0, r1
 8008e74:	6010      	str	r0, [r2, #0]
 8008e76:	e7da      	b.n	8008e2e <_free_r+0x22>
 8008e78:	d902      	bls.n	8008e80 <_free_r+0x74>
 8008e7a:	230c      	movs	r3, #12
 8008e7c:	602b      	str	r3, [r5, #0]
 8008e7e:	e7d6      	b.n	8008e2e <_free_r+0x22>
 8008e80:	6820      	ldr	r0, [r4, #0]
 8008e82:	1821      	adds	r1, r4, r0
 8008e84:	428b      	cmp	r3, r1
 8008e86:	bf04      	itt	eq
 8008e88:	6819      	ldreq	r1, [r3, #0]
 8008e8a:	685b      	ldreq	r3, [r3, #4]
 8008e8c:	6063      	str	r3, [r4, #4]
 8008e8e:	bf04      	itt	eq
 8008e90:	1809      	addeq	r1, r1, r0
 8008e92:	6021      	streq	r1, [r4, #0]
 8008e94:	6054      	str	r4, [r2, #4]
 8008e96:	e7ca      	b.n	8008e2e <_free_r+0x22>
 8008e98:	bd38      	pop	{r3, r4, r5, pc}
 8008e9a:	bf00      	nop
 8008e9c:	20000a48 	.word	0x20000a48

08008ea0 <_init>:
 8008ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ea2:	bf00      	nop
 8008ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ea6:	bc08      	pop	{r3}
 8008ea8:	469e      	mov	lr, r3
 8008eaa:	4770      	bx	lr

08008eac <_fini>:
 8008eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eae:	bf00      	nop
 8008eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eb2:	bc08      	pop	{r3}
 8008eb4:	469e      	mov	lr, r3
 8008eb6:	4770      	bx	lr
