
haetae-m4f.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008918  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008aa0  08008aa0  00009aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008abc  08008abc  0000a07c  2**0
                  CONTENTS
  4 .ARM          00000008  08008abc  08008abc  00009abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ac4  08008ac4  0000a07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ac4  08008ac4  00009ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008ac8  08008ac8  00009ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08008acc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a07c  2**0
                  CONTENTS
 10 .bss          00000a1c  2000007c  2000007c  0000a07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a98  20000a98  0000a07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014a49  00000000  00000000  0000a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003862  00000000  00000000  0001eaf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001130  00000000  00000000  00022358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d13  00000000  00000000  00023488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000222f5  00000000  00000000  0002419b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017a8e  00000000  00000000  00046490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb801  00000000  00000000  0005df1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012971f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a74  00000000  00000000  00129764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  0012e1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008a88 	.word	0x08008a88

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08008a88 	.word	0x08008a88

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fbf6 	bl	8000cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f80e 	bl	80004e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f90a 	bl	80006dc <MX_GPIO_Init>
  MX_I2C1_Init();
 80004c8:	f000 f874 	bl	80005b4 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004cc:	f000 f8a0 	bl	8000610 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004d0:	f000 f8ce 	bl	8000670 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004d4:	f007 fe82 	bl	80081dc <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004d8:	f007 fea6 	bl	8008228 <MX_USB_HOST_Process>
 80004dc:	e7fc      	b.n	80004d8 <main+0x20>
	...

080004e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b094      	sub	sp, #80	@ 0x50
 80004e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e6:	f107 0320 	add.w	r3, r7, #32
 80004ea:	2230      	movs	r2, #48	@ 0x30
 80004ec:	2100      	movs	r1, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f008 fa3c 	bl	800896c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f4:	f107 030c 	add.w	r3, r7, #12
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	605a      	str	r2, [r3, #4]
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	60da      	str	r2, [r3, #12]
 8000502:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000504:	2300      	movs	r3, #0
 8000506:	60bb      	str	r3, [r7, #8]
 8000508:	4b28      	ldr	r3, [pc, #160]	@ (80005ac <SystemClock_Config+0xcc>)
 800050a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800050c:	4a27      	ldr	r2, [pc, #156]	@ (80005ac <SystemClock_Config+0xcc>)
 800050e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000512:	6413      	str	r3, [r2, #64]	@ 0x40
 8000514:	4b25      	ldr	r3, [pc, #148]	@ (80005ac <SystemClock_Config+0xcc>)
 8000516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000518:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800051c:	60bb      	str	r3, [r7, #8]
 800051e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000520:	2300      	movs	r3, #0
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	4b22      	ldr	r3, [pc, #136]	@ (80005b0 <SystemClock_Config+0xd0>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a21      	ldr	r2, [pc, #132]	@ (80005b0 <SystemClock_Config+0xd0>)
 800052a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800052e:	6013      	str	r3, [r2, #0]
 8000530:	4b1f      	ldr	r3, [pc, #124]	@ (80005b0 <SystemClock_Config+0xd0>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000538:	607b      	str	r3, [r7, #4]
 800053a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800053c:	2301      	movs	r3, #1
 800053e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000540:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000544:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000546:	2302      	movs	r3, #2
 8000548:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800054a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800054e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000550:	2308      	movs	r3, #8
 8000552:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000554:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000558:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800055a:	2302      	movs	r3, #2
 800055c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800055e:	2307      	movs	r3, #7
 8000560:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000562:	f107 0320 	add.w	r3, r7, #32
 8000566:	4618      	mov	r0, r3
 8000568:	f003 fdfc 	bl	8004164 <HAL_RCC_OscConfig>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000572:	f000 f9b1 	bl	80008d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000576:	230f      	movs	r3, #15
 8000578:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800057a:	2302      	movs	r3, #2
 800057c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800057e:	2300      	movs	r3, #0
 8000580:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000582:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000586:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000588:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800058c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800058e:	f107 030c 	add.w	r3, r7, #12
 8000592:	2105      	movs	r1, #5
 8000594:	4618      	mov	r0, r3
 8000596:	f004 f85d 	bl	8004654 <HAL_RCC_ClockConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005a0:	f000 f99a 	bl	80008d8 <Error_Handler>
  }
}
 80005a4:	bf00      	nop
 80005a6:	3750      	adds	r7, #80	@ 0x50
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40023800 	.word	0x40023800
 80005b0:	40007000 	.word	0x40007000

080005b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005b8:	4b12      	ldr	r3, [pc, #72]	@ (8000604 <MX_I2C1_Init+0x50>)
 80005ba:	4a13      	ldr	r2, [pc, #76]	@ (8000608 <MX_I2C1_Init+0x54>)
 80005bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005be:	4b11      	ldr	r3, [pc, #68]	@ (8000604 <MX_I2C1_Init+0x50>)
 80005c0:	4a12      	ldr	r2, [pc, #72]	@ (800060c <MX_I2C1_Init+0x58>)
 80005c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000604 <MX_I2C1_Init+0x50>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000604 <MX_I2C1_Init+0x50>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000604 <MX_I2C1_Init+0x50>)
 80005d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80005d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000604 <MX_I2C1_Init+0x50>)
 80005da:	2200      	movs	r2, #0
 80005dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005de:	4b09      	ldr	r3, [pc, #36]	@ (8000604 <MX_I2C1_Init+0x50>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005e4:	4b07      	ldr	r3, [pc, #28]	@ (8000604 <MX_I2C1_Init+0x50>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005ea:	4b06      	ldr	r3, [pc, #24]	@ (8000604 <MX_I2C1_Init+0x50>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005f0:	4804      	ldr	r0, [pc, #16]	@ (8000604 <MX_I2C1_Init+0x50>)
 80005f2:	f002 ffd3 	bl	800359c <HAL_I2C_Init>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005fc:	f000 f96c 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000098 	.word	0x20000098
 8000608:	40005400 	.word	0x40005400
 800060c:	000186a0 	.word	0x000186a0

08000610 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000614:	4b13      	ldr	r3, [pc, #76]	@ (8000664 <MX_I2S3_Init+0x54>)
 8000616:	4a14      	ldr	r2, [pc, #80]	@ (8000668 <MX_I2S3_Init+0x58>)
 8000618:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800061a:	4b12      	ldr	r3, [pc, #72]	@ (8000664 <MX_I2S3_Init+0x54>)
 800061c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000620:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000622:	4b10      	ldr	r3, [pc, #64]	@ (8000664 <MX_I2S3_Init+0x54>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000628:	4b0e      	ldr	r3, [pc, #56]	@ (8000664 <MX_I2S3_Init+0x54>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800062e:	4b0d      	ldr	r3, [pc, #52]	@ (8000664 <MX_I2S3_Init+0x54>)
 8000630:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000634:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000636:	4b0b      	ldr	r3, [pc, #44]	@ (8000664 <MX_I2S3_Init+0x54>)
 8000638:	4a0c      	ldr	r2, [pc, #48]	@ (800066c <MX_I2S3_Init+0x5c>)
 800063a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800063c:	4b09      	ldr	r3, [pc, #36]	@ (8000664 <MX_I2S3_Init+0x54>)
 800063e:	2200      	movs	r2, #0
 8000640:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000642:	4b08      	ldr	r3, [pc, #32]	@ (8000664 <MX_I2S3_Init+0x54>)
 8000644:	2200      	movs	r2, #0
 8000646:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000648:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <MX_I2S3_Init+0x54>)
 800064a:	2200      	movs	r2, #0
 800064c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800064e:	4805      	ldr	r0, [pc, #20]	@ (8000664 <MX_I2S3_Init+0x54>)
 8000650:	f003 f8e8 	bl	8003824 <HAL_I2S_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800065a:	f000 f93d 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	200000ec 	.word	0x200000ec
 8000668:	40003c00 	.word	0x40003c00
 800066c:	00017700 	.word	0x00017700

08000670 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000674:	4b17      	ldr	r3, [pc, #92]	@ (80006d4 <MX_SPI1_Init+0x64>)
 8000676:	4a18      	ldr	r2, [pc, #96]	@ (80006d8 <MX_SPI1_Init+0x68>)
 8000678:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800067a:	4b16      	ldr	r3, [pc, #88]	@ (80006d4 <MX_SPI1_Init+0x64>)
 800067c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000680:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000682:	4b14      	ldr	r3, [pc, #80]	@ (80006d4 <MX_SPI1_Init+0x64>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000688:	4b12      	ldr	r3, [pc, #72]	@ (80006d4 <MX_SPI1_Init+0x64>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800068e:	4b11      	ldr	r3, [pc, #68]	@ (80006d4 <MX_SPI1_Init+0x64>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000694:	4b0f      	ldr	r3, [pc, #60]	@ (80006d4 <MX_SPI1_Init+0x64>)
 8000696:	2200      	movs	r2, #0
 8000698:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800069a:	4b0e      	ldr	r3, [pc, #56]	@ (80006d4 <MX_SPI1_Init+0x64>)
 800069c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006a2:	4b0c      	ldr	r3, [pc, #48]	@ (80006d4 <MX_SPI1_Init+0x64>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006a8:	4b0a      	ldr	r3, [pc, #40]	@ (80006d4 <MX_SPI1_Init+0x64>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ae:	4b09      	ldr	r3, [pc, #36]	@ (80006d4 <MX_SPI1_Init+0x64>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006b4:	4b07      	ldr	r3, [pc, #28]	@ (80006d4 <MX_SPI1_Init+0x64>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006ba:	4b06      	ldr	r3, [pc, #24]	@ (80006d4 <MX_SPI1_Init+0x64>)
 80006bc:	220a      	movs	r2, #10
 80006be:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006c0:	4804      	ldr	r0, [pc, #16]	@ (80006d4 <MX_SPI1_Init+0x64>)
 80006c2:	f004 fb15 	bl	8004cf0 <HAL_SPI_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006cc:	f000 f904 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000134 	.word	0x20000134
 80006d8:	40013000 	.word	0x40013000

080006dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08c      	sub	sp, #48	@ 0x30
 80006e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	f107 031c 	add.w	r3, r7, #28
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	61bb      	str	r3, [r7, #24]
 80006f6:	4b72      	ldr	r3, [pc, #456]	@ (80008c0 <MX_GPIO_Init+0x1e4>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	4a71      	ldr	r2, [pc, #452]	@ (80008c0 <MX_GPIO_Init+0x1e4>)
 80006fc:	f043 0310 	orr.w	r3, r3, #16
 8000700:	6313      	str	r3, [r2, #48]	@ 0x30
 8000702:	4b6f      	ldr	r3, [pc, #444]	@ (80008c0 <MX_GPIO_Init+0x1e4>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	f003 0310 	and.w	r3, r3, #16
 800070a:	61bb      	str	r3, [r7, #24]
 800070c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	617b      	str	r3, [r7, #20]
 8000712:	4b6b      	ldr	r3, [pc, #428]	@ (80008c0 <MX_GPIO_Init+0x1e4>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	4a6a      	ldr	r2, [pc, #424]	@ (80008c0 <MX_GPIO_Init+0x1e4>)
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	6313      	str	r3, [r2, #48]	@ 0x30
 800071e:	4b68      	ldr	r3, [pc, #416]	@ (80008c0 <MX_GPIO_Init+0x1e4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	617b      	str	r3, [r7, #20]
 8000728:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
 800072e:	4b64      	ldr	r3, [pc, #400]	@ (80008c0 <MX_GPIO_Init+0x1e4>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	4a63      	ldr	r2, [pc, #396]	@ (80008c0 <MX_GPIO_Init+0x1e4>)
 8000734:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000738:	6313      	str	r3, [r2, #48]	@ 0x30
 800073a:	4b61      	ldr	r3, [pc, #388]	@ (80008c0 <MX_GPIO_Init+0x1e4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000742:	613b      	str	r3, [r7, #16]
 8000744:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	4b5d      	ldr	r3, [pc, #372]	@ (80008c0 <MX_GPIO_Init+0x1e4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a5c      	ldr	r2, [pc, #368]	@ (80008c0 <MX_GPIO_Init+0x1e4>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b5a      	ldr	r3, [pc, #360]	@ (80008c0 <MX_GPIO_Init+0x1e4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	4b56      	ldr	r3, [pc, #344]	@ (80008c0 <MX_GPIO_Init+0x1e4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a55      	ldr	r2, [pc, #340]	@ (80008c0 <MX_GPIO_Init+0x1e4>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b53      	ldr	r3, [pc, #332]	@ (80008c0 <MX_GPIO_Init+0x1e4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	4b4f      	ldr	r3, [pc, #316]	@ (80008c0 <MX_GPIO_Init+0x1e4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	4a4e      	ldr	r2, [pc, #312]	@ (80008c0 <MX_GPIO_Init+0x1e4>)
 8000788:	f043 0308 	orr.w	r3, r3, #8
 800078c:	6313      	str	r3, [r2, #48]	@ 0x30
 800078e:	4b4c      	ldr	r3, [pc, #304]	@ (80008c0 <MX_GPIO_Init+0x1e4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	f003 0308 	and.w	r3, r3, #8
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	2108      	movs	r1, #8
 800079e:	4849      	ldr	r0, [pc, #292]	@ (80008c4 <MX_GPIO_Init+0x1e8>)
 80007a0:	f000 fdc8 	bl	8001334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007a4:	2201      	movs	r2, #1
 80007a6:	2101      	movs	r1, #1
 80007a8:	4847      	ldr	r0, [pc, #284]	@ (80008c8 <MX_GPIO_Init+0x1ec>)
 80007aa:	f000 fdc3 	bl	8001334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007ae:	2200      	movs	r2, #0
 80007b0:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80007b4:	4845      	ldr	r0, [pc, #276]	@ (80008cc <MX_GPIO_Init+0x1f0>)
 80007b6:	f000 fdbd 	bl	8001334 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007ba:	2308      	movs	r3, #8
 80007bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007be:	2301      	movs	r3, #1
 80007c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	4619      	mov	r1, r3
 80007d0:	483c      	ldr	r0, [pc, #240]	@ (80008c4 <MX_GPIO_Init+0x1e8>)
 80007d2:	f000 fc13 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007d6:	2301      	movs	r3, #1
 80007d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007da:	2301      	movs	r3, #1
 80007dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	4619      	mov	r1, r3
 80007ec:	4836      	ldr	r0, [pc, #216]	@ (80008c8 <MX_GPIO_Init+0x1ec>)
 80007ee:	f000 fc05 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80007f2:	2308      	movs	r3, #8
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f6:	2302      	movs	r3, #2
 80007f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	2300      	movs	r3, #0
 8000800:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000802:	2305      	movs	r3, #5
 8000804:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	482e      	ldr	r0, [pc, #184]	@ (80008c8 <MX_GPIO_Init+0x1ec>)
 800080e:	f000 fbf5 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000812:	2301      	movs	r3, #1
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000816:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800081a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000820:	f107 031c 	add.w	r3, r7, #28
 8000824:	4619      	mov	r1, r3
 8000826:	482a      	ldr	r0, [pc, #168]	@ (80008d0 <MX_GPIO_Init+0x1f4>)
 8000828:	f000 fbe8 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800082c:	2304      	movs	r3, #4
 800082e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000830:	2300      	movs	r3, #0
 8000832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000838:	f107 031c 	add.w	r3, r7, #28
 800083c:	4619      	mov	r1, r3
 800083e:	4825      	ldr	r0, [pc, #148]	@ (80008d4 <MX_GPIO_Init+0x1f8>)
 8000840:	f000 fbdc 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000844:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084a:	2302      	movs	r3, #2
 800084c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000856:	2305      	movs	r3, #5
 8000858:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	481c      	ldr	r0, [pc, #112]	@ (80008d4 <MX_GPIO_Init+0x1f8>)
 8000862:	f000 fbcb 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000866:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800086a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086c:	2301      	movs	r3, #1
 800086e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	4619      	mov	r1, r3
 800087e:	4813      	ldr	r0, [pc, #76]	@ (80008cc <MX_GPIO_Init+0x1f0>)
 8000880:	f000 fbbc 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000884:	2320      	movs	r3, #32
 8000886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000888:	2300      	movs	r3, #0
 800088a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	4619      	mov	r1, r3
 8000896:	480d      	ldr	r0, [pc, #52]	@ (80008cc <MX_GPIO_Init+0x1f0>)
 8000898:	f000 fbb0 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800089c:	2302      	movs	r3, #2
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008a0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	4804      	ldr	r0, [pc, #16]	@ (80008c4 <MX_GPIO_Init+0x1e8>)
 80008b2:	f000 fba3 	bl	8000ffc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008b6:	bf00      	nop
 80008b8:	3730      	adds	r7, #48	@ 0x30
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40021000 	.word	0x40021000
 80008c8:	40020800 	.word	0x40020800
 80008cc:	40020c00 	.word	0x40020c00
 80008d0:	40020000 	.word	0x40020000
 80008d4:	40020400 	.word	0x40020400

080008d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008dc:	b672      	cpsid	i
}
 80008de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <Error_Handler+0x8>

080008e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	4b10      	ldr	r3, [pc, #64]	@ (8000930 <HAL_MspInit+0x4c>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008f2:	4a0f      	ldr	r2, [pc, #60]	@ (8000930 <HAL_MspInit+0x4c>)
 80008f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80008fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000930 <HAL_MspInit+0x4c>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <HAL_MspInit+0x4c>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090e:	4a08      	ldr	r2, [pc, #32]	@ (8000930 <HAL_MspInit+0x4c>)
 8000910:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000914:	6413      	str	r3, [r2, #64]	@ 0x40
 8000916:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <HAL_MspInit+0x4c>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000922:	2007      	movs	r0, #7
 8000924:	f000 fb28 	bl	8000f78 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000928:	bf00      	nop
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40023800 	.word	0x40023800

08000934 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	@ 0x28
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a19      	ldr	r2, [pc, #100]	@ (80009b8 <HAL_I2C_MspInit+0x84>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d12c      	bne.n	80009b0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	613b      	str	r3, [r7, #16]
 800095a:	4b18      	ldr	r3, [pc, #96]	@ (80009bc <HAL_I2C_MspInit+0x88>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	4a17      	ldr	r2, [pc, #92]	@ (80009bc <HAL_I2C_MspInit+0x88>)
 8000960:	f043 0302 	orr.w	r3, r3, #2
 8000964:	6313      	str	r3, [r2, #48]	@ 0x30
 8000966:	4b15      	ldr	r3, [pc, #84]	@ (80009bc <HAL_I2C_MspInit+0x88>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000972:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000978:	2312      	movs	r3, #18
 800097a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800097c:	2301      	movs	r3, #1
 800097e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	2300      	movs	r3, #0
 8000982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000984:	2304      	movs	r3, #4
 8000986:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	4619      	mov	r1, r3
 800098e:	480c      	ldr	r0, [pc, #48]	@ (80009c0 <HAL_I2C_MspInit+0x8c>)
 8000990:	f000 fb34 	bl	8000ffc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000994:	2300      	movs	r3, #0
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	4b08      	ldr	r3, [pc, #32]	@ (80009bc <HAL_I2C_MspInit+0x88>)
 800099a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099c:	4a07      	ldr	r2, [pc, #28]	@ (80009bc <HAL_I2C_MspInit+0x88>)
 800099e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80009a4:	4b05      	ldr	r3, [pc, #20]	@ (80009bc <HAL_I2C_MspInit+0x88>)
 80009a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009b0:	bf00      	nop
 80009b2:	3728      	adds	r7, #40	@ 0x28
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40005400 	.word	0x40005400
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40020400 	.word	0x40020400

080009c4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08e      	sub	sp, #56	@ 0x38
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a31      	ldr	r2, [pc, #196]	@ (8000ab4 <HAL_I2S_MspInit+0xf0>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d15a      	bne.n	8000aaa <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80009f4:	2301      	movs	r3, #1
 80009f6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80009f8:	23c0      	movs	r3, #192	@ 0xc0
 80009fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80009fc:	2302      	movs	r3, #2
 80009fe:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	4618      	mov	r0, r3
 8000a06:	f004 f831 	bl	8004a6c <HAL_RCCEx_PeriphCLKConfig>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000a10:	f7ff ff62 	bl	80008d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a14:	2300      	movs	r3, #0
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	4b27      	ldr	r3, [pc, #156]	@ (8000ab8 <HAL_I2S_MspInit+0xf4>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1c:	4a26      	ldr	r2, [pc, #152]	@ (8000ab8 <HAL_I2S_MspInit+0xf4>)
 8000a1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a22:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a24:	4b24      	ldr	r3, [pc, #144]	@ (8000ab8 <HAL_I2S_MspInit+0xf4>)
 8000a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a2c:	613b      	str	r3, [r7, #16]
 8000a2e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a30:	2300      	movs	r3, #0
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	4b20      	ldr	r3, [pc, #128]	@ (8000ab8 <HAL_I2S_MspInit+0xf4>)
 8000a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a38:	4a1f      	ldr	r2, [pc, #124]	@ (8000ab8 <HAL_I2S_MspInit+0xf4>)
 8000a3a:	f043 0301 	orr.w	r3, r3, #1
 8000a3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a40:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab8 <HAL_I2S_MspInit+0xf4>)
 8000a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a44:	f003 0301 	and.w	r3, r3, #1
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	4b19      	ldr	r3, [pc, #100]	@ (8000ab8 <HAL_I2S_MspInit+0xf4>)
 8000a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a54:	4a18      	ldr	r2, [pc, #96]	@ (8000ab8 <HAL_I2S_MspInit+0xf4>)
 8000a56:	f043 0304 	orr.w	r3, r3, #4
 8000a5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5c:	4b16      	ldr	r3, [pc, #88]	@ (8000ab8 <HAL_I2S_MspInit+0xf4>)
 8000a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a60:	f003 0304 	and.w	r3, r3, #4
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000a68:	2310      	movs	r3, #16
 8000a6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a78:	2306      	movs	r3, #6
 8000a7a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000a7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a80:	4619      	mov	r1, r3
 8000a82:	480e      	ldr	r0, [pc, #56]	@ (8000abc <HAL_I2S_MspInit+0xf8>)
 8000a84:	f000 faba 	bl	8000ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a88:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000a8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a9a:	2306      	movs	r3, #6
 8000a9c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4806      	ldr	r0, [pc, #24]	@ (8000ac0 <HAL_I2S_MspInit+0xfc>)
 8000aa6:	f000 faa9 	bl	8000ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000aaa:	bf00      	nop
 8000aac:	3738      	adds	r7, #56	@ 0x38
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40003c00 	.word	0x40003c00
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020000 	.word	0x40020000
 8000ac0:	40020800 	.word	0x40020800

08000ac4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	@ 0x28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a19      	ldr	r2, [pc, #100]	@ (8000b48 <HAL_SPI_MspInit+0x84>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d12b      	bne.n	8000b3e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	4b18      	ldr	r3, [pc, #96]	@ (8000b4c <HAL_SPI_MspInit+0x88>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aee:	4a17      	ldr	r2, [pc, #92]	@ (8000b4c <HAL_SPI_MspInit+0x88>)
 8000af0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000af4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000af6:	4b15      	ldr	r3, [pc, #84]	@ (8000b4c <HAL_SPI_MspInit+0x88>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000afa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	4b11      	ldr	r3, [pc, #68]	@ (8000b4c <HAL_SPI_MspInit+0x88>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	4a10      	ldr	r2, [pc, #64]	@ (8000b4c <HAL_SPI_MspInit+0x88>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b12:	4b0e      	ldr	r3, [pc, #56]	@ (8000b4c <HAL_SPI_MspInit+0x88>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b1e:	23e0      	movs	r3, #224	@ 0xe0
 8000b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	2302      	movs	r3, #2
 8000b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b2e:	2305      	movs	r3, #5
 8000b30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4619      	mov	r1, r3
 8000b38:	4805      	ldr	r0, [pc, #20]	@ (8000b50 <HAL_SPI_MspInit+0x8c>)
 8000b3a:	f000 fa5f 	bl	8000ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b3e:	bf00      	nop
 8000b40:	3728      	adds	r7, #40	@ 0x28
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40013000 	.word	0x40013000
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40020000 	.word	0x40020000

08000b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <NMI_Handler+0x4>

08000b5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <HardFault_Handler+0x4>

08000b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <MemManage_Handler+0x4>

08000b6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <BusFault_Handler+0x4>

08000b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <UsageFault_Handler+0x4>

08000b7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000baa:	f000 f8d1 	bl	8000d50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
	...

08000bb4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000bb8:	4802      	ldr	r0, [pc, #8]	@ (8000bc4 <OTG_FS_IRQHandler+0x10>)
 8000bba:	f000 feb5 	bl	8001928 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000570 	.word	0x20000570

08000bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd0:	4a14      	ldr	r2, [pc, #80]	@ (8000c24 <_sbrk+0x5c>)
 8000bd2:	4b15      	ldr	r3, [pc, #84]	@ (8000c28 <_sbrk+0x60>)
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bdc:	4b13      	ldr	r3, [pc, #76]	@ (8000c2c <_sbrk+0x64>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d102      	bne.n	8000bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be4:	4b11      	ldr	r3, [pc, #68]	@ (8000c2c <_sbrk+0x64>)
 8000be6:	4a12      	ldr	r2, [pc, #72]	@ (8000c30 <_sbrk+0x68>)
 8000be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bea:	4b10      	ldr	r3, [pc, #64]	@ (8000c2c <_sbrk+0x64>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d207      	bcs.n	8000c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf8:	f007 fed0 	bl	800899c <__errno>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	220c      	movs	r2, #12
 8000c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c06:	e009      	b.n	8000c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c08:	4b08      	ldr	r3, [pc, #32]	@ (8000c2c <_sbrk+0x64>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c0e:	4b07      	ldr	r3, [pc, #28]	@ (8000c2c <_sbrk+0x64>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4413      	add	r3, r2
 8000c16:	4a05      	ldr	r2, [pc, #20]	@ (8000c2c <_sbrk+0x64>)
 8000c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3718      	adds	r7, #24
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20020000 	.word	0x20020000
 8000c28:	00000400 	.word	0x00000400
 8000c2c:	2000018c 	.word	0x2000018c
 8000c30:	20000a98 	.word	0x20000a98

08000c34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c38:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <SystemInit+0x20>)
 8000c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c3e:	4a05      	ldr	r2, [pc, #20]	@ (8000c54 <SystemInit+0x20>)
 8000c40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c90 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c5c:	f7ff ffea 	bl	8000c34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c60:	480c      	ldr	r0, [pc, #48]	@ (8000c94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c62:	490d      	ldr	r1, [pc, #52]	@ (8000c98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c64:	4a0d      	ldr	r2, [pc, #52]	@ (8000c9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c68:	e002      	b.n	8000c70 <LoopCopyDataInit>

08000c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6e:	3304      	adds	r3, #4

08000c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c74:	d3f9      	bcc.n	8000c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c78:	4c0a      	ldr	r4, [pc, #40]	@ (8000ca4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c7c:	e001      	b.n	8000c82 <LoopFillZerobss>

08000c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c80:	3204      	adds	r2, #4

08000c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c84:	d3fb      	bcc.n	8000c7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c86:	f007 fe8f 	bl	80089a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c8a:	f7ff fc15 	bl	80004b8 <main>
  bx  lr    
 8000c8e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c98:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000c9c:	08008acc 	.word	0x08008acc
  ldr r2, =_sbss
 8000ca0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000ca4:	20000a98 	.word	0x20000a98

08000ca8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca8:	e7fe      	b.n	8000ca8 <ADC_IRQHandler>
	...

08000cac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000cec <HAL_Init+0x40>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000cec <HAL_Init+0x40>)
 8000cb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000cec <HAL_Init+0x40>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0a      	ldr	r2, [pc, #40]	@ (8000cec <HAL_Init+0x40>)
 8000cc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc8:	4b08      	ldr	r3, [pc, #32]	@ (8000cec <HAL_Init+0x40>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a07      	ldr	r2, [pc, #28]	@ (8000cec <HAL_Init+0x40>)
 8000cce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd4:	2003      	movs	r0, #3
 8000cd6:	f000 f94f 	bl	8000f78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cda:	2000      	movs	r0, #0
 8000cdc:	f000 f808 	bl	8000cf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce0:	f7ff fe00 	bl	80008e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40023c00 	.word	0x40023c00

08000cf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cf8:	4b12      	ldr	r3, [pc, #72]	@ (8000d44 <HAL_InitTick+0x54>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	4b12      	ldr	r3, [pc, #72]	@ (8000d48 <HAL_InitTick+0x58>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	4619      	mov	r1, r3
 8000d02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 f967 	bl	8000fe2 <HAL_SYSTICK_Config>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e00e      	b.n	8000d3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2b0f      	cmp	r3, #15
 8000d22:	d80a      	bhi.n	8000d3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d24:	2200      	movs	r2, #0
 8000d26:	6879      	ldr	r1, [r7, #4]
 8000d28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d2c:	f000 f92f 	bl	8000f8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d30:	4a06      	ldr	r2, [pc, #24]	@ (8000d4c <HAL_InitTick+0x5c>)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d36:	2300      	movs	r3, #0
 8000d38:	e000      	b.n	8000d3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000000 	.word	0x20000000
 8000d48:	20000008 	.word	0x20000008
 8000d4c:	20000004 	.word	0x20000004

08000d50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d54:	4b06      	ldr	r3, [pc, #24]	@ (8000d70 <HAL_IncTick+0x20>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <HAL_IncTick+0x24>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4413      	add	r3, r2
 8000d60:	4a04      	ldr	r2, [pc, #16]	@ (8000d74 <HAL_IncTick+0x24>)
 8000d62:	6013      	str	r3, [r2, #0]
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	20000008 	.word	0x20000008
 8000d74:	20000190 	.word	0x20000190

08000d78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d7c:	4b03      	ldr	r3, [pc, #12]	@ (8000d8c <HAL_GetTick+0x14>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	20000190 	.word	0x20000190

08000d90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d98:	f7ff ffee 	bl	8000d78 <HAL_GetTick>
 8000d9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000da8:	d005      	beq.n	8000db6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000daa:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd4 <HAL_Delay+0x44>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	461a      	mov	r2, r3
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	4413      	add	r3, r2
 8000db4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000db6:	bf00      	nop
 8000db8:	f7ff ffde 	bl	8000d78 <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	68fa      	ldr	r2, [r7, #12]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d8f7      	bhi.n	8000db8 <HAL_Delay+0x28>
  {
  }
}
 8000dc8:	bf00      	nop
 8000dca:	bf00      	nop
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000008 	.word	0x20000008

08000dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e1c <__NVIC_SetPriorityGrouping+0x44>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000df4:	4013      	ands	r3, r2
 8000df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e0a:	4a04      	ldr	r2, [pc, #16]	@ (8000e1c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	60d3      	str	r3, [r2, #12]
}
 8000e10:	bf00      	nop
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e24:	4b04      	ldr	r3, [pc, #16]	@ (8000e38 <__NVIC_GetPriorityGrouping+0x18>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	0a1b      	lsrs	r3, r3, #8
 8000e2a:	f003 0307 	and.w	r3, r3, #7
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	db0b      	blt.n	8000e66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	f003 021f 	and.w	r2, r3, #31
 8000e54:	4907      	ldr	r1, [pc, #28]	@ (8000e74 <__NVIC_EnableIRQ+0x38>)
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	095b      	lsrs	r3, r3, #5
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	e000e100 	.word	0xe000e100

08000e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	6039      	str	r1, [r7, #0]
 8000e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	db0a      	blt.n	8000ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	490c      	ldr	r1, [pc, #48]	@ (8000ec4 <__NVIC_SetPriority+0x4c>)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	0112      	lsls	r2, r2, #4
 8000e98:	b2d2      	uxtb	r2, r2
 8000e9a:	440b      	add	r3, r1
 8000e9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea0:	e00a      	b.n	8000eb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	4908      	ldr	r1, [pc, #32]	@ (8000ec8 <__NVIC_SetPriority+0x50>)
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	f003 030f 	and.w	r3, r3, #15
 8000eae:	3b04      	subs	r3, #4
 8000eb0:	0112      	lsls	r2, r2, #4
 8000eb2:	b2d2      	uxtb	r2, r2
 8000eb4:	440b      	add	r3, r1
 8000eb6:	761a      	strb	r2, [r3, #24]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000e100 	.word	0xe000e100
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b089      	sub	sp, #36	@ 0x24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	f1c3 0307 	rsb	r3, r3, #7
 8000ee6:	2b04      	cmp	r3, #4
 8000ee8:	bf28      	it	cs
 8000eea:	2304      	movcs	r3, #4
 8000eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	2b06      	cmp	r3, #6
 8000ef4:	d902      	bls.n	8000efc <NVIC_EncodePriority+0x30>
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3b03      	subs	r3, #3
 8000efa:	e000      	b.n	8000efe <NVIC_EncodePriority+0x32>
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43da      	mvns	r2, r3
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	401a      	ands	r2, r3
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f14:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1e:	43d9      	mvns	r1, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	4313      	orrs	r3, r2
         );
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3724      	adds	r7, #36	@ 0x24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
	...

08000f34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f44:	d301      	bcc.n	8000f4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f46:	2301      	movs	r3, #1
 8000f48:	e00f      	b.n	8000f6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f74 <SysTick_Config+0x40>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f52:	210f      	movs	r1, #15
 8000f54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f58:	f7ff ff8e 	bl	8000e78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f5c:	4b05      	ldr	r3, [pc, #20]	@ (8000f74 <SysTick_Config+0x40>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f62:	4b04      	ldr	r3, [pc, #16]	@ (8000f74 <SysTick_Config+0x40>)
 8000f64:	2207      	movs	r2, #7
 8000f66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	e000e010 	.word	0xe000e010

08000f78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f7ff ff29 	bl	8000dd8 <__NVIC_SetPriorityGrouping>
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b086      	sub	sp, #24
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	4603      	mov	r3, r0
 8000f96:	60b9      	str	r1, [r7, #8]
 8000f98:	607a      	str	r2, [r7, #4]
 8000f9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fa0:	f7ff ff3e 	bl	8000e20 <__NVIC_GetPriorityGrouping>
 8000fa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	68b9      	ldr	r1, [r7, #8]
 8000faa:	6978      	ldr	r0, [r7, #20]
 8000fac:	f7ff ff8e 	bl	8000ecc <NVIC_EncodePriority>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff5d 	bl	8000e78 <__NVIC_SetPriority>
}
 8000fbe:	bf00      	nop
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	4603      	mov	r3, r0
 8000fce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff31 	bl	8000e3c <__NVIC_EnableIRQ>
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff ffa2 	bl	8000f34 <SysTick_Config>
 8000ff0:	4603      	mov	r3, r0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b089      	sub	sp, #36	@ 0x24
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800100e:	2300      	movs	r3, #0
 8001010:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
 8001016:	e16b      	b.n	80012f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001018:	2201      	movs	r2, #1
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	697a      	ldr	r2, [r7, #20]
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	429a      	cmp	r2, r3
 8001032:	f040 815a 	bne.w	80012ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f003 0303 	and.w	r3, r3, #3
 800103e:	2b01      	cmp	r3, #1
 8001040:	d005      	beq.n	800104e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800104a:	2b02      	cmp	r3, #2
 800104c:	d130      	bne.n	80010b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	2203      	movs	r2, #3
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4013      	ands	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	68da      	ldr	r2, [r3, #12]
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4313      	orrs	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001084:	2201      	movs	r2, #1
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	091b      	lsrs	r3, r3, #4
 800109a:	f003 0201 	and.w	r2, r3, #1
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0303 	and.w	r3, r3, #3
 80010b8:	2b03      	cmp	r3, #3
 80010ba:	d017      	beq.n	80010ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	2203      	movs	r2, #3
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	689a      	ldr	r2, [r3, #8]
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f003 0303 	and.w	r3, r3, #3
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d123      	bne.n	8001140 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	08da      	lsrs	r2, r3, #3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3208      	adds	r2, #8
 8001100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001104:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	f003 0307 	and.w	r3, r3, #7
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	220f      	movs	r2, #15
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	691a      	ldr	r2, [r3, #16]
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	08da      	lsrs	r2, r3, #3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	3208      	adds	r2, #8
 800113a:	69b9      	ldr	r1, [r7, #24]
 800113c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	2203      	movs	r2, #3
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 0203 	and.w	r2, r3, #3
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800117c:	2b00      	cmp	r3, #0
 800117e:	f000 80b4 	beq.w	80012ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b60      	ldr	r3, [pc, #384]	@ (8001308 <HAL_GPIO_Init+0x30c>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800118a:	4a5f      	ldr	r2, [pc, #380]	@ (8001308 <HAL_GPIO_Init+0x30c>)
 800118c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001190:	6453      	str	r3, [r2, #68]	@ 0x44
 8001192:	4b5d      	ldr	r3, [pc, #372]	@ (8001308 <HAL_GPIO_Init+0x30c>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001196:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800119e:	4a5b      	ldr	r2, [pc, #364]	@ (800130c <HAL_GPIO_Init+0x310>)
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	089b      	lsrs	r3, r3, #2
 80011a4:	3302      	adds	r3, #2
 80011a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f003 0303 	and.w	r3, r3, #3
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	220f      	movs	r2, #15
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a52      	ldr	r2, [pc, #328]	@ (8001310 <HAL_GPIO_Init+0x314>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d02b      	beq.n	8001222 <HAL_GPIO_Init+0x226>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a51      	ldr	r2, [pc, #324]	@ (8001314 <HAL_GPIO_Init+0x318>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d025      	beq.n	800121e <HAL_GPIO_Init+0x222>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a50      	ldr	r2, [pc, #320]	@ (8001318 <HAL_GPIO_Init+0x31c>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d01f      	beq.n	800121a <HAL_GPIO_Init+0x21e>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4f      	ldr	r2, [pc, #316]	@ (800131c <HAL_GPIO_Init+0x320>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d019      	beq.n	8001216 <HAL_GPIO_Init+0x21a>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4e      	ldr	r2, [pc, #312]	@ (8001320 <HAL_GPIO_Init+0x324>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d013      	beq.n	8001212 <HAL_GPIO_Init+0x216>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4d      	ldr	r2, [pc, #308]	@ (8001324 <HAL_GPIO_Init+0x328>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d00d      	beq.n	800120e <HAL_GPIO_Init+0x212>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4c      	ldr	r2, [pc, #304]	@ (8001328 <HAL_GPIO_Init+0x32c>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d007      	beq.n	800120a <HAL_GPIO_Init+0x20e>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a4b      	ldr	r2, [pc, #300]	@ (800132c <HAL_GPIO_Init+0x330>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d101      	bne.n	8001206 <HAL_GPIO_Init+0x20a>
 8001202:	2307      	movs	r3, #7
 8001204:	e00e      	b.n	8001224 <HAL_GPIO_Init+0x228>
 8001206:	2308      	movs	r3, #8
 8001208:	e00c      	b.n	8001224 <HAL_GPIO_Init+0x228>
 800120a:	2306      	movs	r3, #6
 800120c:	e00a      	b.n	8001224 <HAL_GPIO_Init+0x228>
 800120e:	2305      	movs	r3, #5
 8001210:	e008      	b.n	8001224 <HAL_GPIO_Init+0x228>
 8001212:	2304      	movs	r3, #4
 8001214:	e006      	b.n	8001224 <HAL_GPIO_Init+0x228>
 8001216:	2303      	movs	r3, #3
 8001218:	e004      	b.n	8001224 <HAL_GPIO_Init+0x228>
 800121a:	2302      	movs	r3, #2
 800121c:	e002      	b.n	8001224 <HAL_GPIO_Init+0x228>
 800121e:	2301      	movs	r3, #1
 8001220:	e000      	b.n	8001224 <HAL_GPIO_Init+0x228>
 8001222:	2300      	movs	r3, #0
 8001224:	69fa      	ldr	r2, [r7, #28]
 8001226:	f002 0203 	and.w	r2, r2, #3
 800122a:	0092      	lsls	r2, r2, #2
 800122c:	4093      	lsls	r3, r2
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4313      	orrs	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001234:	4935      	ldr	r1, [pc, #212]	@ (800130c <HAL_GPIO_Init+0x310>)
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	089b      	lsrs	r3, r3, #2
 800123a:	3302      	adds	r3, #2
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001242:	4b3b      	ldr	r3, [pc, #236]	@ (8001330 <HAL_GPIO_Init+0x334>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	43db      	mvns	r3, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4013      	ands	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001266:	4a32      	ldr	r2, [pc, #200]	@ (8001330 <HAL_GPIO_Init+0x334>)
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800126c:	4b30      	ldr	r3, [pc, #192]	@ (8001330 <HAL_GPIO_Init+0x334>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d003      	beq.n	8001290 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	4313      	orrs	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001290:	4a27      	ldr	r2, [pc, #156]	@ (8001330 <HAL_GPIO_Init+0x334>)
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001296:	4b26      	ldr	r3, [pc, #152]	@ (8001330 <HAL_GPIO_Init+0x334>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	43db      	mvns	r3, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4013      	ands	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012ba:	4a1d      	ldr	r2, [pc, #116]	@ (8001330 <HAL_GPIO_Init+0x334>)
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001330 <HAL_GPIO_Init+0x334>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d003      	beq.n	80012e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012e4:	4a12      	ldr	r2, [pc, #72]	@ (8001330 <HAL_GPIO_Init+0x334>)
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3301      	adds	r3, #1
 80012ee:	61fb      	str	r3, [r7, #28]
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	2b0f      	cmp	r3, #15
 80012f4:	f67f ae90 	bls.w	8001018 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012f8:	bf00      	nop
 80012fa:	bf00      	nop
 80012fc:	3724      	adds	r7, #36	@ 0x24
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	40023800 	.word	0x40023800
 800130c:	40013800 	.word	0x40013800
 8001310:	40020000 	.word	0x40020000
 8001314:	40020400 	.word	0x40020400
 8001318:	40020800 	.word	0x40020800
 800131c:	40020c00 	.word	0x40020c00
 8001320:	40021000 	.word	0x40021000
 8001324:	40021400 	.word	0x40021400
 8001328:	40021800 	.word	0x40021800
 800132c:	40021c00 	.word	0x40021c00
 8001330:	40013c00 	.word	0x40013c00

08001334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	807b      	strh	r3, [r7, #2]
 8001340:	4613      	mov	r3, r2
 8001342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001344:	787b      	ldrb	r3, [r7, #1]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800134a:	887a      	ldrh	r2, [r7, #2]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001350:	e003      	b.n	800135a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001352:	887b      	ldrh	r3, [r7, #2]
 8001354:	041a      	lsls	r2, r3, #16
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	619a      	str	r2, [r3, #24]
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b086      	sub	sp, #24
 800136a:	af02      	add	r7, sp, #8
 800136c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d101      	bne.n	8001378 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e059      	b.n	800142c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d106      	bne.n	8001398 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f006 ff80 	bl	8008298 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2203      	movs	r2, #3
 800139c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80013a6:	d102      	bne.n	80013ae <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f003 fd9a 	bl	8004eec <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6818      	ldr	r0, [r3, #0]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	7c1a      	ldrb	r2, [r3, #16]
 80013c0:	f88d 2000 	strb.w	r2, [sp]
 80013c4:	3304      	adds	r3, #4
 80013c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013c8:	f003 fd1b 	bl	8004e02 <USB_CoreInit>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d005      	beq.n	80013de <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2202      	movs	r2, #2
 80013d6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e026      	b.n	800142c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2101      	movs	r1, #1
 80013e4:	4618      	mov	r0, r3
 80013e6:	f003 fd92 	bl	8004f0e <USB_SetCurrentMode>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d005      	beq.n	80013fc <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2202      	movs	r2, #2
 80013f4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e017      	b.n	800142c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6818      	ldr	r0, [r3, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	7c1a      	ldrb	r2, [r3, #16]
 8001404:	f88d 2000 	strb.w	r2, [sp]
 8001408:	3304      	adds	r3, #4
 800140a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800140c:	f003 ff34 	bl	8005278 <USB_HostInit>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d005      	beq.n	8001422 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2202      	movs	r2, #2
 800141a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e004      	b.n	800142c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2201      	movs	r2, #1
 8001426:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800142a:	2300      	movs	r3, #0
}
 800142c:	4618      	mov	r0, r3
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001434:	b590      	push	{r4, r7, lr}
 8001436:	b08b      	sub	sp, #44	@ 0x2c
 8001438:	af04      	add	r7, sp, #16
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	4608      	mov	r0, r1
 800143e:	4611      	mov	r1, r2
 8001440:	461a      	mov	r2, r3
 8001442:	4603      	mov	r3, r0
 8001444:	70fb      	strb	r3, [r7, #3]
 8001446:	460b      	mov	r3, r1
 8001448:	70bb      	strb	r3, [r7, #2]
 800144a:	4613      	mov	r3, r2
 800144c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800144e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001450:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001458:	2b01      	cmp	r3, #1
 800145a:	d101      	bne.n	8001460 <HAL_HCD_HC_Init+0x2c>
 800145c:	2302      	movs	r3, #2
 800145e:	e09d      	b.n	800159c <HAL_HCD_HC_Init+0x168>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2201      	movs	r2, #1
 8001464:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001468:	78fa      	ldrb	r2, [r7, #3]
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	4613      	mov	r3, r2
 800146e:	011b      	lsls	r3, r3, #4
 8001470:	1a9b      	subs	r3, r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	440b      	add	r3, r1
 8001476:	3319      	adds	r3, #25
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800147c:	78fa      	ldrb	r2, [r7, #3]
 800147e:	6879      	ldr	r1, [r7, #4]
 8001480:	4613      	mov	r3, r2
 8001482:	011b      	lsls	r3, r3, #4
 8001484:	1a9b      	subs	r3, r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	440b      	add	r3, r1
 800148a:	3314      	adds	r3, #20
 800148c:	787a      	ldrb	r2, [r7, #1]
 800148e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001490:	78fa      	ldrb	r2, [r7, #3]
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	4613      	mov	r3, r2
 8001496:	011b      	lsls	r3, r3, #4
 8001498:	1a9b      	subs	r3, r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	440b      	add	r3, r1
 800149e:	3315      	adds	r3, #21
 80014a0:	78fa      	ldrb	r2, [r7, #3]
 80014a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80014a4:	78fa      	ldrb	r2, [r7, #3]
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	4613      	mov	r3, r2
 80014aa:	011b      	lsls	r3, r3, #4
 80014ac:	1a9b      	subs	r3, r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	440b      	add	r3, r1
 80014b2:	3326      	adds	r3, #38	@ 0x26
 80014b4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80014b8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80014ba:	78fa      	ldrb	r2, [r7, #3]
 80014bc:	78bb      	ldrb	r3, [r7, #2]
 80014be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80014c2:	b2d8      	uxtb	r0, r3
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	4613      	mov	r3, r2
 80014c8:	011b      	lsls	r3, r3, #4
 80014ca:	1a9b      	subs	r3, r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	440b      	add	r3, r1
 80014d0:	3316      	adds	r3, #22
 80014d2:	4602      	mov	r2, r0
 80014d4:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80014d6:	78fb      	ldrb	r3, [r7, #3]
 80014d8:	4619      	mov	r1, r3
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f000 fbc8 	bl	8001c70 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80014e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	da0a      	bge.n	80014fe <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80014e8:	78fa      	ldrb	r2, [r7, #3]
 80014ea:	6879      	ldr	r1, [r7, #4]
 80014ec:	4613      	mov	r3, r2
 80014ee:	011b      	lsls	r3, r3, #4
 80014f0:	1a9b      	subs	r3, r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	440b      	add	r3, r1
 80014f6:	3317      	adds	r3, #23
 80014f8:	2201      	movs	r2, #1
 80014fa:	701a      	strb	r2, [r3, #0]
 80014fc:	e009      	b.n	8001512 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80014fe:	78fa      	ldrb	r2, [r7, #3]
 8001500:	6879      	ldr	r1, [r7, #4]
 8001502:	4613      	mov	r3, r2
 8001504:	011b      	lsls	r3, r3, #4
 8001506:	1a9b      	subs	r3, r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	440b      	add	r3, r1
 800150c:	3317      	adds	r3, #23
 800150e:	2200      	movs	r2, #0
 8001510:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f004 f812 	bl	8005540 <USB_GetHostSpeed>
 800151c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800151e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001522:	2b01      	cmp	r3, #1
 8001524:	d10b      	bne.n	800153e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001526:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800152a:	2b01      	cmp	r3, #1
 800152c:	d107      	bne.n	800153e <HAL_HCD_HC_Init+0x10a>
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d104      	bne.n	800153e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	2bbc      	cmp	r3, #188	@ 0xbc
 8001538:	d901      	bls.n	800153e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800153a:	23bc      	movs	r3, #188	@ 0xbc
 800153c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800153e:	78fa      	ldrb	r2, [r7, #3]
 8001540:	6879      	ldr	r1, [r7, #4]
 8001542:	4613      	mov	r3, r2
 8001544:	011b      	lsls	r3, r3, #4
 8001546:	1a9b      	subs	r3, r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	440b      	add	r3, r1
 800154c:	3318      	adds	r3, #24
 800154e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001552:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001554:	78fa      	ldrb	r2, [r7, #3]
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	b298      	uxth	r0, r3
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	4613      	mov	r3, r2
 800155e:	011b      	lsls	r3, r3, #4
 8001560:	1a9b      	subs	r3, r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	440b      	add	r3, r1
 8001566:	3328      	adds	r3, #40	@ 0x28
 8001568:	4602      	mov	r2, r0
 800156a:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6818      	ldr	r0, [r3, #0]
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	b29b      	uxth	r3, r3
 8001574:	787c      	ldrb	r4, [r7, #1]
 8001576:	78ba      	ldrb	r2, [r7, #2]
 8001578:	78f9      	ldrb	r1, [r7, #3]
 800157a:	9302      	str	r3, [sp, #8]
 800157c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001580:	9301      	str	r3, [sp, #4]
 8001582:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	4623      	mov	r3, r4
 800158a:	f004 f801 	bl	8005590 <USB_HC_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800159a:	7bfb      	ldrb	r3, [r7, #15]
}
 800159c:	4618      	mov	r0, r3
 800159e:	371c      	adds	r7, #28
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd90      	pop	{r4, r7, pc}

080015a4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80015b0:	2300      	movs	r3, #0
 80015b2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d101      	bne.n	80015c2 <HAL_HCD_HC_Halt+0x1e>
 80015be:	2302      	movs	r3, #2
 80015c0:	e00f      	b.n	80015e2 <HAL_HCD_HC_Halt+0x3e>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2201      	movs	r2, #1
 80015c6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	78fa      	ldrb	r2, [r7, #3]
 80015d0:	4611      	mov	r1, r2
 80015d2:	4618      	mov	r0, r3
 80015d4:	f004 fb93 	bl	8005cfe <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	4608      	mov	r0, r1
 80015f6:	4611      	mov	r1, r2
 80015f8:	461a      	mov	r2, r3
 80015fa:	4603      	mov	r3, r0
 80015fc:	70fb      	strb	r3, [r7, #3]
 80015fe:	460b      	mov	r3, r1
 8001600:	70bb      	strb	r3, [r7, #2]
 8001602:	4613      	mov	r3, r2
 8001604:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001606:	78fa      	ldrb	r2, [r7, #3]
 8001608:	6879      	ldr	r1, [r7, #4]
 800160a:	4613      	mov	r3, r2
 800160c:	011b      	lsls	r3, r3, #4
 800160e:	1a9b      	subs	r3, r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	440b      	add	r3, r1
 8001614:	3317      	adds	r3, #23
 8001616:	78ba      	ldrb	r2, [r7, #2]
 8001618:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800161a:	78fa      	ldrb	r2, [r7, #3]
 800161c:	6879      	ldr	r1, [r7, #4]
 800161e:	4613      	mov	r3, r2
 8001620:	011b      	lsls	r3, r3, #4
 8001622:	1a9b      	subs	r3, r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	440b      	add	r3, r1
 8001628:	3326      	adds	r3, #38	@ 0x26
 800162a:	787a      	ldrb	r2, [r7, #1]
 800162c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800162e:	7c3b      	ldrb	r3, [r7, #16]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d114      	bne.n	800165e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001634:	78fa      	ldrb	r2, [r7, #3]
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	4613      	mov	r3, r2
 800163a:	011b      	lsls	r3, r3, #4
 800163c:	1a9b      	subs	r3, r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	440b      	add	r3, r1
 8001642:	332a      	adds	r3, #42	@ 0x2a
 8001644:	2203      	movs	r2, #3
 8001646:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001648:	78fa      	ldrb	r2, [r7, #3]
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	4613      	mov	r3, r2
 800164e:	011b      	lsls	r3, r3, #4
 8001650:	1a9b      	subs	r3, r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	440b      	add	r3, r1
 8001656:	3319      	adds	r3, #25
 8001658:	7f3a      	ldrb	r2, [r7, #28]
 800165a:	701a      	strb	r2, [r3, #0]
 800165c:	e009      	b.n	8001672 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800165e:	78fa      	ldrb	r2, [r7, #3]
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	4613      	mov	r3, r2
 8001664:	011b      	lsls	r3, r3, #4
 8001666:	1a9b      	subs	r3, r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	440b      	add	r3, r1
 800166c:	332a      	adds	r3, #42	@ 0x2a
 800166e:	2202      	movs	r2, #2
 8001670:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001672:	787b      	ldrb	r3, [r7, #1]
 8001674:	2b03      	cmp	r3, #3
 8001676:	f200 8102 	bhi.w	800187e <HAL_HCD_HC_SubmitRequest+0x292>
 800167a:	a201      	add	r2, pc, #4	@ (adr r2, 8001680 <HAL_HCD_HC_SubmitRequest+0x94>)
 800167c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001680:	08001691 	.word	0x08001691
 8001684:	08001869 	.word	0x08001869
 8001688:	08001755 	.word	0x08001755
 800168c:	080017df 	.word	0x080017df
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001690:	7c3b      	ldrb	r3, [r7, #16]
 8001692:	2b01      	cmp	r3, #1
 8001694:	f040 80f5 	bne.w	8001882 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001698:	78bb      	ldrb	r3, [r7, #2]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d12d      	bne.n	80016fa <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800169e:	8b3b      	ldrh	r3, [r7, #24]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d109      	bne.n	80016b8 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80016a4:	78fa      	ldrb	r2, [r7, #3]
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	4613      	mov	r3, r2
 80016aa:	011b      	lsls	r3, r3, #4
 80016ac:	1a9b      	subs	r3, r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	440b      	add	r3, r1
 80016b2:	333d      	adds	r3, #61	@ 0x3d
 80016b4:	2201      	movs	r2, #1
 80016b6:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80016b8:	78fa      	ldrb	r2, [r7, #3]
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	4613      	mov	r3, r2
 80016be:	011b      	lsls	r3, r3, #4
 80016c0:	1a9b      	subs	r3, r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	440b      	add	r3, r1
 80016c6:	333d      	adds	r3, #61	@ 0x3d
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d10a      	bne.n	80016e4 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016ce:	78fa      	ldrb	r2, [r7, #3]
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	4613      	mov	r3, r2
 80016d4:	011b      	lsls	r3, r3, #4
 80016d6:	1a9b      	subs	r3, r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	440b      	add	r3, r1
 80016dc:	332a      	adds	r3, #42	@ 0x2a
 80016de:	2200      	movs	r2, #0
 80016e0:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80016e2:	e0ce      	b.n	8001882 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016e4:	78fa      	ldrb	r2, [r7, #3]
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	4613      	mov	r3, r2
 80016ea:	011b      	lsls	r3, r3, #4
 80016ec:	1a9b      	subs	r3, r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	440b      	add	r3, r1
 80016f2:	332a      	adds	r3, #42	@ 0x2a
 80016f4:	2202      	movs	r2, #2
 80016f6:	701a      	strb	r2, [r3, #0]
      break;
 80016f8:	e0c3      	b.n	8001882 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80016fa:	78fa      	ldrb	r2, [r7, #3]
 80016fc:	6879      	ldr	r1, [r7, #4]
 80016fe:	4613      	mov	r3, r2
 8001700:	011b      	lsls	r3, r3, #4
 8001702:	1a9b      	subs	r3, r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	440b      	add	r3, r1
 8001708:	331a      	adds	r3, #26
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b01      	cmp	r3, #1
 800170e:	f040 80b8 	bne.w	8001882 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001712:	78fa      	ldrb	r2, [r7, #3]
 8001714:	6879      	ldr	r1, [r7, #4]
 8001716:	4613      	mov	r3, r2
 8001718:	011b      	lsls	r3, r3, #4
 800171a:	1a9b      	subs	r3, r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	440b      	add	r3, r1
 8001720:	333c      	adds	r3, #60	@ 0x3c
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d10a      	bne.n	800173e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001728:	78fa      	ldrb	r2, [r7, #3]
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	4613      	mov	r3, r2
 800172e:	011b      	lsls	r3, r3, #4
 8001730:	1a9b      	subs	r3, r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	440b      	add	r3, r1
 8001736:	332a      	adds	r3, #42	@ 0x2a
 8001738:	2200      	movs	r2, #0
 800173a:	701a      	strb	r2, [r3, #0]
      break;
 800173c:	e0a1      	b.n	8001882 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800173e:	78fa      	ldrb	r2, [r7, #3]
 8001740:	6879      	ldr	r1, [r7, #4]
 8001742:	4613      	mov	r3, r2
 8001744:	011b      	lsls	r3, r3, #4
 8001746:	1a9b      	subs	r3, r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	440b      	add	r3, r1
 800174c:	332a      	adds	r3, #42	@ 0x2a
 800174e:	2202      	movs	r2, #2
 8001750:	701a      	strb	r2, [r3, #0]
      break;
 8001752:	e096      	b.n	8001882 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001754:	78bb      	ldrb	r3, [r7, #2]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d120      	bne.n	800179c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800175a:	78fa      	ldrb	r2, [r7, #3]
 800175c:	6879      	ldr	r1, [r7, #4]
 800175e:	4613      	mov	r3, r2
 8001760:	011b      	lsls	r3, r3, #4
 8001762:	1a9b      	subs	r3, r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	440b      	add	r3, r1
 8001768:	333d      	adds	r3, #61	@ 0x3d
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d10a      	bne.n	8001786 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001770:	78fa      	ldrb	r2, [r7, #3]
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	4613      	mov	r3, r2
 8001776:	011b      	lsls	r3, r3, #4
 8001778:	1a9b      	subs	r3, r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	440b      	add	r3, r1
 800177e:	332a      	adds	r3, #42	@ 0x2a
 8001780:	2200      	movs	r2, #0
 8001782:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001784:	e07e      	b.n	8001884 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001786:	78fa      	ldrb	r2, [r7, #3]
 8001788:	6879      	ldr	r1, [r7, #4]
 800178a:	4613      	mov	r3, r2
 800178c:	011b      	lsls	r3, r3, #4
 800178e:	1a9b      	subs	r3, r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	440b      	add	r3, r1
 8001794:	332a      	adds	r3, #42	@ 0x2a
 8001796:	2202      	movs	r2, #2
 8001798:	701a      	strb	r2, [r3, #0]
      break;
 800179a:	e073      	b.n	8001884 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800179c:	78fa      	ldrb	r2, [r7, #3]
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	4613      	mov	r3, r2
 80017a2:	011b      	lsls	r3, r3, #4
 80017a4:	1a9b      	subs	r3, r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	440b      	add	r3, r1
 80017aa:	333c      	adds	r3, #60	@ 0x3c
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d10a      	bne.n	80017c8 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017b2:	78fa      	ldrb	r2, [r7, #3]
 80017b4:	6879      	ldr	r1, [r7, #4]
 80017b6:	4613      	mov	r3, r2
 80017b8:	011b      	lsls	r3, r3, #4
 80017ba:	1a9b      	subs	r3, r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	440b      	add	r3, r1
 80017c0:	332a      	adds	r3, #42	@ 0x2a
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
      break;
 80017c6:	e05d      	b.n	8001884 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017c8:	78fa      	ldrb	r2, [r7, #3]
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	4613      	mov	r3, r2
 80017ce:	011b      	lsls	r3, r3, #4
 80017d0:	1a9b      	subs	r3, r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	440b      	add	r3, r1
 80017d6:	332a      	adds	r3, #42	@ 0x2a
 80017d8:	2202      	movs	r2, #2
 80017da:	701a      	strb	r2, [r3, #0]
      break;
 80017dc:	e052      	b.n	8001884 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80017de:	78bb      	ldrb	r3, [r7, #2]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d120      	bne.n	8001826 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017e4:	78fa      	ldrb	r2, [r7, #3]
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	4613      	mov	r3, r2
 80017ea:	011b      	lsls	r3, r3, #4
 80017ec:	1a9b      	subs	r3, r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	440b      	add	r3, r1
 80017f2:	333d      	adds	r3, #61	@ 0x3d
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d10a      	bne.n	8001810 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017fa:	78fa      	ldrb	r2, [r7, #3]
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	4613      	mov	r3, r2
 8001800:	011b      	lsls	r3, r3, #4
 8001802:	1a9b      	subs	r3, r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	440b      	add	r3, r1
 8001808:	332a      	adds	r3, #42	@ 0x2a
 800180a:	2200      	movs	r2, #0
 800180c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800180e:	e039      	b.n	8001884 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001810:	78fa      	ldrb	r2, [r7, #3]
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	4613      	mov	r3, r2
 8001816:	011b      	lsls	r3, r3, #4
 8001818:	1a9b      	subs	r3, r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	440b      	add	r3, r1
 800181e:	332a      	adds	r3, #42	@ 0x2a
 8001820:	2202      	movs	r2, #2
 8001822:	701a      	strb	r2, [r3, #0]
      break;
 8001824:	e02e      	b.n	8001884 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001826:	78fa      	ldrb	r2, [r7, #3]
 8001828:	6879      	ldr	r1, [r7, #4]
 800182a:	4613      	mov	r3, r2
 800182c:	011b      	lsls	r3, r3, #4
 800182e:	1a9b      	subs	r3, r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	440b      	add	r3, r1
 8001834:	333c      	adds	r3, #60	@ 0x3c
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d10a      	bne.n	8001852 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800183c:	78fa      	ldrb	r2, [r7, #3]
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	4613      	mov	r3, r2
 8001842:	011b      	lsls	r3, r3, #4
 8001844:	1a9b      	subs	r3, r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	440b      	add	r3, r1
 800184a:	332a      	adds	r3, #42	@ 0x2a
 800184c:	2200      	movs	r2, #0
 800184e:	701a      	strb	r2, [r3, #0]
      break;
 8001850:	e018      	b.n	8001884 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001852:	78fa      	ldrb	r2, [r7, #3]
 8001854:	6879      	ldr	r1, [r7, #4]
 8001856:	4613      	mov	r3, r2
 8001858:	011b      	lsls	r3, r3, #4
 800185a:	1a9b      	subs	r3, r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	440b      	add	r3, r1
 8001860:	332a      	adds	r3, #42	@ 0x2a
 8001862:	2202      	movs	r2, #2
 8001864:	701a      	strb	r2, [r3, #0]
      break;
 8001866:	e00d      	b.n	8001884 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001868:	78fa      	ldrb	r2, [r7, #3]
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	4613      	mov	r3, r2
 800186e:	011b      	lsls	r3, r3, #4
 8001870:	1a9b      	subs	r3, r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	440b      	add	r3, r1
 8001876:	332a      	adds	r3, #42	@ 0x2a
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]
      break;
 800187c:	e002      	b.n	8001884 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800187e:	bf00      	nop
 8001880:	e000      	b.n	8001884 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001882:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001884:	78fa      	ldrb	r2, [r7, #3]
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	4613      	mov	r3, r2
 800188a:	011b      	lsls	r3, r3, #4
 800188c:	1a9b      	subs	r3, r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	440b      	add	r3, r1
 8001892:	332c      	adds	r3, #44	@ 0x2c
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001898:	78fa      	ldrb	r2, [r7, #3]
 800189a:	8b39      	ldrh	r1, [r7, #24]
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	011b      	lsls	r3, r3, #4
 80018a2:	1a9b      	subs	r3, r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4403      	add	r3, r0
 80018a8:	3334      	adds	r3, #52	@ 0x34
 80018aa:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80018ac:	78fa      	ldrb	r2, [r7, #3]
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	4613      	mov	r3, r2
 80018b2:	011b      	lsls	r3, r3, #4
 80018b4:	1a9b      	subs	r3, r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	440b      	add	r3, r1
 80018ba:	334c      	adds	r3, #76	@ 0x4c
 80018bc:	2200      	movs	r2, #0
 80018be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80018c0:	78fa      	ldrb	r2, [r7, #3]
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	4613      	mov	r3, r2
 80018c6:	011b      	lsls	r3, r3, #4
 80018c8:	1a9b      	subs	r3, r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	440b      	add	r3, r1
 80018ce:	3338      	adds	r3, #56	@ 0x38
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80018d4:	78fa      	ldrb	r2, [r7, #3]
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	4613      	mov	r3, r2
 80018da:	011b      	lsls	r3, r3, #4
 80018dc:	1a9b      	subs	r3, r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	440b      	add	r3, r1
 80018e2:	3315      	adds	r3, #21
 80018e4:	78fa      	ldrb	r2, [r7, #3]
 80018e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80018e8:	78fa      	ldrb	r2, [r7, #3]
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	4613      	mov	r3, r2
 80018ee:	011b      	lsls	r3, r3, #4
 80018f0:	1a9b      	subs	r3, r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	440b      	add	r3, r1
 80018f6:	334d      	adds	r3, #77	@ 0x4d
 80018f8:	2200      	movs	r2, #0
 80018fa:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6818      	ldr	r0, [r3, #0]
 8001900:	78fa      	ldrb	r2, [r7, #3]
 8001902:	4613      	mov	r3, r2
 8001904:	011b      	lsls	r3, r3, #4
 8001906:	1a9b      	subs	r3, r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	3310      	adds	r3, #16
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	4413      	add	r3, r2
 8001910:	1d19      	adds	r1, r3, #4
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	799b      	ldrb	r3, [r3, #6]
 8001916:	461a      	mov	r2, r3
 8001918:	f003 ff66 	bl	80057e8 <USB_HC_StartXfer>
 800191c:	4603      	mov	r3, r0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop

08001928 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f003 fc5b 	bl	80051fa <USB_GetMode>
 8001944:	4603      	mov	r3, r0
 8001946:	2b01      	cmp	r3, #1
 8001948:	f040 80fb 	bne.w	8001b42 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f003 fc1e 	bl	8005192 <USB_ReadInterrupts>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	f000 80f1 	beq.w	8001b40 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f003 fc15 	bl	8005192 <USB_ReadInterrupts>
 8001968:	4603      	mov	r3, r0
 800196a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800196e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001972:	d104      	bne.n	800197e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800197c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f003 fc05 	bl	8005192 <USB_ReadInterrupts>
 8001988:	4603      	mov	r3, r0
 800198a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800198e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001992:	d104      	bne.n	800199e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800199c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f003 fbf5 	bl	8005192 <USB_ReadInterrupts>
 80019a8:	4603      	mov	r3, r0
 80019aa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80019ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80019b2:	d104      	bne.n	80019be <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80019bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f003 fbe5 	bl	8005192 <USB_ReadInterrupts>
 80019c8:	4603      	mov	r3, r0
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d103      	bne.n	80019da <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2202      	movs	r2, #2
 80019d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f003 fbd7 	bl	8005192 <USB_ReadInterrupts>
 80019e4:	4603      	mov	r3, r0
 80019e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80019ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80019ee:	d120      	bne.n	8001a32 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80019f8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d113      	bne.n	8001a32 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001a0a:	2110      	movs	r1, #16
 8001a0c:	6938      	ldr	r0, [r7, #16]
 8001a0e:	f003 faca 	bl	8004fa6 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001a12:	6938      	ldr	r0, [r7, #16]
 8001a14:	f003 faf9 	bl	800500a <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	7a5b      	ldrb	r3, [r3, #9]
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d105      	bne.n	8001a2c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2101      	movs	r1, #1
 8001a26:	4618      	mov	r0, r3
 8001a28:	f003 fcea 	bl	8005400 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f006 fcb1 	bl	8008394 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f003 fbab 	bl	8005192 <USB_ReadInterrupts>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a46:	d102      	bne.n	8001a4e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f001 fd33 	bl	80034b4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f003 fb9d 	bl	8005192 <USB_ReadInterrupts>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	f003 0308 	and.w	r3, r3, #8
 8001a5e:	2b08      	cmp	r3, #8
 8001a60:	d106      	bne.n	8001a70 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f006 fc7a 	bl	800835c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2208      	movs	r2, #8
 8001a6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f003 fb8c 	bl	8005192 <USB_ReadInterrupts>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001a84:	d139      	bne.n	8001afa <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f004 f926 	bl	8005cdc <USB_HC_ReadInterrupt>
 8001a90:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	e025      	b.n	8001ae4 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d018      	beq.n	8001ade <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	015a      	lsls	r2, r3, #5
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001abe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ac2:	d106      	bne.n	8001ad2 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	4619      	mov	r1, r3
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 f905 	bl	8001cda <HCD_HC_IN_IRQHandler>
 8001ad0:	e005      	b.n	8001ade <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 ff67 	bl	80029ac <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	617b      	str	r3, [r7, #20]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	795b      	ldrb	r3, [r3, #5]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d3d3      	bcc.n	8001a98 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001af8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f003 fb47 	bl	8005192 <USB_ReadInterrupts>
 8001b04:	4603      	mov	r3, r0
 8001b06:	f003 0310 	and.w	r3, r3, #16
 8001b0a:	2b10      	cmp	r3, #16
 8001b0c:	d101      	bne.n	8001b12 <HAL_HCD_IRQHandler+0x1ea>
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e000      	b.n	8001b14 <HAL_HCD_IRQHandler+0x1ec>
 8001b12:	2300      	movs	r3, #0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d014      	beq.n	8001b42 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	699a      	ldr	r2, [r3, #24]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 0210 	bic.w	r2, r2, #16
 8001b26:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f001 fbe4 	bl	80032f6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	699a      	ldr	r2, [r3, #24]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f042 0210 	orr.w	r2, r2, #16
 8001b3c:	619a      	str	r2, [r3, #24]
 8001b3e:	e000      	b.n	8001b42 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001b40:	bf00      	nop
    }
  }
}
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d101      	bne.n	8001b5e <HAL_HCD_Start+0x16>
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	e013      	b.n	8001b86 <HAL_HCD_Start+0x3e>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f003 fcae 	bl	80054ce <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f003 f9a7 	bl	8004eca <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d101      	bne.n	8001ba4 <HAL_HCD_Stop+0x16>
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	e00d      	b.n	8001bc0 <HAL_HCD_Stop+0x32>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f004 fa01 	bl	8005fb8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f003 fc50 	bl	800547a <USB_ResetPort>
 8001bda:	4603      	mov	r3, r0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001bf0:	78fa      	ldrb	r2, [r7, #3]
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	011b      	lsls	r3, r3, #4
 8001bf8:	1a9b      	subs	r3, r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	334c      	adds	r3, #76	@ 0x4c
 8001c00:	781b      	ldrb	r3, [r3, #0]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	460b      	mov	r3, r1
 8001c18:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001c1a:	78fa      	ldrb	r2, [r7, #3]
 8001c1c:	6879      	ldr	r1, [r7, #4]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	011b      	lsls	r3, r3, #4
 8001c22:	1a9b      	subs	r3, r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	440b      	add	r3, r1
 8001c28:	3338      	adds	r3, #56	@ 0x38
 8001c2a:	681b      	ldr	r3, [r3, #0]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f003 fc92 	bl	800556e <USB_GetCurrentFrame>
 8001c4a:	4603      	mov	r3, r0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f003 fc6d 	bl	8005540 <USB_GetHostSpeed>
 8001c66:	4603      	mov	r3, r0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001c7c:	78fa      	ldrb	r2, [r7, #3]
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	011b      	lsls	r3, r3, #4
 8001c84:	1a9b      	subs	r3, r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	440b      	add	r3, r1
 8001c8a:	331a      	adds	r3, #26
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001c90:	78fa      	ldrb	r2, [r7, #3]
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	4613      	mov	r3, r2
 8001c96:	011b      	lsls	r3, r3, #4
 8001c98:	1a9b      	subs	r3, r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	440b      	add	r3, r1
 8001c9e:	331b      	adds	r3, #27
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001ca4:	78fa      	ldrb	r2, [r7, #3]
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	011b      	lsls	r3, r3, #4
 8001cac:	1a9b      	subs	r3, r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	3325      	adds	r3, #37	@ 0x25
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001cb8:	78fa      	ldrb	r2, [r7, #3]
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	011b      	lsls	r3, r3, #4
 8001cc0:	1a9b      	subs	r3, r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	3324      	adds	r3, #36	@ 0x24
 8001cc8:	2200      	movs	r2, #0
 8001cca:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b086      	sub	sp, #24
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	78fa      	ldrb	r2, [r7, #3]
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f003 fa5d 	bl	80051b8 <USB_ReadChInterrupts>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b04      	cmp	r3, #4
 8001d06:	d11a      	bne.n	8001d3e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001d08:	78fb      	ldrb	r3, [r7, #3]
 8001d0a:	015a      	lsls	r2, r3, #5
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	4413      	add	r3, r2
 8001d10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d14:	461a      	mov	r2, r3
 8001d16:	2304      	movs	r3, #4
 8001d18:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001d1a:	78fa      	ldrb	r2, [r7, #3]
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	011b      	lsls	r3, r3, #4
 8001d22:	1a9b      	subs	r3, r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	440b      	add	r3, r1
 8001d28:	334d      	adds	r3, #77	@ 0x4d
 8001d2a:	2207      	movs	r2, #7
 8001d2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	78fa      	ldrb	r2, [r7, #3]
 8001d34:	4611      	mov	r1, r2
 8001d36:	4618      	mov	r0, r3
 8001d38:	f003 ffe1 	bl	8005cfe <USB_HC_Halt>
 8001d3c:	e09e      	b.n	8001e7c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	78fa      	ldrb	r2, [r7, #3]
 8001d44:	4611      	mov	r1, r2
 8001d46:	4618      	mov	r0, r3
 8001d48:	f003 fa36 	bl	80051b8 <USB_ReadChInterrupts>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d56:	d11b      	bne.n	8001d90 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001d58:	78fb      	ldrb	r3, [r7, #3]
 8001d5a:	015a      	lsls	r2, r3, #5
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	4413      	add	r3, r2
 8001d60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d64:	461a      	mov	r2, r3
 8001d66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d6a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001d6c:	78fa      	ldrb	r2, [r7, #3]
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	4613      	mov	r3, r2
 8001d72:	011b      	lsls	r3, r3, #4
 8001d74:	1a9b      	subs	r3, r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	440b      	add	r3, r1
 8001d7a:	334d      	adds	r3, #77	@ 0x4d
 8001d7c:	2208      	movs	r2, #8
 8001d7e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	78fa      	ldrb	r2, [r7, #3]
 8001d86:	4611      	mov	r1, r2
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f003 ffb8 	bl	8005cfe <USB_HC_Halt>
 8001d8e:	e075      	b.n	8001e7c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	78fa      	ldrb	r2, [r7, #3]
 8001d96:	4611      	mov	r1, r2
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f003 fa0d 	bl	80051b8 <USB_ReadChInterrupts>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	f003 0308 	and.w	r3, r3, #8
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	d11a      	bne.n	8001dde <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001da8:	78fb      	ldrb	r3, [r7, #3]
 8001daa:	015a      	lsls	r2, r3, #5
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	4413      	add	r3, r2
 8001db0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001db4:	461a      	mov	r2, r3
 8001db6:	2308      	movs	r3, #8
 8001db8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001dba:	78fa      	ldrb	r2, [r7, #3]
 8001dbc:	6879      	ldr	r1, [r7, #4]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	011b      	lsls	r3, r3, #4
 8001dc2:	1a9b      	subs	r3, r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	334d      	adds	r3, #77	@ 0x4d
 8001dca:	2206      	movs	r2, #6
 8001dcc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	78fa      	ldrb	r2, [r7, #3]
 8001dd4:	4611      	mov	r1, r2
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f003 ff91 	bl	8005cfe <USB_HC_Halt>
 8001ddc:	e04e      	b.n	8001e7c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	78fa      	ldrb	r2, [r7, #3]
 8001de4:	4611      	mov	r1, r2
 8001de6:	4618      	mov	r0, r3
 8001de8:	f003 f9e6 	bl	80051b8 <USB_ReadChInterrupts>
 8001dec:	4603      	mov	r3, r0
 8001dee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001df2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001df6:	d11b      	bne.n	8001e30 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001df8:	78fb      	ldrb	r3, [r7, #3]
 8001dfa:	015a      	lsls	r2, r3, #5
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	4413      	add	r3, r2
 8001e00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e04:	461a      	mov	r2, r3
 8001e06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e0a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001e0c:	78fa      	ldrb	r2, [r7, #3]
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	4613      	mov	r3, r2
 8001e12:	011b      	lsls	r3, r3, #4
 8001e14:	1a9b      	subs	r3, r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	334d      	adds	r3, #77	@ 0x4d
 8001e1c:	2209      	movs	r2, #9
 8001e1e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	78fa      	ldrb	r2, [r7, #3]
 8001e26:	4611      	mov	r1, r2
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f003 ff68 	bl	8005cfe <USB_HC_Halt>
 8001e2e:	e025      	b.n	8001e7c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	78fa      	ldrb	r2, [r7, #3]
 8001e36:	4611      	mov	r1, r2
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f003 f9bd 	bl	80051b8 <USB_ReadChInterrupts>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e44:	2b80      	cmp	r3, #128	@ 0x80
 8001e46:	d119      	bne.n	8001e7c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001e48:	78fb      	ldrb	r3, [r7, #3]
 8001e4a:	015a      	lsls	r2, r3, #5
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	4413      	add	r3, r2
 8001e50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e54:	461a      	mov	r2, r3
 8001e56:	2380      	movs	r3, #128	@ 0x80
 8001e58:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001e5a:	78fa      	ldrb	r2, [r7, #3]
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	011b      	lsls	r3, r3, #4
 8001e62:	1a9b      	subs	r3, r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	440b      	add	r3, r1
 8001e68:	334d      	adds	r3, #77	@ 0x4d
 8001e6a:	2207      	movs	r2, #7
 8001e6c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	78fa      	ldrb	r2, [r7, #3]
 8001e74:	4611      	mov	r1, r2
 8001e76:	4618      	mov	r0, r3
 8001e78:	f003 ff41 	bl	8005cfe <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	78fa      	ldrb	r2, [r7, #3]
 8001e82:	4611      	mov	r1, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f003 f997 	bl	80051b8 <USB_ReadChInterrupts>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e94:	d112      	bne.n	8001ebc <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	78fa      	ldrb	r2, [r7, #3]
 8001e9c:	4611      	mov	r1, r2
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f003 ff2d 	bl	8005cfe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001ea4:	78fb      	ldrb	r3, [r7, #3]
 8001ea6:	015a      	lsls	r2, r3, #5
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	4413      	add	r3, r2
 8001eac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001eb6:	6093      	str	r3, [r2, #8]
 8001eb8:	f000 bd75 	b.w	80029a6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	78fa      	ldrb	r2, [r7, #3]
 8001ec2:	4611      	mov	r1, r2
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f003 f977 	bl	80051b8 <USB_ReadChInterrupts>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	f040 8128 	bne.w	8002126 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001ed6:	78fb      	ldrb	r3, [r7, #3]
 8001ed8:	015a      	lsls	r2, r3, #5
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4413      	add	r3, r2
 8001ede:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	2320      	movs	r3, #32
 8001ee6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001ee8:	78fa      	ldrb	r2, [r7, #3]
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	4613      	mov	r3, r2
 8001eee:	011b      	lsls	r3, r3, #4
 8001ef0:	1a9b      	subs	r3, r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	331b      	adds	r3, #27
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d119      	bne.n	8001f32 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001efe:	78fa      	ldrb	r2, [r7, #3]
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	011b      	lsls	r3, r3, #4
 8001f06:	1a9b      	subs	r3, r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	440b      	add	r3, r1
 8001f0c:	331b      	adds	r3, #27
 8001f0e:	2200      	movs	r2, #0
 8001f10:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001f12:	78fb      	ldrb	r3, [r7, #3]
 8001f14:	015a      	lsls	r2, r3, #5
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	4413      	add	r3, r2
 8001f1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	78fa      	ldrb	r2, [r7, #3]
 8001f22:	0151      	lsls	r1, r2, #5
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	440a      	add	r2, r1
 8001f28:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001f2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f30:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	799b      	ldrb	r3, [r3, #6]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d01b      	beq.n	8001f72 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001f3a:	78fa      	ldrb	r2, [r7, #3]
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	011b      	lsls	r3, r3, #4
 8001f42:	1a9b      	subs	r3, r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	440b      	add	r3, r1
 8001f48:	3330      	adds	r3, #48	@ 0x30
 8001f4a:	6819      	ldr	r1, [r3, #0]
 8001f4c:	78fb      	ldrb	r3, [r7, #3]
 8001f4e:	015a      	lsls	r2, r3, #5
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	4413      	add	r3, r2
 8001f54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f5e:	78fa      	ldrb	r2, [r7, #3]
 8001f60:	1ac9      	subs	r1, r1, r3
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	4613      	mov	r3, r2
 8001f66:	011b      	lsls	r3, r3, #4
 8001f68:	1a9b      	subs	r3, r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4403      	add	r3, r0
 8001f6e:	3338      	adds	r3, #56	@ 0x38
 8001f70:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8001f72:	78fa      	ldrb	r2, [r7, #3]
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	4613      	mov	r3, r2
 8001f78:	011b      	lsls	r3, r3, #4
 8001f7a:	1a9b      	subs	r3, r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	440b      	add	r3, r1
 8001f80:	334d      	adds	r3, #77	@ 0x4d
 8001f82:	2201      	movs	r2, #1
 8001f84:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001f86:	78fa      	ldrb	r2, [r7, #3]
 8001f88:	6879      	ldr	r1, [r7, #4]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	011b      	lsls	r3, r3, #4
 8001f8e:	1a9b      	subs	r3, r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	440b      	add	r3, r1
 8001f94:	3344      	adds	r3, #68	@ 0x44
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001f9a:	78fb      	ldrb	r3, [r7, #3]
 8001f9c:	015a      	lsls	r2, r3, #5
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	2301      	movs	r3, #1
 8001faa:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001fac:	78fa      	ldrb	r2, [r7, #3]
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	011b      	lsls	r3, r3, #4
 8001fb4:	1a9b      	subs	r3, r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	3326      	adds	r3, #38	@ 0x26
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00a      	beq.n	8001fd8 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001fc2:	78fa      	ldrb	r2, [r7, #3]
 8001fc4:	6879      	ldr	r1, [r7, #4]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	011b      	lsls	r3, r3, #4
 8001fca:	1a9b      	subs	r3, r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	440b      	add	r3, r1
 8001fd0:	3326      	adds	r3, #38	@ 0x26
 8001fd2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d110      	bne.n	8001ffa <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	78fa      	ldrb	r2, [r7, #3]
 8001fde:	4611      	mov	r1, r2
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f003 fe8c 	bl	8005cfe <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001fe6:	78fb      	ldrb	r3, [r7, #3]
 8001fe8:	015a      	lsls	r2, r3, #5
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4413      	add	r3, r2
 8001fee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	2310      	movs	r3, #16
 8001ff6:	6093      	str	r3, [r2, #8]
 8001ff8:	e03d      	b.n	8002076 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001ffa:	78fa      	ldrb	r2, [r7, #3]
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	4613      	mov	r3, r2
 8002000:	011b      	lsls	r3, r3, #4
 8002002:	1a9b      	subs	r3, r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	440b      	add	r3, r1
 8002008:	3326      	adds	r3, #38	@ 0x26
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b03      	cmp	r3, #3
 800200e:	d00a      	beq.n	8002026 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002010:	78fa      	ldrb	r2, [r7, #3]
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	4613      	mov	r3, r2
 8002016:	011b      	lsls	r3, r3, #4
 8002018:	1a9b      	subs	r3, r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	440b      	add	r3, r1
 800201e:	3326      	adds	r3, #38	@ 0x26
 8002020:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002022:	2b01      	cmp	r3, #1
 8002024:	d127      	bne.n	8002076 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002026:	78fb      	ldrb	r3, [r7, #3]
 8002028:	015a      	lsls	r2, r3, #5
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	4413      	add	r3, r2
 800202e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	78fa      	ldrb	r2, [r7, #3]
 8002036:	0151      	lsls	r1, r2, #5
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	440a      	add	r2, r1
 800203c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002040:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002044:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002046:	78fa      	ldrb	r2, [r7, #3]
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	4613      	mov	r3, r2
 800204c:	011b      	lsls	r3, r3, #4
 800204e:	1a9b      	subs	r3, r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	440b      	add	r3, r1
 8002054:	334c      	adds	r3, #76	@ 0x4c
 8002056:	2201      	movs	r2, #1
 8002058:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800205a:	78fa      	ldrb	r2, [r7, #3]
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	011b      	lsls	r3, r3, #4
 8002062:	1a9b      	subs	r3, r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	440b      	add	r3, r1
 8002068:	334c      	adds	r3, #76	@ 0x4c
 800206a:	781a      	ldrb	r2, [r3, #0]
 800206c:	78fb      	ldrb	r3, [r7, #3]
 800206e:	4619      	mov	r1, r3
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f006 f99d 	bl	80083b0 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	799b      	ldrb	r3, [r3, #6]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d13b      	bne.n	80020f6 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800207e:	78fa      	ldrb	r2, [r7, #3]
 8002080:	6879      	ldr	r1, [r7, #4]
 8002082:	4613      	mov	r3, r2
 8002084:	011b      	lsls	r3, r3, #4
 8002086:	1a9b      	subs	r3, r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	440b      	add	r3, r1
 800208c:	3338      	adds	r3, #56	@ 0x38
 800208e:	6819      	ldr	r1, [r3, #0]
 8002090:	78fa      	ldrb	r2, [r7, #3]
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	4613      	mov	r3, r2
 8002096:	011b      	lsls	r3, r3, #4
 8002098:	1a9b      	subs	r3, r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4403      	add	r3, r0
 800209e:	3328      	adds	r3, #40	@ 0x28
 80020a0:	881b      	ldrh	r3, [r3, #0]
 80020a2:	440b      	add	r3, r1
 80020a4:	1e59      	subs	r1, r3, #1
 80020a6:	78fa      	ldrb	r2, [r7, #3]
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	4613      	mov	r3, r2
 80020ac:	011b      	lsls	r3, r3, #4
 80020ae:	1a9b      	subs	r3, r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4403      	add	r3, r0
 80020b4:	3328      	adds	r3, #40	@ 0x28
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 8470 	beq.w	80029a6 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80020c6:	78fa      	ldrb	r2, [r7, #3]
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	4613      	mov	r3, r2
 80020cc:	011b      	lsls	r3, r3, #4
 80020ce:	1a9b      	subs	r3, r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	440b      	add	r3, r1
 80020d4:	333c      	adds	r3, #60	@ 0x3c
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	78fa      	ldrb	r2, [r7, #3]
 80020da:	f083 0301 	eor.w	r3, r3, #1
 80020de:	b2d8      	uxtb	r0, r3
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	011b      	lsls	r3, r3, #4
 80020e6:	1a9b      	subs	r3, r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	333c      	adds	r3, #60	@ 0x3c
 80020ee:	4602      	mov	r2, r0
 80020f0:	701a      	strb	r2, [r3, #0]
 80020f2:	f000 bc58 	b.w	80029a6 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80020f6:	78fa      	ldrb	r2, [r7, #3]
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	4613      	mov	r3, r2
 80020fc:	011b      	lsls	r3, r3, #4
 80020fe:	1a9b      	subs	r3, r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	440b      	add	r3, r1
 8002104:	333c      	adds	r3, #60	@ 0x3c
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	78fa      	ldrb	r2, [r7, #3]
 800210a:	f083 0301 	eor.w	r3, r3, #1
 800210e:	b2d8      	uxtb	r0, r3
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	011b      	lsls	r3, r3, #4
 8002116:	1a9b      	subs	r3, r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	440b      	add	r3, r1
 800211c:	333c      	adds	r3, #60	@ 0x3c
 800211e:	4602      	mov	r2, r0
 8002120:	701a      	strb	r2, [r3, #0]
 8002122:	f000 bc40 	b.w	80029a6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	78fa      	ldrb	r2, [r7, #3]
 800212c:	4611      	mov	r1, r2
 800212e:	4618      	mov	r0, r3
 8002130:	f003 f842 	bl	80051b8 <USB_ReadChInterrupts>
 8002134:	4603      	mov	r3, r0
 8002136:	f003 0320 	and.w	r3, r3, #32
 800213a:	2b20      	cmp	r3, #32
 800213c:	d131      	bne.n	80021a2 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800213e:	78fb      	ldrb	r3, [r7, #3]
 8002140:	015a      	lsls	r2, r3, #5
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4413      	add	r3, r2
 8002146:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800214a:	461a      	mov	r2, r3
 800214c:	2320      	movs	r3, #32
 800214e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002150:	78fa      	ldrb	r2, [r7, #3]
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	011b      	lsls	r3, r3, #4
 8002158:	1a9b      	subs	r3, r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	331a      	adds	r3, #26
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2b01      	cmp	r3, #1
 8002164:	f040 841f 	bne.w	80029a6 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002168:	78fa      	ldrb	r2, [r7, #3]
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	4613      	mov	r3, r2
 800216e:	011b      	lsls	r3, r3, #4
 8002170:	1a9b      	subs	r3, r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	331b      	adds	r3, #27
 8002178:	2201      	movs	r2, #1
 800217a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800217c:	78fa      	ldrb	r2, [r7, #3]
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	4613      	mov	r3, r2
 8002182:	011b      	lsls	r3, r3, #4
 8002184:	1a9b      	subs	r3, r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	440b      	add	r3, r1
 800218a:	334d      	adds	r3, #77	@ 0x4d
 800218c:	2203      	movs	r2, #3
 800218e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	78fa      	ldrb	r2, [r7, #3]
 8002196:	4611      	mov	r1, r2
 8002198:	4618      	mov	r0, r3
 800219a:	f003 fdb0 	bl	8005cfe <USB_HC_Halt>
 800219e:	f000 bc02 	b.w	80029a6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	78fa      	ldrb	r2, [r7, #3]
 80021a8:	4611      	mov	r1, r2
 80021aa:	4618      	mov	r0, r3
 80021ac:	f003 f804 	bl	80051b8 <USB_ReadChInterrupts>
 80021b0:	4603      	mov	r3, r0
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	f040 8305 	bne.w	80027c6 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	015a      	lsls	r2, r3, #5
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	4413      	add	r3, r2
 80021c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021c8:	461a      	mov	r2, r3
 80021ca:	2302      	movs	r3, #2
 80021cc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80021ce:	78fa      	ldrb	r2, [r7, #3]
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	011b      	lsls	r3, r3, #4
 80021d6:	1a9b      	subs	r3, r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	440b      	add	r3, r1
 80021dc:	334d      	adds	r3, #77	@ 0x4d
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d114      	bne.n	800220e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80021e4:	78fa      	ldrb	r2, [r7, #3]
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	4613      	mov	r3, r2
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	1a9b      	subs	r3, r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	334d      	adds	r3, #77	@ 0x4d
 80021f4:	2202      	movs	r2, #2
 80021f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80021f8:	78fa      	ldrb	r2, [r7, #3]
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	011b      	lsls	r3, r3, #4
 8002200:	1a9b      	subs	r3, r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	440b      	add	r3, r1
 8002206:	334c      	adds	r3, #76	@ 0x4c
 8002208:	2201      	movs	r2, #1
 800220a:	701a      	strb	r2, [r3, #0]
 800220c:	e2cc      	b.n	80027a8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800220e:	78fa      	ldrb	r2, [r7, #3]
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	4613      	mov	r3, r2
 8002214:	011b      	lsls	r3, r3, #4
 8002216:	1a9b      	subs	r3, r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	440b      	add	r3, r1
 800221c:	334d      	adds	r3, #77	@ 0x4d
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b06      	cmp	r3, #6
 8002222:	d114      	bne.n	800224e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002224:	78fa      	ldrb	r2, [r7, #3]
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	4613      	mov	r3, r2
 800222a:	011b      	lsls	r3, r3, #4
 800222c:	1a9b      	subs	r3, r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	334d      	adds	r3, #77	@ 0x4d
 8002234:	2202      	movs	r2, #2
 8002236:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002238:	78fa      	ldrb	r2, [r7, #3]
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	011b      	lsls	r3, r3, #4
 8002240:	1a9b      	subs	r3, r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	440b      	add	r3, r1
 8002246:	334c      	adds	r3, #76	@ 0x4c
 8002248:	2205      	movs	r2, #5
 800224a:	701a      	strb	r2, [r3, #0]
 800224c:	e2ac      	b.n	80027a8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800224e:	78fa      	ldrb	r2, [r7, #3]
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	4613      	mov	r3, r2
 8002254:	011b      	lsls	r3, r3, #4
 8002256:	1a9b      	subs	r3, r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	440b      	add	r3, r1
 800225c:	334d      	adds	r3, #77	@ 0x4d
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	2b07      	cmp	r3, #7
 8002262:	d00b      	beq.n	800227c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002264:	78fa      	ldrb	r2, [r7, #3]
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	4613      	mov	r3, r2
 800226a:	011b      	lsls	r3, r3, #4
 800226c:	1a9b      	subs	r3, r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	440b      	add	r3, r1
 8002272:	334d      	adds	r3, #77	@ 0x4d
 8002274:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002276:	2b09      	cmp	r3, #9
 8002278:	f040 80a6 	bne.w	80023c8 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800227c:	78fa      	ldrb	r2, [r7, #3]
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	011b      	lsls	r3, r3, #4
 8002284:	1a9b      	subs	r3, r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	334d      	adds	r3, #77	@ 0x4d
 800228c:	2202      	movs	r2, #2
 800228e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002290:	78fa      	ldrb	r2, [r7, #3]
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	4613      	mov	r3, r2
 8002296:	011b      	lsls	r3, r3, #4
 8002298:	1a9b      	subs	r3, r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	3344      	adds	r3, #68	@ 0x44
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	1c59      	adds	r1, r3, #1
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	011b      	lsls	r3, r3, #4
 80022aa:	1a9b      	subs	r3, r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4403      	add	r3, r0
 80022b0:	3344      	adds	r3, #68	@ 0x44
 80022b2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80022b4:	78fa      	ldrb	r2, [r7, #3]
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	4613      	mov	r3, r2
 80022ba:	011b      	lsls	r3, r3, #4
 80022bc:	1a9b      	subs	r3, r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	3344      	adds	r3, #68	@ 0x44
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d943      	bls.n	8002352 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80022ca:	78fa      	ldrb	r2, [r7, #3]
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	011b      	lsls	r3, r3, #4
 80022d2:	1a9b      	subs	r3, r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	440b      	add	r3, r1
 80022d8:	3344      	adds	r3, #68	@ 0x44
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80022de:	78fa      	ldrb	r2, [r7, #3]
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	4613      	mov	r3, r2
 80022e4:	011b      	lsls	r3, r3, #4
 80022e6:	1a9b      	subs	r3, r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	440b      	add	r3, r1
 80022ec:	331a      	adds	r3, #26
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d123      	bne.n	800233c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80022f4:	78fa      	ldrb	r2, [r7, #3]
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	011b      	lsls	r3, r3, #4
 80022fc:	1a9b      	subs	r3, r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	331b      	adds	r3, #27
 8002304:	2200      	movs	r2, #0
 8002306:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002308:	78fa      	ldrb	r2, [r7, #3]
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	1a9b      	subs	r3, r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	331c      	adds	r3, #28
 8002318:	2200      	movs	r2, #0
 800231a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800231c:	78fb      	ldrb	r3, [r7, #3]
 800231e:	015a      	lsls	r2, r3, #5
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4413      	add	r3, r2
 8002324:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	78fa      	ldrb	r2, [r7, #3]
 800232c:	0151      	lsls	r1, r2, #5
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	440a      	add	r2, r1
 8002332:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002336:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800233a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800233c:	78fa      	ldrb	r2, [r7, #3]
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	011b      	lsls	r3, r3, #4
 8002344:	1a9b      	subs	r3, r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	334c      	adds	r3, #76	@ 0x4c
 800234c:	2204      	movs	r2, #4
 800234e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002350:	e229      	b.n	80027a6 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002352:	78fa      	ldrb	r2, [r7, #3]
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	4613      	mov	r3, r2
 8002358:	011b      	lsls	r3, r3, #4
 800235a:	1a9b      	subs	r3, r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	440b      	add	r3, r1
 8002360:	334c      	adds	r3, #76	@ 0x4c
 8002362:	2202      	movs	r2, #2
 8002364:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002366:	78fa      	ldrb	r2, [r7, #3]
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	4613      	mov	r3, r2
 800236c:	011b      	lsls	r3, r3, #4
 800236e:	1a9b      	subs	r3, r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	440b      	add	r3, r1
 8002374:	3326      	adds	r3, #38	@ 0x26
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00b      	beq.n	8002394 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800237c:	78fa      	ldrb	r2, [r7, #3]
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	011b      	lsls	r3, r3, #4
 8002384:	1a9b      	subs	r3, r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	3326      	adds	r3, #38	@ 0x26
 800238c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800238e:	2b02      	cmp	r3, #2
 8002390:	f040 8209 	bne.w	80027a6 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002394:	78fb      	ldrb	r3, [r7, #3]
 8002396:	015a      	lsls	r2, r3, #5
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4413      	add	r3, r2
 800239c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80023aa:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80023b2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80023b4:	78fb      	ldrb	r3, [r7, #3]
 80023b6:	015a      	lsls	r2, r3, #5
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4413      	add	r3, r2
 80023bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023c0:	461a      	mov	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80023c6:	e1ee      	b.n	80027a6 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80023c8:	78fa      	ldrb	r2, [r7, #3]
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	011b      	lsls	r3, r3, #4
 80023d0:	1a9b      	subs	r3, r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	334d      	adds	r3, #77	@ 0x4d
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	2b05      	cmp	r3, #5
 80023dc:	f040 80c8 	bne.w	8002570 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023e0:	78fa      	ldrb	r2, [r7, #3]
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	4613      	mov	r3, r2
 80023e6:	011b      	lsls	r3, r3, #4
 80023e8:	1a9b      	subs	r3, r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	334d      	adds	r3, #77	@ 0x4d
 80023f0:	2202      	movs	r2, #2
 80023f2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80023f4:	78fa      	ldrb	r2, [r7, #3]
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	4613      	mov	r3, r2
 80023fa:	011b      	lsls	r3, r3, #4
 80023fc:	1a9b      	subs	r3, r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	331b      	adds	r3, #27
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2b01      	cmp	r3, #1
 8002408:	f040 81ce 	bne.w	80027a8 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800240c:	78fa      	ldrb	r2, [r7, #3]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	011b      	lsls	r3, r3, #4
 8002414:	1a9b      	subs	r3, r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	3326      	adds	r3, #38	@ 0x26
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b03      	cmp	r3, #3
 8002420:	d16b      	bne.n	80024fa <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002422:	78fa      	ldrb	r2, [r7, #3]
 8002424:	6879      	ldr	r1, [r7, #4]
 8002426:	4613      	mov	r3, r2
 8002428:	011b      	lsls	r3, r3, #4
 800242a:	1a9b      	subs	r3, r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	440b      	add	r3, r1
 8002430:	3348      	adds	r3, #72	@ 0x48
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	1c59      	adds	r1, r3, #1
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	1a9b      	subs	r3, r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4403      	add	r3, r0
 8002442:	3348      	adds	r3, #72	@ 0x48
 8002444:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002446:	78fa      	ldrb	r2, [r7, #3]
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	011b      	lsls	r3, r3, #4
 800244e:	1a9b      	subs	r3, r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	440b      	add	r3, r1
 8002454:	3348      	adds	r3, #72	@ 0x48
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2b02      	cmp	r3, #2
 800245a:	d943      	bls.n	80024e4 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800245c:	78fa      	ldrb	r2, [r7, #3]
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	4613      	mov	r3, r2
 8002462:	011b      	lsls	r3, r3, #4
 8002464:	1a9b      	subs	r3, r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	3348      	adds	r3, #72	@ 0x48
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002470:	78fa      	ldrb	r2, [r7, #3]
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	4613      	mov	r3, r2
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	1a9b      	subs	r3, r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	331b      	adds	r3, #27
 8002480:	2200      	movs	r2, #0
 8002482:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002484:	78fa      	ldrb	r2, [r7, #3]
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	1a9b      	subs	r3, r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	3344      	adds	r3, #68	@ 0x44
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d809      	bhi.n	80024ae <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800249a:	78fa      	ldrb	r2, [r7, #3]
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	4613      	mov	r3, r2
 80024a0:	011b      	lsls	r3, r3, #4
 80024a2:	1a9b      	subs	r3, r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	440b      	add	r3, r1
 80024a8:	331c      	adds	r3, #28
 80024aa:	2201      	movs	r2, #1
 80024ac:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80024ae:	78fb      	ldrb	r3, [r7, #3]
 80024b0:	015a      	lsls	r2, r3, #5
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	4413      	add	r3, r2
 80024b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	78fa      	ldrb	r2, [r7, #3]
 80024be:	0151      	lsls	r1, r2, #5
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	440a      	add	r2, r1
 80024c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80024c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024cc:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80024ce:	78fa      	ldrb	r2, [r7, #3]
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	011b      	lsls	r3, r3, #4
 80024d6:	1a9b      	subs	r3, r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	440b      	add	r3, r1
 80024dc:	334c      	adds	r3, #76	@ 0x4c
 80024de:	2204      	movs	r2, #4
 80024e0:	701a      	strb	r2, [r3, #0]
 80024e2:	e014      	b.n	800250e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80024e4:	78fa      	ldrb	r2, [r7, #3]
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	4613      	mov	r3, r2
 80024ea:	011b      	lsls	r3, r3, #4
 80024ec:	1a9b      	subs	r3, r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	334c      	adds	r3, #76	@ 0x4c
 80024f4:	2202      	movs	r2, #2
 80024f6:	701a      	strb	r2, [r3, #0]
 80024f8:	e009      	b.n	800250e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80024fa:	78fa      	ldrb	r2, [r7, #3]
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	4613      	mov	r3, r2
 8002500:	011b      	lsls	r3, r3, #4
 8002502:	1a9b      	subs	r3, r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	440b      	add	r3, r1
 8002508:	334c      	adds	r3, #76	@ 0x4c
 800250a:	2202      	movs	r2, #2
 800250c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800250e:	78fa      	ldrb	r2, [r7, #3]
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	011b      	lsls	r3, r3, #4
 8002516:	1a9b      	subs	r3, r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	440b      	add	r3, r1
 800251c:	3326      	adds	r3, #38	@ 0x26
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00b      	beq.n	800253c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002524:	78fa      	ldrb	r2, [r7, #3]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	011b      	lsls	r3, r3, #4
 800252c:	1a9b      	subs	r3, r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	3326      	adds	r3, #38	@ 0x26
 8002534:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002536:	2b02      	cmp	r3, #2
 8002538:	f040 8136 	bne.w	80027a8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800253c:	78fb      	ldrb	r3, [r7, #3]
 800253e:	015a      	lsls	r2, r3, #5
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	4413      	add	r3, r2
 8002544:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002552:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800255a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800255c:	78fb      	ldrb	r3, [r7, #3]
 800255e:	015a      	lsls	r2, r3, #5
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	4413      	add	r3, r2
 8002564:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002568:	461a      	mov	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	e11b      	b.n	80027a8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002570:	78fa      	ldrb	r2, [r7, #3]
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	4613      	mov	r3, r2
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	1a9b      	subs	r3, r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	334d      	adds	r3, #77	@ 0x4d
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b03      	cmp	r3, #3
 8002584:	f040 8081 	bne.w	800268a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002588:	78fa      	ldrb	r2, [r7, #3]
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	011b      	lsls	r3, r3, #4
 8002590:	1a9b      	subs	r3, r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	440b      	add	r3, r1
 8002596:	334d      	adds	r3, #77	@ 0x4d
 8002598:	2202      	movs	r2, #2
 800259a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800259c:	78fa      	ldrb	r2, [r7, #3]
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	011b      	lsls	r3, r3, #4
 80025a4:	1a9b      	subs	r3, r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	331b      	adds	r3, #27
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	f040 80fa 	bne.w	80027a8 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80025b4:	78fa      	ldrb	r2, [r7, #3]
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	4613      	mov	r3, r2
 80025ba:	011b      	lsls	r3, r3, #4
 80025bc:	1a9b      	subs	r3, r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	334c      	adds	r3, #76	@ 0x4c
 80025c4:	2202      	movs	r2, #2
 80025c6:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80025c8:	78fb      	ldrb	r3, [r7, #3]
 80025ca:	015a      	lsls	r2, r3, #5
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	4413      	add	r3, r2
 80025d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	78fa      	ldrb	r2, [r7, #3]
 80025d8:	0151      	lsls	r1, r2, #5
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	440a      	add	r2, r1
 80025de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80025e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025e6:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80025e8:	78fb      	ldrb	r3, [r7, #3]
 80025ea:	015a      	lsls	r2, r3, #5
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	4413      	add	r3, r2
 80025f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	78fa      	ldrb	r2, [r7, #3]
 80025f8:	0151      	lsls	r1, r2, #5
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	440a      	add	r2, r1
 80025fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002602:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002606:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002608:	78fb      	ldrb	r3, [r7, #3]
 800260a:	015a      	lsls	r2, r3, #5
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	4413      	add	r3, r2
 8002610:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	78fa      	ldrb	r2, [r7, #3]
 8002618:	0151      	lsls	r1, r2, #5
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	440a      	add	r2, r1
 800261e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002622:	f023 0320 	bic.w	r3, r3, #32
 8002626:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002628:	78fa      	ldrb	r2, [r7, #3]
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	1a9b      	subs	r3, r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	3326      	adds	r3, #38	@ 0x26
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00b      	beq.n	8002656 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800263e:	78fa      	ldrb	r2, [r7, #3]
 8002640:	6879      	ldr	r1, [r7, #4]
 8002642:	4613      	mov	r3, r2
 8002644:	011b      	lsls	r3, r3, #4
 8002646:	1a9b      	subs	r3, r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	440b      	add	r3, r1
 800264c:	3326      	adds	r3, #38	@ 0x26
 800264e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002650:	2b02      	cmp	r3, #2
 8002652:	f040 80a9 	bne.w	80027a8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002656:	78fb      	ldrb	r3, [r7, #3]
 8002658:	015a      	lsls	r2, r3, #5
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	4413      	add	r3, r2
 800265e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800266c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002674:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002676:	78fb      	ldrb	r3, [r7, #3]
 8002678:	015a      	lsls	r2, r3, #5
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4413      	add	r3, r2
 800267e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002682:	461a      	mov	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	e08e      	b.n	80027a8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800268a:	78fa      	ldrb	r2, [r7, #3]
 800268c:	6879      	ldr	r1, [r7, #4]
 800268e:	4613      	mov	r3, r2
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	1a9b      	subs	r3, r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	440b      	add	r3, r1
 8002698:	334d      	adds	r3, #77	@ 0x4d
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2b04      	cmp	r3, #4
 800269e:	d143      	bne.n	8002728 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026a0:	78fa      	ldrb	r2, [r7, #3]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	1a9b      	subs	r3, r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	440b      	add	r3, r1
 80026ae:	334d      	adds	r3, #77	@ 0x4d
 80026b0:	2202      	movs	r2, #2
 80026b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80026b4:	78fa      	ldrb	r2, [r7, #3]
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	4613      	mov	r3, r2
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	1a9b      	subs	r3, r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	334c      	adds	r3, #76	@ 0x4c
 80026c4:	2202      	movs	r2, #2
 80026c6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026c8:	78fa      	ldrb	r2, [r7, #3]
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	1a9b      	subs	r3, r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	3326      	adds	r3, #38	@ 0x26
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00a      	beq.n	80026f4 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80026de:	78fa      	ldrb	r2, [r7, #3]
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	4613      	mov	r3, r2
 80026e4:	011b      	lsls	r3, r3, #4
 80026e6:	1a9b      	subs	r3, r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	440b      	add	r3, r1
 80026ec:	3326      	adds	r3, #38	@ 0x26
 80026ee:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d159      	bne.n	80027a8 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80026f4:	78fb      	ldrb	r3, [r7, #3]
 80026f6:	015a      	lsls	r2, r3, #5
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	4413      	add	r3, r2
 80026fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800270a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002712:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002714:	78fb      	ldrb	r3, [r7, #3]
 8002716:	015a      	lsls	r2, r3, #5
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	4413      	add	r3, r2
 800271c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002720:	461a      	mov	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	e03f      	b.n	80027a8 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002728:	78fa      	ldrb	r2, [r7, #3]
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	011b      	lsls	r3, r3, #4
 8002730:	1a9b      	subs	r3, r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	440b      	add	r3, r1
 8002736:	334d      	adds	r3, #77	@ 0x4d
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b08      	cmp	r3, #8
 800273c:	d126      	bne.n	800278c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800273e:	78fa      	ldrb	r2, [r7, #3]
 8002740:	6879      	ldr	r1, [r7, #4]
 8002742:	4613      	mov	r3, r2
 8002744:	011b      	lsls	r3, r3, #4
 8002746:	1a9b      	subs	r3, r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	440b      	add	r3, r1
 800274c:	334d      	adds	r3, #77	@ 0x4d
 800274e:	2202      	movs	r2, #2
 8002750:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002752:	78fa      	ldrb	r2, [r7, #3]
 8002754:	6879      	ldr	r1, [r7, #4]
 8002756:	4613      	mov	r3, r2
 8002758:	011b      	lsls	r3, r3, #4
 800275a:	1a9b      	subs	r3, r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	440b      	add	r3, r1
 8002760:	3344      	adds	r3, #68	@ 0x44
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	1c59      	adds	r1, r3, #1
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	1a9b      	subs	r3, r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4403      	add	r3, r0
 8002772:	3344      	adds	r3, #68	@ 0x44
 8002774:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002776:	78fa      	ldrb	r2, [r7, #3]
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	4613      	mov	r3, r2
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	1a9b      	subs	r3, r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	440b      	add	r3, r1
 8002784:	334c      	adds	r3, #76	@ 0x4c
 8002786:	2204      	movs	r2, #4
 8002788:	701a      	strb	r2, [r3, #0]
 800278a:	e00d      	b.n	80027a8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800278c:	78fa      	ldrb	r2, [r7, #3]
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	4613      	mov	r3, r2
 8002792:	011b      	lsls	r3, r3, #4
 8002794:	1a9b      	subs	r3, r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	334d      	adds	r3, #77	@ 0x4d
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	f000 8100 	beq.w	80029a4 <HCD_HC_IN_IRQHandler+0xcca>
 80027a4:	e000      	b.n	80027a8 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80027a6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80027a8:	78fa      	ldrb	r2, [r7, #3]
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	4613      	mov	r3, r2
 80027ae:	011b      	lsls	r3, r3, #4
 80027b0:	1a9b      	subs	r3, r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	440b      	add	r3, r1
 80027b6:	334c      	adds	r3, #76	@ 0x4c
 80027b8:	781a      	ldrb	r2, [r3, #0]
 80027ba:	78fb      	ldrb	r3, [r7, #3]
 80027bc:	4619      	mov	r1, r3
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f005 fdf6 	bl	80083b0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80027c4:	e0ef      	b.n	80029a6 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	78fa      	ldrb	r2, [r7, #3]
 80027cc:	4611      	mov	r1, r2
 80027ce:	4618      	mov	r0, r3
 80027d0:	f002 fcf2 	bl	80051b8 <USB_ReadChInterrupts>
 80027d4:	4603      	mov	r3, r0
 80027d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027da:	2b40      	cmp	r3, #64	@ 0x40
 80027dc:	d12f      	bne.n	800283e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80027de:	78fb      	ldrb	r3, [r7, #3]
 80027e0:	015a      	lsls	r2, r3, #5
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	4413      	add	r3, r2
 80027e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027ea:	461a      	mov	r2, r3
 80027ec:	2340      	movs	r3, #64	@ 0x40
 80027ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80027f0:	78fa      	ldrb	r2, [r7, #3]
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	1a9b      	subs	r3, r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	334d      	adds	r3, #77	@ 0x4d
 8002800:	2205      	movs	r2, #5
 8002802:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002804:	78fa      	ldrb	r2, [r7, #3]
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	4613      	mov	r3, r2
 800280a:	011b      	lsls	r3, r3, #4
 800280c:	1a9b      	subs	r3, r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	440b      	add	r3, r1
 8002812:	331a      	adds	r3, #26
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d109      	bne.n	800282e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800281a:	78fa      	ldrb	r2, [r7, #3]
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	4613      	mov	r3, r2
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	1a9b      	subs	r3, r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	440b      	add	r3, r1
 8002828:	3344      	adds	r3, #68	@ 0x44
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	78fa      	ldrb	r2, [r7, #3]
 8002834:	4611      	mov	r1, r2
 8002836:	4618      	mov	r0, r3
 8002838:	f003 fa61 	bl	8005cfe <USB_HC_Halt>
 800283c:	e0b3      	b.n	80029a6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	78fa      	ldrb	r2, [r7, #3]
 8002844:	4611      	mov	r1, r2
 8002846:	4618      	mov	r0, r3
 8002848:	f002 fcb6 	bl	80051b8 <USB_ReadChInterrupts>
 800284c:	4603      	mov	r3, r0
 800284e:	f003 0310 	and.w	r3, r3, #16
 8002852:	2b10      	cmp	r3, #16
 8002854:	f040 80a7 	bne.w	80029a6 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002858:	78fa      	ldrb	r2, [r7, #3]
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	4613      	mov	r3, r2
 800285e:	011b      	lsls	r3, r3, #4
 8002860:	1a9b      	subs	r3, r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	3326      	adds	r3, #38	@ 0x26
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b03      	cmp	r3, #3
 800286c:	d11b      	bne.n	80028a6 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800286e:	78fa      	ldrb	r2, [r7, #3]
 8002870:	6879      	ldr	r1, [r7, #4]
 8002872:	4613      	mov	r3, r2
 8002874:	011b      	lsls	r3, r3, #4
 8002876:	1a9b      	subs	r3, r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	440b      	add	r3, r1
 800287c:	3344      	adds	r3, #68	@ 0x44
 800287e:	2200      	movs	r2, #0
 8002880:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002882:	78fa      	ldrb	r2, [r7, #3]
 8002884:	6879      	ldr	r1, [r7, #4]
 8002886:	4613      	mov	r3, r2
 8002888:	011b      	lsls	r3, r3, #4
 800288a:	1a9b      	subs	r3, r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	440b      	add	r3, r1
 8002890:	334d      	adds	r3, #77	@ 0x4d
 8002892:	2204      	movs	r2, #4
 8002894:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	78fa      	ldrb	r2, [r7, #3]
 800289c:	4611      	mov	r1, r2
 800289e:	4618      	mov	r0, r3
 80028a0:	f003 fa2d 	bl	8005cfe <USB_HC_Halt>
 80028a4:	e03f      	b.n	8002926 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028a6:	78fa      	ldrb	r2, [r7, #3]
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	4613      	mov	r3, r2
 80028ac:	011b      	lsls	r3, r3, #4
 80028ae:	1a9b      	subs	r3, r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	440b      	add	r3, r1
 80028b4:	3326      	adds	r3, #38	@ 0x26
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00a      	beq.n	80028d2 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80028bc:	78fa      	ldrb	r2, [r7, #3]
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	011b      	lsls	r3, r3, #4
 80028c4:	1a9b      	subs	r3, r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	3326      	adds	r3, #38	@ 0x26
 80028cc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d129      	bne.n	8002926 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80028d2:	78fa      	ldrb	r2, [r7, #3]
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	4613      	mov	r3, r2
 80028d8:	011b      	lsls	r3, r3, #4
 80028da:	1a9b      	subs	r3, r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	440b      	add	r3, r1
 80028e0:	3344      	adds	r3, #68	@ 0x44
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	799b      	ldrb	r3, [r3, #6]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00a      	beq.n	8002904 <HCD_HC_IN_IRQHandler+0xc2a>
 80028ee:	78fa      	ldrb	r2, [r7, #3]
 80028f0:	6879      	ldr	r1, [r7, #4]
 80028f2:	4613      	mov	r3, r2
 80028f4:	011b      	lsls	r3, r3, #4
 80028f6:	1a9b      	subs	r3, r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	440b      	add	r3, r1
 80028fc:	331b      	adds	r3, #27
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d110      	bne.n	8002926 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002904:	78fa      	ldrb	r2, [r7, #3]
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	4613      	mov	r3, r2
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	1a9b      	subs	r3, r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	334d      	adds	r3, #77	@ 0x4d
 8002914:	2204      	movs	r2, #4
 8002916:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	78fa      	ldrb	r2, [r7, #3]
 800291e:	4611      	mov	r1, r2
 8002920:	4618      	mov	r0, r3
 8002922:	f003 f9ec 	bl	8005cfe <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002926:	78fa      	ldrb	r2, [r7, #3]
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	4613      	mov	r3, r2
 800292c:	011b      	lsls	r3, r3, #4
 800292e:	1a9b      	subs	r3, r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	440b      	add	r3, r1
 8002934:	331b      	adds	r3, #27
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d129      	bne.n	8002990 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800293c:	78fa      	ldrb	r2, [r7, #3]
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	4613      	mov	r3, r2
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	1a9b      	subs	r3, r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	440b      	add	r3, r1
 800294a:	331b      	adds	r3, #27
 800294c:	2200      	movs	r2, #0
 800294e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002950:	78fb      	ldrb	r3, [r7, #3]
 8002952:	015a      	lsls	r2, r3, #5
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	4413      	add	r3, r2
 8002958:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	78fa      	ldrb	r2, [r7, #3]
 8002960:	0151      	lsls	r1, r2, #5
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	440a      	add	r2, r1
 8002966:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800296a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800296e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002970:	78fb      	ldrb	r3, [r7, #3]
 8002972:	015a      	lsls	r2, r3, #5
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	4413      	add	r3, r2
 8002978:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	78fa      	ldrb	r2, [r7, #3]
 8002980:	0151      	lsls	r1, r2, #5
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	440a      	add	r2, r1
 8002986:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800298a:	f043 0320 	orr.w	r3, r3, #32
 800298e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002990:	78fb      	ldrb	r3, [r7, #3]
 8002992:	015a      	lsls	r2, r3, #5
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	4413      	add	r3, r2
 8002998:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800299c:	461a      	mov	r2, r3
 800299e:	2310      	movs	r3, #16
 80029a0:	6093      	str	r3, [r2, #8]
 80029a2:	e000      	b.n	80029a6 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80029a4:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	460b      	mov	r3, r1
 80029b6:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	78fa      	ldrb	r2, [r7, #3]
 80029c8:	4611      	mov	r1, r2
 80029ca:	4618      	mov	r0, r3
 80029cc:	f002 fbf4 	bl	80051b8 <USB_ReadChInterrupts>
 80029d0:	4603      	mov	r3, r0
 80029d2:	f003 0304 	and.w	r3, r3, #4
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	d11b      	bne.n	8002a12 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80029da:	78fb      	ldrb	r3, [r7, #3]
 80029dc:	015a      	lsls	r2, r3, #5
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	4413      	add	r3, r2
 80029e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029e6:	461a      	mov	r2, r3
 80029e8:	2304      	movs	r3, #4
 80029ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80029ec:	78fa      	ldrb	r2, [r7, #3]
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	4613      	mov	r3, r2
 80029f2:	011b      	lsls	r3, r3, #4
 80029f4:	1a9b      	subs	r3, r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	334d      	adds	r3, #77	@ 0x4d
 80029fc:	2207      	movs	r2, #7
 80029fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	78fa      	ldrb	r2, [r7, #3]
 8002a06:	4611      	mov	r1, r2
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f003 f978 	bl	8005cfe <USB_HC_Halt>
 8002a0e:	f000 bc6f 	b.w	80032f0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	78fa      	ldrb	r2, [r7, #3]
 8002a18:	4611      	mov	r1, r2
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f002 fbcc 	bl	80051b8 <USB_ReadChInterrupts>
 8002a20:	4603      	mov	r3, r0
 8002a22:	f003 0320 	and.w	r3, r3, #32
 8002a26:	2b20      	cmp	r3, #32
 8002a28:	f040 8082 	bne.w	8002b30 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002a2c:	78fb      	ldrb	r3, [r7, #3]
 8002a2e:	015a      	lsls	r2, r3, #5
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	4413      	add	r3, r2
 8002a34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a38:	461a      	mov	r2, r3
 8002a3a:	2320      	movs	r3, #32
 8002a3c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002a3e:	78fa      	ldrb	r2, [r7, #3]
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	1a9b      	subs	r3, r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	3319      	adds	r3, #25
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d124      	bne.n	8002a9e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002a54:	78fa      	ldrb	r2, [r7, #3]
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	011b      	lsls	r3, r3, #4
 8002a5c:	1a9b      	subs	r3, r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	3319      	adds	r3, #25
 8002a64:	2200      	movs	r2, #0
 8002a66:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a68:	78fa      	ldrb	r2, [r7, #3]
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	011b      	lsls	r3, r3, #4
 8002a70:	1a9b      	subs	r3, r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	334c      	adds	r3, #76	@ 0x4c
 8002a78:	2202      	movs	r2, #2
 8002a7a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002a7c:	78fa      	ldrb	r2, [r7, #3]
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	4613      	mov	r3, r2
 8002a82:	011b      	lsls	r3, r3, #4
 8002a84:	1a9b      	subs	r3, r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	334d      	adds	r3, #77	@ 0x4d
 8002a8c:	2203      	movs	r2, #3
 8002a8e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	78fa      	ldrb	r2, [r7, #3]
 8002a96:	4611      	mov	r1, r2
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f003 f930 	bl	8005cfe <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002a9e:	78fa      	ldrb	r2, [r7, #3]
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	1a9b      	subs	r3, r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	440b      	add	r3, r1
 8002aac:	331a      	adds	r3, #26
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	f040 841d 	bne.w	80032f0 <HCD_HC_OUT_IRQHandler+0x944>
 8002ab6:	78fa      	ldrb	r2, [r7, #3]
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	4613      	mov	r3, r2
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	1a9b      	subs	r3, r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	440b      	add	r3, r1
 8002ac4:	331b      	adds	r3, #27
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f040 8411 	bne.w	80032f0 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002ace:	78fa      	ldrb	r2, [r7, #3]
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	011b      	lsls	r3, r3, #4
 8002ad6:	1a9b      	subs	r3, r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	440b      	add	r3, r1
 8002adc:	3326      	adds	r3, #38	@ 0x26
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d009      	beq.n	8002af8 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002ae4:	78fa      	ldrb	r2, [r7, #3]
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	1a9b      	subs	r3, r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	331b      	adds	r3, #27
 8002af4:	2201      	movs	r2, #1
 8002af6:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002af8:	78fa      	ldrb	r2, [r7, #3]
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	4613      	mov	r3, r2
 8002afe:	011b      	lsls	r3, r3, #4
 8002b00:	1a9b      	subs	r3, r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	334d      	adds	r3, #77	@ 0x4d
 8002b08:	2203      	movs	r2, #3
 8002b0a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	78fa      	ldrb	r2, [r7, #3]
 8002b12:	4611      	mov	r1, r2
 8002b14:	4618      	mov	r0, r3
 8002b16:	f003 f8f2 	bl	8005cfe <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002b1a:	78fa      	ldrb	r2, [r7, #3]
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	011b      	lsls	r3, r3, #4
 8002b22:	1a9b      	subs	r3, r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	440b      	add	r3, r1
 8002b28:	3344      	adds	r3, #68	@ 0x44
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	e3df      	b.n	80032f0 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	78fa      	ldrb	r2, [r7, #3]
 8002b36:	4611      	mov	r1, r2
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f002 fb3d 	bl	80051b8 <USB_ReadChInterrupts>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b48:	d111      	bne.n	8002b6e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002b4a:	78fb      	ldrb	r3, [r7, #3]
 8002b4c:	015a      	lsls	r2, r3, #5
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	4413      	add	r3, r2
 8002b52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b56:	461a      	mov	r2, r3
 8002b58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b5c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	78fa      	ldrb	r2, [r7, #3]
 8002b64:	4611      	mov	r1, r2
 8002b66:	4618      	mov	r0, r3
 8002b68:	f003 f8c9 	bl	8005cfe <USB_HC_Halt>
 8002b6c:	e3c0      	b.n	80032f0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	78fa      	ldrb	r2, [r7, #3]
 8002b74:	4611      	mov	r1, r2
 8002b76:	4618      	mov	r0, r3
 8002b78:	f002 fb1e 	bl	80051b8 <USB_ReadChInterrupts>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d168      	bne.n	8002c58 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002b86:	78fa      	ldrb	r2, [r7, #3]
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	011b      	lsls	r3, r3, #4
 8002b8e:	1a9b      	subs	r3, r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	440b      	add	r3, r1
 8002b94:	3344      	adds	r3, #68	@ 0x44
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	78fa      	ldrb	r2, [r7, #3]
 8002ba0:	4611      	mov	r1, r2
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f002 fb08 	bl	80051b8 <USB_ReadChInterrupts>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bae:	2b40      	cmp	r3, #64	@ 0x40
 8002bb0:	d112      	bne.n	8002bd8 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002bb2:	78fa      	ldrb	r2, [r7, #3]
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	011b      	lsls	r3, r3, #4
 8002bba:	1a9b      	subs	r3, r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	3319      	adds	r3, #25
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002bc6:	78fb      	ldrb	r3, [r7, #3]
 8002bc8:	015a      	lsls	r2, r3, #5
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	4413      	add	r3, r2
 8002bce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	2340      	movs	r3, #64	@ 0x40
 8002bd6:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002bd8:	78fa      	ldrb	r2, [r7, #3]
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	1a9b      	subs	r3, r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	331b      	adds	r3, #27
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d019      	beq.n	8002c22 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002bee:	78fa      	ldrb	r2, [r7, #3]
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	011b      	lsls	r3, r3, #4
 8002bf6:	1a9b      	subs	r3, r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	331b      	adds	r3, #27
 8002bfe:	2200      	movs	r2, #0
 8002c00:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002c02:	78fb      	ldrb	r3, [r7, #3]
 8002c04:	015a      	lsls	r2, r3, #5
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	4413      	add	r3, r2
 8002c0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	78fa      	ldrb	r2, [r7, #3]
 8002c12:	0151      	lsls	r1, r2, #5
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	440a      	add	r2, r1
 8002c18:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c20:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002c22:	78fb      	ldrb	r3, [r7, #3]
 8002c24:	015a      	lsls	r2, r3, #5
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	4413      	add	r3, r2
 8002c2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c2e:	461a      	mov	r2, r3
 8002c30:	2301      	movs	r3, #1
 8002c32:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002c34:	78fa      	ldrb	r2, [r7, #3]
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	011b      	lsls	r3, r3, #4
 8002c3c:	1a9b      	subs	r3, r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	334d      	adds	r3, #77	@ 0x4d
 8002c44:	2201      	movs	r2, #1
 8002c46:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	78fa      	ldrb	r2, [r7, #3]
 8002c4e:	4611      	mov	r1, r2
 8002c50:	4618      	mov	r0, r3
 8002c52:	f003 f854 	bl	8005cfe <USB_HC_Halt>
 8002c56:	e34b      	b.n	80032f0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	78fa      	ldrb	r2, [r7, #3]
 8002c5e:	4611      	mov	r1, r2
 8002c60:	4618      	mov	r0, r3
 8002c62:	f002 faa9 	bl	80051b8 <USB_ReadChInterrupts>
 8002c66:	4603      	mov	r3, r0
 8002c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c6c:	2b40      	cmp	r3, #64	@ 0x40
 8002c6e:	d139      	bne.n	8002ce4 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002c70:	78fa      	ldrb	r2, [r7, #3]
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	4613      	mov	r3, r2
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	1a9b      	subs	r3, r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	334d      	adds	r3, #77	@ 0x4d
 8002c80:	2205      	movs	r2, #5
 8002c82:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002c84:	78fa      	ldrb	r2, [r7, #3]
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	011b      	lsls	r3, r3, #4
 8002c8c:	1a9b      	subs	r3, r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	440b      	add	r3, r1
 8002c92:	331a      	adds	r3, #26
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d109      	bne.n	8002cae <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002c9a:	78fa      	ldrb	r2, [r7, #3]
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	011b      	lsls	r3, r3, #4
 8002ca2:	1a9b      	subs	r3, r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	440b      	add	r3, r1
 8002ca8:	3319      	adds	r3, #25
 8002caa:	2201      	movs	r2, #1
 8002cac:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002cae:	78fa      	ldrb	r2, [r7, #3]
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	011b      	lsls	r3, r3, #4
 8002cb6:	1a9b      	subs	r3, r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	440b      	add	r3, r1
 8002cbc:	3344      	adds	r3, #68	@ 0x44
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	78fa      	ldrb	r2, [r7, #3]
 8002cc8:	4611      	mov	r1, r2
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f003 f817 	bl	8005cfe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002cd0:	78fb      	ldrb	r3, [r7, #3]
 8002cd2:	015a      	lsls	r2, r3, #5
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cdc:	461a      	mov	r2, r3
 8002cde:	2340      	movs	r3, #64	@ 0x40
 8002ce0:	6093      	str	r3, [r2, #8]
 8002ce2:	e305      	b.n	80032f0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	78fa      	ldrb	r2, [r7, #3]
 8002cea:	4611      	mov	r1, r2
 8002cec:	4618      	mov	r0, r3
 8002cee:	f002 fa63 	bl	80051b8 <USB_ReadChInterrupts>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	f003 0308 	and.w	r3, r3, #8
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	d11a      	bne.n	8002d32 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002cfc:	78fb      	ldrb	r3, [r7, #3]
 8002cfe:	015a      	lsls	r2, r3, #5
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	4413      	add	r3, r2
 8002d04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d08:	461a      	mov	r2, r3
 8002d0a:	2308      	movs	r3, #8
 8002d0c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002d0e:	78fa      	ldrb	r2, [r7, #3]
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	4613      	mov	r3, r2
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	1a9b      	subs	r3, r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	334d      	adds	r3, #77	@ 0x4d
 8002d1e:	2206      	movs	r2, #6
 8002d20:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	78fa      	ldrb	r2, [r7, #3]
 8002d28:	4611      	mov	r1, r2
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f002 ffe7 	bl	8005cfe <USB_HC_Halt>
 8002d30:	e2de      	b.n	80032f0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	78fa      	ldrb	r2, [r7, #3]
 8002d38:	4611      	mov	r1, r2
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f002 fa3c 	bl	80051b8 <USB_ReadChInterrupts>
 8002d40:	4603      	mov	r3, r0
 8002d42:	f003 0310 	and.w	r3, r3, #16
 8002d46:	2b10      	cmp	r3, #16
 8002d48:	d144      	bne.n	8002dd4 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002d4a:	78fa      	ldrb	r2, [r7, #3]
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	011b      	lsls	r3, r3, #4
 8002d52:	1a9b      	subs	r3, r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	440b      	add	r3, r1
 8002d58:	3344      	adds	r3, #68	@ 0x44
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002d5e:	78fa      	ldrb	r2, [r7, #3]
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	4613      	mov	r3, r2
 8002d64:	011b      	lsls	r3, r3, #4
 8002d66:	1a9b      	subs	r3, r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	440b      	add	r3, r1
 8002d6c:	334d      	adds	r3, #77	@ 0x4d
 8002d6e:	2204      	movs	r2, #4
 8002d70:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002d72:	78fa      	ldrb	r2, [r7, #3]
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	4613      	mov	r3, r2
 8002d78:	011b      	lsls	r3, r3, #4
 8002d7a:	1a9b      	subs	r3, r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	440b      	add	r3, r1
 8002d80:	3319      	adds	r3, #25
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d114      	bne.n	8002db2 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002d88:	78fa      	ldrb	r2, [r7, #3]
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	1a9b      	subs	r3, r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	3318      	adds	r3, #24
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d109      	bne.n	8002db2 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002d9e:	78fa      	ldrb	r2, [r7, #3]
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	4613      	mov	r3, r2
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	1a9b      	subs	r3, r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	440b      	add	r3, r1
 8002dac:	3319      	adds	r3, #25
 8002dae:	2201      	movs	r2, #1
 8002db0:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	78fa      	ldrb	r2, [r7, #3]
 8002db8:	4611      	mov	r1, r2
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f002 ff9f 	bl	8005cfe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002dc0:	78fb      	ldrb	r3, [r7, #3]
 8002dc2:	015a      	lsls	r2, r3, #5
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dcc:	461a      	mov	r2, r3
 8002dce:	2310      	movs	r3, #16
 8002dd0:	6093      	str	r3, [r2, #8]
 8002dd2:	e28d      	b.n	80032f0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	78fa      	ldrb	r2, [r7, #3]
 8002dda:	4611      	mov	r1, r2
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f002 f9eb 	bl	80051b8 <USB_ReadChInterrupts>
 8002de2:	4603      	mov	r3, r0
 8002de4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002de8:	2b80      	cmp	r3, #128	@ 0x80
 8002dea:	d169      	bne.n	8002ec0 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	799b      	ldrb	r3, [r3, #6]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d111      	bne.n	8002e18 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002df4:	78fa      	ldrb	r2, [r7, #3]
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	011b      	lsls	r3, r3, #4
 8002dfc:	1a9b      	subs	r3, r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	334d      	adds	r3, #77	@ 0x4d
 8002e04:	2207      	movs	r2, #7
 8002e06:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	78fa      	ldrb	r2, [r7, #3]
 8002e0e:	4611      	mov	r1, r2
 8002e10:	4618      	mov	r0, r3
 8002e12:	f002 ff74 	bl	8005cfe <USB_HC_Halt>
 8002e16:	e049      	b.n	8002eac <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002e18:	78fa      	ldrb	r2, [r7, #3]
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	1a9b      	subs	r3, r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	3344      	adds	r3, #68	@ 0x44
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	1c59      	adds	r1, r3, #1
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	011b      	lsls	r3, r3, #4
 8002e32:	1a9b      	subs	r3, r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4403      	add	r3, r0
 8002e38:	3344      	adds	r3, #68	@ 0x44
 8002e3a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002e3c:	78fa      	ldrb	r2, [r7, #3]
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	4613      	mov	r3, r2
 8002e42:	011b      	lsls	r3, r3, #4
 8002e44:	1a9b      	subs	r3, r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	440b      	add	r3, r1
 8002e4a:	3344      	adds	r3, #68	@ 0x44
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d922      	bls.n	8002e98 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002e52:	78fa      	ldrb	r2, [r7, #3]
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	011b      	lsls	r3, r3, #4
 8002e5a:	1a9b      	subs	r3, r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	440b      	add	r3, r1
 8002e60:	3344      	adds	r3, #68	@ 0x44
 8002e62:	2200      	movs	r2, #0
 8002e64:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002e66:	78fa      	ldrb	r2, [r7, #3]
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	1a9b      	subs	r3, r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	440b      	add	r3, r1
 8002e74:	334c      	adds	r3, #76	@ 0x4c
 8002e76:	2204      	movs	r2, #4
 8002e78:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002e7a:	78fa      	ldrb	r2, [r7, #3]
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	1a9b      	subs	r3, r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	440b      	add	r3, r1
 8002e88:	334c      	adds	r3, #76	@ 0x4c
 8002e8a:	781a      	ldrb	r2, [r3, #0]
 8002e8c:	78fb      	ldrb	r3, [r7, #3]
 8002e8e:	4619      	mov	r1, r3
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f005 fa8d 	bl	80083b0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002e96:	e009      	b.n	8002eac <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002e98:	78fa      	ldrb	r2, [r7, #3]
 8002e9a:	6879      	ldr	r1, [r7, #4]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	011b      	lsls	r3, r3, #4
 8002ea0:	1a9b      	subs	r3, r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	334c      	adds	r3, #76	@ 0x4c
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002eac:	78fb      	ldrb	r3, [r7, #3]
 8002eae:	015a      	lsls	r2, r3, #5
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eb8:	461a      	mov	r2, r3
 8002eba:	2380      	movs	r3, #128	@ 0x80
 8002ebc:	6093      	str	r3, [r2, #8]
 8002ebe:	e217      	b.n	80032f0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	78fa      	ldrb	r2, [r7, #3]
 8002ec6:	4611      	mov	r1, r2
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f002 f975 	bl	80051b8 <USB_ReadChInterrupts>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ed4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ed8:	d11b      	bne.n	8002f12 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002eda:	78fa      	ldrb	r2, [r7, #3]
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	011b      	lsls	r3, r3, #4
 8002ee2:	1a9b      	subs	r3, r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	440b      	add	r3, r1
 8002ee8:	334d      	adds	r3, #77	@ 0x4d
 8002eea:	2209      	movs	r2, #9
 8002eec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	78fa      	ldrb	r2, [r7, #3]
 8002ef4:	4611      	mov	r1, r2
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f002 ff01 	bl	8005cfe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002efc:	78fb      	ldrb	r3, [r7, #3]
 8002efe:	015a      	lsls	r2, r3, #5
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	4413      	add	r3, r2
 8002f04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f08:	461a      	mov	r2, r3
 8002f0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f0e:	6093      	str	r3, [r2, #8]
 8002f10:	e1ee      	b.n	80032f0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	78fa      	ldrb	r2, [r7, #3]
 8002f18:	4611      	mov	r1, r2
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f002 f94c 	bl	80051b8 <USB_ReadChInterrupts>
 8002f20:	4603      	mov	r3, r0
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	f040 81df 	bne.w	80032ea <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002f2c:	78fb      	ldrb	r3, [r7, #3]
 8002f2e:	015a      	lsls	r2, r3, #5
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	4413      	add	r3, r2
 8002f34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f38:	461a      	mov	r2, r3
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002f3e:	78fa      	ldrb	r2, [r7, #3]
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	4613      	mov	r3, r2
 8002f44:	011b      	lsls	r3, r3, #4
 8002f46:	1a9b      	subs	r3, r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	440b      	add	r3, r1
 8002f4c:	334d      	adds	r3, #77	@ 0x4d
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	f040 8093 	bne.w	800307c <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f56:	78fa      	ldrb	r2, [r7, #3]
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	1a9b      	subs	r3, r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	334d      	adds	r3, #77	@ 0x4d
 8002f66:	2202      	movs	r2, #2
 8002f68:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002f6a:	78fa      	ldrb	r2, [r7, #3]
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	011b      	lsls	r3, r3, #4
 8002f72:	1a9b      	subs	r3, r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	440b      	add	r3, r1
 8002f78:	334c      	adds	r3, #76	@ 0x4c
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002f7e:	78fa      	ldrb	r2, [r7, #3]
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	4613      	mov	r3, r2
 8002f84:	011b      	lsls	r3, r3, #4
 8002f86:	1a9b      	subs	r3, r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	3326      	adds	r3, #38	@ 0x26
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d00b      	beq.n	8002fac <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8002f94:	78fa      	ldrb	r2, [r7, #3]
 8002f96:	6879      	ldr	r1, [r7, #4]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	011b      	lsls	r3, r3, #4
 8002f9c:	1a9b      	subs	r3, r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	3326      	adds	r3, #38	@ 0x26
 8002fa4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002fa6:	2b03      	cmp	r3, #3
 8002fa8:	f040 8190 	bne.w	80032cc <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	799b      	ldrb	r3, [r3, #6]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d115      	bne.n	8002fe0 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8002fb4:	78fa      	ldrb	r2, [r7, #3]
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	1a9b      	subs	r3, r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	333d      	adds	r3, #61	@ 0x3d
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	78fa      	ldrb	r2, [r7, #3]
 8002fc8:	f083 0301 	eor.w	r3, r3, #1
 8002fcc:	b2d8      	uxtb	r0, r3
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	011b      	lsls	r3, r3, #4
 8002fd4:	1a9b      	subs	r3, r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	333d      	adds	r3, #61	@ 0x3d
 8002fdc:	4602      	mov	r2, r0
 8002fde:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	799b      	ldrb	r3, [r3, #6]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	f040 8171 	bne.w	80032cc <HCD_HC_OUT_IRQHandler+0x920>
 8002fea:	78fa      	ldrb	r2, [r7, #3]
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	011b      	lsls	r3, r3, #4
 8002ff2:	1a9b      	subs	r3, r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	440b      	add	r3, r1
 8002ff8:	3334      	adds	r3, #52	@ 0x34
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f000 8165 	beq.w	80032cc <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003002:	78fa      	ldrb	r2, [r7, #3]
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	4613      	mov	r3, r2
 8003008:	011b      	lsls	r3, r3, #4
 800300a:	1a9b      	subs	r3, r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	440b      	add	r3, r1
 8003010:	3334      	adds	r3, #52	@ 0x34
 8003012:	6819      	ldr	r1, [r3, #0]
 8003014:	78fa      	ldrb	r2, [r7, #3]
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	4613      	mov	r3, r2
 800301a:	011b      	lsls	r3, r3, #4
 800301c:	1a9b      	subs	r3, r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4403      	add	r3, r0
 8003022:	3328      	adds	r3, #40	@ 0x28
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	440b      	add	r3, r1
 8003028:	1e59      	subs	r1, r3, #1
 800302a:	78fa      	ldrb	r2, [r7, #3]
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	4613      	mov	r3, r2
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	1a9b      	subs	r3, r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4403      	add	r3, r0
 8003038:	3328      	adds	r3, #40	@ 0x28
 800303a:	881b      	ldrh	r3, [r3, #0]
 800303c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003040:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 813f 	beq.w	80032cc <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800304e:	78fa      	ldrb	r2, [r7, #3]
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	4613      	mov	r3, r2
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	1a9b      	subs	r3, r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	440b      	add	r3, r1
 800305c:	333d      	adds	r3, #61	@ 0x3d
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	78fa      	ldrb	r2, [r7, #3]
 8003062:	f083 0301 	eor.w	r3, r3, #1
 8003066:	b2d8      	uxtb	r0, r3
 8003068:	6879      	ldr	r1, [r7, #4]
 800306a:	4613      	mov	r3, r2
 800306c:	011b      	lsls	r3, r3, #4
 800306e:	1a9b      	subs	r3, r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	440b      	add	r3, r1
 8003074:	333d      	adds	r3, #61	@ 0x3d
 8003076:	4602      	mov	r2, r0
 8003078:	701a      	strb	r2, [r3, #0]
 800307a:	e127      	b.n	80032cc <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800307c:	78fa      	ldrb	r2, [r7, #3]
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	4613      	mov	r3, r2
 8003082:	011b      	lsls	r3, r3, #4
 8003084:	1a9b      	subs	r3, r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	334d      	adds	r3, #77	@ 0x4d
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	2b03      	cmp	r3, #3
 8003090:	d120      	bne.n	80030d4 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003092:	78fa      	ldrb	r2, [r7, #3]
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	4613      	mov	r3, r2
 8003098:	011b      	lsls	r3, r3, #4
 800309a:	1a9b      	subs	r3, r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	440b      	add	r3, r1
 80030a0:	334d      	adds	r3, #77	@ 0x4d
 80030a2:	2202      	movs	r2, #2
 80030a4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80030a6:	78fa      	ldrb	r2, [r7, #3]
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	011b      	lsls	r3, r3, #4
 80030ae:	1a9b      	subs	r3, r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	331b      	adds	r3, #27
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	f040 8107 	bne.w	80032cc <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80030be:	78fa      	ldrb	r2, [r7, #3]
 80030c0:	6879      	ldr	r1, [r7, #4]
 80030c2:	4613      	mov	r3, r2
 80030c4:	011b      	lsls	r3, r3, #4
 80030c6:	1a9b      	subs	r3, r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	440b      	add	r3, r1
 80030cc:	334c      	adds	r3, #76	@ 0x4c
 80030ce:	2202      	movs	r2, #2
 80030d0:	701a      	strb	r2, [r3, #0]
 80030d2:	e0fb      	b.n	80032cc <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80030d4:	78fa      	ldrb	r2, [r7, #3]
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	4613      	mov	r3, r2
 80030da:	011b      	lsls	r3, r3, #4
 80030dc:	1a9b      	subs	r3, r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	334d      	adds	r3, #77	@ 0x4d
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	d13a      	bne.n	8003160 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030ea:	78fa      	ldrb	r2, [r7, #3]
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	4613      	mov	r3, r2
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	1a9b      	subs	r3, r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	440b      	add	r3, r1
 80030f8:	334d      	adds	r3, #77	@ 0x4d
 80030fa:	2202      	movs	r2, #2
 80030fc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80030fe:	78fa      	ldrb	r2, [r7, #3]
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	4613      	mov	r3, r2
 8003104:	011b      	lsls	r3, r3, #4
 8003106:	1a9b      	subs	r3, r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	440b      	add	r3, r1
 800310c:	334c      	adds	r3, #76	@ 0x4c
 800310e:	2202      	movs	r2, #2
 8003110:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003112:	78fa      	ldrb	r2, [r7, #3]
 8003114:	6879      	ldr	r1, [r7, #4]
 8003116:	4613      	mov	r3, r2
 8003118:	011b      	lsls	r3, r3, #4
 800311a:	1a9b      	subs	r3, r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	440b      	add	r3, r1
 8003120:	331b      	adds	r3, #27
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b01      	cmp	r3, #1
 8003126:	f040 80d1 	bne.w	80032cc <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800312a:	78fa      	ldrb	r2, [r7, #3]
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	1a9b      	subs	r3, r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	440b      	add	r3, r1
 8003138:	331b      	adds	r3, #27
 800313a:	2200      	movs	r2, #0
 800313c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800313e:	78fb      	ldrb	r3, [r7, #3]
 8003140:	015a      	lsls	r2, r3, #5
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	4413      	add	r3, r2
 8003146:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	78fa      	ldrb	r2, [r7, #3]
 800314e:	0151      	lsls	r1, r2, #5
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	440a      	add	r2, r1
 8003154:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003158:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800315c:	6053      	str	r3, [r2, #4]
 800315e:	e0b5      	b.n	80032cc <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003160:	78fa      	ldrb	r2, [r7, #3]
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	011b      	lsls	r3, r3, #4
 8003168:	1a9b      	subs	r3, r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	440b      	add	r3, r1
 800316e:	334d      	adds	r3, #77	@ 0x4d
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b05      	cmp	r3, #5
 8003174:	d114      	bne.n	80031a0 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003176:	78fa      	ldrb	r2, [r7, #3]
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	011b      	lsls	r3, r3, #4
 800317e:	1a9b      	subs	r3, r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	334d      	adds	r3, #77	@ 0x4d
 8003186:	2202      	movs	r2, #2
 8003188:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800318a:	78fa      	ldrb	r2, [r7, #3]
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	4613      	mov	r3, r2
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	1a9b      	subs	r3, r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	440b      	add	r3, r1
 8003198:	334c      	adds	r3, #76	@ 0x4c
 800319a:	2202      	movs	r2, #2
 800319c:	701a      	strb	r2, [r3, #0]
 800319e:	e095      	b.n	80032cc <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80031a0:	78fa      	ldrb	r2, [r7, #3]
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	011b      	lsls	r3, r3, #4
 80031a8:	1a9b      	subs	r3, r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	334d      	adds	r3, #77	@ 0x4d
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2b06      	cmp	r3, #6
 80031b4:	d114      	bne.n	80031e0 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031b6:	78fa      	ldrb	r2, [r7, #3]
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	4613      	mov	r3, r2
 80031bc:	011b      	lsls	r3, r3, #4
 80031be:	1a9b      	subs	r3, r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	440b      	add	r3, r1
 80031c4:	334d      	adds	r3, #77	@ 0x4d
 80031c6:	2202      	movs	r2, #2
 80031c8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80031ca:	78fa      	ldrb	r2, [r7, #3]
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	4613      	mov	r3, r2
 80031d0:	011b      	lsls	r3, r3, #4
 80031d2:	1a9b      	subs	r3, r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	440b      	add	r3, r1
 80031d8:	334c      	adds	r3, #76	@ 0x4c
 80031da:	2205      	movs	r2, #5
 80031dc:	701a      	strb	r2, [r3, #0]
 80031de:	e075      	b.n	80032cc <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80031e0:	78fa      	ldrb	r2, [r7, #3]
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	4613      	mov	r3, r2
 80031e6:	011b      	lsls	r3, r3, #4
 80031e8:	1a9b      	subs	r3, r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	334d      	adds	r3, #77	@ 0x4d
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	2b07      	cmp	r3, #7
 80031f4:	d00a      	beq.n	800320c <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80031f6:	78fa      	ldrb	r2, [r7, #3]
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	4613      	mov	r3, r2
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	1a9b      	subs	r3, r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	440b      	add	r3, r1
 8003204:	334d      	adds	r3, #77	@ 0x4d
 8003206:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003208:	2b09      	cmp	r3, #9
 800320a:	d170      	bne.n	80032ee <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800320c:	78fa      	ldrb	r2, [r7, #3]
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	4613      	mov	r3, r2
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	1a9b      	subs	r3, r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	334d      	adds	r3, #77	@ 0x4d
 800321c:	2202      	movs	r2, #2
 800321e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003220:	78fa      	ldrb	r2, [r7, #3]
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	4613      	mov	r3, r2
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	1a9b      	subs	r3, r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	3344      	adds	r3, #68	@ 0x44
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	1c59      	adds	r1, r3, #1
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	4613      	mov	r3, r2
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	1a9b      	subs	r3, r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4403      	add	r3, r0
 8003240:	3344      	adds	r3, #68	@ 0x44
 8003242:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003244:	78fa      	ldrb	r2, [r7, #3]
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	4613      	mov	r3, r2
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	1a9b      	subs	r3, r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	3344      	adds	r3, #68	@ 0x44
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2b02      	cmp	r3, #2
 8003258:	d914      	bls.n	8003284 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800325a:	78fa      	ldrb	r2, [r7, #3]
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	4613      	mov	r3, r2
 8003260:	011b      	lsls	r3, r3, #4
 8003262:	1a9b      	subs	r3, r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	440b      	add	r3, r1
 8003268:	3344      	adds	r3, #68	@ 0x44
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800326e:	78fa      	ldrb	r2, [r7, #3]
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	4613      	mov	r3, r2
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	1a9b      	subs	r3, r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	334c      	adds	r3, #76	@ 0x4c
 800327e:	2204      	movs	r2, #4
 8003280:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003282:	e022      	b.n	80032ca <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003284:	78fa      	ldrb	r2, [r7, #3]
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	4613      	mov	r3, r2
 800328a:	011b      	lsls	r3, r3, #4
 800328c:	1a9b      	subs	r3, r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	334c      	adds	r3, #76	@ 0x4c
 8003294:	2202      	movs	r2, #2
 8003296:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003298:	78fb      	ldrb	r3, [r7, #3]
 800329a:	015a      	lsls	r2, r3, #5
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	4413      	add	r3, r2
 80032a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80032ae:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80032b6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80032b8:	78fb      	ldrb	r3, [r7, #3]
 80032ba:	015a      	lsls	r2, r3, #5
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	4413      	add	r3, r2
 80032c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032c4:	461a      	mov	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80032ca:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80032cc:	78fa      	ldrb	r2, [r7, #3]
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	4613      	mov	r3, r2
 80032d2:	011b      	lsls	r3, r3, #4
 80032d4:	1a9b      	subs	r3, r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	334c      	adds	r3, #76	@ 0x4c
 80032dc:	781a      	ldrb	r2, [r3, #0]
 80032de:	78fb      	ldrb	r3, [r7, #3]
 80032e0:	4619      	mov	r1, r3
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f005 f864 	bl	80083b0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80032e8:	e002      	b.n	80032f0 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80032ea:	bf00      	nop
 80032ec:	e000      	b.n	80032f0 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 80032ee:	bf00      	nop
  }
}
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b08a      	sub	sp, #40	@ 0x28
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003306:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	f003 030f 	and.w	r3, r3, #15
 8003316:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	0c5b      	lsrs	r3, r3, #17
 800331c:	f003 030f 	and.w	r3, r3, #15
 8003320:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	091b      	lsrs	r3, r3, #4
 8003326:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800332a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	2b02      	cmp	r3, #2
 8003330:	d004      	beq.n	800333c <HCD_RXQLVL_IRQHandler+0x46>
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	2b05      	cmp	r3, #5
 8003336:	f000 80b6 	beq.w	80034a6 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800333a:	e0b7      	b.n	80034ac <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 80b3 	beq.w	80034aa <HCD_RXQLVL_IRQHandler+0x1b4>
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	4613      	mov	r3, r2
 800334a:	011b      	lsls	r3, r3, #4
 800334c:	1a9b      	subs	r3, r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	332c      	adds	r3, #44	@ 0x2c
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	f000 80a7 	beq.w	80034aa <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	4613      	mov	r3, r2
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	1a9b      	subs	r3, r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	3338      	adds	r3, #56	@ 0x38
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	18d1      	adds	r1, r2, r3
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	4613      	mov	r3, r2
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	1a9b      	subs	r3, r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4403      	add	r3, r0
 8003380:	3334      	adds	r3, #52	@ 0x34
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4299      	cmp	r1, r3
 8003386:	f200 8083 	bhi.w	8003490 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6818      	ldr	r0, [r3, #0]
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	4613      	mov	r3, r2
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	1a9b      	subs	r3, r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	440b      	add	r3, r1
 800339c:	332c      	adds	r3, #44	@ 0x2c
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	b292      	uxth	r2, r2
 80033a4:	4619      	mov	r1, r3
 80033a6:	f001 fe9c 	bl	80050e2 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	4613      	mov	r3, r2
 80033b0:	011b      	lsls	r3, r3, #4
 80033b2:	1a9b      	subs	r3, r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	440b      	add	r3, r1
 80033b8:	332c      	adds	r3, #44	@ 0x2c
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	18d1      	adds	r1, r2, r3
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	4613      	mov	r3, r2
 80033c6:	011b      	lsls	r3, r3, #4
 80033c8:	1a9b      	subs	r3, r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4403      	add	r3, r0
 80033ce:	332c      	adds	r3, #44	@ 0x2c
 80033d0:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	4613      	mov	r3, r2
 80033d8:	011b      	lsls	r3, r3, #4
 80033da:	1a9b      	subs	r3, r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	440b      	add	r3, r1
 80033e0:	3338      	adds	r3, #56	@ 0x38
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	18d1      	adds	r1, r2, r3
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	4613      	mov	r3, r2
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	1a9b      	subs	r3, r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4403      	add	r3, r0
 80033f6:	3338      	adds	r3, #56	@ 0x38
 80033f8:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	015a      	lsls	r2, r3, #5
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	4413      	add	r3, r2
 8003402:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	0cdb      	lsrs	r3, r3, #19
 800340a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800340e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	4613      	mov	r3, r2
 8003416:	011b      	lsls	r3, r3, #4
 8003418:	1a9b      	subs	r3, r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	440b      	add	r3, r1
 800341e:	3328      	adds	r3, #40	@ 0x28
 8003420:	881b      	ldrh	r3, [r3, #0]
 8003422:	461a      	mov	r2, r3
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	4293      	cmp	r3, r2
 8003428:	d13f      	bne.n	80034aa <HCD_RXQLVL_IRQHandler+0x1b4>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d03c      	beq.n	80034aa <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	015a      	lsls	r2, r3, #5
 8003434:	6a3b      	ldr	r3, [r7, #32]
 8003436:	4413      	add	r3, r2
 8003438:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003446:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800344e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	015a      	lsls	r2, r3, #5
 8003454:	6a3b      	ldr	r3, [r7, #32]
 8003456:	4413      	add	r3, r2
 8003458:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800345c:	461a      	mov	r2, r3
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003462:	6879      	ldr	r1, [r7, #4]
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4613      	mov	r3, r2
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	1a9b      	subs	r3, r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	440b      	add	r3, r1
 8003470:	333c      	adds	r3, #60	@ 0x3c
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	f083 0301 	eor.w	r3, r3, #1
 8003478:	b2d8      	uxtb	r0, r3
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	4613      	mov	r3, r2
 8003480:	011b      	lsls	r3, r3, #4
 8003482:	1a9b      	subs	r3, r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	440b      	add	r3, r1
 8003488:	333c      	adds	r3, #60	@ 0x3c
 800348a:	4602      	mov	r2, r0
 800348c:	701a      	strb	r2, [r3, #0]
      break;
 800348e:	e00c      	b.n	80034aa <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4613      	mov	r3, r2
 8003496:	011b      	lsls	r3, r3, #4
 8003498:	1a9b      	subs	r3, r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	334c      	adds	r3, #76	@ 0x4c
 80034a0:	2204      	movs	r2, #4
 80034a2:	701a      	strb	r2, [r3, #0]
      break;
 80034a4:	e001      	b.n	80034aa <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80034a6:	bf00      	nop
 80034a8:	e000      	b.n	80034ac <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80034aa:	bf00      	nop
  }
}
 80034ac:	bf00      	nop
 80034ae:	3728      	adds	r7, #40	@ 0x28
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80034e0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d10b      	bne.n	8003504 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d102      	bne.n	80034fc <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f004 ff3e 	bl	8008378 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	f043 0302 	orr.w	r3, r3, #2
 8003502:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f003 0308 	and.w	r3, r3, #8
 800350a:	2b08      	cmp	r3, #8
 800350c:	d132      	bne.n	8003574 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	f043 0308 	orr.w	r3, r3, #8
 8003514:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b04      	cmp	r3, #4
 800351e:	d126      	bne.n	800356e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	7a5b      	ldrb	r3, [r3, #9]
 8003524:	2b02      	cmp	r3, #2
 8003526:	d113      	bne.n	8003550 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800352e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003532:	d106      	bne.n	8003542 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2102      	movs	r1, #2
 800353a:	4618      	mov	r0, r3
 800353c:	f001 ff60 	bl	8005400 <USB_InitFSLSPClkSel>
 8003540:	e011      	b.n	8003566 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2101      	movs	r1, #1
 8003548:	4618      	mov	r0, r3
 800354a:	f001 ff59 	bl	8005400 <USB_InitFSLSPClkSel>
 800354e:	e00a      	b.n	8003566 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	79db      	ldrb	r3, [r3, #7]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d106      	bne.n	8003566 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800355e:	461a      	mov	r2, r3
 8003560:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003564:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f004 ff30 	bl	80083cc <HAL_HCD_PortEnabled_Callback>
 800356c:	e002      	b.n	8003574 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f004 ff3a 	bl	80083e8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f003 0320 	and.w	r3, r3, #32
 800357a:	2b20      	cmp	r3, #32
 800357c:	d103      	bne.n	8003586 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	f043 0320 	orr.w	r3, r3, #32
 8003584:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800358c:	461a      	mov	r2, r3
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	6013      	str	r3, [r2, #0]
}
 8003592:	bf00      	nop
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
	...

0800359c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e12b      	b.n	8003806 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d106      	bne.n	80035c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7fd f9b6 	bl	8000934 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2224      	movs	r2, #36	@ 0x24
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0201 	bic.w	r2, r2, #1
 80035de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003600:	f001 fa20 	bl	8004a44 <HAL_RCC_GetPCLK1Freq>
 8003604:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	4a81      	ldr	r2, [pc, #516]	@ (8003810 <HAL_I2C_Init+0x274>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d807      	bhi.n	8003620 <HAL_I2C_Init+0x84>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	4a80      	ldr	r2, [pc, #512]	@ (8003814 <HAL_I2C_Init+0x278>)
 8003614:	4293      	cmp	r3, r2
 8003616:	bf94      	ite	ls
 8003618:	2301      	movls	r3, #1
 800361a:	2300      	movhi	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	e006      	b.n	800362e <HAL_I2C_Init+0x92>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4a7d      	ldr	r2, [pc, #500]	@ (8003818 <HAL_I2C_Init+0x27c>)
 8003624:	4293      	cmp	r3, r2
 8003626:	bf94      	ite	ls
 8003628:	2301      	movls	r3, #1
 800362a:	2300      	movhi	r3, #0
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e0e7      	b.n	8003806 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4a78      	ldr	r2, [pc, #480]	@ (800381c <HAL_I2C_Init+0x280>)
 800363a:	fba2 2303 	umull	r2, r3, r2, r3
 800363e:	0c9b      	lsrs	r3, r3, #18
 8003640:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	430a      	orrs	r2, r1
 8003654:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	4a6a      	ldr	r2, [pc, #424]	@ (8003810 <HAL_I2C_Init+0x274>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d802      	bhi.n	8003670 <HAL_I2C_Init+0xd4>
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	3301      	adds	r3, #1
 800366e:	e009      	b.n	8003684 <HAL_I2C_Init+0xe8>
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003676:	fb02 f303 	mul.w	r3, r2, r3
 800367a:	4a69      	ldr	r2, [pc, #420]	@ (8003820 <HAL_I2C_Init+0x284>)
 800367c:	fba2 2303 	umull	r2, r3, r2, r3
 8003680:	099b      	lsrs	r3, r3, #6
 8003682:	3301      	adds	r3, #1
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6812      	ldr	r2, [r2, #0]
 8003688:	430b      	orrs	r3, r1
 800368a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003696:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	495c      	ldr	r1, [pc, #368]	@ (8003810 <HAL_I2C_Init+0x274>)
 80036a0:	428b      	cmp	r3, r1
 80036a2:	d819      	bhi.n	80036d8 <HAL_I2C_Init+0x13c>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	1e59      	subs	r1, r3, #1
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80036b2:	1c59      	adds	r1, r3, #1
 80036b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80036b8:	400b      	ands	r3, r1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00a      	beq.n	80036d4 <HAL_I2C_Init+0x138>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	1e59      	subs	r1, r3, #1
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80036cc:	3301      	adds	r3, #1
 80036ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036d2:	e051      	b.n	8003778 <HAL_I2C_Init+0x1dc>
 80036d4:	2304      	movs	r3, #4
 80036d6:	e04f      	b.n	8003778 <HAL_I2C_Init+0x1dc>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d111      	bne.n	8003704 <HAL_I2C_Init+0x168>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	1e58      	subs	r0, r3, #1
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6859      	ldr	r1, [r3, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	440b      	add	r3, r1
 80036ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80036f2:	3301      	adds	r3, #1
 80036f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	bf0c      	ite	eq
 80036fc:	2301      	moveq	r3, #1
 80036fe:	2300      	movne	r3, #0
 8003700:	b2db      	uxtb	r3, r3
 8003702:	e012      	b.n	800372a <HAL_I2C_Init+0x18e>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	1e58      	subs	r0, r3, #1
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6859      	ldr	r1, [r3, #4]
 800370c:	460b      	mov	r3, r1
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	440b      	add	r3, r1
 8003712:	0099      	lsls	r1, r3, #2
 8003714:	440b      	add	r3, r1
 8003716:	fbb0 f3f3 	udiv	r3, r0, r3
 800371a:	3301      	adds	r3, #1
 800371c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003720:	2b00      	cmp	r3, #0
 8003722:	bf0c      	ite	eq
 8003724:	2301      	moveq	r3, #1
 8003726:	2300      	movne	r3, #0
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <HAL_I2C_Init+0x196>
 800372e:	2301      	movs	r3, #1
 8003730:	e022      	b.n	8003778 <HAL_I2C_Init+0x1dc>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10e      	bne.n	8003758 <HAL_I2C_Init+0x1bc>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	1e58      	subs	r0, r3, #1
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6859      	ldr	r1, [r3, #4]
 8003742:	460b      	mov	r3, r1
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	440b      	add	r3, r1
 8003748:	fbb0 f3f3 	udiv	r3, r0, r3
 800374c:	3301      	adds	r3, #1
 800374e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003752:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003756:	e00f      	b.n	8003778 <HAL_I2C_Init+0x1dc>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	1e58      	subs	r0, r3, #1
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6859      	ldr	r1, [r3, #4]
 8003760:	460b      	mov	r3, r1
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	440b      	add	r3, r1
 8003766:	0099      	lsls	r1, r3, #2
 8003768:	440b      	add	r3, r1
 800376a:	fbb0 f3f3 	udiv	r3, r0, r3
 800376e:	3301      	adds	r3, #1
 8003770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003774:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003778:	6879      	ldr	r1, [r7, #4]
 800377a:	6809      	ldr	r1, [r1, #0]
 800377c:	4313      	orrs	r3, r2
 800377e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69da      	ldr	r2, [r3, #28]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80037a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	6911      	ldr	r1, [r2, #16]
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	68d2      	ldr	r2, [r2, #12]
 80037b2:	4311      	orrs	r1, r2
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6812      	ldr	r2, [r2, #0]
 80037b8:	430b      	orrs	r3, r1
 80037ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	695a      	ldr	r2, [r3, #20]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	431a      	orrs	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f042 0201 	orr.w	r2, r2, #1
 80037e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2220      	movs	r2, #32
 80037f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	000186a0 	.word	0x000186a0
 8003814:	001e847f 	.word	0x001e847f
 8003818:	003d08ff 	.word	0x003d08ff
 800381c:	431bde83 	.word	0x431bde83
 8003820:	10624dd3 	.word	0x10624dd3

08003824 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b088      	sub	sp, #32
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e128      	b.n	8003a88 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d109      	bne.n	8003856 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a90      	ldr	r2, [pc, #576]	@ (8003a90 <HAL_I2S_Init+0x26c>)
 800384e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f7fd f8b7 	bl	80009c4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2202      	movs	r2, #2
 800385a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	69db      	ldr	r3, [r3, #28]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6812      	ldr	r2, [r2, #0]
 8003868:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800386c:	f023 030f 	bic.w	r3, r3, #15
 8003870:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2202      	movs	r2, #2
 8003878:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	2b02      	cmp	r3, #2
 8003880:	d060      	beq.n	8003944 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d102      	bne.n	8003890 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800388a:	2310      	movs	r3, #16
 800388c:	617b      	str	r3, [r7, #20]
 800388e:	e001      	b.n	8003894 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003890:	2320      	movs	r3, #32
 8003892:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	2b20      	cmp	r3, #32
 800389a:	d802      	bhi.n	80038a2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80038a2:	2001      	movs	r0, #1
 80038a4:	f001 f9c4 	bl	8004c30 <HAL_RCCEx_GetPeriphCLKFreq>
 80038a8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038b2:	d125      	bne.n	8003900 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d010      	beq.n	80038de <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80038c6:	4613      	mov	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4413      	add	r3, r2
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	461a      	mov	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d8:	3305      	adds	r3, #5
 80038da:	613b      	str	r3, [r7, #16]
 80038dc:	e01f      	b.n	800391e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80038e8:	4613      	mov	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4413      	add	r3, r2
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	461a      	mov	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038fa:	3305      	adds	r3, #5
 80038fc:	613b      	str	r3, [r7, #16]
 80038fe:	e00e      	b.n	800391e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	fbb2 f2f3 	udiv	r2, r2, r3
 8003908:	4613      	mov	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4413      	add	r3, r2
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	461a      	mov	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	fbb2 f3f3 	udiv	r3, r2, r3
 800391a:	3305      	adds	r3, #5
 800391c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	4a5c      	ldr	r2, [pc, #368]	@ (8003a94 <HAL_I2S_Init+0x270>)
 8003922:	fba2 2303 	umull	r2, r3, r2, r3
 8003926:	08db      	lsrs	r3, r3, #3
 8003928:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	085b      	lsrs	r3, r3, #1
 800393a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	021b      	lsls	r3, r3, #8
 8003940:	61bb      	str	r3, [r7, #24]
 8003942:	e003      	b.n	800394c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003944:	2302      	movs	r3, #2
 8003946:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003948:	2300      	movs	r3, #0
 800394a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d902      	bls.n	8003958 <HAL_I2S_Init+0x134>
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	2bff      	cmp	r3, #255	@ 0xff
 8003956:	d907      	bls.n	8003968 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800395c:	f043 0210 	orr.w	r2, r3, #16
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e08f      	b.n	8003a88 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	691a      	ldr	r2, [r3, #16]
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	ea42 0103 	orr.w	r1, r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	69fa      	ldr	r2, [r7, #28]
 8003978:	430a      	orrs	r2, r1
 800397a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003986:	f023 030f 	bic.w	r3, r3, #15
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6851      	ldr	r1, [r2, #4]
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	6892      	ldr	r2, [r2, #8]
 8003992:	4311      	orrs	r1, r2
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	68d2      	ldr	r2, [r2, #12]
 8003998:	4311      	orrs	r1, r2
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6992      	ldr	r2, [r2, #24]
 800399e:	430a      	orrs	r2, r1
 80039a0:	431a      	orrs	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039aa:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d161      	bne.n	8003a78 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a38      	ldr	r2, [pc, #224]	@ (8003a98 <HAL_I2S_Init+0x274>)
 80039b8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a37      	ldr	r2, [pc, #220]	@ (8003a9c <HAL_I2S_Init+0x278>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d101      	bne.n	80039c8 <HAL_I2S_Init+0x1a4>
 80039c4:	4b36      	ldr	r3, [pc, #216]	@ (8003aa0 <HAL_I2S_Init+0x27c>)
 80039c6:	e001      	b.n	80039cc <HAL_I2S_Init+0x1a8>
 80039c8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039cc:	69db      	ldr	r3, [r3, #28]
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6812      	ldr	r2, [r2, #0]
 80039d2:	4932      	ldr	r1, [pc, #200]	@ (8003a9c <HAL_I2S_Init+0x278>)
 80039d4:	428a      	cmp	r2, r1
 80039d6:	d101      	bne.n	80039dc <HAL_I2S_Init+0x1b8>
 80039d8:	4a31      	ldr	r2, [pc, #196]	@ (8003aa0 <HAL_I2S_Init+0x27c>)
 80039da:	e001      	b.n	80039e0 <HAL_I2S_Init+0x1bc>
 80039dc:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80039e0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80039e4:	f023 030f 	bic.w	r3, r3, #15
 80039e8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a2b      	ldr	r2, [pc, #172]	@ (8003a9c <HAL_I2S_Init+0x278>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d101      	bne.n	80039f8 <HAL_I2S_Init+0x1d4>
 80039f4:	4b2a      	ldr	r3, [pc, #168]	@ (8003aa0 <HAL_I2S_Init+0x27c>)
 80039f6:	e001      	b.n	80039fc <HAL_I2S_Init+0x1d8>
 80039f8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039fc:	2202      	movs	r2, #2
 80039fe:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a25      	ldr	r2, [pc, #148]	@ (8003a9c <HAL_I2S_Init+0x278>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d101      	bne.n	8003a0e <HAL_I2S_Init+0x1ea>
 8003a0a:	4b25      	ldr	r3, [pc, #148]	@ (8003aa0 <HAL_I2S_Init+0x27c>)
 8003a0c:	e001      	b.n	8003a12 <HAL_I2S_Init+0x1ee>
 8003a0e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a1e:	d003      	beq.n	8003a28 <HAL_I2S_Init+0x204>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d103      	bne.n	8003a30 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003a28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a2c:	613b      	str	r3, [r7, #16]
 8003a2e:	e001      	b.n	8003a34 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003a30:	2300      	movs	r3, #0
 8003a32:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003a52:	4313      	orrs	r3, r2
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	897b      	ldrh	r3, [r7, #10]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003a60:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a0d      	ldr	r2, [pc, #52]	@ (8003a9c <HAL_I2S_Init+0x278>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d101      	bne.n	8003a70 <HAL_I2S_Init+0x24c>
 8003a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8003aa0 <HAL_I2S_Init+0x27c>)
 8003a6e:	e001      	b.n	8003a74 <HAL_I2S_Init+0x250>
 8003a70:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a74:	897a      	ldrh	r2, [r7, #10]
 8003a76:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3720      	adds	r7, #32
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	08003b9b 	.word	0x08003b9b
 8003a94:	cccccccd 	.word	0xcccccccd
 8003a98:	08003cb1 	.word	0x08003cb1
 8003a9c:	40003800 	.word	0x40003800
 8003aa0:	40003400 	.word	0x40003400

08003aa4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aec:	881a      	ldrh	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af8:	1c9a      	adds	r2, r3, #2
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10e      	bne.n	8003b34 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	685a      	ldr	r2, [r3, #4]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003b24:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7ff ffb8 	bl	8003aa4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003b34:	bf00      	nop
 8003b36:	3708      	adds	r7, #8
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68da      	ldr	r2, [r3, #12]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b4e:	b292      	uxth	r2, r2
 8003b50:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b56:	1c9a      	adds	r2, r3, #2
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	3b01      	subs	r3, #1
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10e      	bne.n	8003b92 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685a      	ldr	r2, [r3, #4]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003b82:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7ff ff93 	bl	8003ab8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003b92:	bf00      	nop
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b086      	sub	sp, #24
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d13a      	bne.n	8003c2c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d109      	bne.n	8003bd4 <I2S_IRQHandler+0x3a>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bca:	2b40      	cmp	r3, #64	@ 0x40
 8003bcc:	d102      	bne.n	8003bd4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f7ff ffb4 	bl	8003b3c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bda:	2b40      	cmp	r3, #64	@ 0x40
 8003bdc:	d126      	bne.n	8003c2c <I2S_IRQHandler+0x92>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f003 0320 	and.w	r3, r3, #32
 8003be8:	2b20      	cmp	r3, #32
 8003bea:	d11f      	bne.n	8003c2c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003bfa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	613b      	str	r3, [r7, #16]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	613b      	str	r3, [r7, #16]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	613b      	str	r3, [r7, #16]
 8003c10:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c1e:	f043 0202 	orr.w	r2, r3, #2
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7ff ff50 	bl	8003acc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b03      	cmp	r3, #3
 8003c36:	d136      	bne.n	8003ca6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d109      	bne.n	8003c56 <I2S_IRQHandler+0xbc>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c4c:	2b80      	cmp	r3, #128	@ 0x80
 8003c4e:	d102      	bne.n	8003c56 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f7ff ff45 	bl	8003ae0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	f003 0308 	and.w	r3, r3, #8
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d122      	bne.n	8003ca6 <I2S_IRQHandler+0x10c>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f003 0320 	and.w	r3, r3, #32
 8003c6a:	2b20      	cmp	r3, #32
 8003c6c:	d11b      	bne.n	8003ca6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003c7c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003c7e:	2300      	movs	r3, #0
 8003c80:	60fb      	str	r3, [r7, #12]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	60fb      	str	r3, [r7, #12]
 8003c8a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c98:	f043 0204 	orr.w	r2, r3, #4
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f7ff ff13 	bl	8003acc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ca6:	bf00      	nop
 8003ca8:	3718      	adds	r7, #24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
	...

08003cb0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b088      	sub	sp, #32
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a92      	ldr	r2, [pc, #584]	@ (8003f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d101      	bne.n	8003cce <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003cca:	4b92      	ldr	r3, [pc, #584]	@ (8003f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ccc:	e001      	b.n	8003cd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003cce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a8b      	ldr	r2, [pc, #556]	@ (8003f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d101      	bne.n	8003cec <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003ce8:	4b8a      	ldr	r3, [pc, #552]	@ (8003f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003cea:	e001      	b.n	8003cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003cec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cfc:	d004      	beq.n	8003d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f040 8099 	bne.w	8003e3a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d107      	bne.n	8003d22 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 f925 	bl	8003f6c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d107      	bne.n	8003d3c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d002      	beq.n	8003d3c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f9c8 	bl	80040cc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d42:	2b40      	cmp	r3, #64	@ 0x40
 8003d44:	d13a      	bne.n	8003dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	f003 0320 	and.w	r3, r3, #32
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d035      	beq.n	8003dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a6e      	ldr	r2, [pc, #440]	@ (8003f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d101      	bne.n	8003d5e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003d5a:	4b6e      	ldr	r3, [pc, #440]	@ (8003f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d5c:	e001      	b.n	8003d62 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003d5e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4969      	ldr	r1, [pc, #420]	@ (8003f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d6a:	428b      	cmp	r3, r1
 8003d6c:	d101      	bne.n	8003d72 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003d6e:	4b69      	ldr	r3, [pc, #420]	@ (8003f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d70:	e001      	b.n	8003d76 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003d72:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d76:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d7a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003d8a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dae:	f043 0202 	orr.w	r2, r3, #2
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7ff fe88 	bl	8003acc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	f003 0308 	and.w	r3, r3, #8
 8003dc2:	2b08      	cmp	r3, #8
 8003dc4:	f040 80c3 	bne.w	8003f4e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	f003 0320 	and.w	r3, r3, #32
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f000 80bd 	beq.w	8003f4e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003de2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a49      	ldr	r2, [pc, #292]	@ (8003f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d101      	bne.n	8003df2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003dee:	4b49      	ldr	r3, [pc, #292]	@ (8003f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003df0:	e001      	b.n	8003df6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003df2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4944      	ldr	r1, [pc, #272]	@ (8003f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dfe:	428b      	cmp	r3, r1
 8003e00:	d101      	bne.n	8003e06 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003e02:	4b44      	ldr	r3, [pc, #272]	@ (8003f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e04:	e001      	b.n	8003e0a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003e06:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e0a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e0e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e10:	2300      	movs	r3, #0
 8003e12:	60bb      	str	r3, [r7, #8]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	60bb      	str	r3, [r7, #8]
 8003e1c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e2a:	f043 0204 	orr.w	r2, r3, #4
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7ff fe4a 	bl	8003acc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e38:	e089      	b.n	8003f4e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d107      	bne.n	8003e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d002      	beq.n	8003e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 f8be 	bl	8003fd0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d107      	bne.n	8003e6e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d002      	beq.n	8003e6e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 f8fd 	bl	8004068 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e74:	2b40      	cmp	r3, #64	@ 0x40
 8003e76:	d12f      	bne.n	8003ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	f003 0320 	and.w	r3, r3, #32
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d02a      	beq.n	8003ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e90:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a1e      	ldr	r2, [pc, #120]	@ (8003f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d101      	bne.n	8003ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003e9c:	4b1d      	ldr	r3, [pc, #116]	@ (8003f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e9e:	e001      	b.n	8003ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003ea0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4919      	ldr	r1, [pc, #100]	@ (8003f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003eac:	428b      	cmp	r3, r1
 8003eae:	d101      	bne.n	8003eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003eb0:	4b18      	ldr	r3, [pc, #96]	@ (8003f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003eb2:	e001      	b.n	8003eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003eb4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003eb8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003ebc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eca:	f043 0202 	orr.w	r2, r3, #2
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7ff fdfa 	bl	8003acc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	f003 0308 	and.w	r3, r3, #8
 8003ede:	2b08      	cmp	r3, #8
 8003ee0:	d136      	bne.n	8003f50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	f003 0320 	and.w	r3, r3, #32
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d031      	beq.n	8003f50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a07      	ldr	r2, [pc, #28]	@ (8003f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d101      	bne.n	8003efa <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003ef6:	4b07      	ldr	r3, [pc, #28]	@ (8003f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ef8:	e001      	b.n	8003efe <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003efa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4902      	ldr	r1, [pc, #8]	@ (8003f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f06:	428b      	cmp	r3, r1
 8003f08:	d106      	bne.n	8003f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003f0a:	4b02      	ldr	r3, [pc, #8]	@ (8003f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f0c:	e006      	b.n	8003f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003f0e:	bf00      	nop
 8003f10:	40003800 	.word	0x40003800
 8003f14:	40003400 	.word	0x40003400
 8003f18:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f1c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f20:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f30:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f3e:	f043 0204 	orr.w	r2, r3, #4
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7ff fdc0 	bl	8003acc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f4c:	e000      	b.n	8003f50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f4e:	bf00      	nop
}
 8003f50:	bf00      	nop
 8003f52:	3720      	adds	r7, #32
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f78:	1c99      	adds	r1, r3, #2
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	6251      	str	r1, [r2, #36]	@ 0x24
 8003f7e:	881a      	ldrh	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d113      	bne.n	8003fc6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003fac:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d106      	bne.n	8003fc6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f7ff ffc9 	bl	8003f58 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fc6:	bf00      	nop
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
	...

08003fd0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fdc:	1c99      	adds	r1, r3, #2
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	6251      	str	r1, [r2, #36]	@ 0x24
 8003fe2:	8819      	ldrh	r1, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a1d      	ldr	r2, [pc, #116]	@ (8004060 <I2SEx_TxISR_I2SExt+0x90>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d101      	bne.n	8003ff2 <I2SEx_TxISR_I2SExt+0x22>
 8003fee:	4b1d      	ldr	r3, [pc, #116]	@ (8004064 <I2SEx_TxISR_I2SExt+0x94>)
 8003ff0:	e001      	b.n	8003ff6 <I2SEx_TxISR_I2SExt+0x26>
 8003ff2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ff6:	460a      	mov	r2, r1
 8003ff8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	3b01      	subs	r3, #1
 8004002:	b29a      	uxth	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800400c:	b29b      	uxth	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d121      	bne.n	8004056 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a12      	ldr	r2, [pc, #72]	@ (8004060 <I2SEx_TxISR_I2SExt+0x90>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d101      	bne.n	8004020 <I2SEx_TxISR_I2SExt+0x50>
 800401c:	4b11      	ldr	r3, [pc, #68]	@ (8004064 <I2SEx_TxISR_I2SExt+0x94>)
 800401e:	e001      	b.n	8004024 <I2SEx_TxISR_I2SExt+0x54>
 8004020:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	490d      	ldr	r1, [pc, #52]	@ (8004060 <I2SEx_TxISR_I2SExt+0x90>)
 800402c:	428b      	cmp	r3, r1
 800402e:	d101      	bne.n	8004034 <I2SEx_TxISR_I2SExt+0x64>
 8004030:	4b0c      	ldr	r3, [pc, #48]	@ (8004064 <I2SEx_TxISR_I2SExt+0x94>)
 8004032:	e001      	b.n	8004038 <I2SEx_TxISR_I2SExt+0x68>
 8004034:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004038:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800403c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004042:	b29b      	uxth	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	d106      	bne.n	8004056 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f7ff ff81 	bl	8003f58 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004056:	bf00      	nop
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	40003800 	.word	0x40003800
 8004064:	40003400 	.word	0x40003400

08004068 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68d8      	ldr	r0, [r3, #12]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800407a:	1c99      	adds	r1, r3, #2
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004080:	b282      	uxth	r2, r0
 8004082:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004088:	b29b      	uxth	r3, r3
 800408a:	3b01      	subs	r3, #1
 800408c:	b29a      	uxth	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004096:	b29b      	uxth	r3, r3
 8004098:	2b00      	cmp	r3, #0
 800409a:	d113      	bne.n	80040c4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80040aa:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d106      	bne.n	80040c4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7ff ff4a 	bl	8003f58 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040c4:	bf00      	nop
 80040c6:	3708      	adds	r7, #8
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a20      	ldr	r2, [pc, #128]	@ (800415c <I2SEx_RxISR_I2SExt+0x90>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d101      	bne.n	80040e2 <I2SEx_RxISR_I2SExt+0x16>
 80040de:	4b20      	ldr	r3, [pc, #128]	@ (8004160 <I2SEx_RxISR_I2SExt+0x94>)
 80040e0:	e001      	b.n	80040e6 <I2SEx_RxISR_I2SExt+0x1a>
 80040e2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040e6:	68d8      	ldr	r0, [r3, #12]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ec:	1c99      	adds	r1, r3, #2
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80040f2:	b282      	uxth	r2, r0
 80040f4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	3b01      	subs	r3, #1
 80040fe:	b29a      	uxth	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004108:	b29b      	uxth	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d121      	bne.n	8004152 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a12      	ldr	r2, [pc, #72]	@ (800415c <I2SEx_RxISR_I2SExt+0x90>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d101      	bne.n	800411c <I2SEx_RxISR_I2SExt+0x50>
 8004118:	4b11      	ldr	r3, [pc, #68]	@ (8004160 <I2SEx_RxISR_I2SExt+0x94>)
 800411a:	e001      	b.n	8004120 <I2SEx_RxISR_I2SExt+0x54>
 800411c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	490d      	ldr	r1, [pc, #52]	@ (800415c <I2SEx_RxISR_I2SExt+0x90>)
 8004128:	428b      	cmp	r3, r1
 800412a:	d101      	bne.n	8004130 <I2SEx_RxISR_I2SExt+0x64>
 800412c:	4b0c      	ldr	r3, [pc, #48]	@ (8004160 <I2SEx_RxISR_I2SExt+0x94>)
 800412e:	e001      	b.n	8004134 <I2SEx_RxISR_I2SExt+0x68>
 8004130:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004134:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004138:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800413e:	b29b      	uxth	r3, r3
 8004140:	2b00      	cmp	r3, #0
 8004142:	d106      	bne.n	8004152 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f7ff ff03 	bl	8003f58 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004152:	bf00      	nop
 8004154:	3708      	adds	r7, #8
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	40003800 	.word	0x40003800
 8004160:	40003400 	.word	0x40003400

08004164 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e267      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b00      	cmp	r3, #0
 8004180:	d075      	beq.n	800426e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004182:	4b88      	ldr	r3, [pc, #544]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 030c 	and.w	r3, r3, #12
 800418a:	2b04      	cmp	r3, #4
 800418c:	d00c      	beq.n	80041a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800418e:	4b85      	ldr	r3, [pc, #532]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004196:	2b08      	cmp	r3, #8
 8004198:	d112      	bne.n	80041c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800419a:	4b82      	ldr	r3, [pc, #520]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041a6:	d10b      	bne.n	80041c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a8:	4b7e      	ldr	r3, [pc, #504]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d05b      	beq.n	800426c <HAL_RCC_OscConfig+0x108>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d157      	bne.n	800426c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e242      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041c8:	d106      	bne.n	80041d8 <HAL_RCC_OscConfig+0x74>
 80041ca:	4b76      	ldr	r3, [pc, #472]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a75      	ldr	r2, [pc, #468]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 80041d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041d4:	6013      	str	r3, [r2, #0]
 80041d6:	e01d      	b.n	8004214 <HAL_RCC_OscConfig+0xb0>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041e0:	d10c      	bne.n	80041fc <HAL_RCC_OscConfig+0x98>
 80041e2:	4b70      	ldr	r3, [pc, #448]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a6f      	ldr	r2, [pc, #444]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 80041e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041ec:	6013      	str	r3, [r2, #0]
 80041ee:	4b6d      	ldr	r3, [pc, #436]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a6c      	ldr	r2, [pc, #432]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 80041f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	e00b      	b.n	8004214 <HAL_RCC_OscConfig+0xb0>
 80041fc:	4b69      	ldr	r3, [pc, #420]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a68      	ldr	r2, [pc, #416]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 8004202:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004206:	6013      	str	r3, [r2, #0]
 8004208:	4b66      	ldr	r3, [pc, #408]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a65      	ldr	r2, [pc, #404]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 800420e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004212:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d013      	beq.n	8004244 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800421c:	f7fc fdac 	bl	8000d78 <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004222:	e008      	b.n	8004236 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004224:	f7fc fda8 	bl	8000d78 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b64      	cmp	r3, #100	@ 0x64
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e207      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004236:	4b5b      	ldr	r3, [pc, #364]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d0f0      	beq.n	8004224 <HAL_RCC_OscConfig+0xc0>
 8004242:	e014      	b.n	800426e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004244:	f7fc fd98 	bl	8000d78 <HAL_GetTick>
 8004248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800424c:	f7fc fd94 	bl	8000d78 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b64      	cmp	r3, #100	@ 0x64
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e1f3      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800425e:	4b51      	ldr	r3, [pc, #324]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1f0      	bne.n	800424c <HAL_RCC_OscConfig+0xe8>
 800426a:	e000      	b.n	800426e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800426c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d063      	beq.n	8004342 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800427a:	4b4a      	ldr	r3, [pc, #296]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 030c 	and.w	r3, r3, #12
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00b      	beq.n	800429e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004286:	4b47      	ldr	r3, [pc, #284]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800428e:	2b08      	cmp	r3, #8
 8004290:	d11c      	bne.n	80042cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004292:	4b44      	ldr	r3, [pc, #272]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d116      	bne.n	80042cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800429e:	4b41      	ldr	r3, [pc, #260]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d005      	beq.n	80042b6 <HAL_RCC_OscConfig+0x152>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d001      	beq.n	80042b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e1c7      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042b6:	4b3b      	ldr	r3, [pc, #236]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	4937      	ldr	r1, [pc, #220]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ca:	e03a      	b.n	8004342 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d020      	beq.n	8004316 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042d4:	4b34      	ldr	r3, [pc, #208]	@ (80043a8 <HAL_RCC_OscConfig+0x244>)
 80042d6:	2201      	movs	r2, #1
 80042d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042da:	f7fc fd4d 	bl	8000d78 <HAL_GetTick>
 80042de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e0:	e008      	b.n	80042f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042e2:	f7fc fd49 	bl	8000d78 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e1a8      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042f4:	4b2b      	ldr	r3, [pc, #172]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0f0      	beq.n	80042e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004300:	4b28      	ldr	r3, [pc, #160]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	4925      	ldr	r1, [pc, #148]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 8004310:	4313      	orrs	r3, r2
 8004312:	600b      	str	r3, [r1, #0]
 8004314:	e015      	b.n	8004342 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004316:	4b24      	ldr	r3, [pc, #144]	@ (80043a8 <HAL_RCC_OscConfig+0x244>)
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800431c:	f7fc fd2c 	bl	8000d78 <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004324:	f7fc fd28 	bl	8000d78 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e187      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004336:	4b1b      	ldr	r3, [pc, #108]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1f0      	bne.n	8004324 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0308 	and.w	r3, r3, #8
 800434a:	2b00      	cmp	r3, #0
 800434c:	d036      	beq.n	80043bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d016      	beq.n	8004384 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004356:	4b15      	ldr	r3, [pc, #84]	@ (80043ac <HAL_RCC_OscConfig+0x248>)
 8004358:	2201      	movs	r2, #1
 800435a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800435c:	f7fc fd0c 	bl	8000d78 <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004362:	e008      	b.n	8004376 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004364:	f7fc fd08 	bl	8000d78 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b02      	cmp	r3, #2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e167      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004376:	4b0b      	ldr	r3, [pc, #44]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 8004378:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d0f0      	beq.n	8004364 <HAL_RCC_OscConfig+0x200>
 8004382:	e01b      	b.n	80043bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004384:	4b09      	ldr	r3, [pc, #36]	@ (80043ac <HAL_RCC_OscConfig+0x248>)
 8004386:	2200      	movs	r2, #0
 8004388:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800438a:	f7fc fcf5 	bl	8000d78 <HAL_GetTick>
 800438e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004390:	e00e      	b.n	80043b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004392:	f7fc fcf1 	bl	8000d78 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	2b02      	cmp	r3, #2
 800439e:	d907      	bls.n	80043b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e150      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
 80043a4:	40023800 	.word	0x40023800
 80043a8:	42470000 	.word	0x42470000
 80043ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043b0:	4b88      	ldr	r3, [pc, #544]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 80043b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1ea      	bne.n	8004392 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 8097 	beq.w	80044f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043ca:	2300      	movs	r3, #0
 80043cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043ce:	4b81      	ldr	r3, [pc, #516]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 80043d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10f      	bne.n	80043fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043da:	2300      	movs	r3, #0
 80043dc:	60bb      	str	r3, [r7, #8]
 80043de:	4b7d      	ldr	r3, [pc, #500]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 80043e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e2:	4a7c      	ldr	r2, [pc, #496]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 80043e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80043ea:	4b7a      	ldr	r3, [pc, #488]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 80043ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043f2:	60bb      	str	r3, [r7, #8]
 80043f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043f6:	2301      	movs	r3, #1
 80043f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043fa:	4b77      	ldr	r3, [pc, #476]	@ (80045d8 <HAL_RCC_OscConfig+0x474>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004402:	2b00      	cmp	r3, #0
 8004404:	d118      	bne.n	8004438 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004406:	4b74      	ldr	r3, [pc, #464]	@ (80045d8 <HAL_RCC_OscConfig+0x474>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a73      	ldr	r2, [pc, #460]	@ (80045d8 <HAL_RCC_OscConfig+0x474>)
 800440c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004410:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004412:	f7fc fcb1 	bl	8000d78 <HAL_GetTick>
 8004416:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004418:	e008      	b.n	800442c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800441a:	f7fc fcad 	bl	8000d78 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	2b02      	cmp	r3, #2
 8004426:	d901      	bls.n	800442c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e10c      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800442c:	4b6a      	ldr	r3, [pc, #424]	@ (80045d8 <HAL_RCC_OscConfig+0x474>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004434:	2b00      	cmp	r3, #0
 8004436:	d0f0      	beq.n	800441a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d106      	bne.n	800444e <HAL_RCC_OscConfig+0x2ea>
 8004440:	4b64      	ldr	r3, [pc, #400]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 8004442:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004444:	4a63      	ldr	r2, [pc, #396]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 8004446:	f043 0301 	orr.w	r3, r3, #1
 800444a:	6713      	str	r3, [r2, #112]	@ 0x70
 800444c:	e01c      	b.n	8004488 <HAL_RCC_OscConfig+0x324>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	2b05      	cmp	r3, #5
 8004454:	d10c      	bne.n	8004470 <HAL_RCC_OscConfig+0x30c>
 8004456:	4b5f      	ldr	r3, [pc, #380]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 8004458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800445a:	4a5e      	ldr	r2, [pc, #376]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 800445c:	f043 0304 	orr.w	r3, r3, #4
 8004460:	6713      	str	r3, [r2, #112]	@ 0x70
 8004462:	4b5c      	ldr	r3, [pc, #368]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 8004464:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004466:	4a5b      	ldr	r2, [pc, #364]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 8004468:	f043 0301 	orr.w	r3, r3, #1
 800446c:	6713      	str	r3, [r2, #112]	@ 0x70
 800446e:	e00b      	b.n	8004488 <HAL_RCC_OscConfig+0x324>
 8004470:	4b58      	ldr	r3, [pc, #352]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 8004472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004474:	4a57      	ldr	r2, [pc, #348]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 8004476:	f023 0301 	bic.w	r3, r3, #1
 800447a:	6713      	str	r3, [r2, #112]	@ 0x70
 800447c:	4b55      	ldr	r3, [pc, #340]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 800447e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004480:	4a54      	ldr	r2, [pc, #336]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 8004482:	f023 0304 	bic.w	r3, r3, #4
 8004486:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d015      	beq.n	80044bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004490:	f7fc fc72 	bl	8000d78 <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004496:	e00a      	b.n	80044ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004498:	f7fc fc6e 	bl	8000d78 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e0cb      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ae:	4b49      	ldr	r3, [pc, #292]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 80044b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d0ee      	beq.n	8004498 <HAL_RCC_OscConfig+0x334>
 80044ba:	e014      	b.n	80044e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044bc:	f7fc fc5c 	bl	8000d78 <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044c2:	e00a      	b.n	80044da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044c4:	f7fc fc58 	bl	8000d78 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e0b5      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044da:	4b3e      	ldr	r3, [pc, #248]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 80044dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1ee      	bne.n	80044c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044e6:	7dfb      	ldrb	r3, [r7, #23]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d105      	bne.n	80044f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044ec:	4b39      	ldr	r3, [pc, #228]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 80044ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f0:	4a38      	ldr	r2, [pc, #224]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 80044f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f000 80a1 	beq.w	8004644 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004502:	4b34      	ldr	r3, [pc, #208]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 030c 	and.w	r3, r3, #12
 800450a:	2b08      	cmp	r3, #8
 800450c:	d05c      	beq.n	80045c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	2b02      	cmp	r3, #2
 8004514:	d141      	bne.n	800459a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004516:	4b31      	ldr	r3, [pc, #196]	@ (80045dc <HAL_RCC_OscConfig+0x478>)
 8004518:	2200      	movs	r2, #0
 800451a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800451c:	f7fc fc2c 	bl	8000d78 <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004524:	f7fc fc28 	bl	8000d78 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e087      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004536:	4b27      	ldr	r3, [pc, #156]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1f0      	bne.n	8004524 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	69da      	ldr	r2, [r3, #28]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	431a      	orrs	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004550:	019b      	lsls	r3, r3, #6
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004558:	085b      	lsrs	r3, r3, #1
 800455a:	3b01      	subs	r3, #1
 800455c:	041b      	lsls	r3, r3, #16
 800455e:	431a      	orrs	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004564:	061b      	lsls	r3, r3, #24
 8004566:	491b      	ldr	r1, [pc, #108]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 8004568:	4313      	orrs	r3, r2
 800456a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800456c:	4b1b      	ldr	r3, [pc, #108]	@ (80045dc <HAL_RCC_OscConfig+0x478>)
 800456e:	2201      	movs	r2, #1
 8004570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004572:	f7fc fc01 	bl	8000d78 <HAL_GetTick>
 8004576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004578:	e008      	b.n	800458c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800457a:	f7fc fbfd 	bl	8000d78 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d901      	bls.n	800458c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e05c      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800458c:	4b11      	ldr	r3, [pc, #68]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d0f0      	beq.n	800457a <HAL_RCC_OscConfig+0x416>
 8004598:	e054      	b.n	8004644 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800459a:	4b10      	ldr	r3, [pc, #64]	@ (80045dc <HAL_RCC_OscConfig+0x478>)
 800459c:	2200      	movs	r2, #0
 800459e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a0:	f7fc fbea 	bl	8000d78 <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045a8:	f7fc fbe6 	bl	8000d78 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e045      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ba:	4b06      	ldr	r3, [pc, #24]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1f0      	bne.n	80045a8 <HAL_RCC_OscConfig+0x444>
 80045c6:	e03d      	b.n	8004644 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d107      	bne.n	80045e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e038      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
 80045d4:	40023800 	.word	0x40023800
 80045d8:	40007000 	.word	0x40007000
 80045dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004650 <HAL_RCC_OscConfig+0x4ec>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d028      	beq.n	8004640 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d121      	bne.n	8004640 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004606:	429a      	cmp	r2, r3
 8004608:	d11a      	bne.n	8004640 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004610:	4013      	ands	r3, r2
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004616:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004618:	4293      	cmp	r3, r2
 800461a:	d111      	bne.n	8004640 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004626:	085b      	lsrs	r3, r3, #1
 8004628:	3b01      	subs	r3, #1
 800462a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800462c:	429a      	cmp	r2, r3
 800462e:	d107      	bne.n	8004640 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800463a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800463c:	429a      	cmp	r2, r3
 800463e:	d001      	beq.n	8004644 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e000      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3718      	adds	r7, #24
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	40023800 	.word	0x40023800

08004654 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e0cc      	b.n	8004802 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004668:	4b68      	ldr	r3, [pc, #416]	@ (800480c <HAL_RCC_ClockConfig+0x1b8>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0307 	and.w	r3, r3, #7
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	429a      	cmp	r2, r3
 8004674:	d90c      	bls.n	8004690 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004676:	4b65      	ldr	r3, [pc, #404]	@ (800480c <HAL_RCC_ClockConfig+0x1b8>)
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	b2d2      	uxtb	r2, r2
 800467c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800467e:	4b63      	ldr	r3, [pc, #396]	@ (800480c <HAL_RCC_ClockConfig+0x1b8>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0307 	and.w	r3, r3, #7
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	429a      	cmp	r2, r3
 800468a:	d001      	beq.n	8004690 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e0b8      	b.n	8004802 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d020      	beq.n	80046de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0304 	and.w	r3, r3, #4
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d005      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046a8:	4b59      	ldr	r3, [pc, #356]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	4a58      	ldr	r2, [pc, #352]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80046ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80046b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0308 	and.w	r3, r3, #8
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d005      	beq.n	80046cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046c0:	4b53      	ldr	r3, [pc, #332]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	4a52      	ldr	r2, [pc, #328]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80046c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80046ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046cc:	4b50      	ldr	r3, [pc, #320]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	494d      	ldr	r1, [pc, #308]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d044      	beq.n	8004774 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d107      	bne.n	8004702 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046f2:	4b47      	ldr	r3, [pc, #284]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d119      	bne.n	8004732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e07f      	b.n	8004802 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	2b02      	cmp	r3, #2
 8004708:	d003      	beq.n	8004712 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800470e:	2b03      	cmp	r3, #3
 8004710:	d107      	bne.n	8004722 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004712:	4b3f      	ldr	r3, [pc, #252]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d109      	bne.n	8004732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e06f      	b.n	8004802 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004722:	4b3b      	ldr	r3, [pc, #236]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e067      	b.n	8004802 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004732:	4b37      	ldr	r3, [pc, #220]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f023 0203 	bic.w	r2, r3, #3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	4934      	ldr	r1, [pc, #208]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 8004740:	4313      	orrs	r3, r2
 8004742:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004744:	f7fc fb18 	bl	8000d78 <HAL_GetTick>
 8004748:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800474a:	e00a      	b.n	8004762 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800474c:	f7fc fb14 	bl	8000d78 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	f241 3288 	movw	r2, #5000	@ 0x1388
 800475a:	4293      	cmp	r3, r2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e04f      	b.n	8004802 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004762:	4b2b      	ldr	r3, [pc, #172]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 020c 	and.w	r2, r3, #12
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	429a      	cmp	r2, r3
 8004772:	d1eb      	bne.n	800474c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004774:	4b25      	ldr	r3, [pc, #148]	@ (800480c <HAL_RCC_ClockConfig+0x1b8>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	429a      	cmp	r2, r3
 8004780:	d20c      	bcs.n	800479c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004782:	4b22      	ldr	r3, [pc, #136]	@ (800480c <HAL_RCC_ClockConfig+0x1b8>)
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	b2d2      	uxtb	r2, r2
 8004788:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800478a:	4b20      	ldr	r3, [pc, #128]	@ (800480c <HAL_RCC_ClockConfig+0x1b8>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0307 	and.w	r3, r3, #7
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	429a      	cmp	r2, r3
 8004796:	d001      	beq.n	800479c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e032      	b.n	8004802 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d008      	beq.n	80047ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047a8:	4b19      	ldr	r3, [pc, #100]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	4916      	ldr	r1, [pc, #88]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0308 	and.w	r3, r3, #8
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d009      	beq.n	80047da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047c6:	4b12      	ldr	r3, [pc, #72]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	00db      	lsls	r3, r3, #3
 80047d4:	490e      	ldr	r1, [pc, #56]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047da:	f000 f821 	bl	8004820 <HAL_RCC_GetSysClockFreq>
 80047de:	4602      	mov	r2, r0
 80047e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	091b      	lsrs	r3, r3, #4
 80047e6:	f003 030f 	and.w	r3, r3, #15
 80047ea:	490a      	ldr	r1, [pc, #40]	@ (8004814 <HAL_RCC_ClockConfig+0x1c0>)
 80047ec:	5ccb      	ldrb	r3, [r1, r3]
 80047ee:	fa22 f303 	lsr.w	r3, r2, r3
 80047f2:	4a09      	ldr	r2, [pc, #36]	@ (8004818 <HAL_RCC_ClockConfig+0x1c4>)
 80047f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047f6:	4b09      	ldr	r3, [pc, #36]	@ (800481c <HAL_RCC_ClockConfig+0x1c8>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fc fa78 	bl	8000cf0 <HAL_InitTick>

  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	40023c00 	.word	0x40023c00
 8004810:	40023800 	.word	0x40023800
 8004814:	08008aa4 	.word	0x08008aa4
 8004818:	20000000 	.word	0x20000000
 800481c:	20000004 	.word	0x20000004

08004820 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004820:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004824:	b094      	sub	sp, #80	@ 0x50
 8004826:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004828:	2300      	movs	r3, #0
 800482a:	647b      	str	r3, [r7, #68]	@ 0x44
 800482c:	2300      	movs	r3, #0
 800482e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004830:	2300      	movs	r3, #0
 8004832:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004834:	2300      	movs	r3, #0
 8004836:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004838:	4b79      	ldr	r3, [pc, #484]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0x200>)
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f003 030c 	and.w	r3, r3, #12
 8004840:	2b08      	cmp	r3, #8
 8004842:	d00d      	beq.n	8004860 <HAL_RCC_GetSysClockFreq+0x40>
 8004844:	2b08      	cmp	r3, #8
 8004846:	f200 80e1 	bhi.w	8004a0c <HAL_RCC_GetSysClockFreq+0x1ec>
 800484a:	2b00      	cmp	r3, #0
 800484c:	d002      	beq.n	8004854 <HAL_RCC_GetSysClockFreq+0x34>
 800484e:	2b04      	cmp	r3, #4
 8004850:	d003      	beq.n	800485a <HAL_RCC_GetSysClockFreq+0x3a>
 8004852:	e0db      	b.n	8004a0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004854:	4b73      	ldr	r3, [pc, #460]	@ (8004a24 <HAL_RCC_GetSysClockFreq+0x204>)
 8004856:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004858:	e0db      	b.n	8004a12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800485a:	4b73      	ldr	r3, [pc, #460]	@ (8004a28 <HAL_RCC_GetSysClockFreq+0x208>)
 800485c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800485e:	e0d8      	b.n	8004a12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004860:	4b6f      	ldr	r3, [pc, #444]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004868:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800486a:	4b6d      	ldr	r3, [pc, #436]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0x200>)
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d063      	beq.n	800493e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004876:	4b6a      	ldr	r3, [pc, #424]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	099b      	lsrs	r3, r3, #6
 800487c:	2200      	movs	r2, #0
 800487e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004880:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004888:	633b      	str	r3, [r7, #48]	@ 0x30
 800488a:	2300      	movs	r3, #0
 800488c:	637b      	str	r3, [r7, #52]	@ 0x34
 800488e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004892:	4622      	mov	r2, r4
 8004894:	462b      	mov	r3, r5
 8004896:	f04f 0000 	mov.w	r0, #0
 800489a:	f04f 0100 	mov.w	r1, #0
 800489e:	0159      	lsls	r1, r3, #5
 80048a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048a4:	0150      	lsls	r0, r2, #5
 80048a6:	4602      	mov	r2, r0
 80048a8:	460b      	mov	r3, r1
 80048aa:	4621      	mov	r1, r4
 80048ac:	1a51      	subs	r1, r2, r1
 80048ae:	6139      	str	r1, [r7, #16]
 80048b0:	4629      	mov	r1, r5
 80048b2:	eb63 0301 	sbc.w	r3, r3, r1
 80048b6:	617b      	str	r3, [r7, #20]
 80048b8:	f04f 0200 	mov.w	r2, #0
 80048bc:	f04f 0300 	mov.w	r3, #0
 80048c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048c4:	4659      	mov	r1, fp
 80048c6:	018b      	lsls	r3, r1, #6
 80048c8:	4651      	mov	r1, sl
 80048ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048ce:	4651      	mov	r1, sl
 80048d0:	018a      	lsls	r2, r1, #6
 80048d2:	4651      	mov	r1, sl
 80048d4:	ebb2 0801 	subs.w	r8, r2, r1
 80048d8:	4659      	mov	r1, fp
 80048da:	eb63 0901 	sbc.w	r9, r3, r1
 80048de:	f04f 0200 	mov.w	r2, #0
 80048e2:	f04f 0300 	mov.w	r3, #0
 80048e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048f2:	4690      	mov	r8, r2
 80048f4:	4699      	mov	r9, r3
 80048f6:	4623      	mov	r3, r4
 80048f8:	eb18 0303 	adds.w	r3, r8, r3
 80048fc:	60bb      	str	r3, [r7, #8]
 80048fe:	462b      	mov	r3, r5
 8004900:	eb49 0303 	adc.w	r3, r9, r3
 8004904:	60fb      	str	r3, [r7, #12]
 8004906:	f04f 0200 	mov.w	r2, #0
 800490a:	f04f 0300 	mov.w	r3, #0
 800490e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004912:	4629      	mov	r1, r5
 8004914:	024b      	lsls	r3, r1, #9
 8004916:	4621      	mov	r1, r4
 8004918:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800491c:	4621      	mov	r1, r4
 800491e:	024a      	lsls	r2, r1, #9
 8004920:	4610      	mov	r0, r2
 8004922:	4619      	mov	r1, r3
 8004924:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004926:	2200      	movs	r2, #0
 8004928:	62bb      	str	r3, [r7, #40]	@ 0x28
 800492a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800492c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004930:	f7fb fc4a 	bl	80001c8 <__aeabi_uldivmod>
 8004934:	4602      	mov	r2, r0
 8004936:	460b      	mov	r3, r1
 8004938:	4613      	mov	r3, r2
 800493a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800493c:	e058      	b.n	80049f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800493e:	4b38      	ldr	r3, [pc, #224]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	099b      	lsrs	r3, r3, #6
 8004944:	2200      	movs	r2, #0
 8004946:	4618      	mov	r0, r3
 8004948:	4611      	mov	r1, r2
 800494a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800494e:	623b      	str	r3, [r7, #32]
 8004950:	2300      	movs	r3, #0
 8004952:	627b      	str	r3, [r7, #36]	@ 0x24
 8004954:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004958:	4642      	mov	r2, r8
 800495a:	464b      	mov	r3, r9
 800495c:	f04f 0000 	mov.w	r0, #0
 8004960:	f04f 0100 	mov.w	r1, #0
 8004964:	0159      	lsls	r1, r3, #5
 8004966:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800496a:	0150      	lsls	r0, r2, #5
 800496c:	4602      	mov	r2, r0
 800496e:	460b      	mov	r3, r1
 8004970:	4641      	mov	r1, r8
 8004972:	ebb2 0a01 	subs.w	sl, r2, r1
 8004976:	4649      	mov	r1, r9
 8004978:	eb63 0b01 	sbc.w	fp, r3, r1
 800497c:	f04f 0200 	mov.w	r2, #0
 8004980:	f04f 0300 	mov.w	r3, #0
 8004984:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004988:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800498c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004990:	ebb2 040a 	subs.w	r4, r2, sl
 8004994:	eb63 050b 	sbc.w	r5, r3, fp
 8004998:	f04f 0200 	mov.w	r2, #0
 800499c:	f04f 0300 	mov.w	r3, #0
 80049a0:	00eb      	lsls	r3, r5, #3
 80049a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049a6:	00e2      	lsls	r2, r4, #3
 80049a8:	4614      	mov	r4, r2
 80049aa:	461d      	mov	r5, r3
 80049ac:	4643      	mov	r3, r8
 80049ae:	18e3      	adds	r3, r4, r3
 80049b0:	603b      	str	r3, [r7, #0]
 80049b2:	464b      	mov	r3, r9
 80049b4:	eb45 0303 	adc.w	r3, r5, r3
 80049b8:	607b      	str	r3, [r7, #4]
 80049ba:	f04f 0200 	mov.w	r2, #0
 80049be:	f04f 0300 	mov.w	r3, #0
 80049c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049c6:	4629      	mov	r1, r5
 80049c8:	028b      	lsls	r3, r1, #10
 80049ca:	4621      	mov	r1, r4
 80049cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049d0:	4621      	mov	r1, r4
 80049d2:	028a      	lsls	r2, r1, #10
 80049d4:	4610      	mov	r0, r2
 80049d6:	4619      	mov	r1, r3
 80049d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049da:	2200      	movs	r2, #0
 80049dc:	61bb      	str	r3, [r7, #24]
 80049de:	61fa      	str	r2, [r7, #28]
 80049e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049e4:	f7fb fbf0 	bl	80001c8 <__aeabi_uldivmod>
 80049e8:	4602      	mov	r2, r0
 80049ea:	460b      	mov	r3, r1
 80049ec:	4613      	mov	r3, r2
 80049ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0x200>)
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	0c1b      	lsrs	r3, r3, #16
 80049f6:	f003 0303 	and.w	r3, r3, #3
 80049fa:	3301      	adds	r3, #1
 80049fc:	005b      	lsls	r3, r3, #1
 80049fe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004a00:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a0a:	e002      	b.n	8004a12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a0c:	4b05      	ldr	r3, [pc, #20]	@ (8004a24 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a0e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3750      	adds	r7, #80	@ 0x50
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a1e:	bf00      	nop
 8004a20:	40023800 	.word	0x40023800
 8004a24:	00f42400 	.word	0x00f42400
 8004a28:	007a1200 	.word	0x007a1200

08004a2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a30:	4b03      	ldr	r3, [pc, #12]	@ (8004a40 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a32:	681b      	ldr	r3, [r3, #0]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	20000000 	.word	0x20000000

08004a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a48:	f7ff fff0 	bl	8004a2c <HAL_RCC_GetHCLKFreq>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	4b05      	ldr	r3, [pc, #20]	@ (8004a64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	0a9b      	lsrs	r3, r3, #10
 8004a54:	f003 0307 	and.w	r3, r3, #7
 8004a58:	4903      	ldr	r1, [pc, #12]	@ (8004a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a5a:	5ccb      	ldrb	r3, [r1, r3]
 8004a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	40023800 	.word	0x40023800
 8004a68:	08008ab4 	.word	0x08008ab4

08004a6c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a74:	2300      	movs	r3, #0
 8004a76:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0301 	and.w	r3, r3, #1
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d105      	bne.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d035      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a94:	4b62      	ldr	r3, [pc, #392]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a9a:	f7fc f96d 	bl	8000d78 <HAL_GetTick>
 8004a9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004aa0:	e008      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004aa2:	f7fc f969 	bl	8000d78 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d901      	bls.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e0b0      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ab4:	4b5b      	ldr	r3, [pc, #364]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1f0      	bne.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	019a      	lsls	r2, r3, #6
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	071b      	lsls	r3, r3, #28
 8004acc:	4955      	ldr	r1, [pc, #340]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ad4:	4b52      	ldr	r3, [pc, #328]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ada:	f7fc f94d 	bl	8000d78 <HAL_GetTick>
 8004ade:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ae0:	e008      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ae2:	f7fc f949 	bl	8000d78 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d901      	bls.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e090      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004af4:	4b4b      	ldr	r3, [pc, #300]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d0f0      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 8083 	beq.w	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b0e:	2300      	movs	r3, #0
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	4b44      	ldr	r3, [pc, #272]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b16:	4a43      	ldr	r2, [pc, #268]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b1e:	4b41      	ldr	r3, [pc, #260]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b26:	60fb      	str	r3, [r7, #12]
 8004b28:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004b2a:	4b3f      	ldr	r3, [pc, #252]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a3e      	ldr	r2, [pc, #248]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b34:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b36:	f7fc f91f 	bl	8000d78 <HAL_GetTick>
 8004b3a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b3c:	e008      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004b3e:	f7fc f91b 	bl	8000d78 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d901      	bls.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e062      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b50:	4b35      	ldr	r3, [pc, #212]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d0f0      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b5c:	4b31      	ldr	r3, [pc, #196]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b64:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d02f      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d028      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b7a:	4b2a      	ldr	r3, [pc, #168]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b82:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b84:	4b29      	ldr	r3, [pc, #164]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004b86:	2201      	movs	r2, #1
 8004b88:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b8a:	4b28      	ldr	r3, [pc, #160]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004b90:	4a24      	ldr	r2, [pc, #144]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b96:	4b23      	ldr	r3, [pc, #140]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d114      	bne.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004ba2:	f7fc f8e9 	bl	8000d78 <HAL_GetTick>
 8004ba6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ba8:	e00a      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004baa:	f7fc f8e5 	bl	8000d78 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d901      	bls.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e02a      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bc0:	4b18      	ldr	r3, [pc, #96]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d0ee      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bd8:	d10d      	bne.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004bda:	4b12      	ldr	r3, [pc, #72]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004bea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bee:	490d      	ldr	r1, [pc, #52]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	608b      	str	r3, [r1, #8]
 8004bf4:	e005      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bfc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004c00:	6093      	str	r3, [r2, #8]
 8004c02:	4b08      	ldr	r3, [pc, #32]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c04:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c0e:	4905      	ldr	r1, [pc, #20]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3718      	adds	r7, #24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	42470068 	.word	0x42470068
 8004c24:	40023800 	.word	0x40023800
 8004c28:	40007000 	.word	0x40007000
 8004c2c:	42470e40 	.word	0x42470e40

08004c30 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b087      	sub	sp, #28
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004c40:	2300      	movs	r3, #0
 8004c42:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004c44:	2300      	movs	r3, #0
 8004c46:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d13f      	bne.n	8004cce <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004c4e:	4b24      	ldr	r3, [pc, #144]	@ (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d006      	beq.n	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004c64:	d12f      	bne.n	8004cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004c66:	4b1f      	ldr	r3, [pc, #124]	@ (8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004c68:	617b      	str	r3, [r7, #20]
          break;
 8004c6a:	e02f      	b.n	8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004c6c:	4b1c      	ldr	r3, [pc, #112]	@ (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c78:	d108      	bne.n	8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c7a:	4b19      	ldr	r3, [pc, #100]	@ (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c82:	4a19      	ldr	r2, [pc, #100]	@ (8004ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c88:	613b      	str	r3, [r7, #16]
 8004c8a:	e007      	b.n	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c8c:	4b14      	ldr	r3, [pc, #80]	@ (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c94:	4a15      	ldr	r2, [pc, #84]	@ (8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c9a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004c9c:	4b10      	ldr	r3, [pc, #64]	@ (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ca2:	099b      	lsrs	r3, r3, #6
 8004ca4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	fb02 f303 	mul.w	r3, r2, r3
 8004cae:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004cb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cb6:	0f1b      	lsrs	r3, r3, #28
 8004cb8:	f003 0307 	and.w	r3, r3, #7
 8004cbc:	68ba      	ldr	r2, [r7, #8]
 8004cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc2:	617b      	str	r3, [r7, #20]
          break;
 8004cc4:	e002      	b.n	8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	617b      	str	r3, [r7, #20]
          break;
 8004cca:	bf00      	nop
        }
      }
      break;
 8004ccc:	e000      	b.n	8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8004cce:	bf00      	nop
    }
  }
  return frequency;
 8004cd0:	697b      	ldr	r3, [r7, #20]
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	371c      	adds	r7, #28
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	40023800 	.word	0x40023800
 8004ce4:	00bb8000 	.word	0x00bb8000
 8004ce8:	007a1200 	.word	0x007a1200
 8004cec:	00f42400 	.word	0x00f42400

08004cf0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e07b      	b.n	8004dfa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d108      	bne.n	8004d1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d12:	d009      	beq.n	8004d28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	61da      	str	r2, [r3, #28]
 8004d1a:	e005      	b.n	8004d28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d106      	bne.n	8004d48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f7fb febe 	bl	8000ac4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004d70:	431a      	orrs	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	431a      	orrs	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d98:	431a      	orrs	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004da2:	431a      	orrs	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a1b      	ldr	r3, [r3, #32]
 8004da8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dac:	ea42 0103 	orr.w	r1, r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	0c1b      	lsrs	r3, r3, #16
 8004dc6:	f003 0104 	and.w	r1, r3, #4
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dce:	f003 0210 	and.w	r2, r3, #16
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	69da      	ldr	r2, [r3, #28]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004de8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3708      	adds	r7, #8
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e02:	b084      	sub	sp, #16
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	f107 001c 	add.w	r0, r7, #28
 8004e10:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e14:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d123      	bne.n	8004e64 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e20:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004e30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e44:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d105      	bne.n	8004e58 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 f9dc 	bl	8005216 <USB_CoreReset>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	73fb      	strb	r3, [r7, #15]
 8004e62:	e01b      	b.n	8004e9c <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 f9d0 	bl	8005216 <USB_CoreReset>
 8004e76:	4603      	mov	r3, r0
 8004e78:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e7a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d106      	bne.n	8004e90 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e86:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	639a      	str	r2, [r3, #56]	@ 0x38
 8004e8e:	e005      	b.n	8004e9c <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e94:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e9c:	7fbb      	ldrb	r3, [r7, #30]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d10b      	bne.n	8004eba <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f043 0206 	orr.w	r2, r3, #6
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f043 0220 	orr.w	r2, r3, #32
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ec6:	b004      	add	sp, #16
 8004ec8:	4770      	bx	lr

08004eca <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b083      	sub	sp, #12
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f043 0201 	orr.w	r2, r3, #1
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f023 0201 	bic.w	r2, r3, #1
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b084      	sub	sp, #16
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
 8004f16:	460b      	mov	r3, r1
 8004f18:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f2a:	78fb      	ldrb	r3, [r7, #3]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d115      	bne.n	8004f5c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f3c:	200a      	movs	r0, #10
 8004f3e:	f7fb ff27 	bl	8000d90 <HAL_Delay>
      ms += 10U;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	330a      	adds	r3, #10
 8004f46:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 f956 	bl	80051fa <USB_GetMode>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d01e      	beq.n	8004f92 <USB_SetCurrentMode+0x84>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2bc7      	cmp	r3, #199	@ 0xc7
 8004f58:	d9f0      	bls.n	8004f3c <USB_SetCurrentMode+0x2e>
 8004f5a:	e01a      	b.n	8004f92 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f5c:	78fb      	ldrb	r3, [r7, #3]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d115      	bne.n	8004f8e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f6e:	200a      	movs	r0, #10
 8004f70:	f7fb ff0e 	bl	8000d90 <HAL_Delay>
      ms += 10U;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	330a      	adds	r3, #10
 8004f78:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f93d 	bl	80051fa <USB_GetMode>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d005      	beq.n	8004f92 <USB_SetCurrentMode+0x84>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2bc7      	cmp	r3, #199	@ 0xc7
 8004f8a:	d9f0      	bls.n	8004f6e <USB_SetCurrentMode+0x60>
 8004f8c:	e001      	b.n	8004f92 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e005      	b.n	8004f9e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2bc8      	cmp	r3, #200	@ 0xc8
 8004f96:	d101      	bne.n	8004f9c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e000      	b.n	8004f9e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b085      	sub	sp, #20
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
 8004fae:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004fc0:	d901      	bls.n	8004fc6 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e01b      	b.n	8004ffe <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	daf2      	bge.n	8004fb4 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	019b      	lsls	r3, r3, #6
 8004fd6:	f043 0220 	orr.w	r2, r3, #32
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004fea:	d901      	bls.n	8004ff0 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e006      	b.n	8004ffe <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	f003 0320 	and.w	r3, r3, #32
 8004ff8:	2b20      	cmp	r3, #32
 8004ffa:	d0f0      	beq.n	8004fde <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr

0800500a <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800500a:	b480      	push	{r7}
 800500c:	b085      	sub	sp, #20
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005012:	2300      	movs	r3, #0
 8005014:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	3301      	adds	r3, #1
 800501a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005022:	d901      	bls.n	8005028 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e018      	b.n	800505a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	2b00      	cmp	r3, #0
 800502e:	daf2      	bge.n	8005016 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005030:	2300      	movs	r3, #0
 8005032:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2210      	movs	r2, #16
 8005038:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	3301      	adds	r3, #1
 800503e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005046:	d901      	bls.n	800504c <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e006      	b.n	800505a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	f003 0310 	and.w	r3, r3, #16
 8005054:	2b10      	cmp	r3, #16
 8005056:	d0f0      	beq.n	800503a <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3714      	adds	r7, #20
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005066:	b480      	push	{r7}
 8005068:	b089      	sub	sp, #36	@ 0x24
 800506a:	af00      	add	r7, sp, #0
 800506c:	60f8      	str	r0, [r7, #12]
 800506e:	60b9      	str	r1, [r7, #8]
 8005070:	4611      	mov	r1, r2
 8005072:	461a      	mov	r2, r3
 8005074:	460b      	mov	r3, r1
 8005076:	71fb      	strb	r3, [r7, #7]
 8005078:	4613      	mov	r3, r2
 800507a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005084:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005088:	2b00      	cmp	r3, #0
 800508a:	d123      	bne.n	80050d4 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800508c:	88bb      	ldrh	r3, [r7, #4]
 800508e:	3303      	adds	r3, #3
 8005090:	089b      	lsrs	r3, r3, #2
 8005092:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005094:	2300      	movs	r3, #0
 8005096:	61bb      	str	r3, [r7, #24]
 8005098:	e018      	b.n	80050cc <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800509a:	79fb      	ldrb	r3, [r7, #7]
 800509c:	031a      	lsls	r2, r3, #12
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	4413      	add	r3, r2
 80050a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050a6:	461a      	mov	r2, r3
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6013      	str	r3, [r2, #0]
      pSrc++;
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	3301      	adds	r3, #1
 80050b2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	3301      	adds	r3, #1
 80050b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	3301      	adds	r3, #1
 80050be:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	3301      	adds	r3, #1
 80050c4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	3301      	adds	r3, #1
 80050ca:	61bb      	str	r3, [r7, #24]
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d3e2      	bcc.n	800509a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3724      	adds	r7, #36	@ 0x24
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b08b      	sub	sp, #44	@ 0x2c
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	60f8      	str	r0, [r7, #12]
 80050ea:	60b9      	str	r1, [r7, #8]
 80050ec:	4613      	mov	r3, r2
 80050ee:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80050f8:	88fb      	ldrh	r3, [r7, #6]
 80050fa:	089b      	lsrs	r3, r3, #2
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005100:	88fb      	ldrh	r3, [r7, #6]
 8005102:	f003 0303 	and.w	r3, r3, #3
 8005106:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005108:	2300      	movs	r3, #0
 800510a:	623b      	str	r3, [r7, #32]
 800510c:	e014      	b.n	8005138 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005118:	601a      	str	r2, [r3, #0]
    pDest++;
 800511a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511c:	3301      	adds	r3, #1
 800511e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005122:	3301      	adds	r3, #1
 8005124:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005128:	3301      	adds	r3, #1
 800512a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800512c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512e:	3301      	adds	r3, #1
 8005130:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005132:	6a3b      	ldr	r3, [r7, #32]
 8005134:	3301      	adds	r3, #1
 8005136:	623b      	str	r3, [r7, #32]
 8005138:	6a3a      	ldr	r2, [r7, #32]
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	429a      	cmp	r2, r3
 800513e:	d3e6      	bcc.n	800510e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005140:	8bfb      	ldrh	r3, [r7, #30]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d01e      	beq.n	8005184 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005146:	2300      	movs	r3, #0
 8005148:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005150:	461a      	mov	r2, r3
 8005152:	f107 0310 	add.w	r3, r7, #16
 8005156:	6812      	ldr	r2, [r2, #0]
 8005158:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	6a3b      	ldr	r3, [r7, #32]
 800515e:	b2db      	uxtb	r3, r3
 8005160:	00db      	lsls	r3, r3, #3
 8005162:	fa22 f303 	lsr.w	r3, r2, r3
 8005166:	b2da      	uxtb	r2, r3
 8005168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516a:	701a      	strb	r2, [r3, #0]
      i++;
 800516c:	6a3b      	ldr	r3, [r7, #32]
 800516e:	3301      	adds	r3, #1
 8005170:	623b      	str	r3, [r7, #32]
      pDest++;
 8005172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005174:	3301      	adds	r3, #1
 8005176:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005178:	8bfb      	ldrh	r3, [r7, #30]
 800517a:	3b01      	subs	r3, #1
 800517c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800517e:	8bfb      	ldrh	r3, [r7, #30]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1ea      	bne.n	800515a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005186:	4618      	mov	r0, r3
 8005188:	372c      	adds	r7, #44	@ 0x2c
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005192:	b480      	push	{r7}
 8005194:	b085      	sub	sp, #20
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	4013      	ands	r3, r2
 80051a8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80051aa:	68fb      	ldr	r3, [r7, #12]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3714      	adds	r7, #20
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	460b      	mov	r3, r1
 80051c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80051c8:	78fb      	ldrb	r3, [r7, #3]
 80051ca:	015a      	lsls	r2, r3, #5
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	4413      	add	r3, r2
 80051d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80051d8:	78fb      	ldrb	r3, [r7, #3]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	4013      	ands	r3, r2
 80051ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80051ec:	68bb      	ldr	r3, [r7, #8]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b083      	sub	sp, #12
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	f003 0301 	and.w	r3, r3, #1
}
 800520a:	4618      	mov	r0, r3
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr

08005216 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005216:	b480      	push	{r7}
 8005218:	b085      	sub	sp, #20
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800521e:	2300      	movs	r3, #0
 8005220:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	3301      	adds	r3, #1
 8005226:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800522e:	d901      	bls.n	8005234 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e01b      	b.n	800526c <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	2b00      	cmp	r3, #0
 800523a:	daf2      	bge.n	8005222 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800523c:	2300      	movs	r3, #0
 800523e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	f043 0201 	orr.w	r2, r3, #1
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	3301      	adds	r3, #1
 8005250:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005258:	d901      	bls.n	800525e <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e006      	b.n	800526c <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	2b01      	cmp	r3, #1
 8005268:	d0f0      	beq.n	800524c <USB_CoreReset+0x36>

  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3714      	adds	r7, #20
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005278:	b084      	sub	sp, #16
 800527a:	b580      	push	{r7, lr}
 800527c:	b086      	sub	sp, #24
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
 8005282:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005286:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800528a:	2300      	movs	r3, #0
 800528c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005298:	461a      	mov	r2, r3
 800529a:	2300      	movs	r3, #0
 800529c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ae:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ba:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d119      	bne.n	8005302 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80052ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d10a      	bne.n	80052ec <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80052e4:	f043 0304 	orr.w	r3, r3, #4
 80052e8:	6013      	str	r3, [r2, #0]
 80052ea:	e014      	b.n	8005316 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80052fa:	f023 0304 	bic.w	r3, r3, #4
 80052fe:	6013      	str	r3, [r2, #0]
 8005300:	e009      	b.n	8005316 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005310:	f023 0304 	bic.w	r3, r3, #4
 8005314:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005316:	2110      	movs	r1, #16
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f7ff fe44 	bl	8004fa6 <USB_FlushTxFifo>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d001      	beq.n	8005328 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f7ff fe6e 	bl	800500a <USB_FlushRxFifo>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d001      	beq.n	8005338 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005338:	2300      	movs	r3, #0
 800533a:	613b      	str	r3, [r7, #16]
 800533c:	e015      	b.n	800536a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	015a      	lsls	r2, r3, #5
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	4413      	add	r3, r2
 8005346:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800534a:	461a      	mov	r2, r3
 800534c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005350:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	015a      	lsls	r2, r3, #5
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	4413      	add	r3, r2
 800535a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800535e:	461a      	mov	r2, r3
 8005360:	2300      	movs	r3, #0
 8005362:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	3301      	adds	r3, #1
 8005368:	613b      	str	r3, [r7, #16]
 800536a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800536e:	461a      	mov	r2, r3
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	4293      	cmp	r3, r2
 8005374:	d3e3      	bcc.n	800533e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005382:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a18      	ldr	r2, [pc, #96]	@ (80053e8 <USB_HostInit+0x170>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d10b      	bne.n	80053a4 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005392:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a15      	ldr	r2, [pc, #84]	@ (80053ec <USB_HostInit+0x174>)
 8005398:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a14      	ldr	r2, [pc, #80]	@ (80053f0 <USB_HostInit+0x178>)
 800539e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80053a2:	e009      	b.n	80053b8 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2280      	movs	r2, #128	@ 0x80
 80053a8:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a11      	ldr	r2, [pc, #68]	@ (80053f4 <USB_HostInit+0x17c>)
 80053ae:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a11      	ldr	r2, [pc, #68]	@ (80053f8 <USB_HostInit+0x180>)
 80053b4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80053b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d105      	bne.n	80053cc <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	f043 0210 	orr.w	r2, r3, #16
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	699a      	ldr	r2, [r3, #24]
 80053d0:	4b0a      	ldr	r3, [pc, #40]	@ (80053fc <USB_HostInit+0x184>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80053d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3718      	adds	r7, #24
 80053de:	46bd      	mov	sp, r7
 80053e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053e4:	b004      	add	sp, #16
 80053e6:	4770      	bx	lr
 80053e8:	40040000 	.word	0x40040000
 80053ec:	01000200 	.word	0x01000200
 80053f0:	00e00300 	.word	0x00e00300
 80053f4:	00600080 	.word	0x00600080
 80053f8:	004000e0 	.word	0x004000e0
 80053fc:	a3200008 	.word	0xa3200008

08005400 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	460b      	mov	r3, r1
 800540a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800541e:	f023 0303 	bic.w	r3, r3, #3
 8005422:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	78fb      	ldrb	r3, [r7, #3]
 800542e:	f003 0303 	and.w	r3, r3, #3
 8005432:	68f9      	ldr	r1, [r7, #12]
 8005434:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005438:	4313      	orrs	r3, r2
 800543a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800543c:	78fb      	ldrb	r3, [r7, #3]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d107      	bne.n	8005452 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005448:	461a      	mov	r2, r3
 800544a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800544e:	6053      	str	r3, [r2, #4]
 8005450:	e00c      	b.n	800546c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005452:	78fb      	ldrb	r3, [r7, #3]
 8005454:	2b02      	cmp	r3, #2
 8005456:	d107      	bne.n	8005468 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800545e:	461a      	mov	r2, r3
 8005460:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005464:	6053      	str	r3, [r2, #4]
 8005466:	e001      	b.n	800546c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e000      	b.n	800546e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr

0800547a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b084      	sub	sp, #16
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005486:	2300      	movs	r3, #0
 8005488:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800549a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80054a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054a8:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80054aa:	2064      	movs	r0, #100	@ 0x64
 80054ac:	f7fb fc70 	bl	8000d90 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80054b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054bc:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80054be:	200a      	movs	r0, #10
 80054c0:	f7fb fc66 	bl	8000d90 <HAL_Delay>

  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80054ce:	b480      	push	{r7}
 80054d0:	b085      	sub	sp, #20
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
 80054d6:	460b      	mov	r3, r1
 80054d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80054de:	2300      	movs	r3, #0
 80054e0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80054f2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d109      	bne.n	8005512 <USB_DriveVbus+0x44>
 80054fe:	78fb      	ldrb	r3, [r7, #3]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d106      	bne.n	8005512 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800550c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005510:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005518:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800551c:	d109      	bne.n	8005532 <USB_DriveVbus+0x64>
 800551e:	78fb      	ldrb	r3, [r7, #3]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d106      	bne.n	8005532 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800552c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005530:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3714      	adds	r7, #20
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800554c:	2300      	movs	r3, #0
 800554e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	0c5b      	lsrs	r3, r3, #17
 800555e:	f003 0303 	and.w	r3, r3, #3
}
 8005562:	4618      	mov	r0, r3
 8005564:	3714      	adds	r7, #20
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800556e:	b480      	push	{r7}
 8005570:	b085      	sub	sp, #20
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	b29b      	uxth	r3, r3
}
 8005584:	4618      	mov	r0, r3
 8005586:	3714      	adds	r7, #20
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b088      	sub	sp, #32
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	4608      	mov	r0, r1
 800559a:	4611      	mov	r1, r2
 800559c:	461a      	mov	r2, r3
 800559e:	4603      	mov	r3, r0
 80055a0:	70fb      	strb	r3, [r7, #3]
 80055a2:	460b      	mov	r3, r1
 80055a4:	70bb      	strb	r3, [r7, #2]
 80055a6:	4613      	mov	r3, r2
 80055a8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80055aa:	2300      	movs	r3, #0
 80055ac:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80055b2:	78fb      	ldrb	r3, [r7, #3]
 80055b4:	015a      	lsls	r2, r3, #5
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	4413      	add	r3, r2
 80055ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055be:	461a      	mov	r2, r3
 80055c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80055c4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80055c6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80055ca:	2b03      	cmp	r3, #3
 80055cc:	d87c      	bhi.n	80056c8 <USB_HC_Init+0x138>
 80055ce:	a201      	add	r2, pc, #4	@ (adr r2, 80055d4 <USB_HC_Init+0x44>)
 80055d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d4:	080055e5 	.word	0x080055e5
 80055d8:	0800568b 	.word	0x0800568b
 80055dc:	080055e5 	.word	0x080055e5
 80055e0:	0800564d 	.word	0x0800564d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80055e4:	78fb      	ldrb	r3, [r7, #3]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055f0:	461a      	mov	r2, r3
 80055f2:	f240 439d 	movw	r3, #1181	@ 0x49d
 80055f6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80055f8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	da10      	bge.n	8005622 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005600:	78fb      	ldrb	r3, [r7, #3]
 8005602:	015a      	lsls	r2, r3, #5
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	4413      	add	r3, r2
 8005608:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	78fa      	ldrb	r2, [r7, #3]
 8005610:	0151      	lsls	r1, r2, #5
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	440a      	add	r2, r1
 8005616:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800561a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800561e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005620:	e055      	b.n	80056ce <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a6f      	ldr	r2, [pc, #444]	@ (80057e4 <USB_HC_Init+0x254>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d151      	bne.n	80056ce <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800562a:	78fb      	ldrb	r3, [r7, #3]
 800562c:	015a      	lsls	r2, r3, #5
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	4413      	add	r3, r2
 8005632:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	78fa      	ldrb	r2, [r7, #3]
 800563a:	0151      	lsls	r1, r2, #5
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	440a      	add	r2, r1
 8005640:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005644:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005648:	60d3      	str	r3, [r2, #12]
      break;
 800564a:	e040      	b.n	80056ce <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800564c:	78fb      	ldrb	r3, [r7, #3]
 800564e:	015a      	lsls	r2, r3, #5
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	4413      	add	r3, r2
 8005654:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005658:	461a      	mov	r2, r3
 800565a:	f240 639d 	movw	r3, #1693	@ 0x69d
 800565e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005660:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005664:	2b00      	cmp	r3, #0
 8005666:	da34      	bge.n	80056d2 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005668:	78fb      	ldrb	r3, [r7, #3]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	4413      	add	r3, r2
 8005670:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	78fa      	ldrb	r2, [r7, #3]
 8005678:	0151      	lsls	r1, r2, #5
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	440a      	add	r2, r1
 800567e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005682:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005686:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005688:	e023      	b.n	80056d2 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800568a:	78fb      	ldrb	r3, [r7, #3]
 800568c:	015a      	lsls	r2, r3, #5
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	4413      	add	r3, r2
 8005692:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005696:	461a      	mov	r2, r3
 8005698:	f240 2325 	movw	r3, #549	@ 0x225
 800569c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800569e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	da17      	bge.n	80056d6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80056a6:	78fb      	ldrb	r3, [r7, #3]
 80056a8:	015a      	lsls	r2, r3, #5
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	78fa      	ldrb	r2, [r7, #3]
 80056b6:	0151      	lsls	r1, r2, #5
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	440a      	add	r2, r1
 80056bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80056c0:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80056c4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80056c6:	e006      	b.n	80056d6 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	77fb      	strb	r3, [r7, #31]
      break;
 80056cc:	e004      	b.n	80056d8 <USB_HC_Init+0x148>
      break;
 80056ce:	bf00      	nop
 80056d0:	e002      	b.n	80056d8 <USB_HC_Init+0x148>
      break;
 80056d2:	bf00      	nop
 80056d4:	e000      	b.n	80056d8 <USB_HC_Init+0x148>
      break;
 80056d6:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80056d8:	78fb      	ldrb	r3, [r7, #3]
 80056da:	015a      	lsls	r2, r3, #5
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	4413      	add	r3, r2
 80056e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056e4:	461a      	mov	r2, r3
 80056e6:	2300      	movs	r3, #0
 80056e8:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80056ea:	78fb      	ldrb	r3, [r7, #3]
 80056ec:	015a      	lsls	r2, r3, #5
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	78fa      	ldrb	r2, [r7, #3]
 80056fa:	0151      	lsls	r1, r2, #5
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	440a      	add	r2, r1
 8005700:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005704:	f043 0302 	orr.w	r3, r3, #2
 8005708:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005710:	699a      	ldr	r2, [r3, #24]
 8005712:	78fb      	ldrb	r3, [r7, #3]
 8005714:	f003 030f 	and.w	r3, r3, #15
 8005718:	2101      	movs	r1, #1
 800571a:	fa01 f303 	lsl.w	r3, r1, r3
 800571e:	6939      	ldr	r1, [r7, #16]
 8005720:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005724:	4313      	orrs	r3, r2
 8005726:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005734:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005738:	2b00      	cmp	r3, #0
 800573a:	da03      	bge.n	8005744 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800573c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005740:	61bb      	str	r3, [r7, #24]
 8005742:	e001      	b.n	8005748 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8005744:	2300      	movs	r3, #0
 8005746:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f7ff fef9 	bl	8005540 <USB_GetHostSpeed>
 800574e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005750:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005754:	2b02      	cmp	r3, #2
 8005756:	d106      	bne.n	8005766 <USB_HC_Init+0x1d6>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2b02      	cmp	r3, #2
 800575c:	d003      	beq.n	8005766 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800575e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005762:	617b      	str	r3, [r7, #20]
 8005764:	e001      	b.n	800576a <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005766:	2300      	movs	r3, #0
 8005768:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800576a:	787b      	ldrb	r3, [r7, #1]
 800576c:	059b      	lsls	r3, r3, #22
 800576e:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005772:	78bb      	ldrb	r3, [r7, #2]
 8005774:	02db      	lsls	r3, r3, #11
 8005776:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800577a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800577c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005780:	049b      	lsls	r3, r3, #18
 8005782:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005786:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8005788:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800578a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800578e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	431a      	orrs	r2, r3
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005798:	78fa      	ldrb	r2, [r7, #3]
 800579a:	0151      	lsls	r1, r2, #5
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	440a      	add	r2, r1
 80057a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80057a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80057a8:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80057aa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80057ae:	2b03      	cmp	r3, #3
 80057b0:	d003      	beq.n	80057ba <USB_HC_Init+0x22a>
 80057b2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d10f      	bne.n	80057da <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80057ba:	78fb      	ldrb	r3, [r7, #3]
 80057bc:	015a      	lsls	r2, r3, #5
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	78fa      	ldrb	r2, [r7, #3]
 80057ca:	0151      	lsls	r1, r2, #5
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	440a      	add	r2, r1
 80057d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80057d4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80057d8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80057da:	7ffb      	ldrb	r3, [r7, #31]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3720      	adds	r7, #32
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	40040000 	.word	0x40040000

080057e8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b08c      	sub	sp, #48	@ 0x30
 80057ec:	af02      	add	r7, sp, #8
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	4613      	mov	r3, r2
 80057f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	785b      	ldrb	r3, [r3, #1]
 80057fe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005800:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005804:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	4a5d      	ldr	r2, [pc, #372]	@ (8005980 <USB_HC_StartXfer+0x198>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d12f      	bne.n	800586e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800580e:	79fb      	ldrb	r3, [r7, #7]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d11c      	bne.n	800584e <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	7c9b      	ldrb	r3, [r3, #18]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d003      	beq.n	8005824 <USB_HC_StartXfer+0x3c>
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	7c9b      	ldrb	r3, [r3, #18]
 8005820:	2b02      	cmp	r3, #2
 8005822:	d124      	bne.n	800586e <USB_HC_StartXfer+0x86>
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	799b      	ldrb	r3, [r3, #6]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d120      	bne.n	800586e <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	015a      	lsls	r2, r3, #5
 8005830:	6a3b      	ldr	r3, [r7, #32]
 8005832:	4413      	add	r3, r2
 8005834:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	69fa      	ldr	r2, [r7, #28]
 800583c:	0151      	lsls	r1, r2, #5
 800583e:	6a3a      	ldr	r2, [r7, #32]
 8005840:	440a      	add	r2, r1
 8005842:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005846:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800584a:	60d3      	str	r3, [r2, #12]
 800584c:	e00f      	b.n	800586e <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	791b      	ldrb	r3, [r3, #4]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10b      	bne.n	800586e <USB_HC_StartXfer+0x86>
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	795b      	ldrb	r3, [r3, #5]
 800585a:	2b01      	cmp	r3, #1
 800585c:	d107      	bne.n	800586e <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	785b      	ldrb	r3, [r3, #1]
 8005862:	4619      	mov	r1, r3
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f000 fb6b 	bl	8005f40 <USB_DoPing>
        return HAL_OK;
 800586a:	2300      	movs	r3, #0
 800586c:	e232      	b.n	8005cd4 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	799b      	ldrb	r3, [r3, #6]
 8005872:	2b01      	cmp	r3, #1
 8005874:	d158      	bne.n	8005928 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8005876:	2301      	movs	r3, #1
 8005878:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	78db      	ldrb	r3, [r3, #3]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d007      	beq.n	8005892 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005882:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005884:	68ba      	ldr	r2, [r7, #8]
 8005886:	8a92      	ldrh	r2, [r2, #20]
 8005888:	fb03 f202 	mul.w	r2, r3, r2
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	61da      	str	r2, [r3, #28]
 8005890:	e07c      	b.n	800598c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	7c9b      	ldrb	r3, [r3, #18]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d130      	bne.n	80058fc <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	2bbc      	cmp	r3, #188	@ 0xbc
 80058a0:	d918      	bls.n	80058d4 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	8a9b      	ldrh	r3, [r3, #20]
 80058a6:	461a      	mov	r2, r3
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	69da      	ldr	r2, [r3, #28]
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d003      	beq.n	80058c4 <USB_HC_StartXfer+0xdc>
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d103      	bne.n	80058cc <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	2202      	movs	r2, #2
 80058c8:	60da      	str	r2, [r3, #12]
 80058ca:	e05f      	b.n	800598c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	2201      	movs	r2, #1
 80058d0:	60da      	str	r2, [r3, #12]
 80058d2:	e05b      	b.n	800598c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	6a1a      	ldr	r2, [r3, #32]
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d007      	beq.n	80058f4 <USB_HC_StartXfer+0x10c>
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d003      	beq.n	80058f4 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	2204      	movs	r2, #4
 80058f0:	60da      	str	r2, [r3, #12]
 80058f2:	e04b      	b.n	800598c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	2203      	movs	r2, #3
 80058f8:	60da      	str	r2, [r3, #12]
 80058fa:	e047      	b.n	800598c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80058fc:	79fb      	ldrb	r3, [r7, #7]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d10d      	bne.n	800591e <USB_HC_StartXfer+0x136>
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	8a92      	ldrh	r2, [r2, #20]
 800590a:	4293      	cmp	r3, r2
 800590c:	d907      	bls.n	800591e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800590e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	8a92      	ldrh	r2, [r2, #20]
 8005914:	fb03 f202 	mul.w	r2, r3, r2
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	61da      	str	r2, [r3, #28]
 800591c:	e036      	b.n	800598c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	6a1a      	ldr	r2, [r3, #32]
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	61da      	str	r2, [r3, #28]
 8005926:	e031      	b.n	800598c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	6a1b      	ldr	r3, [r3, #32]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d018      	beq.n	8005962 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	6a1b      	ldr	r3, [r3, #32]
 8005934:	68ba      	ldr	r2, [r7, #8]
 8005936:	8a92      	ldrh	r2, [r2, #20]
 8005938:	4413      	add	r3, r2
 800593a:	3b01      	subs	r3, #1
 800593c:	68ba      	ldr	r2, [r7, #8]
 800593e:	8a92      	ldrh	r2, [r2, #20]
 8005940:	fbb3 f3f2 	udiv	r3, r3, r2
 8005944:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8005946:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005948:	8b7b      	ldrh	r3, [r7, #26]
 800594a:	429a      	cmp	r2, r3
 800594c:	d90b      	bls.n	8005966 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800594e:	8b7b      	ldrh	r3, [r7, #26]
 8005950:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005952:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	8a92      	ldrh	r2, [r2, #20]
 8005958:	fb03 f202 	mul.w	r2, r3, r2
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	61da      	str	r2, [r3, #28]
 8005960:	e001      	b.n	8005966 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8005962:	2301      	movs	r3, #1
 8005964:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	78db      	ldrb	r3, [r3, #3]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00a      	beq.n	8005984 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800596e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	8a92      	ldrh	r2, [r2, #20]
 8005974:	fb03 f202 	mul.w	r2, r3, r2
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	61da      	str	r2, [r3, #28]
 800597c:	e006      	b.n	800598c <USB_HC_StartXfer+0x1a4>
 800597e:	bf00      	nop
 8005980:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	6a1a      	ldr	r2, [r3, #32]
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	69db      	ldr	r3, [r3, #28]
 8005990:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005994:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005996:	04d9      	lsls	r1, r3, #19
 8005998:	4ba3      	ldr	r3, [pc, #652]	@ (8005c28 <USB_HC_StartXfer+0x440>)
 800599a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800599c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	7d9b      	ldrb	r3, [r3, #22]
 80059a2:	075b      	lsls	r3, r3, #29
 80059a4:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80059a8:	69f9      	ldr	r1, [r7, #28]
 80059aa:	0148      	lsls	r0, r1, #5
 80059ac:	6a39      	ldr	r1, [r7, #32]
 80059ae:	4401      	add	r1, r0
 80059b0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80059b4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80059b6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80059b8:	79fb      	ldrb	r3, [r7, #7]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d009      	beq.n	80059d2 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	6999      	ldr	r1, [r3, #24]
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	015a      	lsls	r2, r3, #5
 80059c6:	6a3b      	ldr	r3, [r7, #32]
 80059c8:	4413      	add	r3, r2
 80059ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059ce:	460a      	mov	r2, r1
 80059d0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80059d2:	6a3b      	ldr	r3, [r7, #32]
 80059d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b00      	cmp	r3, #0
 80059e0:	bf0c      	ite	eq
 80059e2:	2301      	moveq	r3, #1
 80059e4:	2300      	movne	r3, #0
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	015a      	lsls	r2, r3, #5
 80059ee:	6a3b      	ldr	r3, [r7, #32]
 80059f0:	4413      	add	r3, r2
 80059f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	69fa      	ldr	r2, [r7, #28]
 80059fa:	0151      	lsls	r1, r2, #5
 80059fc:	6a3a      	ldr	r2, [r7, #32]
 80059fe:	440a      	add	r2, r1
 8005a00:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a04:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005a08:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	6a3b      	ldr	r3, [r7, #32]
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	7e7b      	ldrb	r3, [r7, #25]
 8005a1a:	075b      	lsls	r3, r3, #29
 8005a1c:	69f9      	ldr	r1, [r7, #28]
 8005a1e:	0148      	lsls	r0, r1, #5
 8005a20:	6a39      	ldr	r1, [r7, #32]
 8005a22:	4401      	add	r1, r0
 8005a24:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	799b      	ldrb	r3, [r3, #6]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	f040 80c3 	bne.w	8005bbc <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	7c5b      	ldrb	r3, [r3, #17]
 8005a3a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005a40:	4313      	orrs	r3, r2
 8005a42:	69fa      	ldr	r2, [r7, #28]
 8005a44:	0151      	lsls	r1, r2, #5
 8005a46:	6a3a      	ldr	r2, [r7, #32]
 8005a48:	440a      	add	r2, r1
 8005a4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005a4e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005a52:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	015a      	lsls	r2, r3, #5
 8005a58:	6a3b      	ldr	r3, [r7, #32]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	69fa      	ldr	r2, [r7, #28]
 8005a64:	0151      	lsls	r1, r2, #5
 8005a66:	6a3a      	ldr	r2, [r7, #32]
 8005a68:	440a      	add	r2, r1
 8005a6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a6e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005a72:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	79db      	ldrb	r3, [r3, #7]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d123      	bne.n	8005ac4 <USB_HC_StartXfer+0x2dc>
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	78db      	ldrb	r3, [r3, #3]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d11f      	bne.n	8005ac4 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	015a      	lsls	r2, r3, #5
 8005a88:	6a3b      	ldr	r3, [r7, #32]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	69fa      	ldr	r2, [r7, #28]
 8005a94:	0151      	lsls	r1, r2, #5
 8005a96:	6a3a      	ldr	r2, [r7, #32]
 8005a98:	440a      	add	r2, r1
 8005a9a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005aa2:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	6a3b      	ldr	r3, [r7, #32]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	69fa      	ldr	r2, [r7, #28]
 8005ab4:	0151      	lsls	r1, r2, #5
 8005ab6:	6a3a      	ldr	r2, [r7, #32]
 8005ab8:	440a      	add	r2, r1
 8005aba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005abe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ac2:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	7c9b      	ldrb	r3, [r3, #18]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d003      	beq.n	8005ad4 <USB_HC_StartXfer+0x2ec>
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	7c9b      	ldrb	r3, [r3, #18]
 8005ad0:	2b03      	cmp	r3, #3
 8005ad2:	d117      	bne.n	8005b04 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d113      	bne.n	8005b04 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	78db      	ldrb	r3, [r3, #3]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d10f      	bne.n	8005b04 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	015a      	lsls	r2, r3, #5
 8005ae8:	6a3b      	ldr	r3, [r7, #32]
 8005aea:	4413      	add	r3, r2
 8005aec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	69fa      	ldr	r2, [r7, #28]
 8005af4:	0151      	lsls	r1, r2, #5
 8005af6:	6a3a      	ldr	r2, [r7, #32]
 8005af8:	440a      	add	r2, r1
 8005afa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005afe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b02:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	7c9b      	ldrb	r3, [r3, #18]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d162      	bne.n	8005bd2 <USB_HC_StartXfer+0x3ea>
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	78db      	ldrb	r3, [r3, #3]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d15e      	bne.n	8005bd2 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	2b03      	cmp	r3, #3
 8005b1c:	d858      	bhi.n	8005bd0 <USB_HC_StartXfer+0x3e8>
 8005b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8005b24 <USB_HC_StartXfer+0x33c>)
 8005b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b24:	08005b35 	.word	0x08005b35
 8005b28:	08005b57 	.word	0x08005b57
 8005b2c:	08005b79 	.word	0x08005b79
 8005b30:	08005b9b 	.word	0x08005b9b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	015a      	lsls	r2, r3, #5
 8005b38:	6a3b      	ldr	r3, [r7, #32]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	69fa      	ldr	r2, [r7, #28]
 8005b44:	0151      	lsls	r1, r2, #5
 8005b46:	6a3a      	ldr	r2, [r7, #32]
 8005b48:	440a      	add	r2, r1
 8005b4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b52:	6053      	str	r3, [r2, #4]
          break;
 8005b54:	e03d      	b.n	8005bd2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	015a      	lsls	r2, r3, #5
 8005b5a:	6a3b      	ldr	r3, [r7, #32]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	69fa      	ldr	r2, [r7, #28]
 8005b66:	0151      	lsls	r1, r2, #5
 8005b68:	6a3a      	ldr	r2, [r7, #32]
 8005b6a:	440a      	add	r2, r1
 8005b6c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b70:	f043 030e 	orr.w	r3, r3, #14
 8005b74:	6053      	str	r3, [r2, #4]
          break;
 8005b76:	e02c      	b.n	8005bd2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	015a      	lsls	r2, r3, #5
 8005b7c:	6a3b      	ldr	r3, [r7, #32]
 8005b7e:	4413      	add	r3, r2
 8005b80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	69fa      	ldr	r2, [r7, #28]
 8005b88:	0151      	lsls	r1, r2, #5
 8005b8a:	6a3a      	ldr	r2, [r7, #32]
 8005b8c:	440a      	add	r2, r1
 8005b8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005b96:	6053      	str	r3, [r2, #4]
          break;
 8005b98:	e01b      	b.n	8005bd2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	015a      	lsls	r2, r3, #5
 8005b9e:	6a3b      	ldr	r3, [r7, #32]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	69fa      	ldr	r2, [r7, #28]
 8005baa:	0151      	lsls	r1, r2, #5
 8005bac:	6a3a      	ldr	r2, [r7, #32]
 8005bae:	440a      	add	r2, r1
 8005bb0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bb4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005bb8:	6053      	str	r3, [r2, #4]
          break;
 8005bba:	e00a      	b.n	8005bd2 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	6a3b      	ldr	r3, [r7, #32]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bc8:	461a      	mov	r2, r3
 8005bca:	2300      	movs	r3, #0
 8005bcc:	6053      	str	r3, [r2, #4]
 8005bce:	e000      	b.n	8005bd2 <USB_HC_StartXfer+0x3ea>
          break;
 8005bd0:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	015a      	lsls	r2, r3, #5
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
 8005bd8:	4413      	add	r3, r2
 8005bda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005be8:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	78db      	ldrb	r3, [r3, #3]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d004      	beq.n	8005bfc <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bf8:	613b      	str	r3, [r7, #16]
 8005bfa:	e003      	b.n	8005c04 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005c02:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005c0a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	6a3b      	ldr	r3, [r7, #32]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c18:	461a      	mov	r2, r3
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005c1e:	79fb      	ldrb	r3, [r7, #7]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d003      	beq.n	8005c2c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8005c24:	2300      	movs	r3, #0
 8005c26:	e055      	b.n	8005cd4 <USB_HC_StartXfer+0x4ec>
 8005c28:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	78db      	ldrb	r3, [r3, #3]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d14e      	bne.n	8005cd2 <USB_HC_StartXfer+0x4ea>
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	6a1b      	ldr	r3, [r3, #32]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d04a      	beq.n	8005cd2 <USB_HC_StartXfer+0x4ea>
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	79db      	ldrb	r3, [r3, #7]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d146      	bne.n	8005cd2 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	7c9b      	ldrb	r3, [r3, #18]
 8005c48:	2b03      	cmp	r3, #3
 8005c4a:	d831      	bhi.n	8005cb0 <USB_HC_StartXfer+0x4c8>
 8005c4c:	a201      	add	r2, pc, #4	@ (adr r2, 8005c54 <USB_HC_StartXfer+0x46c>)
 8005c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c52:	bf00      	nop
 8005c54:	08005c65 	.word	0x08005c65
 8005c58:	08005c89 	.word	0x08005c89
 8005c5c:	08005c65 	.word	0x08005c65
 8005c60:	08005c89 	.word	0x08005c89
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	6a1b      	ldr	r3, [r3, #32]
 8005c68:	3303      	adds	r3, #3
 8005c6a:	089b      	lsrs	r3, r3, #2
 8005c6c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005c6e:	8afa      	ldrh	r2, [r7, #22]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d91c      	bls.n	8005cb4 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	f043 0220 	orr.w	r2, r3, #32
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	619a      	str	r2, [r3, #24]
        }
        break;
 8005c86:	e015      	b.n	8005cb4 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	6a1b      	ldr	r3, [r3, #32]
 8005c8c:	3303      	adds	r3, #3
 8005c8e:	089b      	lsrs	r3, r3, #2
 8005c90:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005c92:	8afa      	ldrh	r2, [r7, #22]
 8005c94:	6a3b      	ldr	r3, [r7, #32]
 8005c96:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d90a      	bls.n	8005cb8 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	619a      	str	r2, [r3, #24]
        }
        break;
 8005cae:	e003      	b.n	8005cb8 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8005cb0:	bf00      	nop
 8005cb2:	e002      	b.n	8005cba <USB_HC_StartXfer+0x4d2>
        break;
 8005cb4:	bf00      	nop
 8005cb6:	e000      	b.n	8005cba <USB_HC_StartXfer+0x4d2>
        break;
 8005cb8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	6999      	ldr	r1, [r3, #24]
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	785a      	ldrb	r2, [r3, #1]
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	2000      	movs	r0, #0
 8005cca:	9000      	str	r0, [sp, #0]
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f7ff f9ca 	bl	8005066 <USB_WritePacket>
  }

  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3728      	adds	r7, #40	@ 0x28
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005cee:	695b      	ldr	r3, [r3, #20]
 8005cf0:	b29b      	uxth	r3, r3
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3714      	adds	r7, #20
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b089      	sub	sp, #36	@ 0x24
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
 8005d06:	460b      	mov	r3, r1
 8005d08:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005d0e:	78fb      	ldrb	r3, [r7, #3]
 8005d10:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005d12:	2300      	movs	r3, #0
 8005d14:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	015a      	lsls	r2, r3, #5
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	0c9b      	lsrs	r3, r3, #18
 8005d26:	f003 0303 	and.w	r3, r3, #3
 8005d2a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	0fdb      	lsrs	r3, r3, #31
 8005d3c:	f003 0301 	and.w	r3, r3, #1
 8005d40:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	015a      	lsls	r2, r3, #5
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	0fdb      	lsrs	r3, r3, #31
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f003 0320 	and.w	r3, r3, #32
 8005d60:	2b20      	cmp	r3, #32
 8005d62:	d10d      	bne.n	8005d80 <USB_HC_Halt+0x82>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d10a      	bne.n	8005d80 <USB_HC_Halt+0x82>
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d005      	beq.n	8005d7c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d002      	beq.n	8005d7c <USB_HC_Halt+0x7e>
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	2b03      	cmp	r3, #3
 8005d7a:	d101      	bne.n	8005d80 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	e0d8      	b.n	8005f32 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d002      	beq.n	8005d8c <USB_HC_Halt+0x8e>
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d173      	bne.n	8005e74 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	015a      	lsls	r2, r3, #5
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	4413      	add	r3, r2
 8005d94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	0151      	lsls	r1, r2, #5
 8005d9e:	69fa      	ldr	r2, [r7, #28]
 8005da0:	440a      	add	r2, r1
 8005da2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005da6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005daa:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f003 0320 	and.w	r3, r3, #32
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d14a      	bne.n	8005e4e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dbc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d133      	bne.n	8005e2c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	69ba      	ldr	r2, [r7, #24]
 8005dd4:	0151      	lsls	r1, r2, #5
 8005dd6:	69fa      	ldr	r2, [r7, #28]
 8005dd8:	440a      	add	r2, r1
 8005dda:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005dde:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005de2:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	015a      	lsls	r2, r3, #5
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	4413      	add	r3, r2
 8005dec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	69ba      	ldr	r2, [r7, #24]
 8005df4:	0151      	lsls	r1, r2, #5
 8005df6:	69fa      	ldr	r2, [r7, #28]
 8005df8:	440a      	add	r2, r1
 8005dfa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005dfe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e02:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	3301      	adds	r3, #1
 8005e08:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e10:	d82e      	bhi.n	8005e70 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	015a      	lsls	r2, r3, #5
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	4413      	add	r3, r2
 8005e1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e28:	d0ec      	beq.n	8005e04 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e2a:	e081      	b.n	8005f30 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	015a      	lsls	r2, r3, #5
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	4413      	add	r3, r2
 8005e34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	69ba      	ldr	r2, [r7, #24]
 8005e3c:	0151      	lsls	r1, r2, #5
 8005e3e:	69fa      	ldr	r2, [r7, #28]
 8005e40:	440a      	add	r2, r1
 8005e42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e4a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e4c:	e070      	b.n	8005f30 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	015a      	lsls	r2, r3, #5
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	4413      	add	r3, r2
 8005e56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	69ba      	ldr	r2, [r7, #24]
 8005e5e:	0151      	lsls	r1, r2, #5
 8005e60:	69fa      	ldr	r2, [r7, #28]
 8005e62:	440a      	add	r2, r1
 8005e64:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e68:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e6c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e6e:	e05f      	b.n	8005f30 <USB_HC_Halt+0x232>
            break;
 8005e70:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e72:	e05d      	b.n	8005f30 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	015a      	lsls	r2, r3, #5
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	69ba      	ldr	r2, [r7, #24]
 8005e84:	0151      	lsls	r1, r2, #5
 8005e86:	69fa      	ldr	r2, [r7, #28]
 8005e88:	440a      	add	r2, r1
 8005e8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e8e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e92:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d133      	bne.n	8005f0c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	015a      	lsls	r2, r3, #5
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	4413      	add	r3, r2
 8005eac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	69ba      	ldr	r2, [r7, #24]
 8005eb4:	0151      	lsls	r1, r2, #5
 8005eb6:	69fa      	ldr	r2, [r7, #28]
 8005eb8:	440a      	add	r2, r1
 8005eba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ebe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005ec2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	69ba      	ldr	r2, [r7, #24]
 8005ed4:	0151      	lsls	r1, r2, #5
 8005ed6:	69fa      	ldr	r2, [r7, #28]
 8005ed8:	440a      	add	r2, r1
 8005eda:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ede:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005ee2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005ef0:	d81d      	bhi.n	8005f2e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	015a      	lsls	r2, r3, #5
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	4413      	add	r3, r2
 8005efa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f04:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f08:	d0ec      	beq.n	8005ee4 <USB_HC_Halt+0x1e6>
 8005f0a:	e011      	b.n	8005f30 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	015a      	lsls	r2, r3, #5
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	69ba      	ldr	r2, [r7, #24]
 8005f1c:	0151      	lsls	r1, r2, #5
 8005f1e:	69fa      	ldr	r2, [r7, #28]
 8005f20:	440a      	add	r2, r1
 8005f22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f2a:	6013      	str	r3, [r2, #0]
 8005f2c:	e000      	b.n	8005f30 <USB_HC_Halt+0x232>
          break;
 8005f2e:	bf00      	nop
    }
  }

  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3724      	adds	r7, #36	@ 0x24
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
	...

08005f40 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b087      	sub	sp, #28
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	460b      	mov	r3, r1
 8005f4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005f50:	78fb      	ldrb	r3, [r7, #3]
 8005f52:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005f54:	2301      	movs	r3, #1
 8005f56:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	04da      	lsls	r2, r3, #19
 8005f5c:	4b15      	ldr	r3, [pc, #84]	@ (8005fb4 <USB_DoPing+0x74>)
 8005f5e:	4013      	ands	r3, r2
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	0151      	lsls	r1, r2, #5
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	440a      	add	r2, r1
 8005f68:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f6c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f70:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005f88:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f90:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	371c      	adds	r7, #28
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	1ff80000 	.word	0x1ff80000

08005fb8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b088      	sub	sp, #32
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f7fe ff8d 	bl	8004eec <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005fd2:	2110      	movs	r1, #16
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f7fe ffe6 	bl	8004fa6 <USB_FlushTxFifo>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f7ff f810 	bl	800500a <USB_FlushRxFifo>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d001      	beq.n	8005ff4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	61bb      	str	r3, [r7, #24]
 8005ff8:	e01f      	b.n	800603a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	015a      	lsls	r2, r3, #5
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	4413      	add	r3, r2
 8006002:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006010:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006018:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006020:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	015a      	lsls	r2, r3, #5
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	4413      	add	r3, r2
 800602a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800602e:	461a      	mov	r2, r3
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	3301      	adds	r3, #1
 8006038:	61bb      	str	r3, [r7, #24]
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	2b0f      	cmp	r3, #15
 800603e:	d9dc      	bls.n	8005ffa <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006040:	2300      	movs	r3, #0
 8006042:	61bb      	str	r3, [r7, #24]
 8006044:	e034      	b.n	80060b0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	015a      	lsls	r2, r3, #5
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	4413      	add	r3, r2
 800604e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800605c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006064:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800606c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	015a      	lsls	r2, r3, #5
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	4413      	add	r3, r2
 8006076:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800607a:	461a      	mov	r2, r3
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	3301      	adds	r3, #1
 8006084:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800608c:	d80c      	bhi.n	80060a8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	015a      	lsls	r2, r3, #5
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	4413      	add	r3, r2
 8006096:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80060a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060a4:	d0ec      	beq.n	8006080 <USB_StopHost+0xc8>
 80060a6:	e000      	b.n	80060aa <USB_StopHost+0xf2>
        break;
 80060a8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	3301      	adds	r3, #1
 80060ae:	61bb      	str	r3, [r7, #24]
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	2b0f      	cmp	r3, #15
 80060b4:	d9c7      	bls.n	8006046 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80060bc:	461a      	mov	r2, r3
 80060be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80060c2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80060ca:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f7fe fefc 	bl	8004eca <USB_EnableGlobalInt>

  return ret;
 80060d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3720      	adds	r7, #32
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80060dc:	b590      	push	{r4, r7, lr}
 80060de:	b089      	sub	sp, #36	@ 0x24
 80060e0:	af04      	add	r7, sp, #16
 80060e2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80060e4:	2301      	movs	r3, #1
 80060e6:	2202      	movs	r2, #2
 80060e8:	2102      	movs	r1, #2
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 fc85 	bl	80069fa <USBH_FindInterface>
 80060f0:	4603      	mov	r3, r0
 80060f2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80060f4:	7bfb      	ldrb	r3, [r7, #15]
 80060f6:	2bff      	cmp	r3, #255	@ 0xff
 80060f8:	d002      	beq.n	8006100 <USBH_CDC_InterfaceInit+0x24>
 80060fa:	7bfb      	ldrb	r3, [r7, #15]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d901      	bls.n	8006104 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006100:	2302      	movs	r3, #2
 8006102:	e13d      	b.n	8006380 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006104:	7bfb      	ldrb	r3, [r7, #15]
 8006106:	4619      	mov	r1, r3
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 fc5a 	bl	80069c2 <USBH_SelectInterface>
 800610e:	4603      	mov	r3, r0
 8006110:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006112:	7bbb      	ldrb	r3, [r7, #14]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d001      	beq.n	800611c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006118:	2302      	movs	r3, #2
 800611a:	e131      	b.n	8006380 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8006122:	2050      	movs	r0, #80	@ 0x50
 8006124:	f002 fb64 	bl	80087f0 <malloc>
 8006128:	4603      	mov	r3, r0
 800612a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006132:	69db      	ldr	r3, [r3, #28]
 8006134:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d101      	bne.n	8006140 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800613c:	2302      	movs	r3, #2
 800613e:	e11f      	b.n	8006380 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006140:	2250      	movs	r2, #80	@ 0x50
 8006142:	2100      	movs	r1, #0
 8006144:	68b8      	ldr	r0, [r7, #8]
 8006146:	f002 fc11 	bl	800896c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800614a:	7bfb      	ldrb	r3, [r7, #15]
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	211a      	movs	r1, #26
 8006150:	fb01 f303 	mul.w	r3, r1, r3
 8006154:	4413      	add	r3, r2
 8006156:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	b25b      	sxtb	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	da15      	bge.n	800618e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006162:	7bfb      	ldrb	r3, [r7, #15]
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	211a      	movs	r1, #26
 8006168:	fb01 f303 	mul.w	r3, r1, r3
 800616c:	4413      	add	r3, r2
 800616e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006172:	781a      	ldrb	r2, [r3, #0]
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006178:	7bfb      	ldrb	r3, [r7, #15]
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	211a      	movs	r1, #26
 800617e:	fb01 f303 	mul.w	r3, r1, r3
 8006182:	4413      	add	r3, r2
 8006184:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006188:	881a      	ldrh	r2, [r3, #0]
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	785b      	ldrb	r3, [r3, #1]
 8006192:	4619      	mov	r1, r3
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f001 ffbe 	bl	8008116 <USBH_AllocPipe>
 800619a:	4603      	mov	r3, r0
 800619c:	461a      	mov	r2, r3
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	7819      	ldrb	r1, [r3, #0]
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	7858      	ldrb	r0, [r3, #1]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	8952      	ldrh	r2, [r2, #10]
 80061ba:	9202      	str	r2, [sp, #8]
 80061bc:	2203      	movs	r2, #3
 80061be:	9201      	str	r2, [sp, #4]
 80061c0:	9300      	str	r3, [sp, #0]
 80061c2:	4623      	mov	r3, r4
 80061c4:	4602      	mov	r2, r0
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f001 ff76 	bl	80080b8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	2200      	movs	r2, #0
 80061d2:	4619      	mov	r1, r3
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f002 fa85 	bl	80086e4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80061da:	2300      	movs	r3, #0
 80061dc:	2200      	movs	r2, #0
 80061de:	210a      	movs	r1, #10
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 fc0a 	bl	80069fa <USBH_FindInterface>
 80061e6:	4603      	mov	r3, r0
 80061e8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80061ea:	7bfb      	ldrb	r3, [r7, #15]
 80061ec:	2bff      	cmp	r3, #255	@ 0xff
 80061ee:	d002      	beq.n	80061f6 <USBH_CDC_InterfaceInit+0x11a>
 80061f0:	7bfb      	ldrb	r3, [r7, #15]
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d901      	bls.n	80061fa <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80061f6:	2302      	movs	r3, #2
 80061f8:	e0c2      	b.n	8006380 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80061fa:	7bfb      	ldrb	r3, [r7, #15]
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	211a      	movs	r1, #26
 8006200:	fb01 f303 	mul.w	r3, r1, r3
 8006204:	4413      	add	r3, r2
 8006206:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	b25b      	sxtb	r3, r3
 800620e:	2b00      	cmp	r3, #0
 8006210:	da16      	bge.n	8006240 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006212:	7bfb      	ldrb	r3, [r7, #15]
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	211a      	movs	r1, #26
 8006218:	fb01 f303 	mul.w	r3, r1, r3
 800621c:	4413      	add	r3, r2
 800621e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006222:	781a      	ldrb	r2, [r3, #0]
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006228:	7bfb      	ldrb	r3, [r7, #15]
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	211a      	movs	r1, #26
 800622e:	fb01 f303 	mul.w	r3, r1, r3
 8006232:	4413      	add	r3, r2
 8006234:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006238:	881a      	ldrh	r2, [r3, #0]
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	835a      	strh	r2, [r3, #26]
 800623e:	e015      	b.n	800626c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006240:	7bfb      	ldrb	r3, [r7, #15]
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	211a      	movs	r1, #26
 8006246:	fb01 f303 	mul.w	r3, r1, r3
 800624a:	4413      	add	r3, r2
 800624c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006250:	781a      	ldrb	r2, [r3, #0]
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006256:	7bfb      	ldrb	r3, [r7, #15]
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	211a      	movs	r1, #26
 800625c:	fb01 f303 	mul.w	r3, r1, r3
 8006260:	4413      	add	r3, r2
 8006262:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006266:	881a      	ldrh	r2, [r3, #0]
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800626c:	7bfb      	ldrb	r3, [r7, #15]
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	211a      	movs	r1, #26
 8006272:	fb01 f303 	mul.w	r3, r1, r3
 8006276:	4413      	add	r3, r2
 8006278:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	b25b      	sxtb	r3, r3
 8006280:	2b00      	cmp	r3, #0
 8006282:	da16      	bge.n	80062b2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006284:	7bfb      	ldrb	r3, [r7, #15]
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	211a      	movs	r1, #26
 800628a:	fb01 f303 	mul.w	r3, r1, r3
 800628e:	4413      	add	r3, r2
 8006290:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006294:	781a      	ldrb	r2, [r3, #0]
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800629a:	7bfb      	ldrb	r3, [r7, #15]
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	211a      	movs	r1, #26
 80062a0:	fb01 f303 	mul.w	r3, r1, r3
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80062aa:	881a      	ldrh	r2, [r3, #0]
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	835a      	strh	r2, [r3, #26]
 80062b0:	e015      	b.n	80062de <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80062b2:	7bfb      	ldrb	r3, [r7, #15]
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	211a      	movs	r1, #26
 80062b8:	fb01 f303 	mul.w	r3, r1, r3
 80062bc:	4413      	add	r3, r2
 80062be:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80062c2:	781a      	ldrb	r2, [r3, #0]
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80062c8:	7bfb      	ldrb	r3, [r7, #15]
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	211a      	movs	r1, #26
 80062ce:	fb01 f303 	mul.w	r3, r1, r3
 80062d2:	4413      	add	r3, r2
 80062d4:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80062d8:	881a      	ldrh	r2, [r3, #0]
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	7b9b      	ldrb	r3, [r3, #14]
 80062e2:	4619      	mov	r1, r3
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f001 ff16 	bl	8008116 <USBH_AllocPipe>
 80062ea:	4603      	mov	r3, r0
 80062ec:	461a      	mov	r2, r3
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	7bdb      	ldrb	r3, [r3, #15]
 80062f6:	4619      	mov	r1, r3
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f001 ff0c 	bl	8008116 <USBH_AllocPipe>
 80062fe:	4603      	mov	r3, r0
 8006300:	461a      	mov	r2, r3
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	7b59      	ldrb	r1, [r3, #13]
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	7b98      	ldrb	r0, [r3, #14]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	8b12      	ldrh	r2, [r2, #24]
 800631e:	9202      	str	r2, [sp, #8]
 8006320:	2202      	movs	r2, #2
 8006322:	9201      	str	r2, [sp, #4]
 8006324:	9300      	str	r3, [sp, #0]
 8006326:	4623      	mov	r3, r4
 8006328:	4602      	mov	r2, r0
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f001 fec4 	bl	80080b8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	7b19      	ldrb	r1, [r3, #12]
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	7bd8      	ldrb	r0, [r3, #15]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006344:	68ba      	ldr	r2, [r7, #8]
 8006346:	8b52      	ldrh	r2, [r2, #26]
 8006348:	9202      	str	r2, [sp, #8]
 800634a:	2202      	movs	r2, #2
 800634c:	9201      	str	r2, [sp, #4]
 800634e:	9300      	str	r3, [sp, #0]
 8006350:	4623      	mov	r3, r4
 8006352:	4602      	mov	r2, r0
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f001 feaf 	bl	80080b8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	7b5b      	ldrb	r3, [r3, #13]
 8006366:	2200      	movs	r2, #0
 8006368:	4619      	mov	r1, r3
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f002 f9ba 	bl	80086e4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	7b1b      	ldrb	r3, [r3, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	4619      	mov	r1, r3
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f002 f9b3 	bl	80086e4 <USBH_LL_SetToggle>

  return USBH_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3714      	adds	r7, #20
 8006384:	46bd      	mov	sp, r7
 8006386:	bd90      	pop	{r4, r7, pc}

08006388 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006396:	69db      	ldr	r3, [r3, #28]
 8006398:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00e      	beq.n	80063c0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	4619      	mov	r1, r3
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f001 fea4 	bl	80080f6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	4619      	mov	r1, r3
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f001 fecf 	bl	8008158 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	7b1b      	ldrb	r3, [r3, #12]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00e      	beq.n	80063e6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	7b1b      	ldrb	r3, [r3, #12]
 80063cc:	4619      	mov	r1, r3
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f001 fe91 	bl	80080f6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	7b1b      	ldrb	r3, [r3, #12]
 80063d8:	4619      	mov	r1, r3
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f001 febc 	bl	8008158 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	7b5b      	ldrb	r3, [r3, #13]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00e      	beq.n	800640c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	7b5b      	ldrb	r3, [r3, #13]
 80063f2:	4619      	mov	r1, r3
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f001 fe7e 	bl	80080f6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	7b5b      	ldrb	r3, [r3, #13]
 80063fe:	4619      	mov	r1, r3
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f001 fea9 	bl	8008158 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006412:	69db      	ldr	r3, [r3, #28]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00b      	beq.n	8006430 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800641e:	69db      	ldr	r3, [r3, #28]
 8006420:	4618      	mov	r0, r3
 8006422:	f002 f9ed 	bl	8008800 <free>
    phost->pActiveClass->pData = 0U;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800642c:	2200      	movs	r2, #0
 800642e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b084      	sub	sp, #16
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006448:	69db      	ldr	r3, [r3, #28]
 800644a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	3340      	adds	r3, #64	@ 0x40
 8006450:	4619      	mov	r1, r3
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 f8b1 	bl	80065ba <GetLineCoding>
 8006458:	4603      	mov	r3, r0
 800645a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800645c:	7afb      	ldrb	r3, [r7, #11]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d105      	bne.n	800646e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006468:	2102      	movs	r1, #2
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800646e:	7afb      	ldrb	r3, [r7, #11]
}
 8006470:	4618      	mov	r0, r3
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006480:	2301      	movs	r3, #1
 8006482:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006484:	2300      	movs	r3, #0
 8006486:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800648e:	69db      	ldr	r3, [r3, #28]
 8006490:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006498:	2b04      	cmp	r3, #4
 800649a:	d877      	bhi.n	800658c <USBH_CDC_Process+0x114>
 800649c:	a201      	add	r2, pc, #4	@ (adr r2, 80064a4 <USBH_CDC_Process+0x2c>)
 800649e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a2:	bf00      	nop
 80064a4:	080064b9 	.word	0x080064b9
 80064a8:	080064bf 	.word	0x080064bf
 80064ac:	080064ef 	.word	0x080064ef
 80064b0:	08006563 	.word	0x08006563
 80064b4:	08006571 	.word	0x08006571
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80064b8:	2300      	movs	r3, #0
 80064ba:	73fb      	strb	r3, [r7, #15]
      break;
 80064bc:	e06d      	b.n	800659a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064c2:	4619      	mov	r1, r3
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 f897 	bl	80065f8 <SetLineCoding>
 80064ca:	4603      	mov	r3, r0
 80064cc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80064ce:	7bbb      	ldrb	r3, [r7, #14]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d104      	bne.n	80064de <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	2202      	movs	r2, #2
 80064d8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80064dc:	e058      	b.n	8006590 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80064de:	7bbb      	ldrb	r3, [r7, #14]
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d055      	beq.n	8006590 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	2204      	movs	r2, #4
 80064e8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80064ec:	e050      	b.n	8006590 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	3340      	adds	r3, #64	@ 0x40
 80064f2:	4619      	mov	r1, r3
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 f860 	bl	80065ba <GetLineCoding>
 80064fa:	4603      	mov	r3, r0
 80064fc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80064fe:	7bbb      	ldrb	r3, [r7, #14]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d126      	bne.n	8006552 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006516:	791b      	ldrb	r3, [r3, #4]
 8006518:	429a      	cmp	r2, r3
 800651a:	d13b      	bne.n	8006594 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006526:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006528:	429a      	cmp	r2, r3
 800652a:	d133      	bne.n	8006594 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006536:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006538:	429a      	cmp	r2, r3
 800653a:	d12b      	bne.n	8006594 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006544:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006546:	429a      	cmp	r2, r3
 8006548:	d124      	bne.n	8006594 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f958 	bl	8006800 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006550:	e020      	b.n	8006594 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006552:	7bbb      	ldrb	r3, [r7, #14]
 8006554:	2b01      	cmp	r3, #1
 8006556:	d01d      	beq.n	8006594 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	2204      	movs	r2, #4
 800655c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006560:	e018      	b.n	8006594 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 f867 	bl	8006636 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 f8da 	bl	8006722 <CDC_ProcessReception>
      break;
 800656e:	e014      	b.n	800659a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006570:	2100      	movs	r1, #0
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f001 f81a 	bl	80075ac <USBH_ClrFeature>
 8006578:	4603      	mov	r3, r0
 800657a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800657c:	7bbb      	ldrb	r3, [r7, #14]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d10a      	bne.n	8006598 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800658a:	e005      	b.n	8006598 <USBH_CDC_Process+0x120>

    default:
      break;
 800658c:	bf00      	nop
 800658e:	e004      	b.n	800659a <USBH_CDC_Process+0x122>
      break;
 8006590:	bf00      	nop
 8006592:	e002      	b.n	800659a <USBH_CDC_Process+0x122>
      break;
 8006594:	bf00      	nop
 8006596:	e000      	b.n	800659a <USBH_CDC_Process+0x122>
      break;
 8006598:	bf00      	nop

  }

  return status;
 800659a:	7bfb      	ldrb	r3, [r7, #15]
}
 800659c:	4618      	mov	r0, r3
 800659e:	3710      	adds	r7, #16
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	370c      	adds	r7, #12
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr

080065ba <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b082      	sub	sp, #8
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
 80065c2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	22a1      	movs	r2, #161	@ 0xa1
 80065c8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2221      	movs	r2, #33	@ 0x21
 80065ce:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2207      	movs	r2, #7
 80065e0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	2207      	movs	r2, #7
 80065e6:	4619      	mov	r1, r3
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f001 fb14 	bl	8007c16 <USBH_CtlReq>
 80065ee:	4603      	mov	r3, r0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3708      	adds	r7, #8
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2221      	movs	r2, #33	@ 0x21
 8006606:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2220      	movs	r2, #32
 800660c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2207      	movs	r2, #7
 800661e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	2207      	movs	r2, #7
 8006624:	4619      	mov	r1, r3
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f001 faf5 	bl	8007c16 <USBH_CtlReq>
 800662c:	4603      	mov	r3, r0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3708      	adds	r7, #8
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006636:	b580      	push	{r7, lr}
 8006638:	b086      	sub	sp, #24
 800663a:	af02      	add	r7, sp, #8
 800663c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006644:	69db      	ldr	r3, [r3, #28]
 8006646:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006648:	2300      	movs	r3, #0
 800664a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006652:	2b01      	cmp	r3, #1
 8006654:	d002      	beq.n	800665c <CDC_ProcessTransmission+0x26>
 8006656:	2b02      	cmp	r3, #2
 8006658:	d023      	beq.n	80066a2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800665a:	e05e      	b.n	800671a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	8b12      	ldrh	r2, [r2, #24]
 8006664:	4293      	cmp	r3, r2
 8006666:	d90b      	bls.n	8006680 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	69d9      	ldr	r1, [r3, #28]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	8b1a      	ldrh	r2, [r3, #24]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	7b5b      	ldrb	r3, [r3, #13]
 8006674:	2001      	movs	r0, #1
 8006676:	9000      	str	r0, [sp, #0]
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f001 fcda 	bl	8008032 <USBH_BulkSendData>
 800667e:	e00b      	b.n	8006698 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8006688:	b29a      	uxth	r2, r3
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	7b5b      	ldrb	r3, [r3, #13]
 800668e:	2001      	movs	r0, #1
 8006690:	9000      	str	r0, [sp, #0]
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f001 fccd 	bl	8008032 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2202      	movs	r2, #2
 800669c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80066a0:	e03b      	b.n	800671a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	7b5b      	ldrb	r3, [r3, #13]
 80066a6:	4619      	mov	r1, r3
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f001 fff1 	bl	8008690 <USBH_LL_GetURBState>
 80066ae:	4603      	mov	r3, r0
 80066b0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80066b2:	7afb      	ldrb	r3, [r7, #11]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d128      	bne.n	800670a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	8b12      	ldrh	r2, [r2, #24]
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d90e      	bls.n	80066e2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	8b12      	ldrh	r2, [r2, #24]
 80066cc:	1a9a      	subs	r2, r3, r2
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	69db      	ldr	r3, [r3, #28]
 80066d6:	68fa      	ldr	r2, [r7, #12]
 80066d8:	8b12      	ldrh	r2, [r2, #24]
 80066da:	441a      	add	r2, r3
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	61da      	str	r2, [r3, #28]
 80066e0:	e002      	b.n	80066e8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d004      	beq.n	80066fa <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80066f8:	e00e      	b.n	8006718 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 f868 	bl	80067d8 <USBH_CDC_TransmitCallback>
      break;
 8006708:	e006      	b.n	8006718 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800670a:	7afb      	ldrb	r3, [r7, #11]
 800670c:	2b02      	cmp	r3, #2
 800670e:	d103      	bne.n	8006718 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006718:	bf00      	nop
  }
}
 800671a:	bf00      	nop
 800671c:	3710      	adds	r7, #16
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006722:	b580      	push	{r7, lr}
 8006724:	b086      	sub	sp, #24
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006730:	69db      	ldr	r3, [r3, #28]
 8006732:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006734:	2300      	movs	r3, #0
 8006736:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800673e:	2b03      	cmp	r3, #3
 8006740:	d002      	beq.n	8006748 <CDC_ProcessReception+0x26>
 8006742:	2b04      	cmp	r3, #4
 8006744:	d00e      	beq.n	8006764 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006746:	e043      	b.n	80067d0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	6a19      	ldr	r1, [r3, #32]
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	8b5a      	ldrh	r2, [r3, #26]
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	7b1b      	ldrb	r3, [r3, #12]
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f001 fc91 	bl	800807c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	2204      	movs	r2, #4
 800675e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006762:	e035      	b.n	80067d0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	7b1b      	ldrb	r3, [r3, #12]
 8006768:	4619      	mov	r1, r3
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f001 ff90 	bl	8008690 <USBH_LL_GetURBState>
 8006770:	4603      	mov	r3, r0
 8006772:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006774:	7cfb      	ldrb	r3, [r7, #19]
 8006776:	2b01      	cmp	r3, #1
 8006778:	d129      	bne.n	80067ce <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	7b1b      	ldrb	r3, [r3, #12]
 800677e:	4619      	mov	r1, r3
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f001 fef3 	bl	800856c <USBH_LL_GetLastXferSize>
 8006786:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	429a      	cmp	r2, r3
 8006790:	d016      	beq.n	80067c0 <CDC_ProcessReception+0x9e>
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	8b5b      	ldrh	r3, [r3, #26]
 8006796:	461a      	mov	r2, r3
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	4293      	cmp	r3, r2
 800679c:	d910      	bls.n	80067c0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	1ad2      	subs	r2, r2, r3
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	6a1a      	ldr	r2, [r3, #32]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	441a      	add	r2, r3
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	2203      	movs	r2, #3
 80067ba:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80067be:	e006      	b.n	80067ce <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 f80f 	bl	80067ec <USBH_CDC_ReceiveCallback>
      break;
 80067ce:	bf00      	nop
  }
}
 80067d0:	bf00      	nop
 80067d2:	3718      	adds	r7, #24
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80067e0:	bf00      	nop
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80067f4:	bf00      	nop
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006808:	bf00      	nop
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	4613      	mov	r3, r2
 8006820:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d101      	bne.n	800682c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006828:	2302      	movs	r3, #2
 800682a:	e029      	b.n	8006880 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	79fa      	ldrb	r2, [r7, #7]
 8006830:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2200      	movs	r2, #0
 8006838:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f000 f81f 	bl	8006888 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d003      	beq.n	8006878 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f001 fdc3 	bl	8008404 <USBH_LL_Init>

  return USBH_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	3710      	adds	r7, #16
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006890:	2300      	movs	r3, #0
 8006892:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006894:	2300      	movs	r3, #0
 8006896:	60fb      	str	r3, [r7, #12]
 8006898:	e009      	b.n	80068ae <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	33e0      	adds	r3, #224	@ 0xe0
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	4413      	add	r3, r2
 80068a4:	2200      	movs	r2, #0
 80068a6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	3301      	adds	r3, #1
 80068ac:	60fb      	str	r3, [r7, #12]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2b0f      	cmp	r3, #15
 80068b2:	d9f2      	bls.n	800689a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80068b4:	2300      	movs	r3, #0
 80068b6:	60fb      	str	r3, [r7, #12]
 80068b8:	e009      	b.n	80068ce <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	4413      	add	r3, r2
 80068c0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80068c4:	2200      	movs	r2, #0
 80068c6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	3301      	adds	r3, #1
 80068cc:	60fb      	str	r3, [r7, #12]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068d4:	d3f1      	bcc.n	80068ba <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2201      	movs	r2, #1
 80068e6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2240      	movs	r2, #64	@ 0x40
 80068fa:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	331c      	adds	r3, #28
 8006926:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800692a:	2100      	movs	r1, #0
 800692c:	4618      	mov	r0, r3
 800692e:	f002 f81d 	bl	800896c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006938:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800693c:	2100      	movs	r1, #0
 800693e:	4618      	mov	r0, r3
 8006940:	f002 f814 	bl	800896c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800694a:	2212      	movs	r2, #18
 800694c:	2100      	movs	r1, #0
 800694e:	4618      	mov	r0, r3
 8006950:	f002 f80c 	bl	800896c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800695a:	223e      	movs	r2, #62	@ 0x3e
 800695c:	2100      	movs	r1, #0
 800695e:	4618      	mov	r0, r3
 8006960:	f002 f804 	bl	800896c <memset>

  return USBH_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3710      	adds	r7, #16
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800696e:	b480      	push	{r7}
 8006970:	b085      	sub	sp, #20
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
 8006976:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006978:	2300      	movs	r3, #0
 800697a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d016      	beq.n	80069b0 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006988:	2b00      	cmp	r3, #0
 800698a:	d10e      	bne.n	80069aa <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006992:	1c59      	adds	r1, r3, #1
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	33de      	adds	r3, #222	@ 0xde
 800699e:	6839      	ldr	r1, [r7, #0]
 80069a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80069a4:	2300      	movs	r3, #0
 80069a6:	73fb      	strb	r3, [r7, #15]
 80069a8:	e004      	b.n	80069b4 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80069aa:	2302      	movs	r3, #2
 80069ac:	73fb      	strb	r3, [r7, #15]
 80069ae:	e001      	b.n	80069b4 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80069b0:	2302      	movs	r3, #2
 80069b2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80069b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3714      	adds	r7, #20
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr

080069c2 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80069c2:	b480      	push	{r7}
 80069c4:	b085      	sub	sp, #20
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
 80069ca:	460b      	mov	r3, r1
 80069cc:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80069ce:	2300      	movs	r3, #0
 80069d0:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80069d8:	78fa      	ldrb	r2, [r7, #3]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d204      	bcs.n	80069e8 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	78fa      	ldrb	r2, [r7, #3]
 80069e2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80069e6:	e001      	b.n	80069ec <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80069e8:	2302      	movs	r3, #2
 80069ea:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80069ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3714      	adds	r7, #20
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr

080069fa <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80069fa:	b480      	push	{r7}
 80069fc:	b087      	sub	sp, #28
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
 8006a02:	4608      	mov	r0, r1
 8006a04:	4611      	mov	r1, r2
 8006a06:	461a      	mov	r2, r3
 8006a08:	4603      	mov	r3, r0
 8006a0a:	70fb      	strb	r3, [r7, #3]
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	70bb      	strb	r3, [r7, #2]
 8006a10:	4613      	mov	r3, r2
 8006a12:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006a14:	2300      	movs	r3, #0
 8006a16:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006a22:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006a24:	e025      	b.n	8006a72 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006a26:	7dfb      	ldrb	r3, [r7, #23]
 8006a28:	221a      	movs	r2, #26
 8006a2a:	fb02 f303 	mul.w	r3, r2, r3
 8006a2e:	3308      	adds	r3, #8
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	4413      	add	r3, r2
 8006a34:	3302      	adds	r3, #2
 8006a36:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	795b      	ldrb	r3, [r3, #5]
 8006a3c:	78fa      	ldrb	r2, [r7, #3]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d002      	beq.n	8006a48 <USBH_FindInterface+0x4e>
 8006a42:	78fb      	ldrb	r3, [r7, #3]
 8006a44:	2bff      	cmp	r3, #255	@ 0xff
 8006a46:	d111      	bne.n	8006a6c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006a4c:	78ba      	ldrb	r2, [r7, #2]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d002      	beq.n	8006a58 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006a52:	78bb      	ldrb	r3, [r7, #2]
 8006a54:	2bff      	cmp	r3, #255	@ 0xff
 8006a56:	d109      	bne.n	8006a6c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006a5c:	787a      	ldrb	r2, [r7, #1]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d002      	beq.n	8006a68 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006a62:	787b      	ldrb	r3, [r7, #1]
 8006a64:	2bff      	cmp	r3, #255	@ 0xff
 8006a66:	d101      	bne.n	8006a6c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006a68:	7dfb      	ldrb	r3, [r7, #23]
 8006a6a:	e006      	b.n	8006a7a <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006a6c:	7dfb      	ldrb	r3, [r7, #23]
 8006a6e:	3301      	adds	r3, #1
 8006a70:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006a72:	7dfb      	ldrb	r3, [r7, #23]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d9d6      	bls.n	8006a26 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006a78:	23ff      	movs	r3, #255	@ 0xff
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	371c      	adds	r7, #28
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr

08006a86 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b082      	sub	sp, #8
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f001 fcf4 	bl	800847c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006a94:	2101      	movs	r1, #1
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f001 fe0d 	bl	80086b6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3708      	adds	r7, #8
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
	...

08006aa8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b088      	sub	sp, #32
 8006aac:	af04      	add	r7, sp, #16
 8006aae:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006ab0:	2302      	movs	r3, #2
 8006ab2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d102      	bne.n	8006aca <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2203      	movs	r2, #3
 8006ac8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	2b0b      	cmp	r3, #11
 8006ad2:	f200 81bb 	bhi.w	8006e4c <USBH_Process+0x3a4>
 8006ad6:	a201      	add	r2, pc, #4	@ (adr r2, 8006adc <USBH_Process+0x34>)
 8006ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006adc:	08006b0d 	.word	0x08006b0d
 8006ae0:	08006b3f 	.word	0x08006b3f
 8006ae4:	08006ba7 	.word	0x08006ba7
 8006ae8:	08006de7 	.word	0x08006de7
 8006aec:	08006e4d 	.word	0x08006e4d
 8006af0:	08006c47 	.word	0x08006c47
 8006af4:	08006d8d 	.word	0x08006d8d
 8006af8:	08006c7d 	.word	0x08006c7d
 8006afc:	08006c9d 	.word	0x08006c9d
 8006b00:	08006cbb 	.word	0x08006cbb
 8006b04:	08006cff 	.word	0x08006cff
 8006b08:	08006dcf 	.word	0x08006dcf
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	f000 819b 	beq.w	8006e50 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006b20:	20c8      	movs	r0, #200	@ 0xc8
 8006b22:	f001 fe12 	bl	800874a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f001 fd05 	bl	8008536 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006b3c:	e188      	b.n	8006e50 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d107      	bne.n	8006b58 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2202      	movs	r2, #2
 8006b54:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006b56:	e18a      	b.n	8006e6e <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006b5e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006b62:	d914      	bls.n	8006b8e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	b2da      	uxtb	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006b7a:	2b03      	cmp	r3, #3
 8006b7c:	d903      	bls.n	8006b86 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	220d      	movs	r2, #13
 8006b82:	701a      	strb	r2, [r3, #0]
      break;
 8006b84:	e173      	b.n	8006e6e <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	701a      	strb	r2, [r3, #0]
      break;
 8006b8c:	e16f      	b.n	8006e6e <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006b94:	f103 020a 	add.w	r2, r3, #10
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8006b9e:	200a      	movs	r0, #10
 8006ba0:	f001 fdd3 	bl	800874a <USBH_Delay>
      break;
 8006ba4:	e163      	b.n	8006e6e <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d005      	beq.n	8006bbc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006bb6:	2104      	movs	r1, #4
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006bbc:	2064      	movs	r0, #100	@ 0x64
 8006bbe:	f001 fdc4 	bl	800874a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f001 fc90 	bl	80084e8 <USBH_LL_GetSpeed>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	461a      	mov	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2205      	movs	r2, #5
 8006bd6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006bd8:	2100      	movs	r1, #0
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f001 fa9b 	bl	8008116 <USBH_AllocPipe>
 8006be0:	4603      	mov	r3, r0
 8006be2:	461a      	mov	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006be8:	2180      	movs	r1, #128	@ 0x80
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f001 fa93 	bl	8008116 <USBH_AllocPipe>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	7919      	ldrb	r1, [r3, #4]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006c0c:	9202      	str	r2, [sp, #8]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	9201      	str	r2, [sp, #4]
 8006c12:	9300      	str	r3, [sp, #0]
 8006c14:	4603      	mov	r3, r0
 8006c16:	2280      	movs	r2, #128	@ 0x80
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f001 fa4d 	bl	80080b8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	7959      	ldrb	r1, [r3, #5]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006c32:	9202      	str	r2, [sp, #8]
 8006c34:	2200      	movs	r2, #0
 8006c36:	9201      	str	r2, [sp, #4]
 8006c38:	9300      	str	r3, [sp, #0]
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f001 fa3a 	bl	80080b8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006c44:	e113      	b.n	8006e6e <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 f916 	bl	8006e78 <USBH_HandleEnum>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006c50:	7bbb      	ldrb	r3, [r7, #14]
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	f040 80fd 	bne.w	8006e54 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d103      	bne.n	8006c74 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2208      	movs	r2, #8
 8006c70:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006c72:	e0ef      	b.n	8006e54 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2207      	movs	r2, #7
 8006c78:	701a      	strb	r2, [r3, #0]
      break;
 8006c7a:	e0eb      	b.n	8006e54 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f000 80e8 	beq.w	8006e58 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006c8e:	2101      	movs	r1, #1
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2208      	movs	r2, #8
 8006c98:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006c9a:	e0dd      	b.n	8006e58 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 fc3a 	bl	800751e <USBH_SetCfg>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f040 80d5 	bne.w	8006e5c <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2209      	movs	r2, #9
 8006cb6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006cb8:	e0d0      	b.n	8006e5c <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8006cc0:	f003 0320 	and.w	r3, r3, #32
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d016      	beq.n	8006cf6 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006cc8:	2101      	movs	r1, #1
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 fc4a 	bl	8007564 <USBH_SetFeature>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006cd4:	7bbb      	ldrb	r3, [r7, #14]
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d103      	bne.n	8006ce4 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	220a      	movs	r2, #10
 8006ce0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006ce2:	e0bd      	b.n	8006e60 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8006ce4:	7bbb      	ldrb	r3, [r7, #14]
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	2b03      	cmp	r3, #3
 8006cea:	f040 80b9 	bne.w	8006e60 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	220a      	movs	r2, #10
 8006cf2:	701a      	strb	r2, [r3, #0]
      break;
 8006cf4:	e0b4      	b.n	8006e60 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	220a      	movs	r2, #10
 8006cfa:	701a      	strb	r2, [r3, #0]
      break;
 8006cfc:	e0b0      	b.n	8006e60 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f000 80ad 	beq.w	8006e64 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006d12:	2300      	movs	r3, #0
 8006d14:	73fb      	strb	r3, [r7, #15]
 8006d16:	e016      	b.n	8006d46 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006d18:	7bfa      	ldrb	r2, [r7, #15]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	32de      	adds	r2, #222	@ 0xde
 8006d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d22:	791a      	ldrb	r2, [r3, #4]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d108      	bne.n	8006d40 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006d2e:	7bfa      	ldrb	r2, [r7, #15]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	32de      	adds	r2, #222	@ 0xde
 8006d34:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8006d3e:	e005      	b.n	8006d4c <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006d40:	7bfb      	ldrb	r3, [r7, #15]
 8006d42:	3301      	adds	r3, #1
 8006d44:	73fb      	strb	r3, [r7, #15]
 8006d46:	7bfb      	ldrb	r3, [r7, #15]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d0e5      	beq.n	8006d18 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d016      	beq.n	8006d84 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	4798      	blx	r3
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d109      	bne.n	8006d7c <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2206      	movs	r2, #6
 8006d6c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006d74:	2103      	movs	r1, #3
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006d7a:	e073      	b.n	8006e64 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	220d      	movs	r2, #13
 8006d80:	701a      	strb	r2, [r3, #0]
      break;
 8006d82:	e06f      	b.n	8006e64 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	220d      	movs	r2, #13
 8006d88:	701a      	strb	r2, [r3, #0]
      break;
 8006d8a:	e06b      	b.n	8006e64 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d017      	beq.n	8006dc6 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	4798      	blx	r3
 8006da2:	4603      	mov	r3, r0
 8006da4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006da6:	7bbb      	ldrb	r3, [r7, #14]
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d103      	bne.n	8006db6 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	220b      	movs	r2, #11
 8006db2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006db4:	e058      	b.n	8006e68 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8006db6:	7bbb      	ldrb	r3, [r7, #14]
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d154      	bne.n	8006e68 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	220d      	movs	r2, #13
 8006dc2:	701a      	strb	r2, [r3, #0]
      break;
 8006dc4:	e050      	b.n	8006e68 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	220d      	movs	r2, #13
 8006dca:	701a      	strb	r2, [r3, #0]
      break;
 8006dcc:	e04c      	b.n	8006e68 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d049      	beq.n	8006e6c <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006dde:	695b      	ldr	r3, [r3, #20]
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	4798      	blx	r3
      }
      break;
 8006de4:	e042      	b.n	8006e6c <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f7ff fd4a 	bl	8006888 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d009      	beq.n	8006e12 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d005      	beq.n	8006e28 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006e22:	2105      	movs	r1, #5
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d107      	bne.n	8006e44 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f7ff fe22 	bl	8006a86 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006e42:	e014      	b.n	8006e6e <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f001 fb19 	bl	800847c <USBH_LL_Start>
      break;
 8006e4a:	e010      	b.n	8006e6e <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006e4c:	bf00      	nop
 8006e4e:	e00e      	b.n	8006e6e <USBH_Process+0x3c6>
      break;
 8006e50:	bf00      	nop
 8006e52:	e00c      	b.n	8006e6e <USBH_Process+0x3c6>
      break;
 8006e54:	bf00      	nop
 8006e56:	e00a      	b.n	8006e6e <USBH_Process+0x3c6>
    break;
 8006e58:	bf00      	nop
 8006e5a:	e008      	b.n	8006e6e <USBH_Process+0x3c6>
      break;
 8006e5c:	bf00      	nop
 8006e5e:	e006      	b.n	8006e6e <USBH_Process+0x3c6>
      break;
 8006e60:	bf00      	nop
 8006e62:	e004      	b.n	8006e6e <USBH_Process+0x3c6>
      break;
 8006e64:	bf00      	nop
 8006e66:	e002      	b.n	8006e6e <USBH_Process+0x3c6>
      break;
 8006e68:	bf00      	nop
 8006e6a:	e000      	b.n	8006e6e <USBH_Process+0x3c6>
      break;
 8006e6c:	bf00      	nop
  }
  return USBH_OK;
 8006e6e:	2300      	movs	r3, #0
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3710      	adds	r7, #16
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b088      	sub	sp, #32
 8006e7c:	af04      	add	r7, sp, #16
 8006e7e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006e80:	2301      	movs	r3, #1
 8006e82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006e84:	2301      	movs	r3, #1
 8006e86:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	785b      	ldrb	r3, [r3, #1]
 8006e8c:	2b07      	cmp	r3, #7
 8006e8e:	f200 81bd 	bhi.w	800720c <USBH_HandleEnum+0x394>
 8006e92:	a201      	add	r2, pc, #4	@ (adr r2, 8006e98 <USBH_HandleEnum+0x20>)
 8006e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e98:	08006eb9 	.word	0x08006eb9
 8006e9c:	08006f73 	.word	0x08006f73
 8006ea0:	08006fdd 	.word	0x08006fdd
 8006ea4:	08007067 	.word	0x08007067
 8006ea8:	080070d1 	.word	0x080070d1
 8006eac:	08007141 	.word	0x08007141
 8006eb0:	08007187 	.word	0x08007187
 8006eb4:	080071cd 	.word	0x080071cd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006eb8:	2108      	movs	r1, #8
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fa4c 	bl	8007358 <USBH_Get_DevDesc>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006ec4:	7bbb      	ldrb	r3, [r7, #14]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d12e      	bne.n	8006f28 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	7919      	ldrb	r1, [r3, #4]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006eee:	9202      	str	r2, [sp, #8]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	9201      	str	r2, [sp, #4]
 8006ef4:	9300      	str	r3, [sp, #0]
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2280      	movs	r2, #128	@ 0x80
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f001 f8dc 	bl	80080b8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	7959      	ldrb	r1, [r3, #5]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006f14:	9202      	str	r2, [sp, #8]
 8006f16:	2200      	movs	r2, #0
 8006f18:	9201      	str	r2, [sp, #4]
 8006f1a:	9300      	str	r3, [sp, #0]
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2200      	movs	r2, #0
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f001 f8c9 	bl	80080b8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006f26:	e173      	b.n	8007210 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f28:	7bbb      	ldrb	r3, [r7, #14]
 8006f2a:	2b03      	cmp	r3, #3
 8006f2c:	f040 8170 	bne.w	8007210 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006f36:	3301      	adds	r3, #1
 8006f38:	b2da      	uxtb	r2, r3
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006f46:	2b03      	cmp	r3, #3
 8006f48:	d903      	bls.n	8006f52 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	220d      	movs	r2, #13
 8006f4e:	701a      	strb	r2, [r3, #0]
      break;
 8006f50:	e15e      	b.n	8007210 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	795b      	ldrb	r3, [r3, #5]
 8006f56:	4619      	mov	r1, r3
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f001 f8fd 	bl	8008158 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	791b      	ldrb	r3, [r3, #4]
 8006f62:	4619      	mov	r1, r3
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f001 f8f7 	bl	8008158 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	701a      	strb	r2, [r3, #0]
      break;
 8006f70:	e14e      	b.n	8007210 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006f72:	2112      	movs	r1, #18
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 f9ef 	bl	8007358 <USBH_Get_DevDesc>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006f7e:	7bbb      	ldrb	r3, [r7, #14]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d103      	bne.n	8006f8c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2202      	movs	r2, #2
 8006f88:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006f8a:	e143      	b.n	8007214 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f8c:	7bbb      	ldrb	r3, [r7, #14]
 8006f8e:	2b03      	cmp	r3, #3
 8006f90:	f040 8140 	bne.w	8007214 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	b2da      	uxtb	r2, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006faa:	2b03      	cmp	r3, #3
 8006fac:	d903      	bls.n	8006fb6 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	220d      	movs	r2, #13
 8006fb2:	701a      	strb	r2, [r3, #0]
      break;
 8006fb4:	e12e      	b.n	8007214 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	795b      	ldrb	r3, [r3, #5]
 8006fba:	4619      	mov	r1, r3
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f001 f8cb 	bl	8008158 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	791b      	ldrb	r3, [r3, #4]
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f001 f8c5 	bl	8008158 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	701a      	strb	r2, [r3, #0]
      break;
 8006fda:	e11b      	b.n	8007214 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006fdc:	2101      	movs	r1, #1
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 fa79 	bl	80074d6 <USBH_SetAddress>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006fe8:	7bbb      	ldrb	r3, [r7, #14]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d130      	bne.n	8007050 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8006fee:	2002      	movs	r0, #2
 8006ff0:	f001 fbab 	bl	800874a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2203      	movs	r2, #3
 8007000:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	7919      	ldrb	r1, [r3, #4]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007016:	9202      	str	r2, [sp, #8]
 8007018:	2200      	movs	r2, #0
 800701a:	9201      	str	r2, [sp, #4]
 800701c:	9300      	str	r3, [sp, #0]
 800701e:	4603      	mov	r3, r0
 8007020:	2280      	movs	r2, #128	@ 0x80
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f001 f848 	bl	80080b8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	7959      	ldrb	r1, [r3, #5]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800703c:	9202      	str	r2, [sp, #8]
 800703e:	2200      	movs	r2, #0
 8007040:	9201      	str	r2, [sp, #4]
 8007042:	9300      	str	r3, [sp, #0]
 8007044:	4603      	mov	r3, r0
 8007046:	2200      	movs	r2, #0
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f001 f835 	bl	80080b8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800704e:	e0e3      	b.n	8007218 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007050:	7bbb      	ldrb	r3, [r7, #14]
 8007052:	2b03      	cmp	r3, #3
 8007054:	f040 80e0 	bne.w	8007218 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	220d      	movs	r2, #13
 800705c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	705a      	strb	r2, [r3, #1]
      break;
 8007064:	e0d8      	b.n	8007218 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007066:	2109      	movs	r1, #9
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 f9a1 	bl	80073b0 <USBH_Get_CfgDesc>
 800706e:	4603      	mov	r3, r0
 8007070:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007072:	7bbb      	ldrb	r3, [r7, #14]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d103      	bne.n	8007080 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2204      	movs	r2, #4
 800707c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800707e:	e0cd      	b.n	800721c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007080:	7bbb      	ldrb	r3, [r7, #14]
 8007082:	2b03      	cmp	r3, #3
 8007084:	f040 80ca 	bne.w	800721c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800708e:	3301      	adds	r3, #1
 8007090:	b2da      	uxtb	r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800709e:	2b03      	cmp	r3, #3
 80070a0:	d903      	bls.n	80070aa <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	220d      	movs	r2, #13
 80070a6:	701a      	strb	r2, [r3, #0]
      break;
 80070a8:	e0b8      	b.n	800721c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	795b      	ldrb	r3, [r3, #5]
 80070ae:	4619      	mov	r1, r3
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f001 f851 	bl	8008158 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	791b      	ldrb	r3, [r3, #4]
 80070ba:	4619      	mov	r1, r3
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f001 f84b 	bl	8008158 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	701a      	strb	r2, [r3, #0]
      break;
 80070ce:	e0a5      	b.n	800721c <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80070d6:	4619      	mov	r1, r3
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 f969 	bl	80073b0 <USBH_Get_CfgDesc>
 80070de:	4603      	mov	r3, r0
 80070e0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80070e2:	7bbb      	ldrb	r3, [r7, #14]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d103      	bne.n	80070f0 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2205      	movs	r2, #5
 80070ec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80070ee:	e097      	b.n	8007220 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070f0:	7bbb      	ldrb	r3, [r7, #14]
 80070f2:	2b03      	cmp	r3, #3
 80070f4:	f040 8094 	bne.w	8007220 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80070fe:	3301      	adds	r3, #1
 8007100:	b2da      	uxtb	r2, r3
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800710e:	2b03      	cmp	r3, #3
 8007110:	d903      	bls.n	800711a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	220d      	movs	r2, #13
 8007116:	701a      	strb	r2, [r3, #0]
      break;
 8007118:	e082      	b.n	8007220 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	795b      	ldrb	r3, [r3, #5]
 800711e:	4619      	mov	r1, r3
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f001 f819 	bl	8008158 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	791b      	ldrb	r3, [r3, #4]
 800712a:	4619      	mov	r1, r3
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f001 f813 	bl	8008158 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	701a      	strb	r2, [r3, #0]
      break;
 800713e:	e06f      	b.n	8007220 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8007146:	2b00      	cmp	r3, #0
 8007148:	d019      	beq.n	800717e <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007156:	23ff      	movs	r3, #255	@ 0xff
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 f953 	bl	8007404 <USBH_Get_StringDesc>
 800715e:	4603      	mov	r3, r0
 8007160:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007162:	7bbb      	ldrb	r3, [r7, #14]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d103      	bne.n	8007170 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2206      	movs	r2, #6
 800716c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800716e:	e059      	b.n	8007224 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007170:	7bbb      	ldrb	r3, [r7, #14]
 8007172:	2b03      	cmp	r3, #3
 8007174:	d156      	bne.n	8007224 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2206      	movs	r2, #6
 800717a:	705a      	strb	r2, [r3, #1]
      break;
 800717c:	e052      	b.n	8007224 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2206      	movs	r2, #6
 8007182:	705a      	strb	r2, [r3, #1]
      break;
 8007184:	e04e      	b.n	8007224 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800718c:	2b00      	cmp	r3, #0
 800718e:	d019      	beq.n	80071c4 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800719c:	23ff      	movs	r3, #255	@ 0xff
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 f930 	bl	8007404 <USBH_Get_StringDesc>
 80071a4:	4603      	mov	r3, r0
 80071a6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80071a8:	7bbb      	ldrb	r3, [r7, #14]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d103      	bne.n	80071b6 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2207      	movs	r2, #7
 80071b2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80071b4:	e038      	b.n	8007228 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071b6:	7bbb      	ldrb	r3, [r7, #14]
 80071b8:	2b03      	cmp	r3, #3
 80071ba:	d135      	bne.n	8007228 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2207      	movs	r2, #7
 80071c0:	705a      	strb	r2, [r3, #1]
      break;
 80071c2:	e031      	b.n	8007228 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2207      	movs	r2, #7
 80071c8:	705a      	strb	r2, [r3, #1]
      break;
 80071ca:	e02d      	b.n	8007228 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d017      	beq.n	8007206 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80071e2:	23ff      	movs	r3, #255	@ 0xff
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 f90d 	bl	8007404 <USBH_Get_StringDesc>
 80071ea:	4603      	mov	r3, r0
 80071ec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80071ee:	7bbb      	ldrb	r3, [r7, #14]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d102      	bne.n	80071fa <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80071f4:	2300      	movs	r3, #0
 80071f6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80071f8:	e018      	b.n	800722c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071fa:	7bbb      	ldrb	r3, [r7, #14]
 80071fc:	2b03      	cmp	r3, #3
 80071fe:	d115      	bne.n	800722c <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8007200:	2300      	movs	r3, #0
 8007202:	73fb      	strb	r3, [r7, #15]
      break;
 8007204:	e012      	b.n	800722c <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8007206:	2300      	movs	r3, #0
 8007208:	73fb      	strb	r3, [r7, #15]
      break;
 800720a:	e00f      	b.n	800722c <USBH_HandleEnum+0x3b4>

    default:
      break;
 800720c:	bf00      	nop
 800720e:	e00e      	b.n	800722e <USBH_HandleEnum+0x3b6>
      break;
 8007210:	bf00      	nop
 8007212:	e00c      	b.n	800722e <USBH_HandleEnum+0x3b6>
      break;
 8007214:	bf00      	nop
 8007216:	e00a      	b.n	800722e <USBH_HandleEnum+0x3b6>
      break;
 8007218:	bf00      	nop
 800721a:	e008      	b.n	800722e <USBH_HandleEnum+0x3b6>
      break;
 800721c:	bf00      	nop
 800721e:	e006      	b.n	800722e <USBH_HandleEnum+0x3b6>
      break;
 8007220:	bf00      	nop
 8007222:	e004      	b.n	800722e <USBH_HandleEnum+0x3b6>
      break;
 8007224:	bf00      	nop
 8007226:	e002      	b.n	800722e <USBH_HandleEnum+0x3b6>
      break;
 8007228:	bf00      	nop
 800722a:	e000      	b.n	800722e <USBH_HandleEnum+0x3b6>
      break;
 800722c:	bf00      	nop
  }
  return Status;
 800722e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007230:	4618      	mov	r0, r3
 8007232:	3710      	adds	r7, #16
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	683a      	ldr	r2, [r7, #0]
 8007246:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800724a:	bf00      	nop
 800724c:	370c      	adds	r7, #12
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr

08007256 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b082      	sub	sp, #8
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007264:	1c5a      	adds	r2, r3, #1
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 f804 	bl	800727a <USBH_HandleSof>
}
 8007272:	bf00      	nop
 8007274:	3708      	adds	r7, #8
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b082      	sub	sp, #8
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	b2db      	uxtb	r3, r3
 8007288:	2b0b      	cmp	r3, #11
 800728a:	d10a      	bne.n	80072a2 <USBH_HandleSof+0x28>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007292:	2b00      	cmp	r3, #0
 8007294:	d005      	beq.n	80072a2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	4798      	blx	r3
  }
}
 80072a2:	bf00      	nop
 80072a4:	3708      	adds	r7, #8
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}

080072aa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80072aa:	b480      	push	{r7}
 80072ac:	b083      	sub	sp, #12
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2201      	movs	r2, #1
 80072b6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80072ba:	bf00      	nop
}
 80072bc:	370c      	adds	r7, #12
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr

080072c6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80072c6:	b480      	push	{r7}
 80072c8:	b083      	sub	sp, #12
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80072d6:	bf00      	nop
}
 80072d8:	370c      	adds	r7, #12
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr

080072e2 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80072e2:	b480      	push	{r7}
 80072e4:	b083      	sub	sp, #12
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2201      	movs	r2, #1
 80072ee:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f001 f8be 	bl	80084b2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	791b      	ldrb	r3, [r3, #4]
 800733a:	4619      	mov	r1, r3
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 ff0b 	bl	8008158 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	795b      	ldrb	r3, [r3, #5]
 8007346:	4619      	mov	r1, r3
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 ff05 	bl	8008158 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800734e:	2300      	movs	r3, #0
}
 8007350:	4618      	mov	r0, r3
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b086      	sub	sp, #24
 800735c:	af02      	add	r7, sp, #8
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	460b      	mov	r3, r1
 8007362:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007364:	887b      	ldrh	r3, [r7, #2]
 8007366:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800736a:	d901      	bls.n	8007370 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800736c:	2303      	movs	r3, #3
 800736e:	e01b      	b.n	80073a8 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007376:	887b      	ldrh	r3, [r7, #2]
 8007378:	9300      	str	r3, [sp, #0]
 800737a:	4613      	mov	r3, r2
 800737c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007380:	2100      	movs	r1, #0
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 f872 	bl	800746c <USBH_GetDescriptor>
 8007388:	4603      	mov	r3, r0
 800738a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800738c:	7bfb      	ldrb	r3, [r7, #15]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d109      	bne.n	80073a6 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007398:	887a      	ldrh	r2, [r7, #2]
 800739a:	4619      	mov	r1, r3
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 f929 	bl	80075f4 <USBH_ParseDevDesc>
 80073a2:	4603      	mov	r3, r0
 80073a4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80073a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3710      	adds	r7, #16
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b086      	sub	sp, #24
 80073b4:	af02      	add	r7, sp, #8
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	460b      	mov	r3, r1
 80073ba:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	331c      	adds	r3, #28
 80073c0:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80073c2:	887b      	ldrh	r3, [r7, #2]
 80073c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073c8:	d901      	bls.n	80073ce <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80073ca:	2303      	movs	r3, #3
 80073cc:	e016      	b.n	80073fc <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80073ce:	887b      	ldrh	r3, [r7, #2]
 80073d0:	9300      	str	r3, [sp, #0]
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80073d8:	2100      	movs	r1, #0
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 f846 	bl	800746c <USBH_GetDescriptor>
 80073e0:	4603      	mov	r3, r0
 80073e2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d107      	bne.n	80073fa <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80073ea:	887b      	ldrh	r3, [r7, #2]
 80073ec:	461a      	mov	r2, r3
 80073ee:	68b9      	ldr	r1, [r7, #8]
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 f9af 	bl	8007754 <USBH_ParseCfgDesc>
 80073f6:	4603      	mov	r3, r0
 80073f8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80073fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3710      	adds	r7, #16
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b088      	sub	sp, #32
 8007408:	af02      	add	r7, sp, #8
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	607a      	str	r2, [r7, #4]
 800740e:	461a      	mov	r2, r3
 8007410:	460b      	mov	r3, r1
 8007412:	72fb      	strb	r3, [r7, #11]
 8007414:	4613      	mov	r3, r2
 8007416:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007418:	893b      	ldrh	r3, [r7, #8]
 800741a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800741e:	d802      	bhi.n	8007426 <USBH_Get_StringDesc+0x22>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d101      	bne.n	800742a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007426:	2303      	movs	r3, #3
 8007428:	e01c      	b.n	8007464 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800742a:	7afb      	ldrb	r3, [r7, #11]
 800742c:	b29b      	uxth	r3, r3
 800742e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007432:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800743a:	893b      	ldrh	r3, [r7, #8]
 800743c:	9300      	str	r3, [sp, #0]
 800743e:	460b      	mov	r3, r1
 8007440:	2100      	movs	r1, #0
 8007442:	68f8      	ldr	r0, [r7, #12]
 8007444:	f000 f812 	bl	800746c <USBH_GetDescriptor>
 8007448:	4603      	mov	r3, r0
 800744a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800744c:	7dfb      	ldrb	r3, [r7, #23]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d107      	bne.n	8007462 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007458:	893a      	ldrh	r2, [r7, #8]
 800745a:	6879      	ldr	r1, [r7, #4]
 800745c:	4618      	mov	r0, r3
 800745e:	f000 fb8d 	bl	8007b7c <USBH_ParseStringDesc>
  }

  return status;
 8007462:	7dfb      	ldrb	r3, [r7, #23]
}
 8007464:	4618      	mov	r0, r3
 8007466:	3718      	adds	r7, #24
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	607b      	str	r3, [r7, #4]
 8007476:	460b      	mov	r3, r1
 8007478:	72fb      	strb	r3, [r7, #11]
 800747a:	4613      	mov	r3, r2
 800747c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	789b      	ldrb	r3, [r3, #2]
 8007482:	2b01      	cmp	r3, #1
 8007484:	d11c      	bne.n	80074c0 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007486:	7afb      	ldrb	r3, [r7, #11]
 8007488:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800748c:	b2da      	uxtb	r2, r3
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2206      	movs	r2, #6
 8007496:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	893a      	ldrh	r2, [r7, #8]
 800749c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800749e:	893b      	ldrh	r3, [r7, #8]
 80074a0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80074a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80074a8:	d104      	bne.n	80074b4 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f240 4209 	movw	r2, #1033	@ 0x409
 80074b0:	829a      	strh	r2, [r3, #20]
 80074b2:	e002      	b.n	80074ba <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2200      	movs	r2, #0
 80074b8:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	8b3a      	ldrh	r2, [r7, #24]
 80074be:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80074c0:	8b3b      	ldrh	r3, [r7, #24]
 80074c2:	461a      	mov	r2, r3
 80074c4:	6879      	ldr	r1, [r7, #4]
 80074c6:	68f8      	ldr	r0, [r7, #12]
 80074c8:	f000 fba5 	bl	8007c16 <USBH_CtlReq>
 80074cc:	4603      	mov	r3, r0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b082      	sub	sp, #8
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
 80074de:	460b      	mov	r3, r1
 80074e0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	789b      	ldrb	r3, [r3, #2]
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d10f      	bne.n	800750a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2205      	movs	r2, #5
 80074f4:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80074f6:	78fb      	ldrb	r3, [r7, #3]
 80074f8:	b29a      	uxth	r2, r3
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800750a:	2200      	movs	r2, #0
 800750c:	2100      	movs	r1, #0
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 fb81 	bl	8007c16 <USBH_CtlReq>
 8007514:	4603      	mov	r3, r0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3708      	adds	r7, #8
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800751e:	b580      	push	{r7, lr}
 8007520:	b082      	sub	sp, #8
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
 8007526:	460b      	mov	r3, r1
 8007528:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	789b      	ldrb	r3, [r3, #2]
 800752e:	2b01      	cmp	r3, #1
 8007530:	d10e      	bne.n	8007550 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2209      	movs	r2, #9
 800753c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	887a      	ldrh	r2, [r7, #2]
 8007542:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007550:	2200      	movs	r2, #0
 8007552:	2100      	movs	r1, #0
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 fb5e 	bl	8007c16 <USBH_CtlReq>
 800755a:	4603      	mov	r3, r0
}
 800755c:	4618      	mov	r0, r3
 800755e:	3708      	adds	r7, #8
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	460b      	mov	r3, r1
 800756e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	789b      	ldrb	r3, [r3, #2]
 8007574:	2b01      	cmp	r3, #1
 8007576:	d10f      	bne.n	8007598 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2203      	movs	r2, #3
 8007582:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007584:	78fb      	ldrb	r3, [r7, #3]
 8007586:	b29a      	uxth	r2, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007598:	2200      	movs	r2, #0
 800759a:	2100      	movs	r1, #0
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 fb3a 	bl	8007c16 <USBH_CtlReq>
 80075a2:	4603      	mov	r3, r0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3708      	adds	r7, #8
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	460b      	mov	r3, r1
 80075b6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	789b      	ldrb	r3, [r3, #2]
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d10f      	bne.n	80075e0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2202      	movs	r2, #2
 80075c4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2201      	movs	r2, #1
 80075ca:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80075d2:	78fb      	ldrb	r3, [r7, #3]
 80075d4:	b29a      	uxth	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80075e0:	2200      	movs	r2, #0
 80075e2:	2100      	movs	r1, #0
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 fb16 	bl	8007c16 <USBH_CtlReq>
 80075ea:	4603      	mov	r3, r0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3708      	adds	r7, #8
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b087      	sub	sp, #28
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	4613      	mov	r3, r2
 8007600:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007608:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800760a:	2300      	movs	r3, #0
 800760c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d101      	bne.n	8007618 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8007614:	2302      	movs	r3, #2
 8007616:	e094      	b.n	8007742 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	781a      	ldrb	r2, [r3, #0]
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	785a      	ldrb	r2, [r3, #1]
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	3302      	adds	r3, #2
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	461a      	mov	r2, r3
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	3303      	adds	r3, #3
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	021b      	lsls	r3, r3, #8
 8007638:	b29b      	uxth	r3, r3
 800763a:	4313      	orrs	r3, r2
 800763c:	b29a      	uxth	r2, r3
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	791a      	ldrb	r2, [r3, #4]
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	795a      	ldrb	r2, [r3, #5]
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	799a      	ldrb	r2, [r3, #6]
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	79da      	ldrb	r2, [r3, #7]
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007668:	2b00      	cmp	r3, #0
 800766a:	d004      	beq.n	8007676 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007672:	2b01      	cmp	r3, #1
 8007674:	d11b      	bne.n	80076ae <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	79db      	ldrb	r3, [r3, #7]
 800767a:	2b20      	cmp	r3, #32
 800767c:	dc0f      	bgt.n	800769e <USBH_ParseDevDesc+0xaa>
 800767e:	2b08      	cmp	r3, #8
 8007680:	db0f      	blt.n	80076a2 <USBH_ParseDevDesc+0xae>
 8007682:	3b08      	subs	r3, #8
 8007684:	4a32      	ldr	r2, [pc, #200]	@ (8007750 <USBH_ParseDevDesc+0x15c>)
 8007686:	fa22 f303 	lsr.w	r3, r2, r3
 800768a:	f003 0301 	and.w	r3, r3, #1
 800768e:	2b00      	cmp	r3, #0
 8007690:	bf14      	ite	ne
 8007692:	2301      	movne	r3, #1
 8007694:	2300      	moveq	r3, #0
 8007696:	b2db      	uxtb	r3, r3
 8007698:	2b00      	cmp	r3, #0
 800769a:	d106      	bne.n	80076aa <USBH_ParseDevDesc+0xb6>
 800769c:	e001      	b.n	80076a2 <USBH_ParseDevDesc+0xae>
 800769e:	2b40      	cmp	r3, #64	@ 0x40
 80076a0:	d003      	beq.n	80076aa <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	2208      	movs	r2, #8
 80076a6:	71da      	strb	r2, [r3, #7]
        break;
 80076a8:	e000      	b.n	80076ac <USBH_ParseDevDesc+0xb8>
        break;
 80076aa:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80076ac:	e00e      	b.n	80076cc <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d107      	bne.n	80076c8 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	79db      	ldrb	r3, [r3, #7]
 80076bc:	2b08      	cmp	r3, #8
 80076be:	d005      	beq.n	80076cc <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	2208      	movs	r2, #8
 80076c4:	71da      	strb	r2, [r3, #7]
 80076c6:	e001      	b.n	80076cc <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80076c8:	2303      	movs	r3, #3
 80076ca:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80076cc:	88fb      	ldrh	r3, [r7, #6]
 80076ce:	2b08      	cmp	r3, #8
 80076d0:	d936      	bls.n	8007740 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	3308      	adds	r3, #8
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	461a      	mov	r2, r3
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	3309      	adds	r3, #9
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	021b      	lsls	r3, r3, #8
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	4313      	orrs	r3, r2
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	330a      	adds	r3, #10
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	461a      	mov	r2, r3
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	330b      	adds	r3, #11
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	021b      	lsls	r3, r3, #8
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	4313      	orrs	r3, r2
 8007700:	b29a      	uxth	r2, r3
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	330c      	adds	r3, #12
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	461a      	mov	r2, r3
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	330d      	adds	r3, #13
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	021b      	lsls	r3, r3, #8
 8007716:	b29b      	uxth	r3, r3
 8007718:	4313      	orrs	r3, r2
 800771a:	b29a      	uxth	r2, r3
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	7b9a      	ldrb	r2, [r3, #14]
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	7bda      	ldrb	r2, [r3, #15]
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	7c1a      	ldrb	r2, [r3, #16]
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	7c5a      	ldrb	r2, [r3, #17]
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8007740:	7dfb      	ldrb	r3, [r7, #23]
}
 8007742:	4618      	mov	r0, r3
 8007744:	371c      	adds	r7, #28
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop
 8007750:	01000101 	.word	0x01000101

08007754 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b08c      	sub	sp, #48	@ 0x30
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	4613      	mov	r3, r2
 8007760:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007768:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800776a:	2300      	movs	r3, #0
 800776c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007770:	2300      	movs	r3, #0
 8007772:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8007776:	2300      	movs	r3, #0
 8007778:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d101      	bne.n	8007786 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8007782:	2302      	movs	r3, #2
 8007784:	e0da      	b.n	800793c <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	781a      	ldrb	r2, [r3, #0]
 800778e:	6a3b      	ldr	r3, [r7, #32]
 8007790:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	785a      	ldrb	r2, [r3, #1]
 8007796:	6a3b      	ldr	r3, [r7, #32]
 8007798:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	3302      	adds	r3, #2
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	461a      	mov	r2, r3
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	3303      	adds	r3, #3
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	021b      	lsls	r3, r3, #8
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	4313      	orrs	r3, r2
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077b4:	bf28      	it	cs
 80077b6:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	6a3b      	ldr	r3, [r7, #32]
 80077be:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	791a      	ldrb	r2, [r3, #4]
 80077c4:	6a3b      	ldr	r3, [r7, #32]
 80077c6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	795a      	ldrb	r2, [r3, #5]
 80077cc:	6a3b      	ldr	r3, [r7, #32]
 80077ce:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	799a      	ldrb	r2, [r3, #6]
 80077d4:	6a3b      	ldr	r3, [r7, #32]
 80077d6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	79da      	ldrb	r2, [r3, #7]
 80077dc:	6a3b      	ldr	r3, [r7, #32]
 80077de:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	7a1a      	ldrb	r2, [r3, #8]
 80077e4:	6a3b      	ldr	r3, [r7, #32]
 80077e6:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80077e8:	6a3b      	ldr	r3, [r7, #32]
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	2b09      	cmp	r3, #9
 80077ee:	d002      	beq.n	80077f6 <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80077f0:	6a3b      	ldr	r3, [r7, #32]
 80077f2:	2209      	movs	r2, #9
 80077f4:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80077f6:	88fb      	ldrh	r3, [r7, #6]
 80077f8:	2b09      	cmp	r3, #9
 80077fa:	f240 809d 	bls.w	8007938 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 80077fe:	2309      	movs	r3, #9
 8007800:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007802:	2300      	movs	r3, #0
 8007804:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007806:	e081      	b.n	800790c <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007808:	f107 0316 	add.w	r3, r7, #22
 800780c:	4619      	mov	r1, r3
 800780e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007810:	f000 f9e7 	bl	8007be2 <USBH_GetNextDesc>
 8007814:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007818:	785b      	ldrb	r3, [r3, #1]
 800781a:	2b04      	cmp	r3, #4
 800781c:	d176      	bne.n	800790c <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800781e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	2b09      	cmp	r3, #9
 8007824:	d002      	beq.n	800782c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007828:	2209      	movs	r2, #9
 800782a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800782c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007830:	221a      	movs	r2, #26
 8007832:	fb02 f303 	mul.w	r3, r2, r3
 8007836:	3308      	adds	r3, #8
 8007838:	6a3a      	ldr	r2, [r7, #32]
 800783a:	4413      	add	r3, r2
 800783c:	3302      	adds	r3, #2
 800783e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007840:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007842:	69f8      	ldr	r0, [r7, #28]
 8007844:	f000 f87e 	bl	8007944 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007848:	2300      	movs	r3, #0
 800784a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800784e:	2300      	movs	r3, #0
 8007850:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007852:	e043      	b.n	80078dc <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007854:	f107 0316 	add.w	r3, r7, #22
 8007858:	4619      	mov	r1, r3
 800785a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800785c:	f000 f9c1 	bl	8007be2 <USBH_GetNextDesc>
 8007860:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007864:	785b      	ldrb	r3, [r3, #1]
 8007866:	2b05      	cmp	r3, #5
 8007868:	d138      	bne.n	80078dc <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	795b      	ldrb	r3, [r3, #5]
 800786e:	2b01      	cmp	r3, #1
 8007870:	d113      	bne.n	800789a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8007876:	2b02      	cmp	r3, #2
 8007878:	d003      	beq.n	8007882 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	799b      	ldrb	r3, [r3, #6]
 800787e:	2b03      	cmp	r3, #3
 8007880:	d10b      	bne.n	800789a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	79db      	ldrb	r3, [r3, #7]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d10b      	bne.n	80078a2 <USBH_ParseCfgDesc+0x14e>
 800788a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	2b09      	cmp	r3, #9
 8007890:	d007      	beq.n	80078a2 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8007892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007894:	2209      	movs	r2, #9
 8007896:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007898:	e003      	b.n	80078a2 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800789a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800789c:	2207      	movs	r2, #7
 800789e:	701a      	strb	r2, [r3, #0]
 80078a0:	e000      	b.n	80078a4 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80078a2:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80078a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80078a8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80078ac:	3201      	adds	r2, #1
 80078ae:	00d2      	lsls	r2, r2, #3
 80078b0:	211a      	movs	r1, #26
 80078b2:	fb01 f303 	mul.w	r3, r1, r3
 80078b6:	4413      	add	r3, r2
 80078b8:	3308      	adds	r3, #8
 80078ba:	6a3a      	ldr	r2, [r7, #32]
 80078bc:	4413      	add	r3, r2
 80078be:	3304      	adds	r3, #4
 80078c0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80078c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80078c4:	69b9      	ldr	r1, [r7, #24]
 80078c6:	68f8      	ldr	r0, [r7, #12]
 80078c8:	f000 f870 	bl	80079ac <USBH_ParseEPDesc>
 80078cc:	4603      	mov	r3, r0
 80078ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80078d2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80078d6:	3301      	adds	r3, #1
 80078d8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	791b      	ldrb	r3, [r3, #4]
 80078e0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d204      	bcs.n	80078f2 <USBH_ParseCfgDesc+0x19e>
 80078e8:	6a3b      	ldr	r3, [r7, #32]
 80078ea:	885a      	ldrh	r2, [r3, #2]
 80078ec:	8afb      	ldrh	r3, [r7, #22]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d8b0      	bhi.n	8007854 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	791b      	ldrb	r3, [r3, #4]
 80078f6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d201      	bcs.n	8007902 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 80078fe:	2303      	movs	r3, #3
 8007900:	e01c      	b.n	800793c <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8007902:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007906:	3301      	adds	r3, #1
 8007908:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800790c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007910:	2b01      	cmp	r3, #1
 8007912:	d805      	bhi.n	8007920 <USBH_ParseCfgDesc+0x1cc>
 8007914:	6a3b      	ldr	r3, [r7, #32]
 8007916:	885a      	ldrh	r2, [r3, #2]
 8007918:	8afb      	ldrh	r3, [r7, #22]
 800791a:	429a      	cmp	r2, r3
 800791c:	f63f af74 	bhi.w	8007808 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007920:	6a3b      	ldr	r3, [r7, #32]
 8007922:	791b      	ldrb	r3, [r3, #4]
 8007924:	2b02      	cmp	r3, #2
 8007926:	bf28      	it	cs
 8007928:	2302      	movcs	r3, #2
 800792a:	b2db      	uxtb	r3, r3
 800792c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007930:	429a      	cmp	r2, r3
 8007932:	d201      	bcs.n	8007938 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8007934:	2303      	movs	r3, #3
 8007936:	e001      	b.n	800793c <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8007938:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800793c:	4618      	mov	r0, r3
 800793e:	3730      	adds	r7, #48	@ 0x30
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	781a      	ldrb	r2, [r3, #0]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	785a      	ldrb	r2, [r3, #1]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	789a      	ldrb	r2, [r3, #2]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	78da      	ldrb	r2, [r3, #3]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	3304      	adds	r3, #4
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	2b02      	cmp	r3, #2
 8007976:	bf28      	it	cs
 8007978:	2302      	movcs	r3, #2
 800797a:	b2da      	uxtb	r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	795a      	ldrb	r2, [r3, #5]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	799a      	ldrb	r2, [r3, #6]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	79da      	ldrb	r2, [r3, #7]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	7a1a      	ldrb	r2, [r3, #8]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	721a      	strb	r2, [r3, #8]
}
 80079a0:	bf00      	nop
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b087      	sub	sp, #28
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80079b8:	2300      	movs	r3, #0
 80079ba:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	781a      	ldrb	r2, [r3, #0]
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	785a      	ldrb	r2, [r3, #1]
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	789a      	ldrb	r2, [r3, #2]
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	78da      	ldrb	r2, [r3, #3]
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	3304      	adds	r3, #4
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	461a      	mov	r2, r3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	3305      	adds	r3, #5
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	021b      	lsls	r3, r3, #8
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	4313      	orrs	r3, r2
 80079f0:	b29a      	uxth	r2, r3
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	799a      	ldrb	r2, [r3, #6]
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	889b      	ldrh	r3, [r3, #4]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d009      	beq.n	8007a1a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007a0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a0e:	d804      	bhi.n	8007a1a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007a14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a18:	d901      	bls.n	8007a1e <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8007a1a:	2303      	movs	r3, #3
 8007a1c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d136      	bne.n	8007a96 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	78db      	ldrb	r3, [r3, #3]
 8007a2c:	f003 0303 	and.w	r3, r3, #3
 8007a30:	2b02      	cmp	r3, #2
 8007a32:	d108      	bne.n	8007a46 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	889b      	ldrh	r3, [r3, #4]
 8007a38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a3c:	f240 8097 	bls.w	8007b6e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007a40:	2303      	movs	r3, #3
 8007a42:	75fb      	strb	r3, [r7, #23]
 8007a44:	e093      	b.n	8007b6e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	78db      	ldrb	r3, [r3, #3]
 8007a4a:	f003 0303 	and.w	r3, r3, #3
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d107      	bne.n	8007a62 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	889b      	ldrh	r3, [r3, #4]
 8007a56:	2b40      	cmp	r3, #64	@ 0x40
 8007a58:	f240 8089 	bls.w	8007b6e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	75fb      	strb	r3, [r7, #23]
 8007a60:	e085      	b.n	8007b6e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	78db      	ldrb	r3, [r3, #3]
 8007a66:	f003 0303 	and.w	r3, r3, #3
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d005      	beq.n	8007a7a <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	78db      	ldrb	r3, [r3, #3]
 8007a72:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007a76:	2b03      	cmp	r3, #3
 8007a78:	d10a      	bne.n	8007a90 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	799b      	ldrb	r3, [r3, #6]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d003      	beq.n	8007a8a <USBH_ParseEPDesc+0xde>
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	799b      	ldrb	r3, [r3, #6]
 8007a86:	2b10      	cmp	r3, #16
 8007a88:	d970      	bls.n	8007b6c <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007a8e:	e06d      	b.n	8007b6c <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007a90:	2303      	movs	r3, #3
 8007a92:	75fb      	strb	r3, [r7, #23]
 8007a94:	e06b      	b.n	8007b6e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d13c      	bne.n	8007b1a <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	78db      	ldrb	r3, [r3, #3]
 8007aa4:	f003 0303 	and.w	r3, r3, #3
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	d005      	beq.n	8007ab8 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	78db      	ldrb	r3, [r3, #3]
 8007ab0:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d106      	bne.n	8007ac6 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	889b      	ldrh	r3, [r3, #4]
 8007abc:	2b40      	cmp	r3, #64	@ 0x40
 8007abe:	d956      	bls.n	8007b6e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007ac0:	2303      	movs	r3, #3
 8007ac2:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007ac4:	e053      	b.n	8007b6e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	78db      	ldrb	r3, [r3, #3]
 8007aca:	f003 0303 	and.w	r3, r3, #3
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d10e      	bne.n	8007af0 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	799b      	ldrb	r3, [r3, #6]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d007      	beq.n	8007aea <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8007ade:	2b10      	cmp	r3, #16
 8007ae0:	d803      	bhi.n	8007aea <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8007ae6:	2b40      	cmp	r3, #64	@ 0x40
 8007ae8:	d941      	bls.n	8007b6e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007aea:	2303      	movs	r3, #3
 8007aec:	75fb      	strb	r3, [r7, #23]
 8007aee:	e03e      	b.n	8007b6e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	78db      	ldrb	r3, [r3, #3]
 8007af4:	f003 0303 	and.w	r3, r3, #3
 8007af8:	2b03      	cmp	r3, #3
 8007afa:	d10b      	bne.n	8007b14 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	799b      	ldrb	r3, [r3, #6]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d004      	beq.n	8007b0e <USBH_ParseEPDesc+0x162>
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	889b      	ldrh	r3, [r3, #4]
 8007b08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b0c:	d32f      	bcc.n	8007b6e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	75fb      	strb	r3, [r7, #23]
 8007b12:	e02c      	b.n	8007b6e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007b14:	2303      	movs	r3, #3
 8007b16:	75fb      	strb	r3, [r7, #23]
 8007b18:	e029      	b.n	8007b6e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007b20:	2b02      	cmp	r3, #2
 8007b22:	d120      	bne.n	8007b66 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	78db      	ldrb	r3, [r3, #3]
 8007b28:	f003 0303 	and.w	r3, r3, #3
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d106      	bne.n	8007b3e <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	889b      	ldrh	r3, [r3, #4]
 8007b34:	2b08      	cmp	r3, #8
 8007b36:	d01a      	beq.n	8007b6e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007b38:	2303      	movs	r3, #3
 8007b3a:	75fb      	strb	r3, [r7, #23]
 8007b3c:	e017      	b.n	8007b6e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	78db      	ldrb	r3, [r3, #3]
 8007b42:	f003 0303 	and.w	r3, r3, #3
 8007b46:	2b03      	cmp	r3, #3
 8007b48:	d10a      	bne.n	8007b60 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	799b      	ldrb	r3, [r3, #6]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d003      	beq.n	8007b5a <USBH_ParseEPDesc+0x1ae>
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	889b      	ldrh	r3, [r3, #4]
 8007b56:	2b08      	cmp	r3, #8
 8007b58:	d909      	bls.n	8007b6e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007b5a:	2303      	movs	r3, #3
 8007b5c:	75fb      	strb	r3, [r7, #23]
 8007b5e:	e006      	b.n	8007b6e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007b60:	2303      	movs	r3, #3
 8007b62:	75fb      	strb	r3, [r7, #23]
 8007b64:	e003      	b.n	8007b6e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007b66:	2303      	movs	r3, #3
 8007b68:	75fb      	strb	r3, [r7, #23]
 8007b6a:	e000      	b.n	8007b6e <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007b6c:	bf00      	nop
  }

  return status;
 8007b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	371c      	adds	r7, #28
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr

08007b7c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b087      	sub	sp, #28
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	4613      	mov	r3, r2
 8007b88:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	2b03      	cmp	r3, #3
 8007b92:	d120      	bne.n	8007bd6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	1e9a      	subs	r2, r3, #2
 8007b9a:	88fb      	ldrh	r3, [r7, #6]
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	bf28      	it	cs
 8007ba0:	4613      	movcs	r3, r2
 8007ba2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	3302      	adds	r3, #2
 8007ba8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007baa:	2300      	movs	r3, #0
 8007bac:	82fb      	strh	r3, [r7, #22]
 8007bae:	e00b      	b.n	8007bc8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007bb0:	8afb      	ldrh	r3, [r7, #22]
 8007bb2:	68fa      	ldr	r2, [r7, #12]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	781a      	ldrb	r2, [r3, #0]
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007bc2:	8afb      	ldrh	r3, [r7, #22]
 8007bc4:	3302      	adds	r3, #2
 8007bc6:	82fb      	strh	r3, [r7, #22]
 8007bc8:	8afa      	ldrh	r2, [r7, #22]
 8007bca:	8abb      	ldrh	r3, [r7, #20]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d3ef      	bcc.n	8007bb0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	701a      	strb	r2, [r3, #0]
  }
}
 8007bd6:	bf00      	nop
 8007bd8:	371c      	adds	r7, #28
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr

08007be2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007be2:	b480      	push	{r7}
 8007be4:	b085      	sub	sp, #20
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
 8007bea:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	881b      	ldrh	r3, [r3, #0]
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	7812      	ldrb	r2, [r2, #0]
 8007bf4:	4413      	add	r3, r2
 8007bf6:	b29a      	uxth	r2, r3
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4413      	add	r3, r2
 8007c06:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007c08:	68fb      	ldr	r3, [r7, #12]
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3714      	adds	r7, #20
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr

08007c16 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b086      	sub	sp, #24
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	60f8      	str	r0, [r7, #12]
 8007c1e:	60b9      	str	r1, [r7, #8]
 8007c20:	4613      	mov	r3, r2
 8007c22:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007c24:	2301      	movs	r3, #1
 8007c26:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	789b      	ldrb	r3, [r3, #2]
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d002      	beq.n	8007c36 <USBH_CtlReq+0x20>
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	d00f      	beq.n	8007c54 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007c34:	e027      	b.n	8007c86 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	68ba      	ldr	r2, [r7, #8]
 8007c3a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	88fa      	ldrh	r2, [r7, #6]
 8007c40:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2201      	movs	r2, #1
 8007c46:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2202      	movs	r2, #2
 8007c4c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	75fb      	strb	r3, [r7, #23]
      break;
 8007c52:	e018      	b.n	8007c86 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f000 f81b 	bl	8007c90 <USBH_HandleControl>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007c5e:	7dfb      	ldrb	r3, [r7, #23]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d002      	beq.n	8007c6a <USBH_CtlReq+0x54>
 8007c64:	7dfb      	ldrb	r3, [r7, #23]
 8007c66:	2b03      	cmp	r3, #3
 8007c68:	d106      	bne.n	8007c78 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2200      	movs	r2, #0
 8007c74:	761a      	strb	r2, [r3, #24]
      break;
 8007c76:	e005      	b.n	8007c84 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007c78:	7dfb      	ldrb	r3, [r7, #23]
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d102      	bne.n	8007c84 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2201      	movs	r2, #1
 8007c82:	709a      	strb	r2, [r3, #2]
      break;
 8007c84:	bf00      	nop
  }
  return status;
 8007c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3718      	adds	r7, #24
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af02      	add	r7, sp, #8
 8007c96:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	7e1b      	ldrb	r3, [r3, #24]
 8007ca4:	3b01      	subs	r3, #1
 8007ca6:	2b0a      	cmp	r3, #10
 8007ca8:	f200 8156 	bhi.w	8007f58 <USBH_HandleControl+0x2c8>
 8007cac:	a201      	add	r2, pc, #4	@ (adr r2, 8007cb4 <USBH_HandleControl+0x24>)
 8007cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb2:	bf00      	nop
 8007cb4:	08007ce1 	.word	0x08007ce1
 8007cb8:	08007cfb 	.word	0x08007cfb
 8007cbc:	08007d65 	.word	0x08007d65
 8007cc0:	08007d8b 	.word	0x08007d8b
 8007cc4:	08007dc3 	.word	0x08007dc3
 8007cc8:	08007ded 	.word	0x08007ded
 8007ccc:	08007e3f 	.word	0x08007e3f
 8007cd0:	08007e61 	.word	0x08007e61
 8007cd4:	08007e9d 	.word	0x08007e9d
 8007cd8:	08007ec3 	.word	0x08007ec3
 8007cdc:	08007f01 	.word	0x08007f01
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f103 0110 	add.w	r1, r3, #16
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	795b      	ldrb	r3, [r3, #5]
 8007cea:	461a      	mov	r2, r3
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 f943 	bl	8007f78 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2202      	movs	r2, #2
 8007cf6:	761a      	strb	r2, [r3, #24]
      break;
 8007cf8:	e139      	b.n	8007f6e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	795b      	ldrb	r3, [r3, #5]
 8007cfe:	4619      	mov	r1, r3
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 fcc5 	bl	8008690 <USBH_LL_GetURBState>
 8007d06:	4603      	mov	r3, r0
 8007d08:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007d0a:	7bbb      	ldrb	r3, [r7, #14]
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d11e      	bne.n	8007d4e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	7c1b      	ldrb	r3, [r3, #16]
 8007d14:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007d18:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	8adb      	ldrh	r3, [r3, #22]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d00a      	beq.n	8007d38 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007d22:	7b7b      	ldrb	r3, [r7, #13]
 8007d24:	2b80      	cmp	r3, #128	@ 0x80
 8007d26:	d103      	bne.n	8007d30 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2203      	movs	r2, #3
 8007d2c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007d2e:	e115      	b.n	8007f5c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2205      	movs	r2, #5
 8007d34:	761a      	strb	r2, [r3, #24]
      break;
 8007d36:	e111      	b.n	8007f5c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007d38:	7b7b      	ldrb	r3, [r7, #13]
 8007d3a:	2b80      	cmp	r3, #128	@ 0x80
 8007d3c:	d103      	bne.n	8007d46 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2209      	movs	r2, #9
 8007d42:	761a      	strb	r2, [r3, #24]
      break;
 8007d44:	e10a      	b.n	8007f5c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2207      	movs	r2, #7
 8007d4a:	761a      	strb	r2, [r3, #24]
      break;
 8007d4c:	e106      	b.n	8007f5c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007d4e:	7bbb      	ldrb	r3, [r7, #14]
 8007d50:	2b04      	cmp	r3, #4
 8007d52:	d003      	beq.n	8007d5c <USBH_HandleControl+0xcc>
 8007d54:	7bbb      	ldrb	r3, [r7, #14]
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	f040 8100 	bne.w	8007f5c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	220b      	movs	r2, #11
 8007d60:	761a      	strb	r2, [r3, #24]
      break;
 8007d62:	e0fb      	b.n	8007f5c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007d6a:	b29a      	uxth	r2, r3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6899      	ldr	r1, [r3, #8]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	899a      	ldrh	r2, [r3, #12]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	791b      	ldrb	r3, [r3, #4]
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f93a 	bl	8007ff6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2204      	movs	r2, #4
 8007d86:	761a      	strb	r2, [r3, #24]
      break;
 8007d88:	e0f1      	b.n	8007f6e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	791b      	ldrb	r3, [r3, #4]
 8007d8e:	4619      	mov	r1, r3
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 fc7d 	bl	8008690 <USBH_LL_GetURBState>
 8007d96:	4603      	mov	r3, r0
 8007d98:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007d9a:	7bbb      	ldrb	r3, [r7, #14]
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d102      	bne.n	8007da6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2209      	movs	r2, #9
 8007da4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007da6:	7bbb      	ldrb	r3, [r7, #14]
 8007da8:	2b05      	cmp	r3, #5
 8007daa:	d102      	bne.n	8007db2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007dac:	2303      	movs	r3, #3
 8007dae:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007db0:	e0d6      	b.n	8007f60 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007db2:	7bbb      	ldrb	r3, [r7, #14]
 8007db4:	2b04      	cmp	r3, #4
 8007db6:	f040 80d3 	bne.w	8007f60 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	220b      	movs	r2, #11
 8007dbe:	761a      	strb	r2, [r3, #24]
      break;
 8007dc0:	e0ce      	b.n	8007f60 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6899      	ldr	r1, [r3, #8]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	899a      	ldrh	r2, [r3, #12]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	795b      	ldrb	r3, [r3, #5]
 8007dce:	2001      	movs	r0, #1
 8007dd0:	9000      	str	r0, [sp, #0]
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f8ea 	bl	8007fac <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007dde:	b29a      	uxth	r2, r3
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2206      	movs	r2, #6
 8007de8:	761a      	strb	r2, [r3, #24]
      break;
 8007dea:	e0c0      	b.n	8007f6e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	795b      	ldrb	r3, [r3, #5]
 8007df0:	4619      	mov	r1, r3
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 fc4c 	bl	8008690 <USBH_LL_GetURBState>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007dfc:	7bbb      	ldrb	r3, [r7, #14]
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d103      	bne.n	8007e0a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2207      	movs	r2, #7
 8007e06:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007e08:	e0ac      	b.n	8007f64 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007e0a:	7bbb      	ldrb	r3, [r7, #14]
 8007e0c:	2b05      	cmp	r3, #5
 8007e0e:	d105      	bne.n	8007e1c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	220c      	movs	r2, #12
 8007e14:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007e16:	2303      	movs	r3, #3
 8007e18:	73fb      	strb	r3, [r7, #15]
      break;
 8007e1a:	e0a3      	b.n	8007f64 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007e1c:	7bbb      	ldrb	r3, [r7, #14]
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	d103      	bne.n	8007e2a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2205      	movs	r2, #5
 8007e26:	761a      	strb	r2, [r3, #24]
      break;
 8007e28:	e09c      	b.n	8007f64 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007e2a:	7bbb      	ldrb	r3, [r7, #14]
 8007e2c:	2b04      	cmp	r3, #4
 8007e2e:	f040 8099 	bne.w	8007f64 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	220b      	movs	r2, #11
 8007e36:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007e38:	2302      	movs	r3, #2
 8007e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e3c:	e092      	b.n	8007f64 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	791b      	ldrb	r3, [r3, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	2100      	movs	r1, #0
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 f8d5 	bl	8007ff6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007e52:	b29a      	uxth	r2, r3
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2208      	movs	r2, #8
 8007e5c:	761a      	strb	r2, [r3, #24]

      break;
 8007e5e:	e086      	b.n	8007f6e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	791b      	ldrb	r3, [r3, #4]
 8007e64:	4619      	mov	r1, r3
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 fc12 	bl	8008690 <USBH_LL_GetURBState>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007e70:	7bbb      	ldrb	r3, [r7, #14]
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d105      	bne.n	8007e82 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	220d      	movs	r2, #13
 8007e7a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007e80:	e072      	b.n	8007f68 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007e82:	7bbb      	ldrb	r3, [r7, #14]
 8007e84:	2b04      	cmp	r3, #4
 8007e86:	d103      	bne.n	8007e90 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	220b      	movs	r2, #11
 8007e8c:	761a      	strb	r2, [r3, #24]
      break;
 8007e8e:	e06b      	b.n	8007f68 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007e90:	7bbb      	ldrb	r3, [r7, #14]
 8007e92:	2b05      	cmp	r3, #5
 8007e94:	d168      	bne.n	8007f68 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007e96:	2303      	movs	r3, #3
 8007e98:	73fb      	strb	r3, [r7, #15]
      break;
 8007e9a:	e065      	b.n	8007f68 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	795b      	ldrb	r3, [r3, #5]
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	9200      	str	r2, [sp, #0]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	2100      	movs	r1, #0
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 f87f 	bl	8007fac <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007eb4:	b29a      	uxth	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	220a      	movs	r2, #10
 8007ebe:	761a      	strb	r2, [r3, #24]
      break;
 8007ec0:	e055      	b.n	8007f6e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	795b      	ldrb	r3, [r3, #5]
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 fbe1 	bl	8008690 <USBH_LL_GetURBState>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007ed2:	7bbb      	ldrb	r3, [r7, #14]
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d105      	bne.n	8007ee4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	220d      	movs	r2, #13
 8007ee0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007ee2:	e043      	b.n	8007f6c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007ee4:	7bbb      	ldrb	r3, [r7, #14]
 8007ee6:	2b02      	cmp	r3, #2
 8007ee8:	d103      	bne.n	8007ef2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2209      	movs	r2, #9
 8007eee:	761a      	strb	r2, [r3, #24]
      break;
 8007ef0:	e03c      	b.n	8007f6c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007ef2:	7bbb      	ldrb	r3, [r7, #14]
 8007ef4:	2b04      	cmp	r3, #4
 8007ef6:	d139      	bne.n	8007f6c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	220b      	movs	r2, #11
 8007efc:	761a      	strb	r2, [r3, #24]
      break;
 8007efe:	e035      	b.n	8007f6c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	7e5b      	ldrb	r3, [r3, #25]
 8007f04:	3301      	adds	r3, #1
 8007f06:	b2da      	uxtb	r2, r3
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	765a      	strb	r2, [r3, #25]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	7e5b      	ldrb	r3, [r3, #25]
 8007f10:	2b02      	cmp	r3, #2
 8007f12:	d806      	bhi.n	8007f22 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007f20:	e025      	b.n	8007f6e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007f28:	2106      	movs	r1, #6
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	795b      	ldrb	r3, [r3, #5]
 8007f38:	4619      	mov	r1, r3
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 f90c 	bl	8008158 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	791b      	ldrb	r3, [r3, #4]
 8007f44:	4619      	mov	r1, r3
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 f906 	bl	8008158 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007f52:	2302      	movs	r3, #2
 8007f54:	73fb      	strb	r3, [r7, #15]
      break;
 8007f56:	e00a      	b.n	8007f6e <USBH_HandleControl+0x2de>

    default:
      break;
 8007f58:	bf00      	nop
 8007f5a:	e008      	b.n	8007f6e <USBH_HandleControl+0x2de>
      break;
 8007f5c:	bf00      	nop
 8007f5e:	e006      	b.n	8007f6e <USBH_HandleControl+0x2de>
      break;
 8007f60:	bf00      	nop
 8007f62:	e004      	b.n	8007f6e <USBH_HandleControl+0x2de>
      break;
 8007f64:	bf00      	nop
 8007f66:	e002      	b.n	8007f6e <USBH_HandleControl+0x2de>
      break;
 8007f68:	bf00      	nop
 8007f6a:	e000      	b.n	8007f6e <USBH_HandleControl+0x2de>
      break;
 8007f6c:	bf00      	nop
  }

  return status;
 8007f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3710      	adds	r7, #16
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b088      	sub	sp, #32
 8007f7c:	af04      	add	r7, sp, #16
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	4613      	mov	r3, r2
 8007f84:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007f86:	79f9      	ldrb	r1, [r7, #7]
 8007f88:	2300      	movs	r3, #0
 8007f8a:	9303      	str	r3, [sp, #12]
 8007f8c:	2308      	movs	r3, #8
 8007f8e:	9302      	str	r3, [sp, #8]
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	9301      	str	r3, [sp, #4]
 8007f94:	2300      	movs	r3, #0
 8007f96:	9300      	str	r3, [sp, #0]
 8007f98:	2300      	movs	r3, #0
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	68f8      	ldr	r0, [r7, #12]
 8007f9e:	f000 fb46 	bl	800862e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007fa2:	2300      	movs	r3, #0
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3710      	adds	r7, #16
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b088      	sub	sp, #32
 8007fb0:	af04      	add	r7, sp, #16
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	4611      	mov	r1, r2
 8007fb8:	461a      	mov	r2, r3
 8007fba:	460b      	mov	r3, r1
 8007fbc:	80fb      	strh	r3, [r7, #6]
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d001      	beq.n	8007fd0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007fd0:	7979      	ldrb	r1, [r7, #5]
 8007fd2:	7e3b      	ldrb	r3, [r7, #24]
 8007fd4:	9303      	str	r3, [sp, #12]
 8007fd6:	88fb      	ldrh	r3, [r7, #6]
 8007fd8:	9302      	str	r3, [sp, #8]
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	9301      	str	r3, [sp, #4]
 8007fde:	2301      	movs	r3, #1
 8007fe0:	9300      	str	r3, [sp, #0]
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	68f8      	ldr	r0, [r7, #12]
 8007fe8:	f000 fb21 	bl	800862e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3710      	adds	r7, #16
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b088      	sub	sp, #32
 8007ffa:	af04      	add	r7, sp, #16
 8007ffc:	60f8      	str	r0, [r7, #12]
 8007ffe:	60b9      	str	r1, [r7, #8]
 8008000:	4611      	mov	r1, r2
 8008002:	461a      	mov	r2, r3
 8008004:	460b      	mov	r3, r1
 8008006:	80fb      	strh	r3, [r7, #6]
 8008008:	4613      	mov	r3, r2
 800800a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800800c:	7979      	ldrb	r1, [r7, #5]
 800800e:	2300      	movs	r3, #0
 8008010:	9303      	str	r3, [sp, #12]
 8008012:	88fb      	ldrh	r3, [r7, #6]
 8008014:	9302      	str	r3, [sp, #8]
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	9301      	str	r3, [sp, #4]
 800801a:	2301      	movs	r3, #1
 800801c:	9300      	str	r3, [sp, #0]
 800801e:	2300      	movs	r3, #0
 8008020:	2201      	movs	r2, #1
 8008022:	68f8      	ldr	r0, [r7, #12]
 8008024:	f000 fb03 	bl	800862e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008028:	2300      	movs	r3, #0

}
 800802a:	4618      	mov	r0, r3
 800802c:	3710      	adds	r7, #16
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}

08008032 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008032:	b580      	push	{r7, lr}
 8008034:	b088      	sub	sp, #32
 8008036:	af04      	add	r7, sp, #16
 8008038:	60f8      	str	r0, [r7, #12]
 800803a:	60b9      	str	r1, [r7, #8]
 800803c:	4611      	mov	r1, r2
 800803e:	461a      	mov	r2, r3
 8008040:	460b      	mov	r3, r1
 8008042:	80fb      	strh	r3, [r7, #6]
 8008044:	4613      	mov	r3, r2
 8008046:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800804e:	2b00      	cmp	r3, #0
 8008050:	d001      	beq.n	8008056 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008052:	2300      	movs	r3, #0
 8008054:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008056:	7979      	ldrb	r1, [r7, #5]
 8008058:	7e3b      	ldrb	r3, [r7, #24]
 800805a:	9303      	str	r3, [sp, #12]
 800805c:	88fb      	ldrh	r3, [r7, #6]
 800805e:	9302      	str	r3, [sp, #8]
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	9301      	str	r3, [sp, #4]
 8008064:	2301      	movs	r3, #1
 8008066:	9300      	str	r3, [sp, #0]
 8008068:	2302      	movs	r3, #2
 800806a:	2200      	movs	r2, #0
 800806c:	68f8      	ldr	r0, [r7, #12]
 800806e:	f000 fade 	bl	800862e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008072:	2300      	movs	r3, #0
}
 8008074:	4618      	mov	r0, r3
 8008076:	3710      	adds	r7, #16
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b088      	sub	sp, #32
 8008080:	af04      	add	r7, sp, #16
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	4611      	mov	r1, r2
 8008088:	461a      	mov	r2, r3
 800808a:	460b      	mov	r3, r1
 800808c:	80fb      	strh	r3, [r7, #6]
 800808e:	4613      	mov	r3, r2
 8008090:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008092:	7979      	ldrb	r1, [r7, #5]
 8008094:	2300      	movs	r3, #0
 8008096:	9303      	str	r3, [sp, #12]
 8008098:	88fb      	ldrh	r3, [r7, #6]
 800809a:	9302      	str	r3, [sp, #8]
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	9301      	str	r3, [sp, #4]
 80080a0:	2301      	movs	r3, #1
 80080a2:	9300      	str	r3, [sp, #0]
 80080a4:	2302      	movs	r3, #2
 80080a6:	2201      	movs	r2, #1
 80080a8:	68f8      	ldr	r0, [r7, #12]
 80080aa:	f000 fac0 	bl	800862e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80080ae:	2300      	movs	r3, #0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3710      	adds	r7, #16
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b086      	sub	sp, #24
 80080bc:	af04      	add	r7, sp, #16
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	4608      	mov	r0, r1
 80080c2:	4611      	mov	r1, r2
 80080c4:	461a      	mov	r2, r3
 80080c6:	4603      	mov	r3, r0
 80080c8:	70fb      	strb	r3, [r7, #3]
 80080ca:	460b      	mov	r3, r1
 80080cc:	70bb      	strb	r3, [r7, #2]
 80080ce:	4613      	mov	r3, r2
 80080d0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80080d2:	7878      	ldrb	r0, [r7, #1]
 80080d4:	78ba      	ldrb	r2, [r7, #2]
 80080d6:	78f9      	ldrb	r1, [r7, #3]
 80080d8:	8b3b      	ldrh	r3, [r7, #24]
 80080da:	9302      	str	r3, [sp, #8]
 80080dc:	7d3b      	ldrb	r3, [r7, #20]
 80080de:	9301      	str	r3, [sp, #4]
 80080e0:	7c3b      	ldrb	r3, [r7, #16]
 80080e2:	9300      	str	r3, [sp, #0]
 80080e4:	4603      	mov	r3, r0
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 fa53 	bl	8008592 <USBH_LL_OpenPipe>

  return USBH_OK;
 80080ec:	2300      	movs	r3, #0
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3708      	adds	r7, #8
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b082      	sub	sp, #8
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
 80080fe:	460b      	mov	r3, r1
 8008100:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008102:	78fb      	ldrb	r3, [r7, #3]
 8008104:	4619      	mov	r1, r3
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fa72 	bl	80085f0 <USBH_LL_ClosePipe>

  return USBH_OK;
 800810c:	2300      	movs	r3, #0
}
 800810e:	4618      	mov	r0, r3
 8008110:	3708      	adds	r7, #8
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}

08008116 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008116:	b580      	push	{r7, lr}
 8008118:	b084      	sub	sp, #16
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
 800811e:	460b      	mov	r3, r1
 8008120:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 f836 	bl	8008194 <USBH_GetFreePipe>
 8008128:	4603      	mov	r3, r0
 800812a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800812c:	89fb      	ldrh	r3, [r7, #14]
 800812e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008132:	4293      	cmp	r3, r2
 8008134:	d00a      	beq.n	800814c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008136:	78fa      	ldrb	r2, [r7, #3]
 8008138:	89fb      	ldrh	r3, [r7, #14]
 800813a:	f003 030f 	and.w	r3, r3, #15
 800813e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008142:	6879      	ldr	r1, [r7, #4]
 8008144:	33e0      	adds	r3, #224	@ 0xe0
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	440b      	add	r3, r1
 800814a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800814c:	89fb      	ldrh	r3, [r7, #14]
 800814e:	b2db      	uxtb	r3, r3
}
 8008150:	4618      	mov	r0, r3
 8008152:	3710      	adds	r7, #16
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	460b      	mov	r3, r1
 8008162:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008164:	78fb      	ldrb	r3, [r7, #3]
 8008166:	2b0f      	cmp	r3, #15
 8008168:	d80d      	bhi.n	8008186 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800816a:	78fb      	ldrb	r3, [r7, #3]
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	33e0      	adds	r3, #224	@ 0xe0
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	4413      	add	r3, r2
 8008174:	685a      	ldr	r2, [r3, #4]
 8008176:	78fb      	ldrb	r3, [r7, #3]
 8008178:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800817c:	6879      	ldr	r1, [r7, #4]
 800817e:	33e0      	adds	r3, #224	@ 0xe0
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	440b      	add	r3, r1
 8008184:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008186:	2300      	movs	r3, #0
}
 8008188:	4618      	mov	r0, r3
 800818a:	370c      	adds	r7, #12
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008194:	b480      	push	{r7}
 8008196:	b085      	sub	sp, #20
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800819c:	2300      	movs	r3, #0
 800819e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80081a0:	2300      	movs	r3, #0
 80081a2:	73fb      	strb	r3, [r7, #15]
 80081a4:	e00f      	b.n	80081c6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80081a6:	7bfb      	ldrb	r3, [r7, #15]
 80081a8:	687a      	ldr	r2, [r7, #4]
 80081aa:	33e0      	adds	r3, #224	@ 0xe0
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	4413      	add	r3, r2
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d102      	bne.n	80081c0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80081ba:	7bfb      	ldrb	r3, [r7, #15]
 80081bc:	b29b      	uxth	r3, r3
 80081be:	e007      	b.n	80081d0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80081c0:	7bfb      	ldrb	r3, [r7, #15]
 80081c2:	3301      	adds	r3, #1
 80081c4:	73fb      	strb	r3, [r7, #15]
 80081c6:	7bfb      	ldrb	r3, [r7, #15]
 80081c8:	2b0f      	cmp	r3, #15
 80081ca:	d9ec      	bls.n	80081a6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80081cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3714      	adds	r7, #20
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80081e0:	2201      	movs	r2, #1
 80081e2:	490e      	ldr	r1, [pc, #56]	@ (800821c <MX_USB_HOST_Init+0x40>)
 80081e4:	480e      	ldr	r0, [pc, #56]	@ (8008220 <MX_USB_HOST_Init+0x44>)
 80081e6:	f7fe fb15 	bl	8006814 <USBH_Init>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d001      	beq.n	80081f4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80081f0:	f7f8 fb72 	bl	80008d8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80081f4:	490b      	ldr	r1, [pc, #44]	@ (8008224 <MX_USB_HOST_Init+0x48>)
 80081f6:	480a      	ldr	r0, [pc, #40]	@ (8008220 <MX_USB_HOST_Init+0x44>)
 80081f8:	f7fe fbb9 	bl	800696e <USBH_RegisterClass>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d001      	beq.n	8008206 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008202:	f7f8 fb69 	bl	80008d8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008206:	4806      	ldr	r0, [pc, #24]	@ (8008220 <MX_USB_HOST_Init+0x44>)
 8008208:	f7fe fc3d 	bl	8006a86 <USBH_Start>
 800820c:	4603      	mov	r3, r0
 800820e:	2b00      	cmp	r3, #0
 8008210:	d001      	beq.n	8008216 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008212:	f7f8 fb61 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008216:	bf00      	nop
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	0800823d 	.word	0x0800823d
 8008220:	20000194 	.word	0x20000194
 8008224:	2000000c 	.word	0x2000000c

08008228 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800822c:	4802      	ldr	r0, [pc, #8]	@ (8008238 <MX_USB_HOST_Process+0x10>)
 800822e:	f7fe fc3b 	bl	8006aa8 <USBH_Process>
}
 8008232:	bf00      	nop
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	20000194 	.word	0x20000194

0800823c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	460b      	mov	r3, r1
 8008246:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008248:	78fb      	ldrb	r3, [r7, #3]
 800824a:	3b01      	subs	r3, #1
 800824c:	2b04      	cmp	r3, #4
 800824e:	d819      	bhi.n	8008284 <USBH_UserProcess+0x48>
 8008250:	a201      	add	r2, pc, #4	@ (adr r2, 8008258 <USBH_UserProcess+0x1c>)
 8008252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008256:	bf00      	nop
 8008258:	08008285 	.word	0x08008285
 800825c:	08008275 	.word	0x08008275
 8008260:	08008285 	.word	0x08008285
 8008264:	0800827d 	.word	0x0800827d
 8008268:	0800826d 	.word	0x0800826d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800826c:	4b09      	ldr	r3, [pc, #36]	@ (8008294 <USBH_UserProcess+0x58>)
 800826e:	2203      	movs	r2, #3
 8008270:	701a      	strb	r2, [r3, #0]
  break;
 8008272:	e008      	b.n	8008286 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008274:	4b07      	ldr	r3, [pc, #28]	@ (8008294 <USBH_UserProcess+0x58>)
 8008276:	2202      	movs	r2, #2
 8008278:	701a      	strb	r2, [r3, #0]
  break;
 800827a:	e004      	b.n	8008286 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800827c:	4b05      	ldr	r3, [pc, #20]	@ (8008294 <USBH_UserProcess+0x58>)
 800827e:	2201      	movs	r2, #1
 8008280:	701a      	strb	r2, [r3, #0]
  break;
 8008282:	e000      	b.n	8008286 <USBH_UserProcess+0x4a>

  default:
  break;
 8008284:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008286:	bf00      	nop
 8008288:	370c      	adds	r7, #12
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr
 8008292:	bf00      	nop
 8008294:	2000056c 	.word	0x2000056c

08008298 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b08a      	sub	sp, #40	@ 0x28
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082a0:	f107 0314 	add.w	r3, r7, #20
 80082a4:	2200      	movs	r2, #0
 80082a6:	601a      	str	r2, [r3, #0]
 80082a8:	605a      	str	r2, [r3, #4]
 80082aa:	609a      	str	r2, [r3, #8]
 80082ac:	60da      	str	r2, [r3, #12]
 80082ae:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80082b8:	d147      	bne.n	800834a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80082ba:	2300      	movs	r3, #0
 80082bc:	613b      	str	r3, [r7, #16]
 80082be:	4b25      	ldr	r3, [pc, #148]	@ (8008354 <HAL_HCD_MspInit+0xbc>)
 80082c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082c2:	4a24      	ldr	r2, [pc, #144]	@ (8008354 <HAL_HCD_MspInit+0xbc>)
 80082c4:	f043 0301 	orr.w	r3, r3, #1
 80082c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80082ca:	4b22      	ldr	r3, [pc, #136]	@ (8008354 <HAL_HCD_MspInit+0xbc>)
 80082cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082ce:	f003 0301 	and.w	r3, r3, #1
 80082d2:	613b      	str	r3, [r7, #16]
 80082d4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80082d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80082da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80082dc:	2300      	movs	r3, #0
 80082de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082e0:	2300      	movs	r3, #0
 80082e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80082e4:	f107 0314 	add.w	r3, r7, #20
 80082e8:	4619      	mov	r1, r3
 80082ea:	481b      	ldr	r0, [pc, #108]	@ (8008358 <HAL_HCD_MspInit+0xc0>)
 80082ec:	f7f8 fe86 	bl	8000ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80082f0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80082f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082f6:	2302      	movs	r3, #2
 80082f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082fa:	2300      	movs	r3, #0
 80082fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082fe:	2300      	movs	r3, #0
 8008300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008302:	230a      	movs	r3, #10
 8008304:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008306:	f107 0314 	add.w	r3, r7, #20
 800830a:	4619      	mov	r1, r3
 800830c:	4812      	ldr	r0, [pc, #72]	@ (8008358 <HAL_HCD_MspInit+0xc0>)
 800830e:	f7f8 fe75 	bl	8000ffc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008312:	4b10      	ldr	r3, [pc, #64]	@ (8008354 <HAL_HCD_MspInit+0xbc>)
 8008314:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008316:	4a0f      	ldr	r2, [pc, #60]	@ (8008354 <HAL_HCD_MspInit+0xbc>)
 8008318:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800831c:	6353      	str	r3, [r2, #52]	@ 0x34
 800831e:	2300      	movs	r3, #0
 8008320:	60fb      	str	r3, [r7, #12]
 8008322:	4b0c      	ldr	r3, [pc, #48]	@ (8008354 <HAL_HCD_MspInit+0xbc>)
 8008324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008326:	4a0b      	ldr	r2, [pc, #44]	@ (8008354 <HAL_HCD_MspInit+0xbc>)
 8008328:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800832c:	6453      	str	r3, [r2, #68]	@ 0x44
 800832e:	4b09      	ldr	r3, [pc, #36]	@ (8008354 <HAL_HCD_MspInit+0xbc>)
 8008330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008332:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008336:	60fb      	str	r3, [r7, #12]
 8008338:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800833a:	2200      	movs	r2, #0
 800833c:	2100      	movs	r1, #0
 800833e:	2043      	movs	r0, #67	@ 0x43
 8008340:	f7f8 fe25 	bl	8000f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008344:	2043      	movs	r0, #67	@ 0x43
 8008346:	f7f8 fe3e 	bl	8000fc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800834a:	bf00      	nop
 800834c:	3728      	adds	r7, #40	@ 0x28
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	40023800 	.word	0x40023800
 8008358:	40020000 	.word	0x40020000

0800835c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800836a:	4618      	mov	r0, r3
 800836c:	f7fe ff73 	bl	8007256 <USBH_LL_IncTimer>
}
 8008370:	bf00      	nop
 8008372:	3708      	adds	r7, #8
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008386:	4618      	mov	r0, r3
 8008388:	f7fe ffab 	bl	80072e2 <USBH_LL_Connect>
}
 800838c:	bf00      	nop
 800838e:	3708      	adds	r7, #8
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b082      	sub	sp, #8
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80083a2:	4618      	mov	r0, r3
 80083a4:	f7fe ffb4 	bl	8007310 <USBH_LL_Disconnect>
}
 80083a8:	bf00      	nop
 80083aa:	3708      	adds	r7, #8
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	460b      	mov	r3, r1
 80083ba:	70fb      	strb	r3, [r7, #3]
 80083bc:	4613      	mov	r3, r2
 80083be:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80083c0:	bf00      	nop
 80083c2:	370c      	adds	r7, #12
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80083da:	4618      	mov	r0, r3
 80083dc:	f7fe ff65 	bl	80072aa <USBH_LL_PortEnabled>
}
 80083e0:	bf00      	nop
 80083e2:	3708      	adds	r7, #8
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7fe ff65 	bl	80072c6 <USBH_LL_PortDisabled>
}
 80083fc:	bf00      	nop
 80083fe:	3708      	adds	r7, #8
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008412:	2b01      	cmp	r3, #1
 8008414:	d12a      	bne.n	800846c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008416:	4a18      	ldr	r2, [pc, #96]	@ (8008478 <USBH_LL_Init+0x74>)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4a15      	ldr	r2, [pc, #84]	@ (8008478 <USBH_LL_Init+0x74>)
 8008422:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008426:	4b14      	ldr	r3, [pc, #80]	@ (8008478 <USBH_LL_Init+0x74>)
 8008428:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800842c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800842e:	4b12      	ldr	r3, [pc, #72]	@ (8008478 <USBH_LL_Init+0x74>)
 8008430:	2208      	movs	r2, #8
 8008432:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008434:	4b10      	ldr	r3, [pc, #64]	@ (8008478 <USBH_LL_Init+0x74>)
 8008436:	2201      	movs	r2, #1
 8008438:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800843a:	4b0f      	ldr	r3, [pc, #60]	@ (8008478 <USBH_LL_Init+0x74>)
 800843c:	2200      	movs	r2, #0
 800843e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008440:	4b0d      	ldr	r3, [pc, #52]	@ (8008478 <USBH_LL_Init+0x74>)
 8008442:	2202      	movs	r2, #2
 8008444:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008446:	4b0c      	ldr	r3, [pc, #48]	@ (8008478 <USBH_LL_Init+0x74>)
 8008448:	2200      	movs	r2, #0
 800844a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800844c:	480a      	ldr	r0, [pc, #40]	@ (8008478 <USBH_LL_Init+0x74>)
 800844e:	f7f8 ff8a 	bl	8001366 <HAL_HCD_Init>
 8008452:	4603      	mov	r3, r0
 8008454:	2b00      	cmp	r3, #0
 8008456:	d001      	beq.n	800845c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008458:	f7f8 fa3e 	bl	80008d8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800845c:	4806      	ldr	r0, [pc, #24]	@ (8008478 <USBH_LL_Init+0x74>)
 800845e:	f7f9 fbeb 	bl	8001c38 <HAL_HCD_GetCurrentFrame>
 8008462:	4603      	mov	r3, r0
 8008464:	4619      	mov	r1, r3
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f7fe fee6 	bl	8007238 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	3708      	adds	r7, #8
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop
 8008478:	20000570 	.word	0x20000570

0800847c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008484:	2300      	movs	r3, #0
 8008486:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008488:	2300      	movs	r3, #0
 800848a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008492:	4618      	mov	r0, r3
 8008494:	f7f9 fb58 	bl	8001b48 <HAL_HCD_Start>
 8008498:	4603      	mov	r3, r0
 800849a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800849c:	7bfb      	ldrb	r3, [r7, #15]
 800849e:	4618      	mov	r0, r3
 80084a0:	f000 f95e 	bl	8008760 <USBH_Get_USB_Status>
 80084a4:	4603      	mov	r3, r0
 80084a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b084      	sub	sp, #16
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084ba:	2300      	movs	r3, #0
 80084bc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80084be:	2300      	movs	r3, #0
 80084c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80084c8:	4618      	mov	r0, r3
 80084ca:	f7f9 fb60 	bl	8001b8e <HAL_HCD_Stop>
 80084ce:	4603      	mov	r3, r0
 80084d0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80084d2:	7bfb      	ldrb	r3, [r7, #15]
 80084d4:	4618      	mov	r0, r3
 80084d6:	f000 f943 	bl	8008760 <USBH_Get_USB_Status>
 80084da:	4603      	mov	r3, r0
 80084dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084de:	7bbb      	ldrb	r3, [r7, #14]
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3710      	adds	r7, #16
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80084f0:	2301      	movs	r3, #1
 80084f2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7f9 fbaa 	bl	8001c54 <HAL_HCD_GetCurrentSpeed>
 8008500:	4603      	mov	r3, r0
 8008502:	2b02      	cmp	r3, #2
 8008504:	d00c      	beq.n	8008520 <USBH_LL_GetSpeed+0x38>
 8008506:	2b02      	cmp	r3, #2
 8008508:	d80d      	bhi.n	8008526 <USBH_LL_GetSpeed+0x3e>
 800850a:	2b00      	cmp	r3, #0
 800850c:	d002      	beq.n	8008514 <USBH_LL_GetSpeed+0x2c>
 800850e:	2b01      	cmp	r3, #1
 8008510:	d003      	beq.n	800851a <USBH_LL_GetSpeed+0x32>
 8008512:	e008      	b.n	8008526 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008514:	2300      	movs	r3, #0
 8008516:	73fb      	strb	r3, [r7, #15]
    break;
 8008518:	e008      	b.n	800852c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800851a:	2301      	movs	r3, #1
 800851c:	73fb      	strb	r3, [r7, #15]
    break;
 800851e:	e005      	b.n	800852c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008520:	2302      	movs	r3, #2
 8008522:	73fb      	strb	r3, [r7, #15]
    break;
 8008524:	e002      	b.n	800852c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008526:	2301      	movs	r3, #1
 8008528:	73fb      	strb	r3, [r7, #15]
    break;
 800852a:	bf00      	nop
  }
  return  speed;
 800852c:	7bfb      	ldrb	r3, [r7, #15]
}
 800852e:	4618      	mov	r0, r3
 8008530:	3710      	adds	r7, #16
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}

08008536 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008536:	b580      	push	{r7, lr}
 8008538:	b084      	sub	sp, #16
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800853e:	2300      	movs	r3, #0
 8008540:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008542:	2300      	movs	r3, #0
 8008544:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800854c:	4618      	mov	r0, r3
 800854e:	f7f9 fb3b 	bl	8001bc8 <HAL_HCD_ResetPort>
 8008552:	4603      	mov	r3, r0
 8008554:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008556:	7bfb      	ldrb	r3, [r7, #15]
 8008558:	4618      	mov	r0, r3
 800855a:	f000 f901 	bl	8008760 <USBH_Get_USB_Status>
 800855e:	4603      	mov	r3, r0
 8008560:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008562:	7bbb      	ldrb	r3, [r7, #14]
}
 8008564:	4618      	mov	r0, r3
 8008566:	3710      	adds	r7, #16
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	460b      	mov	r3, r1
 8008576:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800857e:	78fa      	ldrb	r2, [r7, #3]
 8008580:	4611      	mov	r1, r2
 8008582:	4618      	mov	r0, r3
 8008584:	f7f9 fb43 	bl	8001c0e <HAL_HCD_HC_GetXferCount>
 8008588:	4603      	mov	r3, r0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3708      	adds	r7, #8
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}

08008592 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008592:	b590      	push	{r4, r7, lr}
 8008594:	b089      	sub	sp, #36	@ 0x24
 8008596:	af04      	add	r7, sp, #16
 8008598:	6078      	str	r0, [r7, #4]
 800859a:	4608      	mov	r0, r1
 800859c:	4611      	mov	r1, r2
 800859e:	461a      	mov	r2, r3
 80085a0:	4603      	mov	r3, r0
 80085a2:	70fb      	strb	r3, [r7, #3]
 80085a4:	460b      	mov	r3, r1
 80085a6:	70bb      	strb	r3, [r7, #2]
 80085a8:	4613      	mov	r3, r2
 80085aa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085ac:	2300      	movs	r3, #0
 80085ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80085b0:	2300      	movs	r3, #0
 80085b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80085ba:	787c      	ldrb	r4, [r7, #1]
 80085bc:	78ba      	ldrb	r2, [r7, #2]
 80085be:	78f9      	ldrb	r1, [r7, #3]
 80085c0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80085c2:	9302      	str	r3, [sp, #8]
 80085c4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80085c8:	9301      	str	r3, [sp, #4]
 80085ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80085ce:	9300      	str	r3, [sp, #0]
 80085d0:	4623      	mov	r3, r4
 80085d2:	f7f8 ff2f 	bl	8001434 <HAL_HCD_HC_Init>
 80085d6:	4603      	mov	r3, r0
 80085d8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80085da:	7bfb      	ldrb	r3, [r7, #15]
 80085dc:	4618      	mov	r0, r3
 80085de:	f000 f8bf 	bl	8008760 <USBH_Get_USB_Status>
 80085e2:	4603      	mov	r3, r0
 80085e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3714      	adds	r7, #20
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd90      	pop	{r4, r7, pc}

080085f0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	460b      	mov	r3, r1
 80085fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085fc:	2300      	movs	r3, #0
 80085fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008600:	2300      	movs	r3, #0
 8008602:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800860a:	78fa      	ldrb	r2, [r7, #3]
 800860c:	4611      	mov	r1, r2
 800860e:	4618      	mov	r0, r3
 8008610:	f7f8 ffc8 	bl	80015a4 <HAL_HCD_HC_Halt>
 8008614:	4603      	mov	r3, r0
 8008616:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008618:	7bfb      	ldrb	r3, [r7, #15]
 800861a:	4618      	mov	r0, r3
 800861c:	f000 f8a0 	bl	8008760 <USBH_Get_USB_Status>
 8008620:	4603      	mov	r3, r0
 8008622:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008624:	7bbb      	ldrb	r3, [r7, #14]
}
 8008626:	4618      	mov	r0, r3
 8008628:	3710      	adds	r7, #16
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}

0800862e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800862e:	b590      	push	{r4, r7, lr}
 8008630:	b089      	sub	sp, #36	@ 0x24
 8008632:	af04      	add	r7, sp, #16
 8008634:	6078      	str	r0, [r7, #4]
 8008636:	4608      	mov	r0, r1
 8008638:	4611      	mov	r1, r2
 800863a:	461a      	mov	r2, r3
 800863c:	4603      	mov	r3, r0
 800863e:	70fb      	strb	r3, [r7, #3]
 8008640:	460b      	mov	r3, r1
 8008642:	70bb      	strb	r3, [r7, #2]
 8008644:	4613      	mov	r3, r2
 8008646:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008648:	2300      	movs	r3, #0
 800864a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800864c:	2300      	movs	r3, #0
 800864e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8008656:	787c      	ldrb	r4, [r7, #1]
 8008658:	78ba      	ldrb	r2, [r7, #2]
 800865a:	78f9      	ldrb	r1, [r7, #3]
 800865c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008660:	9303      	str	r3, [sp, #12]
 8008662:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008664:	9302      	str	r3, [sp, #8]
 8008666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008668:	9301      	str	r3, [sp, #4]
 800866a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800866e:	9300      	str	r3, [sp, #0]
 8008670:	4623      	mov	r3, r4
 8008672:	f7f8 ffbb 	bl	80015ec <HAL_HCD_HC_SubmitRequest>
 8008676:	4603      	mov	r3, r0
 8008678:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800867a:	7bfb      	ldrb	r3, [r7, #15]
 800867c:	4618      	mov	r0, r3
 800867e:	f000 f86f 	bl	8008760 <USBH_Get_USB_Status>
 8008682:	4603      	mov	r3, r0
 8008684:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008686:	7bbb      	ldrb	r3, [r7, #14]
}
 8008688:	4618      	mov	r0, r3
 800868a:	3714      	adds	r7, #20
 800868c:	46bd      	mov	sp, r7
 800868e:	bd90      	pop	{r4, r7, pc}

08008690 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	460b      	mov	r3, r1
 800869a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80086a2:	78fa      	ldrb	r2, [r7, #3]
 80086a4:	4611      	mov	r1, r2
 80086a6:	4618      	mov	r0, r3
 80086a8:	f7f9 fa9c 	bl	8001be4 <HAL_HCD_HC_GetURBState>
 80086ac:	4603      	mov	r3, r0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3708      	adds	r7, #8
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b082      	sub	sp, #8
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
 80086be:	460b      	mov	r3, r1
 80086c0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d103      	bne.n	80086d4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80086cc:	78fb      	ldrb	r3, [r7, #3]
 80086ce:	4618      	mov	r0, r3
 80086d0:	f000 f872 	bl	80087b8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80086d4:	20c8      	movs	r0, #200	@ 0xc8
 80086d6:	f7f8 fb5b 	bl	8000d90 <HAL_Delay>
  return USBH_OK;
 80086da:	2300      	movs	r3, #0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3708      	adds	r7, #8
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b085      	sub	sp, #20
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	460b      	mov	r3, r1
 80086ee:	70fb      	strb	r3, [r7, #3]
 80086f0:	4613      	mov	r3, r2
 80086f2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80086fa:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80086fc:	78fa      	ldrb	r2, [r7, #3]
 80086fe:	68f9      	ldr	r1, [r7, #12]
 8008700:	4613      	mov	r3, r2
 8008702:	011b      	lsls	r3, r3, #4
 8008704:	1a9b      	subs	r3, r3, r2
 8008706:	009b      	lsls	r3, r3, #2
 8008708:	440b      	add	r3, r1
 800870a:	3317      	adds	r3, #23
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d00a      	beq.n	8008728 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008712:	78fa      	ldrb	r2, [r7, #3]
 8008714:	68f9      	ldr	r1, [r7, #12]
 8008716:	4613      	mov	r3, r2
 8008718:	011b      	lsls	r3, r3, #4
 800871a:	1a9b      	subs	r3, r3, r2
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	440b      	add	r3, r1
 8008720:	333c      	adds	r3, #60	@ 0x3c
 8008722:	78ba      	ldrb	r2, [r7, #2]
 8008724:	701a      	strb	r2, [r3, #0]
 8008726:	e009      	b.n	800873c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008728:	78fa      	ldrb	r2, [r7, #3]
 800872a:	68f9      	ldr	r1, [r7, #12]
 800872c:	4613      	mov	r3, r2
 800872e:	011b      	lsls	r3, r3, #4
 8008730:	1a9b      	subs	r3, r3, r2
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	440b      	add	r3, r1
 8008736:	333d      	adds	r3, #61	@ 0x3d
 8008738:	78ba      	ldrb	r2, [r7, #2]
 800873a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800873c:	2300      	movs	r3, #0
}
 800873e:	4618      	mov	r0, r3
 8008740:	3714      	adds	r7, #20
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr

0800874a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b082      	sub	sp, #8
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f7f8 fb1c 	bl	8000d90 <HAL_Delay>
}
 8008758:	bf00      	nop
 800875a:	3708      	adds	r7, #8
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008760:	b480      	push	{r7}
 8008762:	b085      	sub	sp, #20
 8008764:	af00      	add	r7, sp, #0
 8008766:	4603      	mov	r3, r0
 8008768:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800876a:	2300      	movs	r3, #0
 800876c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800876e:	79fb      	ldrb	r3, [r7, #7]
 8008770:	2b03      	cmp	r3, #3
 8008772:	d817      	bhi.n	80087a4 <USBH_Get_USB_Status+0x44>
 8008774:	a201      	add	r2, pc, #4	@ (adr r2, 800877c <USBH_Get_USB_Status+0x1c>)
 8008776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800877a:	bf00      	nop
 800877c:	0800878d 	.word	0x0800878d
 8008780:	08008793 	.word	0x08008793
 8008784:	08008799 	.word	0x08008799
 8008788:	0800879f 	.word	0x0800879f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800878c:	2300      	movs	r3, #0
 800878e:	73fb      	strb	r3, [r7, #15]
    break;
 8008790:	e00b      	b.n	80087aa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008792:	2302      	movs	r3, #2
 8008794:	73fb      	strb	r3, [r7, #15]
    break;
 8008796:	e008      	b.n	80087aa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008798:	2301      	movs	r3, #1
 800879a:	73fb      	strb	r3, [r7, #15]
    break;
 800879c:	e005      	b.n	80087aa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800879e:	2302      	movs	r3, #2
 80087a0:	73fb      	strb	r3, [r7, #15]
    break;
 80087a2:	e002      	b.n	80087aa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80087a4:	2302      	movs	r3, #2
 80087a6:	73fb      	strb	r3, [r7, #15]
    break;
 80087a8:	bf00      	nop
  }
  return usb_status;
 80087aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3714      	adds	r7, #20
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	4603      	mov	r3, r0
 80087c0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80087c2:	79fb      	ldrb	r3, [r7, #7]
 80087c4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80087c6:	79fb      	ldrb	r3, [r7, #7]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d102      	bne.n	80087d2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80087cc:	2300      	movs	r3, #0
 80087ce:	73fb      	strb	r3, [r7, #15]
 80087d0:	e001      	b.n	80087d6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80087d2:	2301      	movs	r3, #1
 80087d4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80087d6:	7bfb      	ldrb	r3, [r7, #15]
 80087d8:	461a      	mov	r2, r3
 80087da:	2101      	movs	r1, #1
 80087dc:	4803      	ldr	r0, [pc, #12]	@ (80087ec <MX_DriverVbusFS+0x34>)
 80087de:	f7f8 fda9 	bl	8001334 <HAL_GPIO_WritePin>
}
 80087e2:	bf00      	nop
 80087e4:	3710      	adds	r7, #16
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	40020800 	.word	0x40020800

080087f0 <malloc>:
 80087f0:	4b02      	ldr	r3, [pc, #8]	@ (80087fc <malloc+0xc>)
 80087f2:	4601      	mov	r1, r0
 80087f4:	6818      	ldr	r0, [r3, #0]
 80087f6:	f000 b82d 	b.w	8008854 <_malloc_r>
 80087fa:	bf00      	nop
 80087fc:	2000002c 	.word	0x2000002c

08008800 <free>:
 8008800:	4b02      	ldr	r3, [pc, #8]	@ (800880c <free+0xc>)
 8008802:	4601      	mov	r1, r0
 8008804:	6818      	ldr	r0, [r3, #0]
 8008806:	f000 b8f5 	b.w	80089f4 <_free_r>
 800880a:	bf00      	nop
 800880c:	2000002c 	.word	0x2000002c

08008810 <sbrk_aligned>:
 8008810:	b570      	push	{r4, r5, r6, lr}
 8008812:	4e0f      	ldr	r6, [pc, #60]	@ (8008850 <sbrk_aligned+0x40>)
 8008814:	460c      	mov	r4, r1
 8008816:	6831      	ldr	r1, [r6, #0]
 8008818:	4605      	mov	r5, r0
 800881a:	b911      	cbnz	r1, 8008822 <sbrk_aligned+0x12>
 800881c:	f000 f8ae 	bl	800897c <_sbrk_r>
 8008820:	6030      	str	r0, [r6, #0]
 8008822:	4621      	mov	r1, r4
 8008824:	4628      	mov	r0, r5
 8008826:	f000 f8a9 	bl	800897c <_sbrk_r>
 800882a:	1c43      	adds	r3, r0, #1
 800882c:	d103      	bne.n	8008836 <sbrk_aligned+0x26>
 800882e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008832:	4620      	mov	r0, r4
 8008834:	bd70      	pop	{r4, r5, r6, pc}
 8008836:	1cc4      	adds	r4, r0, #3
 8008838:	f024 0403 	bic.w	r4, r4, #3
 800883c:	42a0      	cmp	r0, r4
 800883e:	d0f8      	beq.n	8008832 <sbrk_aligned+0x22>
 8008840:	1a21      	subs	r1, r4, r0
 8008842:	4628      	mov	r0, r5
 8008844:	f000 f89a 	bl	800897c <_sbrk_r>
 8008848:	3001      	adds	r0, #1
 800884a:	d1f2      	bne.n	8008832 <sbrk_aligned+0x22>
 800884c:	e7ef      	b.n	800882e <sbrk_aligned+0x1e>
 800884e:	bf00      	nop
 8008850:	20000950 	.word	0x20000950

08008854 <_malloc_r>:
 8008854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008858:	1ccd      	adds	r5, r1, #3
 800885a:	f025 0503 	bic.w	r5, r5, #3
 800885e:	3508      	adds	r5, #8
 8008860:	2d0c      	cmp	r5, #12
 8008862:	bf38      	it	cc
 8008864:	250c      	movcc	r5, #12
 8008866:	2d00      	cmp	r5, #0
 8008868:	4606      	mov	r6, r0
 800886a:	db01      	blt.n	8008870 <_malloc_r+0x1c>
 800886c:	42a9      	cmp	r1, r5
 800886e:	d904      	bls.n	800887a <_malloc_r+0x26>
 8008870:	230c      	movs	r3, #12
 8008872:	6033      	str	r3, [r6, #0]
 8008874:	2000      	movs	r0, #0
 8008876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800887a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008950 <_malloc_r+0xfc>
 800887e:	f000 f869 	bl	8008954 <__malloc_lock>
 8008882:	f8d8 3000 	ldr.w	r3, [r8]
 8008886:	461c      	mov	r4, r3
 8008888:	bb44      	cbnz	r4, 80088dc <_malloc_r+0x88>
 800888a:	4629      	mov	r1, r5
 800888c:	4630      	mov	r0, r6
 800888e:	f7ff ffbf 	bl	8008810 <sbrk_aligned>
 8008892:	1c43      	adds	r3, r0, #1
 8008894:	4604      	mov	r4, r0
 8008896:	d158      	bne.n	800894a <_malloc_r+0xf6>
 8008898:	f8d8 4000 	ldr.w	r4, [r8]
 800889c:	4627      	mov	r7, r4
 800889e:	2f00      	cmp	r7, #0
 80088a0:	d143      	bne.n	800892a <_malloc_r+0xd6>
 80088a2:	2c00      	cmp	r4, #0
 80088a4:	d04b      	beq.n	800893e <_malloc_r+0xea>
 80088a6:	6823      	ldr	r3, [r4, #0]
 80088a8:	4639      	mov	r1, r7
 80088aa:	4630      	mov	r0, r6
 80088ac:	eb04 0903 	add.w	r9, r4, r3
 80088b0:	f000 f864 	bl	800897c <_sbrk_r>
 80088b4:	4581      	cmp	r9, r0
 80088b6:	d142      	bne.n	800893e <_malloc_r+0xea>
 80088b8:	6821      	ldr	r1, [r4, #0]
 80088ba:	1a6d      	subs	r5, r5, r1
 80088bc:	4629      	mov	r1, r5
 80088be:	4630      	mov	r0, r6
 80088c0:	f7ff ffa6 	bl	8008810 <sbrk_aligned>
 80088c4:	3001      	adds	r0, #1
 80088c6:	d03a      	beq.n	800893e <_malloc_r+0xea>
 80088c8:	6823      	ldr	r3, [r4, #0]
 80088ca:	442b      	add	r3, r5
 80088cc:	6023      	str	r3, [r4, #0]
 80088ce:	f8d8 3000 	ldr.w	r3, [r8]
 80088d2:	685a      	ldr	r2, [r3, #4]
 80088d4:	bb62      	cbnz	r2, 8008930 <_malloc_r+0xdc>
 80088d6:	f8c8 7000 	str.w	r7, [r8]
 80088da:	e00f      	b.n	80088fc <_malloc_r+0xa8>
 80088dc:	6822      	ldr	r2, [r4, #0]
 80088de:	1b52      	subs	r2, r2, r5
 80088e0:	d420      	bmi.n	8008924 <_malloc_r+0xd0>
 80088e2:	2a0b      	cmp	r2, #11
 80088e4:	d917      	bls.n	8008916 <_malloc_r+0xc2>
 80088e6:	1961      	adds	r1, r4, r5
 80088e8:	42a3      	cmp	r3, r4
 80088ea:	6025      	str	r5, [r4, #0]
 80088ec:	bf18      	it	ne
 80088ee:	6059      	strne	r1, [r3, #4]
 80088f0:	6863      	ldr	r3, [r4, #4]
 80088f2:	bf08      	it	eq
 80088f4:	f8c8 1000 	streq.w	r1, [r8]
 80088f8:	5162      	str	r2, [r4, r5]
 80088fa:	604b      	str	r3, [r1, #4]
 80088fc:	4630      	mov	r0, r6
 80088fe:	f000 f82f 	bl	8008960 <__malloc_unlock>
 8008902:	f104 000b 	add.w	r0, r4, #11
 8008906:	1d23      	adds	r3, r4, #4
 8008908:	f020 0007 	bic.w	r0, r0, #7
 800890c:	1ac2      	subs	r2, r0, r3
 800890e:	bf1c      	itt	ne
 8008910:	1a1b      	subne	r3, r3, r0
 8008912:	50a3      	strne	r3, [r4, r2]
 8008914:	e7af      	b.n	8008876 <_malloc_r+0x22>
 8008916:	6862      	ldr	r2, [r4, #4]
 8008918:	42a3      	cmp	r3, r4
 800891a:	bf0c      	ite	eq
 800891c:	f8c8 2000 	streq.w	r2, [r8]
 8008920:	605a      	strne	r2, [r3, #4]
 8008922:	e7eb      	b.n	80088fc <_malloc_r+0xa8>
 8008924:	4623      	mov	r3, r4
 8008926:	6864      	ldr	r4, [r4, #4]
 8008928:	e7ae      	b.n	8008888 <_malloc_r+0x34>
 800892a:	463c      	mov	r4, r7
 800892c:	687f      	ldr	r7, [r7, #4]
 800892e:	e7b6      	b.n	800889e <_malloc_r+0x4a>
 8008930:	461a      	mov	r2, r3
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	42a3      	cmp	r3, r4
 8008936:	d1fb      	bne.n	8008930 <_malloc_r+0xdc>
 8008938:	2300      	movs	r3, #0
 800893a:	6053      	str	r3, [r2, #4]
 800893c:	e7de      	b.n	80088fc <_malloc_r+0xa8>
 800893e:	230c      	movs	r3, #12
 8008940:	6033      	str	r3, [r6, #0]
 8008942:	4630      	mov	r0, r6
 8008944:	f000 f80c 	bl	8008960 <__malloc_unlock>
 8008948:	e794      	b.n	8008874 <_malloc_r+0x20>
 800894a:	6005      	str	r5, [r0, #0]
 800894c:	e7d6      	b.n	80088fc <_malloc_r+0xa8>
 800894e:	bf00      	nop
 8008950:	20000954 	.word	0x20000954

08008954 <__malloc_lock>:
 8008954:	4801      	ldr	r0, [pc, #4]	@ (800895c <__malloc_lock+0x8>)
 8008956:	f000 b84b 	b.w	80089f0 <__retarget_lock_acquire_recursive>
 800895a:	bf00      	nop
 800895c:	20000a90 	.word	0x20000a90

08008960 <__malloc_unlock>:
 8008960:	4801      	ldr	r0, [pc, #4]	@ (8008968 <__malloc_unlock+0x8>)
 8008962:	f000 b846 	b.w	80089f2 <__retarget_lock_release_recursive>
 8008966:	bf00      	nop
 8008968:	20000a90 	.word	0x20000a90

0800896c <memset>:
 800896c:	4402      	add	r2, r0
 800896e:	4603      	mov	r3, r0
 8008970:	4293      	cmp	r3, r2
 8008972:	d100      	bne.n	8008976 <memset+0xa>
 8008974:	4770      	bx	lr
 8008976:	f803 1b01 	strb.w	r1, [r3], #1
 800897a:	e7f9      	b.n	8008970 <memset+0x4>

0800897c <_sbrk_r>:
 800897c:	b538      	push	{r3, r4, r5, lr}
 800897e:	4d06      	ldr	r5, [pc, #24]	@ (8008998 <_sbrk_r+0x1c>)
 8008980:	2300      	movs	r3, #0
 8008982:	4604      	mov	r4, r0
 8008984:	4608      	mov	r0, r1
 8008986:	602b      	str	r3, [r5, #0]
 8008988:	f7f8 f91e 	bl	8000bc8 <_sbrk>
 800898c:	1c43      	adds	r3, r0, #1
 800898e:	d102      	bne.n	8008996 <_sbrk_r+0x1a>
 8008990:	682b      	ldr	r3, [r5, #0]
 8008992:	b103      	cbz	r3, 8008996 <_sbrk_r+0x1a>
 8008994:	6023      	str	r3, [r4, #0]
 8008996:	bd38      	pop	{r3, r4, r5, pc}
 8008998:	20000a94 	.word	0x20000a94

0800899c <__errno>:
 800899c:	4b01      	ldr	r3, [pc, #4]	@ (80089a4 <__errno+0x8>)
 800899e:	6818      	ldr	r0, [r3, #0]
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop
 80089a4:	2000002c 	.word	0x2000002c

080089a8 <__libc_init_array>:
 80089a8:	b570      	push	{r4, r5, r6, lr}
 80089aa:	4d0d      	ldr	r5, [pc, #52]	@ (80089e0 <__libc_init_array+0x38>)
 80089ac:	4c0d      	ldr	r4, [pc, #52]	@ (80089e4 <__libc_init_array+0x3c>)
 80089ae:	1b64      	subs	r4, r4, r5
 80089b0:	10a4      	asrs	r4, r4, #2
 80089b2:	2600      	movs	r6, #0
 80089b4:	42a6      	cmp	r6, r4
 80089b6:	d109      	bne.n	80089cc <__libc_init_array+0x24>
 80089b8:	4d0b      	ldr	r5, [pc, #44]	@ (80089e8 <__libc_init_array+0x40>)
 80089ba:	4c0c      	ldr	r4, [pc, #48]	@ (80089ec <__libc_init_array+0x44>)
 80089bc:	f000 f864 	bl	8008a88 <_init>
 80089c0:	1b64      	subs	r4, r4, r5
 80089c2:	10a4      	asrs	r4, r4, #2
 80089c4:	2600      	movs	r6, #0
 80089c6:	42a6      	cmp	r6, r4
 80089c8:	d105      	bne.n	80089d6 <__libc_init_array+0x2e>
 80089ca:	bd70      	pop	{r4, r5, r6, pc}
 80089cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80089d0:	4798      	blx	r3
 80089d2:	3601      	adds	r6, #1
 80089d4:	e7ee      	b.n	80089b4 <__libc_init_array+0xc>
 80089d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80089da:	4798      	blx	r3
 80089dc:	3601      	adds	r6, #1
 80089de:	e7f2      	b.n	80089c6 <__libc_init_array+0x1e>
 80089e0:	08008ac4 	.word	0x08008ac4
 80089e4:	08008ac4 	.word	0x08008ac4
 80089e8:	08008ac4 	.word	0x08008ac4
 80089ec:	08008ac8 	.word	0x08008ac8

080089f0 <__retarget_lock_acquire_recursive>:
 80089f0:	4770      	bx	lr

080089f2 <__retarget_lock_release_recursive>:
 80089f2:	4770      	bx	lr

080089f4 <_free_r>:
 80089f4:	b538      	push	{r3, r4, r5, lr}
 80089f6:	4605      	mov	r5, r0
 80089f8:	2900      	cmp	r1, #0
 80089fa:	d041      	beq.n	8008a80 <_free_r+0x8c>
 80089fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a00:	1f0c      	subs	r4, r1, #4
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	bfb8      	it	lt
 8008a06:	18e4      	addlt	r4, r4, r3
 8008a08:	f7ff ffa4 	bl	8008954 <__malloc_lock>
 8008a0c:	4a1d      	ldr	r2, [pc, #116]	@ (8008a84 <_free_r+0x90>)
 8008a0e:	6813      	ldr	r3, [r2, #0]
 8008a10:	b933      	cbnz	r3, 8008a20 <_free_r+0x2c>
 8008a12:	6063      	str	r3, [r4, #4]
 8008a14:	6014      	str	r4, [r2, #0]
 8008a16:	4628      	mov	r0, r5
 8008a18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a1c:	f7ff bfa0 	b.w	8008960 <__malloc_unlock>
 8008a20:	42a3      	cmp	r3, r4
 8008a22:	d908      	bls.n	8008a36 <_free_r+0x42>
 8008a24:	6820      	ldr	r0, [r4, #0]
 8008a26:	1821      	adds	r1, r4, r0
 8008a28:	428b      	cmp	r3, r1
 8008a2a:	bf01      	itttt	eq
 8008a2c:	6819      	ldreq	r1, [r3, #0]
 8008a2e:	685b      	ldreq	r3, [r3, #4]
 8008a30:	1809      	addeq	r1, r1, r0
 8008a32:	6021      	streq	r1, [r4, #0]
 8008a34:	e7ed      	b.n	8008a12 <_free_r+0x1e>
 8008a36:	461a      	mov	r2, r3
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	b10b      	cbz	r3, 8008a40 <_free_r+0x4c>
 8008a3c:	42a3      	cmp	r3, r4
 8008a3e:	d9fa      	bls.n	8008a36 <_free_r+0x42>
 8008a40:	6811      	ldr	r1, [r2, #0]
 8008a42:	1850      	adds	r0, r2, r1
 8008a44:	42a0      	cmp	r0, r4
 8008a46:	d10b      	bne.n	8008a60 <_free_r+0x6c>
 8008a48:	6820      	ldr	r0, [r4, #0]
 8008a4a:	4401      	add	r1, r0
 8008a4c:	1850      	adds	r0, r2, r1
 8008a4e:	4283      	cmp	r3, r0
 8008a50:	6011      	str	r1, [r2, #0]
 8008a52:	d1e0      	bne.n	8008a16 <_free_r+0x22>
 8008a54:	6818      	ldr	r0, [r3, #0]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	6053      	str	r3, [r2, #4]
 8008a5a:	4408      	add	r0, r1
 8008a5c:	6010      	str	r0, [r2, #0]
 8008a5e:	e7da      	b.n	8008a16 <_free_r+0x22>
 8008a60:	d902      	bls.n	8008a68 <_free_r+0x74>
 8008a62:	230c      	movs	r3, #12
 8008a64:	602b      	str	r3, [r5, #0]
 8008a66:	e7d6      	b.n	8008a16 <_free_r+0x22>
 8008a68:	6820      	ldr	r0, [r4, #0]
 8008a6a:	1821      	adds	r1, r4, r0
 8008a6c:	428b      	cmp	r3, r1
 8008a6e:	bf04      	itt	eq
 8008a70:	6819      	ldreq	r1, [r3, #0]
 8008a72:	685b      	ldreq	r3, [r3, #4]
 8008a74:	6063      	str	r3, [r4, #4]
 8008a76:	bf04      	itt	eq
 8008a78:	1809      	addeq	r1, r1, r0
 8008a7a:	6021      	streq	r1, [r4, #0]
 8008a7c:	6054      	str	r4, [r2, #4]
 8008a7e:	e7ca      	b.n	8008a16 <_free_r+0x22>
 8008a80:	bd38      	pop	{r3, r4, r5, pc}
 8008a82:	bf00      	nop
 8008a84:	20000954 	.word	0x20000954

08008a88 <_init>:
 8008a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a8a:	bf00      	nop
 8008a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a8e:	bc08      	pop	{r3}
 8008a90:	469e      	mov	lr, r3
 8008a92:	4770      	bx	lr

08008a94 <_fini>:
 8008a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a96:	bf00      	nop
 8008a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a9a:	bc08      	pop	{r3}
 8008a9c:	469e      	mov	lr, r3
 8008a9e:	4770      	bx	lr
